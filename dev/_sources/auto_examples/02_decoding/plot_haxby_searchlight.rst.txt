
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_haxby_searchlight.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_haxby_searchlight.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_haxby_searchlight.py:


Searchlight analysis of face vs house recognition
=================================================

Searchlight analysis requires fitting a classifier a large amount of
times. As a result, it is an intrinsically slow method. In order to speed
up computing, in this example, Searchlight is run only on one slice on
the :term:`fMRI` (see the generated figures).

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 15-17

Load Haxby dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 17-34

.. code-block:: default

    import pandas as pd

    from nilearn import datasets
    from nilearn.image import get_data, load_img, new_img_like

    # We fetch 2nd subject from haxby datasets (which is default)
    haxby_dataset = datasets.fetch_haxby()

    # print basic information on the dataset
    print(f"Anatomical nifti image (3D) is located at: {haxby_dataset.mask}")
    print(f"Functional nifti image (4D) is located at: {haxby_dataset.func[0]}")

    fmri_filename = haxby_dataset.func[0]
    labels = pd.read_csv(haxby_dataset.session_target[0], sep=" ")
    y = labels["labels"]
    session = labels["chunks"]





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Anatomical nifti image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/haxby2001/mask.nii.gz
    Functional nifti image (4D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/haxby2001/subj2/bold.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 35-37

Restrict to faces and houses
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 37-44

.. code-block:: default

    from nilearn.image import index_img

    condition_mask = y.isin(["face", "house"])

    fmri_img = index_img(fmri_filename, condition_mask)
    y, session = y[condition_mask], session[condition_mask]








.. GENERATED FROM PYTHON SOURCE LINES 45-51

Prepare masks
-------------
- mask_img is the original mask
- process_mask_img is a subset of mask_img, it contains the voxels that
  should be processed (we only keep the slice z = 26 and the back of the
  brain to speed up computation)

.. GENERATED FROM PYTHON SOURCE LINES 51-63

.. code-block:: default

    import numpy as np

    mask_img = load_img(haxby_dataset.mask)

    # .astype() makes a copy.
    process_mask = get_data(mask_img).astype(int)
    picked_slice = 29
    process_mask[..., (picked_slice + 1) :] = 0
    process_mask[..., :picked_slice] = 0
    process_mask[:, 30:] = 0
    process_mask_img = new_img_like(mask_img, process_mask)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/nilearn/nilearn/examples/02_decoding/plot_haxby_searchlight.py:61: UserWarning:

    Data array used to create a new image contains 64-bit ints. This is likely due to creating the array with numpy and passing `int` as the `dtype`. Many tools such as FSL and SPM cannot deal with int64 in Nifti images, so for compatibility the data has been converted to int32.





.. GENERATED FROM PYTHON SOURCE LINES 64-66

Searchlight computation
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 66-93

.. code-block:: default


    # Make processing parallel
    # /!\ As each thread will print its progress, n_jobs > 1 could mess up the
    #     information output.
    n_jobs = 1

    # Define the cross-validation scheme used for validation.
    # Here we use a KFold cross-validation on the session, which corresponds to
    # splitting the samples in 4 folds and make 4 runs using each fold as a test
    # set once and the others as learning sets
    from sklearn.model_selection import KFold

    cv = KFold(n_splits=4)

    import nilearn.decoding

    # The radius is the one of the Searchlight sphere that will scan the volume
    searchlight = nilearn.decoding.SearchLight(
        mask_img,
        process_mask_img=process_mask_img,
        radius=5.6,
        n_jobs=n_jobs,
        verbose=1,
        cv=cv,
    )
    searchlight.fit(fmri_img, y)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/nilearn/image/resampling.py:494: UserWarning:

    The provided image has no sform in its header. Please check the provided file. Results may not be as expected.

    Job #1, processed 0/739 voxels (0.00%, 392.3320770263672 seconds remaining)    Job #1, processed 10/739 voxels (1.35%, 33.55611314596953 seconds remaining)    Job #1, processed 20/739 voxels (2.71%, 34.11822547507902 seconds remaining)    Job #1, processed 30/739 voxels (4.06%, 35.367664145718656 seconds remaining)    Job #1, processed 40/739 voxels (5.41%, 35.2532739938958 seconds remaining)    Job #1, processed 50/739 voxels (6.77%, 35.19336012723351 seconds remaining)    Job #1, processed 60/739 voxels (8.12%, 35.02782123899225 seconds remaining)    Job #1, processed 70/739 voxels (9.47%, 34.86099320127695 seconds remaining)    Job #1, processed 80/739 voxels (10.83%, 34.69252740885523 seconds remaining)    Job #1, processed 90/739 voxels (12.18%, 34.372546644242135 seconds remaining)    Job #1, processed 100/739 voxels (13.53%, 34.07774389186614 seconds remaining)    Job #1, processed 110/739 voxels (14.88%, 33.66195977118708 seconds remaining)    Job #1, processed 120/739 voxels (16.24%, 33.31048121593269 seconds remaining)    Job #1, processed 130/739 voxels (17.59%, 32.893909268653005 seconds remaining)    Job #1, processed 140/739 voxels (18.94%, 32.495285446062255 seconds remaining)    Job #1, processed 150/739 voxels (20.30%, 31.97982630471291 seconds remaining)    Job #1, processed 160/739 voxels (21.65%, 31.525432831695944 seconds remaining)    Job #1, processed 170/739 voxels (23.00%, 31.04949250428573 seconds remaining)    Job #1, processed 180/739 voxels (24.36%, 30.570142052248002 seconds remaining)    Job #1, processed 190/739 voxels (25.71%, 30.040997467352597 seconds remaining)    Job #1, processed 200/739 voxels (27.06%, 29.551778844965884 seconds remaining)    Job #1, processed 210/739 voxels (28.42%, 28.986892450199754 seconds remaining)    Job #1, processed 220/739 voxels (29.77%, 28.48917855646212 seconds remaining)    Job #1, processed 230/739 voxels (31.12%, 27.96932401877749 seconds remaining)    Job #1, processed 240/739 voxels (32.48%, 27.44924463074783 seconds remaining)    Job #1, processed 250/739 voxels (33.83%, 26.905986920214957 seconds remaining)    Job #1, processed 260/739 voxels (35.18%, 26.39082447448327 seconds remaining)    Job #1, processed 270/739 voxels (36.54%, 25.86629340709985 seconds remaining)    Job #1, processed 280/739 voxels (37.89%, 25.335906088776937 seconds remaining)    Job #1, processed 290/739 voxels (39.24%, 24.821421789223752 seconds remaining)    Job #1, processed 300/739 voxels (40.60%, 24.267764409774628 seconds remaining)    Job #1, processed 310/739 voxels (41.95%, 23.74181866418477 seconds remaining)    Job #1, processed 320/739 voxels (43.30%, 23.198382418370414 seconds remaining)    Job #1, processed 330/739 voxels (44.65%, 22.670212984085087 seconds remaining)    Job #1, processed 340/739 voxels (46.01%, 22.116816582303546 seconds remaining)    Job #1, processed 350/739 voxels (47.36%, 21.584701688708485 seconds remaining)    Job #1, processed 360/739 voxels (48.71%, 21.04992049520105 seconds remaining)    Job #1, processed 370/739 voxels (50.07%, 20.49655864137315 seconds remaining)    Job #1, processed 380/739 voxels (51.42%, 19.957750229833653 seconds remaining)    Job #1, processed 390/739 voxels (52.77%, 19.51410530877199 seconds remaining)    Job #1, processed 400/739 voxels (54.13%, 18.96051558804296 seconds remaining)    Job #1, processed 410/739 voxels (55.48%, 18.399971136706466 seconds remaining)    Job #1, processed 420/739 voxels (56.83%, 17.850109218607145 seconds remaining)    Job #1, processed 430/739 voxels (58.19%, 17.281616119364116 seconds remaining)    Job #1, processed 440/739 voxels (59.54%, 16.7353488669365 seconds remaining)    Job #1, processed 450/739 voxels (60.89%, 16.18385821622979 seconds remaining)    Job #1, processed 460/739 voxels (62.25%, 15.617882603143592 seconds remaining)    Job #1, processed 470/739 voxels (63.60%, 15.065973062935115 seconds remaining)    Job #1, processed 480/739 voxels (64.95%, 14.504153755832581 seconds remaining)    Job #1, processed 490/739 voxels (66.31%, 13.945140257659782 seconds remaining)    Job #1, processed 500/739 voxels (67.66%, 13.38095552971333 seconds remaining)    Job #1, processed 510/739 voxels (69.01%, 12.824957739216849 seconds remaining)    Job #1, processed 520/739 voxels (70.37%, 12.255610272137975 seconds remaining)    Job #1, processed 530/739 voxels (71.72%, 11.699735588290741 seconds remaining)    Job #1, processed 540/739 voxels (73.07%, 11.140063354054444 seconds remaining)    Job #1, processed 550/739 voxels (74.42%, 10.583271822792264 seconds remaining)    Job #1, processed 560/739 voxels (75.78%, 10.022404481817846 seconds remaining)    Job #1, processed 570/739 voxels (77.13%, 9.46044844837948 seconds remaining)    Job #1, processed 580/739 voxels (78.48%, 8.901956766509619 seconds remaining)    Job #1, processed 590/739 voxels (79.84%, 8.332298400167948 seconds remaining)    Job #1, processed 600/739 voxels (81.19%, 7.77403212424672 seconds remaining)    Job #1, processed 610/739 voxels (82.54%, 7.210715226581719 seconds remaining)    Job #1, processed 620/739 voxels (83.90%, 6.647628400266096 seconds remaining)    Job #1, processed 630/739 voxels (85.25%, 6.085444621676224 seconds remaining)    Job #1, processed 640/739 voxels (86.60%, 5.528563449344241 seconds remaining)    Job #1, processed 650/739 voxels (87.96%, 4.9641398104172865 seconds remaining)    Job #1, processed 660/739 voxels (89.31%, 4.4063954770585045 seconds remaining)    Job #1, processed 670/739 voxels (90.66%, 3.8492176956144797 seconds remaining)    Job #1, processed 680/739 voxels (92.02%, 3.286757622612895 seconds remaining)    Job #1, processed 690/739 voxels (93.37%, 2.730250094398332 seconds remaining)    Job #1, processed 700/739 voxels (94.72%, 2.1718753342692922 seconds remaining)    Job #1, processed 710/739 voxels (96.08%, 1.610866804305561 seconds remaining)    Job #1, processed 720/739 voxels (97.43%, 1.0547847499669236 seconds remaining)    Job #1, processed 730/739 voxels (98.78%, 0.49972302823395887 seconds remaining)

.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-1" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>SearchLight(cv=KFold(n_splits=4, random_state=None, shuffle=False),
                mask_img=&lt;nibabel.nifti1.Nifti1Image object at 0x7fe96d2d09d0&gt;,
                process_mask_img=&lt;nibabel.nifti1.Nifti1Image object at 0x7fe966d546d0&gt;,
                radius=5.6, verbose=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-1" type="checkbox" checked><label for="sk-estimator-id-1" class="sk-toggleable__label sk-toggleable__label-arrow">SearchLight</label><div class="sk-toggleable__content"><pre>SearchLight(cv=KFold(n_splits=4, random_state=None, shuffle=False),
                mask_img=&lt;nibabel.nifti1.Nifti1Image object at 0x7fe96d2d09d0&gt;,
                process_mask_img=&lt;nibabel.nifti1.Nifti1Image object at 0x7fe966d546d0&gt;,
                radius=5.6, verbose=1)</pre></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 94-96

F-scores computation
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 96-115

.. code-block:: default

    from nilearn.maskers import NiftiMasker

    # For decoding, standardizing is often very important
    nifti_masker = NiftiMasker(
        mask_img=mask_img,
        runs=session,
        standardize="zscore_sample",
        memory="nilearn_cache",
        memory_level=1,
    )
    fmri_masked = nifti_masker.fit_transform(fmri_img)

    from sklearn.feature_selection import f_classif

    _, p_values = f_classif(fmri_masked, y)
    p_values = -np.log10(p_values)
    p_values[p_values > 10] = 10
    p_unmasked = get_data(nifti_masker.inverse_transform(p_values))








.. GENERATED FROM PYTHON SOURCE LINES 116-119

Visualization
-------------
Use the fmri mean image as a surrogate of anatomical data

.. GENERATED FROM PYTHON SOURCE LINES 119-155

.. code-block:: default

    from nilearn import image

    mean_fmri = image.mean_img(fmri_img)

    from nilearn.plotting import plot_img, plot_stat_map, show

    searchlight_img = new_img_like(mean_fmri, searchlight.scores_)

    # Because scores are not a zero-center test statistics, we cannot use
    # plot_stat_map
    plot_img(
        searchlight_img,
        bg_img=mean_fmri,
        title="Searchlight",
        display_mode="z",
        cut_coords=[-9],
        vmin=0.42,
        cmap="hot",
        threshold=0.2,
        black_bg=True,
    )

    # F_score results
    p_ma = np.ma.array(p_unmasked, mask=np.logical_not(process_mask))
    f_score_img = new_img_like(mean_fmri, p_ma)
    plot_stat_map(
        f_score_img,
        mean_fmri,
        title="F-scores",
        display_mode="z",
        cut_coords=[-9],
        colorbar=False,
    )

    show()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_haxby_searchlight_001.png
         :alt: plot haxby searchlight
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_haxby_searchlight_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_haxby_searchlight_002.png
         :alt: plot haxby searchlight
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_haxby_searchlight_002.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  52.746 seconds)

**Estimated memory usage:**  916 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_haxby_searchlight.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_haxby_searchlight.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_haxby_searchlight.py <plot_haxby_searchlight.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_haxby_searchlight.ipynb <plot_haxby_searchlight.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
