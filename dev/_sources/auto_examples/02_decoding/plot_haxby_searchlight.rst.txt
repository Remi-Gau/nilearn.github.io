
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_haxby_searchlight.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_haxby_searchlight.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_haxby_searchlight.py:


Searchlight analysis of face vs house recognition
=================================================

Searchlight analysis requires fitting a classifier a large amount of
times. As a result, it is an intrinsically slow method. In order to speed
up computing, in this example, Searchlight is run only on one slice on
the :term:`fMRI` (see the generated figures).

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 15-17

Load Haxby dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 17-33

.. code-block:: default

    import pandas as pd
    from nilearn import datasets
    from nilearn.image import get_data, load_img, new_img_like

    # We fetch 2nd subject from haxby datasets (which is default)
    haxby_dataset = datasets.fetch_haxby()

    # print basic information on the dataset
    print(f"Anatomical nifti image (3D) is located at: {haxby_dataset.mask}")
    print(f"Functional nifti image (4D) is located at: {haxby_dataset.func[0]}")

    fmri_filename = haxby_dataset.func[0]
    labels = pd.read_csv(haxby_dataset.session_target[0], sep=" ")
    y = labels["labels"]
    session = labels["chunks"]





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Anatomical nifti image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/haxby2001/mask.nii.gz
    Functional nifti image (4D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/haxby2001/subj2/bold.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 34-36

Restrict to faces and houses
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 36-43

.. code-block:: default

    from nilearn.image import index_img

    condition_mask = y.isin(["face", "house"])

    fmri_img = index_img(fmri_filename, condition_mask)
    y, session = y[condition_mask], session[condition_mask]








.. GENERATED FROM PYTHON SOURCE LINES 44-50

Prepare masks
-------------
- mask_img is the original mask
- process_mask_img is a subset of mask_img, it contains the voxels that
  should be processed (we only keep the slice z = 26 and the back of the
  brain to speed up computation)

.. GENERATED FROM PYTHON SOURCE LINES 50-62

.. code-block:: default

    import numpy as np

    mask_img = load_img(haxby_dataset.mask)

    # .astype() makes a copy.
    process_mask = get_data(mask_img).astype(int)
    picked_slice = 29
    process_mask[..., (picked_slice + 1) :] = 0
    process_mask[..., :picked_slice] = 0
    process_mask[:, 30:] = 0
    process_mask_img = new_img_like(mask_img, process_mask)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/nilearn/nilearn/examples/02_decoding/plot_haxby_searchlight.py:60: UserWarning:

    Data array used to create a new image contains 64-bit ints. This is likely due to creating the array with numpy and passing `int` as the `dtype`. Many tools such as FSL and SPM cannot deal with int64 in Nifti images, so for compatibility the data has been converted to int32.





.. GENERATED FROM PYTHON SOURCE LINES 63-65

Searchlight computation
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 65-92

.. code-block:: default


    # Make processing parallel
    # /!\ As each thread will print its progress, n_jobs > 1 could mess up the
    #     information output.
    n_jobs = 1

    # Define the cross-validation scheme used for validation.
    # Here we use a KFold cross-validation on the session, which corresponds to
    # splitting the samples in 4 folds and make 4 runs using each fold as a test
    # set once and the others as learning sets
    from sklearn.model_selection import KFold

    cv = KFold(n_splits=4)

    import nilearn.decoding

    # The radius is the one of the Searchlight sphere that will scan the volume
    searchlight = nilearn.decoding.SearchLight(
        mask_img,
        process_mask_img=process_mask_img,
        radius=5.6,
        n_jobs=n_jobs,
        verbose=1,
        cv=cv,
    )
    searchlight.fit(fmri_img, y)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/nilearn/image/resampling.py:494: UserWarning:

    The provided image has no sform in its header. Please check the provided file. Results may not be as expected.

    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/739 voxels (0.00%, 448.77052307128906 seconds remaining)    Job #1, processed 10/739 voxels (1.35%, 38.663679944144356 seconds remaining)    Job #1, processed 20/739 voxels (2.71%, 39.37977333438353 seconds remaining)    Job #1, processed 30/739 voxels (4.06%, 40.90278216418375 seconds remaining)    Job #1, processed 40/739 voxels (5.41%, 40.773544161244814 seconds remaining)    Job #1, processed 50/739 voxels (6.77%, 40.76335873984164 seconds remaining)    Job #1, processed 60/739 voxels (8.12%, 40.57085810036495 seconds remaining)    Job #1, processed 70/739 voxels (9.47%, 40.2843976894427 seconds remaining)    Job #1, processed 80/739 voxels (10.83%, 40.07457637390602 seconds remaining)    Job #1, processed 90/739 voxels (12.18%, 39.66755570175221 seconds remaining)    Job #1, processed 100/739 voxels (13.53%, 39.35448933229214 seconds remaining)    Job #1, processed 110/739 voxels (14.88%, 38.83695353231123 seconds remaining)    Job #1, processed 120/739 voxels (16.24%, 38.397282420708045 seconds remaining)    Job #1, processed 130/739 voxels (17.59%, 37.91464590416366 seconds remaining)    Job #1, processed 140/739 voxels (18.94%, 37.472595737753345 seconds remaining)    Job #1, processed 150/739 voxels (20.30%, 36.90556979884068 seconds remaining)    Job #1, processed 160/739 voxels (21.65%, 36.395254393923366 seconds remaining)    Job #1, processed 170/739 voxels (23.00%, 35.81885305694912 seconds remaining)    Job #1, processed 180/739 voxels (24.36%, 35.26790090773885 seconds remaining)    Job #1, processed 190/739 voxels (25.71%, 34.663764046584056 seconds remaining)    Job #1, processed 200/739 voxels (27.06%, 34.101112248892264 seconds remaining)    Job #1, processed 210/739 voxels (28.42%, 33.45320085670476 seconds remaining)    Job #1, processed 220/739 voxels (29.77%, 32.884347421513496 seconds remaining)    Job #1, processed 230/739 voxels (31.12%, 32.2699840007527 seconds remaining)    Job #1, processed 240/739 voxels (32.48%, 31.682598792860666 seconds remaining)    Job #1, processed 250/739 voxels (33.83%, 31.06153403123455 seconds remaining)    Job #1, processed 260/739 voxels (35.18%, 30.477397978746325 seconds remaining)    Job #1, processed 270/739 voxels (36.54%, 29.87362401630295 seconds remaining)    Job #1, processed 280/739 voxels (37.89%, 29.24043179344898 seconds remaining)    Job #1, processed 290/739 voxels (39.24%, 28.627555041016667 seconds remaining)    Job #1, processed 300/739 voxels (40.60%, 27.98151443861975 seconds remaining)    Job #1, processed 310/739 voxels (41.95%, 27.37412944169664 seconds remaining)    Job #1, processed 320/739 voxels (43.30%, 26.742323111166307 seconds remaining)    Job #1, processed 330/739 voxels (44.65%, 26.125992692731664 seconds remaining)    Job #1, processed 340/739 voxels (46.01%, 25.480509839454857 seconds remaining)    Job #1, processed 350/739 voxels (47.36%, 24.863002288985896 seconds remaining)    Job #1, processed 360/739 voxels (48.71%, 24.240210242057035 seconds remaining)    Job #1, processed 370/739 voxels (50.07%, 23.59337633180361 seconds remaining)    Job #1, processed 380/739 voxels (51.42%, 22.965380258849507 seconds remaining)    Job #1, processed 390/739 voxels (52.77%, 22.3097347369672 seconds remaining)    Job #1, processed 400/739 voxels (54.13%, 21.673937316260627 seconds remaining)    Job #1, processed 410/739 voxels (55.48%, 21.03347718586747 seconds remaining)    Job #1, processed 420/739 voxels (56.83%, 20.480081565233682 seconds remaining)    Job #1, processed 430/739 voxels (58.19%, 19.819592999928513 seconds remaining)    Job #1, processed 440/739 voxels (59.54%, 19.187841348773006 seconds remaining)    Job #1, processed 450/739 voxels (60.89%, 18.55134952297389 seconds remaining)    Job #1, processed 460/739 voxels (62.25%, 17.899756116560663 seconds remaining)    Job #1, processed 470/739 voxels (63.60%, 17.25961798991797 seconds remaining)    Job #1, processed 480/739 voxels (64.95%, 16.613856293587983 seconds remaining)    Job #1, processed 490/739 voxels (66.31%, 15.969917939953666 seconds remaining)    Job #1, processed 500/739 voxels (67.66%, 15.324689337250895 seconds remaining)    Job #1, processed 510/739 voxels (69.01%, 14.691907770546287 seconds remaining)    Job #1, processed 520/739 voxels (70.37%, 14.041255000234917 seconds remaining)    Job #1, processed 530/739 voxels (71.72%, 13.406950518596924 seconds remaining)    Job #1, processed 540/739 voxels (73.07%, 12.764449541588665 seconds remaining)    Job #1, processed 550/739 voxels (74.42%, 12.126592103719261 seconds remaining)    Job #1, processed 560/739 voxels (75.78%, 11.48562218979941 seconds remaining)    Job #1, processed 570/739 voxels (77.13%, 10.846012167223973 seconds remaining)    Job #1, processed 580/739 voxels (78.48%, 10.208583348631006 seconds remaining)    Job #1, processed 590/739 voxels (79.84%, 9.557600082519773 seconds remaining)    Job #1, processed 600/739 voxels (81.19%, 8.92026950543936 seconds remaining)    Job #1, processed 610/739 voxels (82.54%, 8.274720862901377 seconds remaining)    Job #1, processed 620/739 voxels (83.90%, 7.631170645942275 seconds remaining)    Job #1, processed 630/739 voxels (85.25%, 6.988293610709854 seconds remaining)    Job #1, processed 640/739 voxels (86.60%, 6.350573001227261 seconds remaining)    Job #1, processed 650/739 voxels (87.96%, 5.703277014341614 seconds remaining)    Job #1, processed 660/739 voxels (89.31%, 5.063305203691199 seconds remaining)    Job #1, processed 670/739 voxels (90.66%, 4.423039291911166 seconds remaining)    Job #1, processed 680/739 voxels (92.02%, 3.7769122091072402 seconds remaining)    Job #1, processed 690/739 voxels (93.37%, 3.1385661950008714 seconds remaining)    Job #1, processed 700/739 voxels (94.72%, 2.496549812523095 seconds remaining)    Job #1, processed 710/739 voxels (96.08%, 1.8514949431725098 seconds remaining)    Job #1, processed 720/739 voxels (97.43%, 1.2123874280898796 seconds remaining)    Job #1, processed 730/739 voxels (98.78%, 0.5744294133546449 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   46.9s finished


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-1" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>SearchLight(cv=KFold(n_splits=4, random_state=None, shuffle=False),
                mask_img=&lt;nibabel.nifti1.Nifti1Image object at 0x7fb7108b0220&gt;,
                process_mask_img=&lt;nibabel.nifti1.Nifti1Image object at 0x7fb70f29e0a0&gt;,
                radius=5.6, verbose=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-1" type="checkbox" checked><label for="sk-estimator-id-1" class="sk-toggleable__label sk-toggleable__label-arrow">SearchLight</label><div class="sk-toggleable__content"><pre>SearchLight(cv=KFold(n_splits=4, random_state=None, shuffle=False),
                mask_img=&lt;nibabel.nifti1.Nifti1Image object at 0x7fb7108b0220&gt;,
                process_mask_img=&lt;nibabel.nifti1.Nifti1Image object at 0x7fb70f29e0a0&gt;,
                radius=5.6, verbose=1)</pre></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 93-95

F-scores computation
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 95-114

.. code-block:: default

    from nilearn.maskers import NiftiMasker

    # For decoding, standardizing is often very important
    nifti_masker = NiftiMasker(
        mask_img=mask_img,
        runs=session,
        standardize=True,
        memory="nilearn_cache",
        memory_level=1,
    )
    fmri_masked = nifti_masker.fit_transform(fmri_img)

    from sklearn.feature_selection import f_classif

    _, p_values = f_classif(fmri_masked, y)
    p_values = -np.log10(p_values)
    p_values[p_values > 10] = 10
    p_unmasked = get_data(nifti_masker.inverse_transform(p_values))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/nilearn/signal.py:915: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.





.. GENERATED FROM PYTHON SOURCE LINES 115-118

Visualization
-------------
Use the fmri mean image as a surrogate of anatomical data

.. GENERATED FROM PYTHON SOURCE LINES 118-153

.. code-block:: default

    from nilearn import image

    mean_fmri = image.mean_img(fmri_img)

    from nilearn.plotting import plot_img, plot_stat_map, show

    searchlight_img = new_img_like(mean_fmri, searchlight.scores_)

    # Because scores are not a zero-center test statistics, we cannot use
    # plot_stat_map
    plot_img(
        searchlight_img,
        bg_img=mean_fmri,
        title="Searchlight",
        display_mode="z",
        cut_coords=[-9],
        vmin=0.42,
        cmap="hot",
        threshold=0.2,
        black_bg=True,
    )

    # F_score results
    p_ma = np.ma.array(p_unmasked, mask=np.logical_not(process_mask))
    f_score_img = new_img_like(mean_fmri, p_ma)
    plot_stat_map(
        f_score_img,
        mean_fmri,
        title="F-scores",
        display_mode="z",
        cut_coords=[-9],
        colorbar=False,
    )

    show()



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_haxby_searchlight_001.png
         :alt: plot haxby searchlight
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_haxby_searchlight_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_haxby_searchlight_002.png
         :alt: plot haxby searchlight
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_haxby_searchlight_002.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  59.746 seconds)

**Estimated memory usage:**  916 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_haxby_searchlight.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_haxby_searchlight.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_haxby_searchlight.py <plot_haxby_searchlight.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_haxby_searchlight.ipynb <plot_haxby_searchlight.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
