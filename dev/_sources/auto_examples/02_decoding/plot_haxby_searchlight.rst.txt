
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_haxby_searchlight.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_haxby_searchlight.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_haxby_searchlight.py:


Searchlight analysis of face vs house recognition
=================================================

Searchlight analysis requires fitting a classifier a large amount of
times. As a result, it is an intrinsically slow method. In order to speed
up computing, in this example, Searchlight is run only on one slice on
the :term:`fMRI` (see the generated figures).

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 15-17

Load Haxby dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 17-33

.. code-block:: default

    import pandas as pd
    from nilearn import datasets
    from nilearn.image import get_data, load_img, new_img_like

    # We fetch 2nd subject from haxby datasets (which is default)
    haxby_dataset = datasets.fetch_haxby()

    # print basic information on the dataset
    print(f"Anatomical nifti image (3D) is located at: {haxby_dataset.mask}")
    print(f"Functional nifti image (4D) is located at: {haxby_dataset.func[0]}")

    fmri_filename = haxby_dataset.func[0]
    labels = pd.read_csv(haxby_dataset.session_target[0], sep=" ")
    y = labels["labels"]
    session = labels["chunks"]





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Anatomical nifti image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/haxby2001/mask.nii.gz
    Functional nifti image (4D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/haxby2001/subj2/bold.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 34-36

Restrict to faces and houses
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 36-43

.. code-block:: default

    from nilearn.image import index_img

    condition_mask = y.isin(["face", "house"])

    fmri_img = index_img(fmri_filename, condition_mask)
    y, session = y[condition_mask], session[condition_mask]








.. GENERATED FROM PYTHON SOURCE LINES 44-50

Prepare masks
-------------
- mask_img is the original mask
- process_mask_img is a subset of mask_img, it contains the voxels that
  should be processed (we only keep the slice z = 26 and the back of the
  brain to speed up computation)

.. GENERATED FROM PYTHON SOURCE LINES 50-62

.. code-block:: default

    import numpy as np

    mask_img = load_img(haxby_dataset.mask)

    # .astype() makes a copy.
    process_mask = get_data(mask_img).astype(int)
    picked_slice = 29
    process_mask[..., (picked_slice + 1) :] = 0
    process_mask[..., :picked_slice] = 0
    process_mask[:, 30:] = 0
    process_mask_img = new_img_like(mask_img, process_mask)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/nilearn/nilearn/examples/02_decoding/plot_haxby_searchlight.py:60: UserWarning:

    Data array used to create a new image contains 64-bit ints. This is likely due to creating the array with numpy and passing `int` as the `dtype`. Many tools such as FSL and SPM cannot deal with int64 in Nifti images, so for compatibility the data has been converted to int32.





.. GENERATED FROM PYTHON SOURCE LINES 63-65

Searchlight computation
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 65-92

.. code-block:: default


    # Make processing parallel
    # /!\ As each thread will print its progress, n_jobs > 1 could mess up the
    #     information output.
    n_jobs = 1

    # Define the cross-validation scheme used for validation.
    # Here we use a KFold cross-validation on the session, which corresponds to
    # splitting the samples in 4 folds and make 4 runs using each fold as a test
    # set once and the others as learning sets
    from sklearn.model_selection import KFold

    cv = KFold(n_splits=4)

    import nilearn.decoding

    # The radius is the one of the Searchlight sphere that will scan the volume
    searchlight = nilearn.decoding.SearchLight(
        mask_img,
        process_mask_img=process_mask_img,
        radius=5.6,
        n_jobs=n_jobs,
        verbose=1,
        cv=cv,
    )
    searchlight.fit(fmri_img, y)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/nilearn/image/resampling.py:494: UserWarning:

    The provided image has no sform in its header. Please check the provided file. Results may not be as expected.

    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/739 voxels (0.00%, 437.2143745422363 seconds remaining)    Job #1, processed 10/739 voxels (1.35%, 37.83000944278859 seconds remaining)    Job #1, processed 20/739 voxels (2.71%, 38.82667896052568 seconds remaining)    Job #1, processed 30/739 voxels (4.06%, 40.34980333497372 seconds remaining)    Job #1, processed 40/739 voxels (5.41%, 40.26930448572649 seconds remaining)    Job #1, processed 50/739 voxels (6.77%, 40.2325091700082 seconds remaining)    Job #1, processed 60/739 voxels (8.12%, 40.060990206713754 seconds remaining)    Job #1, processed 70/739 voxels (9.47%, 39.81642529176432 seconds remaining)    Job #1, processed 80/739 voxels (10.83%, 39.59269380987737 seconds remaining)    Job #1, processed 90/739 voxels (12.18%, 39.19826437961096 seconds remaining)    Job #1, processed 100/739 voxels (13.53%, 38.93960990045834 seconds remaining)    Job #1, processed 110/739 voxels (14.88%, 38.42837885374664 seconds remaining)    Job #1, processed 120/739 voxels (16.24%, 37.966046072579374 seconds remaining)    Job #1, processed 130/739 voxels (17.59%, 37.43919041171678 seconds remaining)    Job #1, processed 140/739 voxels (18.94%, 36.963012354175035 seconds remaining)    Job #1, processed 150/739 voxels (20.30%, 36.37143497866363 seconds remaining)    Job #1, processed 160/739 voxels (21.65%, 35.85161184053223 seconds remaining)    Job #1, processed 170/739 voxels (23.00%, 35.273431622463725 seconds remaining)    Job #1, processed 180/739 voxels (24.36%, 34.701997386998144 seconds remaining)    Job #1, processed 190/739 voxels (25.71%, 34.09522716065224 seconds remaining)    Job #1, processed 200/739 voxels (27.06%, 33.54400854805004 seconds remaining)    Job #1, processed 210/739 voxels (28.42%, 32.911247207948975 seconds remaining)    Job #1, processed 220/739 voxels (29.77%, 32.34881908083907 seconds remaining)    Job #1, processed 230/739 voxels (31.12%, 31.740102938943778 seconds remaining)    Job #1, processed 240/739 voxels (32.48%, 31.15519823581715 seconds remaining)    Job #1, processed 250/739 voxels (33.83%, 30.532634507823975 seconds remaining)    Job #1, processed 260/739 voxels (35.18%, 29.960259491506793 seconds remaining)    Job #1, processed 270/739 voxels (36.54%, 29.36107331230527 seconds remaining)    Job #1, processed 280/739 voxels (37.89%, 28.74830003570019 seconds remaining)    Job #1, processed 290/739 voxels (39.24%, 28.151179435177802 seconds remaining)    Job #1, processed 300/739 voxels (40.60%, 27.521238651181676 seconds remaining)    Job #1, processed 310/739 voxels (41.95%, 26.916735459851704 seconds remaining)    Job #1, processed 320/739 voxels (43.30%, 26.311136978052506 seconds remaining)    Job #1, processed 330/739 voxels (44.65%, 25.711478469620097 seconds remaining)    Job #1, processed 340/739 voxels (46.01%, 25.076142268034722 seconds remaining)    Job #1, processed 350/739 voxels (47.36%, 24.461804889343878 seconds remaining)    Job #1, processed 360/739 voxels (48.71%, 23.8524659713713 seconds remaining)    Job #1, processed 370/739 voxels (50.07%, 23.220186383323753 seconds remaining)    Job #1, processed 380/739 voxels (51.42%, 22.612168290465778 seconds remaining)    Job #1, processed 390/739 voxels (52.77%, 21.986027417454906 seconds remaining)    Job #1, processed 400/739 voxels (54.13%, 21.37058166102739 seconds remaining)    Job #1, processed 410/739 voxels (55.48%, 20.74290773622751 seconds remaining)    Job #1, processed 420/739 voxels (56.83%, 20.21355447994872 seconds remaining)    Job #1, processed 430/739 voxels (58.19%, 19.577212856323538 seconds remaining)    Job #1, processed 440/739 voxels (59.54%, 18.957381121936884 seconds remaining)    Job #1, processed 450/739 voxels (60.89%, 18.335453787310446 seconds remaining)    Job #1, processed 460/739 voxels (62.25%, 17.69236054573672 seconds remaining)    Job #1, processed 470/739 voxels (63.60%, 17.065913927630056 seconds remaining)    Job #1, processed 480/739 voxels (64.95%, 16.429389905709318 seconds remaining)    Job #1, processed 490/739 voxels (66.31%, 15.796376541825444 seconds remaining)    Job #1, processed 500/739 voxels (67.66%, 15.161734427145662 seconds remaining)    Job #1, processed 510/739 voxels (69.01%, 14.533810214950732 seconds remaining)    Job #1, processed 520/739 voxels (70.37%, 13.889689265893942 seconds remaining)    Job #1, processed 530/739 voxels (71.72%, 13.26107036369311 seconds remaining)    Job #1, processed 540/739 voxels (73.07%, 12.62496628584444 seconds remaining)    Job #1, processed 550/739 voxels (74.42%, 11.997020686259035 seconds remaining)    Job #1, processed 560/739 voxels (75.78%, 11.363616755342823 seconds remaining)    Job #1, processed 570/739 voxels (77.13%, 10.729405848753991 seconds remaining)    Job #1, processed 580/739 voxels (78.48%, 10.097866308433927 seconds remaining)    Job #1, processed 590/739 voxels (79.84%, 9.454665814707415 seconds remaining)    Job #1, processed 600/739 voxels (81.19%, 8.82441441495073 seconds remaining)    Job #1, processed 610/739 voxels (82.54%, 8.188164468882645 seconds remaining)    Job #1, processed 620/739 voxels (83.90%, 7.5522476279834985 seconds remaining)    Job #1, processed 630/739 voxels (85.25%, 6.916691940900518 seconds remaining)    Job #1, processed 640/739 voxels (86.60%, 6.285198687956463 seconds remaining)    Job #1, processed 650/739 voxels (87.96%, 5.644745238318453 seconds remaining)    Job #1, processed 660/739 voxels (89.31%, 5.011985949233428 seconds remaining)    Job #1, processed 670/739 voxels (90.66%, 4.379505020247216 seconds remaining)    Job #1, processed 680/739 voxels (92.02%, 3.7405844631725715 seconds remaining)    Job #1, processed 690/739 voxels (93.37%, 3.107833533314113 seconds remaining)    Job #1, processed 700/739 voxels (94.72%, 2.4722482775514196 seconds remaining)    Job #1, processed 710/739 voxels (96.08%, 1.8336885114395063 seconds remaining)    Job #1, processed 720/739 voxels (97.43%, 1.2008705179047456 seconds remaining)    Job #1, processed 730/739 voxels (98.78%, 0.5690870603150886 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   46.4s finished


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-1" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>SearchLight(cv=KFold(n_splits=4, random_state=None, shuffle=False),
                mask_img=&lt;nibabel.nifti1.Nifti1Image object at 0x7f3e300fed90&gt;,
                process_mask_img=&lt;nibabel.nifti1.Nifti1Image object at 0x7f3e2f38cfd0&gt;,
                radius=5.6, verbose=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-1" type="checkbox" checked><label for="sk-estimator-id-1" class="sk-toggleable__label sk-toggleable__label-arrow">SearchLight</label><div class="sk-toggleable__content"><pre>SearchLight(cv=KFold(n_splits=4, random_state=None, shuffle=False),
                mask_img=&lt;nibabel.nifti1.Nifti1Image object at 0x7f3e300fed90&gt;,
                process_mask_img=&lt;nibabel.nifti1.Nifti1Image object at 0x7f3e2f38cfd0&gt;,
                radius=5.6, verbose=1)</pre></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 93-95

F-scores computation
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 95-114

.. code-block:: default

    from nilearn.maskers import NiftiMasker

    # For decoding, standardizing is often very important
    nifti_masker = NiftiMasker(
        mask_img=mask_img,
        runs=session,
        standardize=True,
        memory="nilearn_cache",
        memory_level=1,
    )
    fmri_masked = nifti_masker.fit_transform(fmri_img)

    from sklearn.feature_selection import f_classif

    _, p_values = f_classif(fmri_masked, y)
    p_values = -np.log10(p_values)
    p_values[p_values > 10] = 10
    p_unmasked = get_data(nifti_masker.inverse_transform(p_values))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/nilearn/signal.py:915: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.





.. GENERATED FROM PYTHON SOURCE LINES 115-118

Visualization
-------------
Use the fmri mean image as a surrogate of anatomical data

.. GENERATED FROM PYTHON SOURCE LINES 118-153

.. code-block:: default

    from nilearn import image

    mean_fmri = image.mean_img(fmri_img)

    from nilearn.plotting import plot_img, plot_stat_map, show

    searchlight_img = new_img_like(mean_fmri, searchlight.scores_)

    # Because scores are not a zero-center test statistics, we cannot use
    # plot_stat_map
    plot_img(
        searchlight_img,
        bg_img=mean_fmri,
        title="Searchlight",
        display_mode="z",
        cut_coords=[-9],
        vmin=0.42,
        cmap="hot",
        threshold=0.2,
        black_bg=True,
    )

    # F_score results
    p_ma = np.ma.array(p_unmasked, mask=np.logical_not(process_mask))
    f_score_img = new_img_like(mean_fmri, p_ma)
    plot_stat_map(
        f_score_img,
        mean_fmri,
        title="F-scores",
        display_mode="z",
        cut_coords=[-9],
        colorbar=False,
    )

    show()



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_haxby_searchlight_001.png
         :alt: plot haxby searchlight
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_haxby_searchlight_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_haxby_searchlight_002.png
         :alt: plot haxby searchlight
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_haxby_searchlight_002.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  58.849 seconds)

**Estimated memory usage:**  916 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_haxby_searchlight.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_haxby_searchlight.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_haxby_searchlight.py <plot_haxby_searchlight.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_haxby_searchlight.ipynb <plot_haxby_searchlight.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
