
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_haxby_searchlight.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_haxby_searchlight.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_haxby_searchlight.py:


Searchlight analysis of face vs house recognition
=================================================

Searchlight analysis requires fitting a classifier a large amount of
times. As a result, it is an intrinsically slow method. In order to speed
up computing, in this example, Searchlight is run only on one slice on
the :term:`fMRI` (see the generated figures).

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 15-17

Load Haxby dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 17-33

.. code-block:: default

    import pandas as pd
    from nilearn import datasets
    from nilearn.image import get_data, load_img, new_img_like

    # We fetch 2nd subject from haxby datasets (which is default)
    haxby_dataset = datasets.fetch_haxby()

    # print basic information on the dataset
    print(f"Anatomical nifti image (3D) is located at: {haxby_dataset.mask}")
    print(f"Functional nifti image (4D) is located at: {haxby_dataset.func[0]}")

    fmri_filename = haxby_dataset.func[0]
    labels = pd.read_csv(haxby_dataset.session_target[0], sep=" ")
    y = labels["labels"]
    session = labels["chunks"]





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Anatomical nifti image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/haxby2001/mask.nii.gz
    Functional nifti image (4D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/haxby2001/subj2/bold.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 34-36

Restrict to faces and houses
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 36-43

.. code-block:: default

    from nilearn.image import index_img

    condition_mask = y.isin(["face", "house"])

    fmri_img = index_img(fmri_filename, condition_mask)
    y, session = y[condition_mask], session[condition_mask]








.. GENERATED FROM PYTHON SOURCE LINES 44-50

Prepare masks
-------------
- mask_img is the original mask
- process_mask_img is a subset of mask_img, it contains the voxels that
  should be processed (we only keep the slice z = 26 and the back of the
  brain to speed up computation)

.. GENERATED FROM PYTHON SOURCE LINES 50-62

.. code-block:: default

    import numpy as np

    mask_img = load_img(haxby_dataset.mask)

    # .astype() makes a copy.
    process_mask = get_data(mask_img).astype(int)
    picked_slice = 29
    process_mask[..., (picked_slice + 1) :] = 0
    process_mask[..., :picked_slice] = 0
    process_mask[:, 30:] = 0
    process_mask_img = new_img_like(mask_img, process_mask)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/nilearn/nilearn/examples/02_decoding/plot_haxby_searchlight.py:60: UserWarning:

    Data array used to create a new image contains 64-bit ints. This is likely due to creating the array with numpy and passing `int` as the `dtype`. Many tools such as FSL and SPM cannot deal with int64 in Nifti images, so for compatibility the data has been converted to int32.





.. GENERATED FROM PYTHON SOURCE LINES 63-65

Searchlight computation
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 65-92

.. code-block:: default


    # Make processing parallel
    # /!\ As each thread will print its progress, n_jobs > 1 could mess up the
    #     information output.
    n_jobs = 1

    # Define the cross-validation scheme used for validation.
    # Here we use a KFold cross-validation on the session, which corresponds to
    # splitting the samples in 4 folds and make 4 runs using each fold as a test
    # set once and the others as learning sets
    from sklearn.model_selection import KFold

    cv = KFold(n_splits=4)

    import nilearn.decoding

    # The radius is the one of the Searchlight sphere that will scan the volume
    searchlight = nilearn.decoding.SearchLight(
        mask_img,
        process_mask_img=process_mask_img,
        radius=5.6,
        n_jobs=n_jobs,
        verbose=1,
        cv=cv,
    )
    searchlight.fit(fmri_img, y)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/nilearn/image/resampling.py:494: UserWarning:

    The provided image has no sform in its header. Please check the provided file. Results may not be as expected.

    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/739 voxels (0.00%, 476.7155647277832 seconds remaining)    Job #1, processed 10/739 voxels (1.35%, 40.346091164482964 seconds remaining)    Job #1, processed 20/739 voxels (2.71%, 41.210011653794574 seconds remaining)    Job #1, processed 30/739 voxels (4.06%, 41.48798161187196 seconds remaining)    Job #1, processed 40/739 voxels (5.41%, 41.255473600958716 seconds remaining)    Job #1, processed 50/739 voxels (6.77%, 41.18545314585969 seconds remaining)    Job #1, processed 60/739 voxels (8.12%, 41.161400132578585 seconds remaining)    Job #1, processed 70/739 voxels (9.47%, 40.770323353810696 seconds remaining)    Job #1, processed 80/739 voxels (10.83%, 40.34798937601176 seconds remaining)    Job #1, processed 90/739 voxels (12.18%, 39.66129323531841 seconds remaining)    Job #1, processed 100/739 voxels (13.53%, 39.25254119032855 seconds remaining)    Job #1, processed 110/739 voxels (14.88%, 38.733874597857074 seconds remaining)    Job #1, processed 120/739 voxels (16.24%, 38.215080080361204 seconds remaining)    Job #1, processed 130/739 voxels (17.59%, 37.68391450350091 seconds remaining)    Job #1, processed 140/739 voxels (18.94%, 37.19145754423413 seconds remaining)    Job #1, processed 150/739 voxels (20.30%, 36.54762621348715 seconds remaining)    Job #1, processed 160/739 voxels (21.65%, 36.01146945556923 seconds remaining)    Job #1, processed 170/739 voxels (23.00%, 35.37818847531858 seconds remaining)    Job #1, processed 180/739 voxels (24.36%, 34.780237178301384 seconds remaining)    Job #1, processed 190/739 voxels (25.71%, 34.120352737915645 seconds remaining)    Job #1, processed 200/739 voxels (27.06%, 33.50205794106742 seconds remaining)    Job #1, processed 210/739 voxels (28.42%, 32.84654292097232 seconds remaining)    Job #1, processed 220/739 voxels (29.77%, 32.33373192175947 seconds remaining)    Job #1, processed 230/739 voxels (31.12%, 31.779922726221745 seconds remaining)    Job #1, processed 240/739 voxels (32.48%, 31.247257810508096 seconds remaining)    Job #1, processed 250/739 voxels (33.83%, 30.642850763093715 seconds remaining)    Job #1, processed 260/739 voxels (35.18%, 30.033253566862303 seconds remaining)    Job #1, processed 270/739 voxels (36.54%, 29.437259745454295 seconds remaining)    Job #1, processed 280/739 voxels (37.89%, 28.86236599612343 seconds remaining)    Job #1, processed 290/739 voxels (39.24%, 28.253850993031026 seconds remaining)    Job #1, processed 300/739 voxels (40.60%, 27.60036691421358 seconds remaining)    Job #1, processed 310/739 voxels (41.95%, 27.00042494630643 seconds remaining)    Job #1, processed 320/739 voxels (43.30%, 26.391773368690085 seconds remaining)    Job #1, processed 330/739 voxels (44.65%, 25.811957827874558 seconds remaining)    Job #1, processed 340/739 voxels (46.01%, 25.14243993161166 seconds remaining)    Job #1, processed 350/739 voxels (47.36%, 24.51455665601266 seconds remaining)    Job #1, processed 360/739 voxels (48.71%, 23.90506629805818 seconds remaining)    Job #1, processed 370/739 voxels (50.07%, 23.27045356282127 seconds remaining)    Job #1, processed 380/739 voxels (51.42%, 22.682732026709605 seconds remaining)    Job #1, processed 390/739 voxels (52.77%, 22.08054058443806 seconds remaining)    Job #1, processed 400/739 voxels (54.13%, 21.45582933468187 seconds remaining)    Job #1, processed 410/739 voxels (55.48%, 20.83487167458098 seconds remaining)    Job #1, processed 420/739 voxels (56.83%, 20.356524659025403 seconds remaining)    Job #1, processed 430/739 voxels (58.19%, 19.71328185915353 seconds remaining)    Job #1, processed 440/739 voxels (59.54%, 19.058425949370257 seconds remaining)    Job #1, processed 450/739 voxels (60.89%, 18.416356706446976 seconds remaining)    Job #1, processed 460/739 voxels (62.25%, 17.77498070973469 seconds remaining)    Job #1, processed 470/739 voxels (63.60%, 17.14352070760427 seconds remaining)    Job #1, processed 480/739 voxels (64.95%, 16.498164293672417 seconds remaining)    Job #1, processed 490/739 voxels (66.31%, 15.853870087629204 seconds remaining)    Job #1, processed 500/739 voxels (67.66%, 15.221959294491962 seconds remaining)    Job #1, processed 510/739 voxels (69.01%, 14.58568495993095 seconds remaining)    Job #1, processed 520/739 voxels (70.37%, 13.93937668075984 seconds remaining)    Job #1, processed 530/739 voxels (71.72%, 13.302349893726321 seconds remaining)    Job #1, processed 540/739 voxels (73.07%, 12.653200636422964 seconds remaining)    Job #1, processed 550/739 voxels (74.42%, 12.029142776569733 seconds remaining)    Job #1, processed 560/739 voxels (75.78%, 11.390093034350107 seconds remaining)    Job #1, processed 570/739 voxels (77.13%, 10.761344718450893 seconds remaining)    Job #1, processed 580/739 voxels (78.48%, 10.124848733983635 seconds remaining)    Job #1, processed 590/739 voxels (79.84%, 9.474702146105868 seconds remaining)    Job #1, processed 600/739 voxels (81.19%, 8.834524466612905 seconds remaining)    Job #1, processed 610/739 voxels (82.54%, 8.196252806064777 seconds remaining)    Job #1, processed 620/739 voxels (83.90%, 7.554439392646813 seconds remaining)    Job #1, processed 630/739 voxels (85.25%, 6.920487886300186 seconds remaining)    Job #1, processed 640/739 voxels (86.60%, 6.287026221977924 seconds remaining)    Job #1, processed 650/739 voxels (87.96%, 5.645045021871594 seconds remaining)    Job #1, processed 660/739 voxels (89.31%, 5.010236108146899 seconds remaining)    Job #1, processed 670/739 voxels (90.66%, 4.377989690508404 seconds remaining)    Job #1, processed 680/739 voxels (92.02%, 3.7402746167501113 seconds remaining)    Job #1, processed 690/739 voxels (93.37%, 3.1084969190301512 seconds remaining)    Job #1, processed 700/739 voxels (94.72%, 2.4758677108062286 seconds remaining)    Job #1, processed 710/739 voxels (96.08%, 1.8377454552821186 seconds remaining)    Job #1, processed 720/739 voxels (97.43%, 1.2037997633160613 seconds remaining)    Job #1, processed 730/739 voxels (98.78%, 0.5707228294290683 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   46.6s finished


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-1" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>SearchLight(cv=KFold(n_splits=4, random_state=None, shuffle=False),
                mask_img=&lt;nibabel.nifti1.Nifti1Image object at 0x7f04cce40d00&gt;,
                process_mask_img=&lt;nibabel.nifti1.Nifti1Image object at 0x7f04cc25ea00&gt;,
                radius=5.6, verbose=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-1" type="checkbox" checked><label for="sk-estimator-id-1" class="sk-toggleable__label sk-toggleable__label-arrow">SearchLight</label><div class="sk-toggleable__content"><pre>SearchLight(cv=KFold(n_splits=4, random_state=None, shuffle=False),
                mask_img=&lt;nibabel.nifti1.Nifti1Image object at 0x7f04cce40d00&gt;,
                process_mask_img=&lt;nibabel.nifti1.Nifti1Image object at 0x7f04cc25ea00&gt;,
                radius=5.6, verbose=1)</pre></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 93-95

F-scores computation
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 95-114

.. code-block:: default

    from nilearn.maskers import NiftiMasker

    # For decoding, standardizing is often very important
    nifti_masker = NiftiMasker(
        mask_img=mask_img,
        runs=session,
        standardize=True,
        memory="nilearn_cache",
        memory_level=1,
    )
    fmri_masked = nifti_masker.fit_transform(fmri_img)

    from sklearn.feature_selection import f_classif

    _, p_values = f_classif(fmri_masked, y)
    p_values = -np.log10(p_values)
    p_values[p_values > 10] = 10
    p_unmasked = get_data(nifti_masker.inverse_transform(p_values))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/nilearn/signal.py:915: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.





.. GENERATED FROM PYTHON SOURCE LINES 115-118

Visualization
-------------
Use the fmri mean image as a surrogate of anatomical data

.. GENERATED FROM PYTHON SOURCE LINES 118-153

.. code-block:: default

    from nilearn import image

    mean_fmri = image.mean_img(fmri_img)

    from nilearn.plotting import plot_img, plot_stat_map, show

    searchlight_img = new_img_like(mean_fmri, searchlight.scores_)

    # Because scores are not a zero-center test statistics, we cannot use
    # plot_stat_map
    plot_img(
        searchlight_img,
        bg_img=mean_fmri,
        title="Searchlight",
        display_mode="z",
        cut_coords=[-9],
        vmin=0.42,
        cmap="hot",
        threshold=0.2,
        black_bg=True,
    )

    # F_score results
    p_ma = np.ma.array(p_unmasked, mask=np.logical_not(process_mask))
    f_score_img = new_img_like(mean_fmri, p_ma)
    plot_stat_map(
        f_score_img,
        mean_fmri,
        title="F-scores",
        display_mode="z",
        cut_coords=[-9],
        colorbar=False,
    )

    show()



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_haxby_searchlight_001.png
         :alt: plot haxby searchlight
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_haxby_searchlight_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_haxby_searchlight_002.png
         :alt: plot haxby searchlight
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_haxby_searchlight_002.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  1.584 seconds)

**Estimated memory usage:**  916 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_haxby_searchlight.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_haxby_searchlight.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_haxby_searchlight.py <plot_haxby_searchlight.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_haxby_searchlight.ipynb <plot_haxby_searchlight.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
