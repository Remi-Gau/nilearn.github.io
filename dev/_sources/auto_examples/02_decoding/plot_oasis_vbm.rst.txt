
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f0e9c5cf8e0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 198.1496810913086 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 34.94887018203735 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 32.456050872802734 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 31.652013937632244 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 31.218892097473145 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 30.786966562271118 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 30.539541562398277 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 30.339454582759313 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 30.15904998779297 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 29.92721094025506 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 29.702131748199463 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 29.50098531896418 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 29.34746766090393 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 29.423847950421848 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 29.21804942403521 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 29.00203076998393 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 28.79409658908844 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 28.631831814261044 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 28.4385896258884 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 28.257040739059452 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 28.08183789253235 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 27.902810085387458 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 27.753228837793525 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 27.60478790946629 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 27.432714462280273 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 27.282052993774414 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 27.11196090624883 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 26.94646723182113 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 26.763475826808385 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 26.582526190527553 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 26.402458667755127 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 26.233353853225704 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 26.062501966953278 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 25.89028711752458 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 25.718104544807886 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 25.544002839497157 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 25.37863551245795 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 25.210930624523677 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 25.042044903102678 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 24.889880975087486 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 24.727161407470703 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 24.570129755066663 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 24.418374686014083 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 24.27348736275074 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 24.127576654607598 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 23.974309894773697 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 23.819837715314783 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 23.663960512648238 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 23.51290225982666 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 23.351029872894287 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 23.190158128738403 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 23.031150785146973 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 22.88746109375587 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 22.739613870404803 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 22.59450986650255 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 22.439232782884076 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 22.285998344421387 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 22.135992803071673 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 21.98790176161404 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 21.833988177574284 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 21.68001945813497 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 21.524893514445573 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 21.37961342257838 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 21.22260630319989 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 21.06242737174034 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 20.903011267001816 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 20.738786271124173 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 20.57510542869568 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 20.413866309558642 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 20.25413652433865 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 20.09201458522252 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 19.93872149897293 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 19.780762990315754 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 19.62040677135938 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 19.459915000039178 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 19.30272340774536 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 19.14170617806284 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 18.981894149408713 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 18.83093413328513 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 18.680246404454678 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 18.529919743537903 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 18.37432626736017 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 18.218509674072266 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 18.06263305767473 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 17.911226352055866 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 17.762873341055478 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 17.609640698100243 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 17.466389088795104 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 17.309667327187277 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 17.156579644492503 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 17.004378106858997 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 16.857758899311442 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 16.699792322905168 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 16.54450720356357 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 16.386951938588567 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 16.229711632979544 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 16.074457705020905 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.918470183598627 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 15.775178169717595 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 15.667734117218941 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 15.524516582489014 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 15.378563361592812 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 15.220129368351955 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 15.06418771188236 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 14.910290424640364 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 14.753232479095459 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 14.594174502030858 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 14.43491961131586 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 14.276978739985713 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 14.121255133130134 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.969733996824786 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 13.813165340337667 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 13.659921782357351 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 13.507336175547236 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 13.352235564014368 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 13.197599151860112 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 13.045095081987052 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.892306089401245 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.734656410702206 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 12.575803095553102 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 12.42068862915039 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 12.266697294455915 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 12.11306721656049 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.960522453959394 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.805812858766126 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.649460458755494 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.494131792159308 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 11.33886106558672 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 11.184007331728935 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 11.031818692998367 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.877434051953829 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.721492987552672 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.57946987585588 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.425378066256531 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.270415185102776 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.11779855798792 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.96250747231876 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.80517461874189 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.647766541743623 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.493310106744012 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.337529693331037 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.182272762271529 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.026666453186895 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.87095856166386 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.714404503504435 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.558207109056669 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.40272675475029 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.246632699252798 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.091681506182697 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.935555144444408 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.779764572779337 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.624974295003525 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.4686434896368725 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.312434684217366 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.157108455509334 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.00086635158908 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.844766818560086 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.688452992469641 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.532242319251917 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.376550230590053 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.221911549568176 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.068010909216745 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.912876293982988 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.758013769161481 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.602874994277954 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.4487809484655205 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.293543479528772 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.138555241202166 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.983368419465564 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.827852141927685 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.672484089346494 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.517293911928322 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.362080773641897 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.206953142419716 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.051490641188348 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.8958000114985873 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.73993596163663 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.5839134259412515 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.428785527690073 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.272997327357031 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.1177756786346436 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.962147355738266 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.8061739953009637 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.6501886649209947 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.4942277825396992 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.338222677643235 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.182417533730948 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.0264144568519797 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.8705488570193025 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.7146192593549294 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.5588187543969405 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.4029196344745096 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.2471191187699635 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0912138921609196 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9353119442143392 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7794044323456593 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6235104531657939 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.467635435501331 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3117512621060767 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1558783078313473 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   31.2s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  17.243 seconds)

**Estimated memory usage:**  1864 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
