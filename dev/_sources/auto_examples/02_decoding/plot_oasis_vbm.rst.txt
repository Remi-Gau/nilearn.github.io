
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (:term:`VBM`)
to study the relationship between aging and gray matter density.

The data come from the `OASIS <https://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard :term:`VBM` pipeline (using SPM8 and
NewSegment) to create :term:`VBM` maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the :term:`ANOVA` step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the :term:`ANOVA` step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

:term:`SVM` weights are very noisy,
partly because heavy smoothing is detrimental for the prediction here.
A standard analysis using mass-univariate :term:`GLM`
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 112-123

Prediction pipeline with :term:`ANOVA` and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

In nilearn we can benefit from the built-in DecoderRegressor object to
do :term:`ANOVA` with SVR instead of manually defining the whole pipeline.
This estimator also uses Cross Validation to select best models and ensemble
them. Furthermore, you can pass ``n_jobs=<some_high_value>`` to the
DecoderRegressor class to take advantage of a multi-core system.
To save time (because these are anat images with many voxels), we include
only the 1-percent voxels most correlated with the age variable to fit. We
also want to set mask hyperparameter to be the mask we just obtained above.

.. GENERATED FROM PYTHON SOURCE LINES 123-149

.. code-block:: default


    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 150-152

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 152-165

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-183

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f4fce850d60>



.. GENERATED FROM PYTHON SOURCE LINES 184-186

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 186-231

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 268.0063247680664 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 48.215144634246826 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 45.666258573532104 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 44.38184436162313 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 43.948564291000366 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 44.6863067150116 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 44.18528525034587 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 43.6635616847447 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 43.61532211303711 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 43.265205250846016 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 43.42479991912842 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 43.28245925903321 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 43.2246630191803 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 42.85771397443918 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 43.155109303338186 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 43.0058274269104 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 42.75185012817383 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 42.43574263067807 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 42.328106270896065 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 42.114999507602896 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 41.81303787231445 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 41.607395160765876 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 41.22046405618841 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 41.31610122970913 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 40.96397527058919 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 40.64083504676819 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 40.279971214441154 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 40.020905309253266 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 39.85921519143241 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 39.51869611082405 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 39.206756909688316 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 38.897226818146244 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 38.71741443872452 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 38.40517580870426 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 38.13811621946447 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 37.84940753664289 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 37.5969229804145 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 37.4437717618169 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 37.15840010893972 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 36.904744649544746 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 36.65184307098389 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 36.39651869564521 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 36.19610219910031 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 35.97824770350789 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 35.72687224908309 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 35.476218117607964 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 35.330929600674175 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 35.08387432199844 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 34.817399978637695 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 34.56818480880893 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 34.32806324958801 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 34.145466248194374 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 33.876580018263596 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 33.6049509408339 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 33.362902862054334 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 33.15994628992947 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 32.926572867802214 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 32.658577814436796 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 32.41934366061769 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 32.16663043377763 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 31.982532183329266 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 31.729013763490272 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 31.483782268339585 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 31.3097457166702 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 31.081673502922058 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 30.879199669911312 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 30.61621101697286 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 30.371613299668724 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 30.13434854675742 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 29.951916501141977 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 29.693458795547485 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 29.462162531597514 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 29.220548841688366 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 28.976258094996624 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 28.771326425913216 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 28.539148569107056 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 28.296207892267326 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 28.042469352870793 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 27.798888102555885 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 27.596908152857914 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 27.35319149494171 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 27.105109382558755 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 26.860187873607728 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 26.67212599444102 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 26.425838799703687 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 26.201414529015036 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 25.965027343395143 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 25.756156630899717 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 25.55088368329135 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 25.301140718245772 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 25.052575694190132 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 24.803100316079107 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 24.56369991924452 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 24.35003751067705 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 24.11131479385051 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 23.861383475755392 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 23.630323270956673 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 23.40417209851373 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 23.166322931951406 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 22.92479512426588 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 22.690350770950317 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 22.451907918004707 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 22.23775883281932 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 22.001653740706953 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 21.764840126037598 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 21.52670855749221 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 21.289136531218045 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 21.07411090904307 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 20.850232866075306 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 20.61668032899909 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 20.379451404918324 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 20.156779899253504 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 19.94509243965149 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 19.715608949154877 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 19.48190498770329 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 19.252552084300827 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 19.03300669275481 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 18.79723103433593 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 18.565870260788223 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 18.335797818768928 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 18.104929447174072 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 17.889890893431737 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 17.661396245487403 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 17.432492634145223 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 17.202470664055117 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 16.9799813747406 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 16.759016585728478 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 16.529193157286155 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 16.303382501006126 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 16.072619321734404 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 15.875787386527428 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 15.647873721959936 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 15.417199922330452 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 15.18712900276471 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 14.955841391833859 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 14.740517792878327 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 14.509045993580537 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 14.27743949681303 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 14.043428448663242 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 13.82541382741585 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 13.597027710505893 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 13.366482868262217 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 13.136286913509101 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 12.908528481330071 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 12.689146677652994 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 12.460631921373563 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 12.23245333318841 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 12.003118716129642 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 11.780267812110283 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 11.557243819204754 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 11.328744411468506 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 11.097290028009983 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 10.871754997654964 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 10.649475379706988 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 10.422945019486662 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 10.197375274473622 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 9.970908201657808 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 9.744439021796937 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 9.523230567763122 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 9.294187266871614 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 9.064475297927856 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 8.834871311365449 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 8.606380645139717 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 8.3888662592765 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 8.159505076524688 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 7.932220935821533 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 7.703342940433916 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 7.48062606057721 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 7.25089627220517 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 7.022557711460181 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 6.797350266400506 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 6.569366880327637 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 6.346202434495439 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 6.117927566429095 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.891638196747879 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.664003201893397 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 5.440168586644259 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 5.214918613433838 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.9863610481948 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.7581195644826195 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.530287636650933 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 4.305527893877819 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 4.078149357994834 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.8506027310272386 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.6231078894241997 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.3973443185960925 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 3.1721587898910686 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.9454656323009636 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.7182364615988224 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.4913854409777927 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.2654919624328613 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 2.039307432024891 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.812488704919815 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.5856664934306564 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.3590577066559153 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.133093265386728 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.9072087540918466 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.6802778473965407 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.453484154710866 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.22667218213105322 seconds remaining)
    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 34.847 seconds)

**Estimated memory usage:**  1903 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
