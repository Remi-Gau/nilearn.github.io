
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print("")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f4a147706a0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 245.78332901000977 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 48.673513650894165 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 45.9604754447937 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 44.864241758982345 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 44.618486166000366 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 44.2750883102417 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 44.054088036219284 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 43.82811055864607 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 43.66527557373047 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 43.365763160917496 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 43.10093545913696 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 43.08525954593312 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 42.78099306424458 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 42.542962716175964 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 42.36642459460668 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 42.17616947491964 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 41.96655356884003 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 41.6650003825917 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 41.36922102504306 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 41.130489562687124 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 40.89679956436157 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 40.66855766659691 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 40.42668457464739 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 40.21696139418561 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 40.02770376205444 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 39.821240186691284 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 39.59304620669438 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 39.38459382233796 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 39.123697246823994 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 38.90503384327066 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 38.67906149228414 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 38.4371981082424 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 38.230118572711945 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 37.99436618342544 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 37.76722164715038 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 37.54707220622471 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 37.299612522125244 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 37.073243521355295 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 36.85060188644811 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 36.611859193215004 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 36.3938512802124 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 36.17370515916406 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 35.99074524924868 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 35.77579869780429 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 35.53876460682262 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 35.29947442478604 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 35.05262201765309 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 34.82759278885862 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 34.60635475317637 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 34.383328170192485 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 34.15496563911438 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 33.92482578988169 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 33.689268625699555 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 33.45672567385547 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 33.21750713277746 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 32.980496731671415 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 32.73895004817418 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 32.49624141057332 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 32.2574072624075 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 32.01116710194086 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 31.780749638875328 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 31.543864453425176 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 31.31668376153515 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 31.09065606858995 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 30.869243621826172 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 30.64417279683627 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 30.41742467880249 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 30.196047263358956 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 29.974999876583322 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 29.744027590406112 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 29.514680351529805 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 29.28145935501851 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 29.04805713229709 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 28.81207827019365 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 28.586265718614733 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 28.375606536865234 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 28.139242623981676 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 27.915431350856633 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 27.685057358864025 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 27.44875646844695 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 27.22494149208069 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 26.993817626694103 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 26.765226695595718 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 26.53503665004868 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 26.31566858291626 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 26.08315817047568 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 25.8557158902634 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 25.624153244084326 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 25.401657061143354 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 25.178675080953017 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 24.95425629615784 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 24.720479944250084 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 24.497444971748024 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 24.267800056806177 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 24.03742403172432 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 23.811141654064784 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 23.580869356791176 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 23.354120903408404 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 23.12781551906041 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 22.90247951854359 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 22.675946950912476 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 22.443649284910446 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 22.213373539494533 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 21.984024758477812 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 21.756470753596382 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 21.526047184353782 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 21.2957434384328 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 21.079338332202948 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 20.85026597093653 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 20.619613282177426 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 20.39388481053439 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 20.16067449251811 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 19.93138595989772 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 19.70525811625793 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 19.478453661266126 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 19.247575562933214 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 19.023731009713536 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 18.79761818331531 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 18.568070334903265 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 18.33977217634185 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 18.115746815999348 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 17.890244712514328 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 17.660039909550402 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 17.431022035397163 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 17.203021418663763 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 16.97797393798828 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 16.752271788460867 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 16.52356531864076 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 16.29458163678646 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 16.066128394400426 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 15.838087925544151 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 15.608140949074548 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 15.381856506521052 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 15.153387256134723 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 14.925478209310503 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 14.698380655712551 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 14.46862647112678 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 14.241156092525399 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 14.017219833705736 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 13.79299304811217 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 13.57132795878819 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 13.34537594030935 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 13.120436299015099 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 12.893318673113843 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 12.667366769578722 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 12.442585238094987 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 12.214289648892128 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 11.987411680675688 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 11.761770261300578 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 11.535820436157636 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 11.30803656578064 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 11.082318542808887 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 10.856192990353232 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 10.629838499368406 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 10.401698100102411 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 10.175699426281838 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 9.948681158897204 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 9.724035258505754 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 9.497196209581592 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 9.271423804685005 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 9.043784141540527 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 8.817236490131165 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 8.590497455479186 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 8.3649834621172 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 8.139180421829224 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 7.912781744292288 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 7.685813751565404 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 7.4597951537834675 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 7.234031313941592 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 7.007591859828791 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 6.78210088785957 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 6.557245626784207 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 6.331182646196942 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 6.104166252764664 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.877275491582937 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.6505142620631625 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 5.424938093532215 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 5.198252413905946 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.972821543725689 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.746092051767104 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.5198714468214245 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 4.293776495022009 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 4.067338864881914 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.841027100880941 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.6147521682407544 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.3888706645450077 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 3.162693372336767 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.9367279917161095 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.710526004750678 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.4846940116276817 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.2585662540636564 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 2.032755674492002 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.8067807455857594 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.580889029824054 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.3552506731957505 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.1293519460237942 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.9034970877121905 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.6775598066107271 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.45165735543376273 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.2258238744496101 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   45.1s finished

    1999 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  11.011 seconds)

**Estimated memory usage:**  1893 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn.github.io/main?filepath=examples/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
