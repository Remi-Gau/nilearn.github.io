
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f3d33dcf910>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 186.27166748046875 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 32.17403197288513 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 29.99690294265747 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 29.289829174677532 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 28.75260901451111 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 28.416312217712402 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 28.120013316472374 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 27.779763800757273 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 27.615549087524414 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 27.434053791893852 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 27.220224857330322 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 27.058242949572477 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 26.860506693522133 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 26.691312074661255 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 26.57984794889178 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 26.422025044759117 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 26.273717284202576 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 26.091109051423917 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 26.122406588660343 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 26.03645031075729 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 25.92855191230774 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 25.790245362690516 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 25.641970981251113 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 25.487725060919058 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 25.336150328318276 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 25.155802726745605 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 24.99603977570167 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 24.84120442249157 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 24.684764419283187 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 24.537466567138143 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 24.393854697545372 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 24.240494435833345 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 24.078621447086334 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 23.93327275911967 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 23.78370146190419 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 23.631022759846278 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 23.472351895438297 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 23.31572687948072 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 23.168494350031803 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 23.033695343213207 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 22.90493679046631 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 22.762506583841834 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 22.619797922316053 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 22.47424135651699 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 22.327628114006735 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 22.177543931537205 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 22.029901452686477 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 21.88232013519774 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 21.741261800130207 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 21.588601881143997 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 21.434276819229126 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 21.287505430333752 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 21.140161936099712 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 21.013042877305228 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 20.8672120836046 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 20.720656329935245 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 20.596114090510778 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 20.4555269375182 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 20.311041322247732 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 20.176727226224994 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 20.028234322865806 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 19.88050808281195 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 19.73864590737127 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 19.599582301245793 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 19.453612446784973 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 19.309304732542774 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 19.1686185056513 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 19.021713484579056 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 18.87928823863759 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 18.74097814767257 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 18.60192574773516 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 18.458630309978002 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 18.317943572998047 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 18.175503528281435 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 18.034933670147044 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 17.894703547159832 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 17.751491998371325 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 17.605951142001462 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 17.462967524161705 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 17.321201931072185 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 17.182014226913452 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 17.036613596810234 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.899182575504955 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 16.776536300957922 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 16.63894019808088 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 16.542926577960746 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 16.40053134740785 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 16.25508906649447 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 16.11236537586559 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.968421630645066 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.82669324345059 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 15.683773645987877 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 15.542621301568074 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 15.400779852303126 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 15.257694827749374 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 15.113555017270542 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.969453593095142 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.835462230996987 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.693155551443295 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.551478306452433 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.410331726074219 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.269536835132259 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 14.127294661952 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.984588750357767 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.843338599571815 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.698543582643781 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.555313663662606 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.41586365878025 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.273347598535043 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.133993037250063 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.992266416549683 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.850251863668632 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.707854390144348 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.56562661702654 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.423742060075726 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.281482188597968 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.13878267386864 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.995512096290915 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.852477057505462 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.709218526086888 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.564422766367594 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.421407161665357 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.277983466132744 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.134235510011997 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.99204114175612 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.847663640975952 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.705037699805366 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.567016686041523 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.422075033187866 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.277369148047395 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.133575237714327 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.989530082877355 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.845738613244258 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.701285184774184 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.557470246927062 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.41315464620237 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.269307529225069 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.125509980821262 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.982174666031547 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.83890478216487 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.695347343172346 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.549694133988508 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.405286956840838 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.26032362117634 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.114858534601 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.969869679418103 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.825760139177923 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.6807171276637485 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.53577606098072 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.391235178749033 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.246666034062703 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.102764147006913 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.958734738199334 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.813625346601399 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.6689760344369065 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.525148930088167 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.381363654747988 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.236812869454645 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.092751222320749 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.94879739089582 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.804439961910248 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.6597248841516725 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.515019134238914 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.370628702128592 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.225283866975365 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.079843983505712 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.934599296156182 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.789209357278789 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.643984022594633 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.498872629989534 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.353800170561847 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.2087057487309325 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.063156499419102 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.918548856856506 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.7739011665870406 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.6289378574916293 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.4838001511313696 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.338825522169555 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.1942608999402333 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.0494765369585775 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.905416409174601 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.7603629267676757 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.615378812119201 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.4704181379307815 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.3255029968593433 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.180176541611955 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.0349273476549374 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.889503654949168 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.7441664858067287 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.5991181810066182 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.453713203731336 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.308409283922605 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.1628481447696686 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.01750793111139 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8721158406169145 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7268843589684901 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5815605241425182 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.43617990053244654 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.29078846989255963 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.14539075976041094 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   29.1s finished

    1989 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  11.491 seconds)

**Estimated memory usage:**  1924 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
