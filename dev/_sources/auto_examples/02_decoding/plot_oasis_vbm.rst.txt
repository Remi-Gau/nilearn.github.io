
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f9717f98400>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 148.62537384033203 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 25.3530113697052 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 23.59860062599182 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 22.803359587987266 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 22.363385677337646 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 22.169883728027344 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 21.909279505411785 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 21.691955055509297 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 21.51298713684082 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 21.36591468916999 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 21.247377634048462 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 21.11320762200789 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 21.01559019088745 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 20.974400905462414 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 20.828640256609237 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 20.696391582489014 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 20.563171982765198 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 20.452731749590708 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 20.32947081989712 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 20.187300719712912 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 20.05567502975464 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 19.926986512683687 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 19.797997583042495 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 19.665767825168114 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 19.556835969289143 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 19.450246572494507 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 19.335593902147735 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 19.213769762604326 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 19.189241920198715 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 19.058867676504725 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 18.942854324976604 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 18.820257879072617 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 18.69384741783142 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 18.59297084085869 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 18.470367179197424 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 18.358372960771835 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 18.24416094356113 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 18.122849838153737 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 18.01125014455695 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 17.89273595809937 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 17.786462783813477 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 17.673059446055714 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 17.5600951058524 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 17.444382251695146 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 17.34747167067094 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 17.239531066682606 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 17.13100522497426 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 17.01543676599543 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 16.899038751920063 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 16.78408231540602 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 16.670581340789795 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 16.556338020399505 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 16.44468910877521 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 16.33533089565781 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 16.22696915379277 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 16.116440166126598 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 16.00376088278634 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 15.89190509863067 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 15.778533623136322 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 15.663635500406814 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 15.547916491826376 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 15.435298055898949 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.323414925606018 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.214567074700007 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 15.101626932621002 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 14.989201398996208 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 14.881794315395933 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 14.775240951509618 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 14.664796492632698 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 14.55009312906127 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 14.435344287327359 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.323346634985695 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.214960310194227 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.107963829824369 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.000885570371473 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 13.892486890157064 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 13.785103358720479 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.67514444016791 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.566090045831142 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.457948735997647 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.347899794578552 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.24105900305289 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.127465265553171 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.015114183885505 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 12.903088115510487 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 12.789025951834287 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.693306301915367 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.594465398240365 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.484345999631014 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.372301444578707 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.261362844043308 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.147784854029561 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.03474615967792 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 11.924905641104587 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.814948295025115 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.704497475373119 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.592938522497812 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.48035797138804 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.368138790130615 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.257532664019651 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.147748708724976 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.036889708868348 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 10.9263422535915 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.81559693234638 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.706526903005747 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.597648597898937 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.486891017769867 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.375292548509401 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.262486263557717 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.151156565464964 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.038801995190708 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 9.927836669457927 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.818008882658821 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.706070119300774 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.595377436855383 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.485103109608525 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.376887707874692 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.265471109977137 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.154832961195607 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.04343530510654 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 8.933621088663736 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.822789058212408 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.71191873315905 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.601120136617645 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.489445809395082 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.377785444259644 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.26706968413459 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.158644218144454 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.04947729408741 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 7.940072887627653 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.830476412406334 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.72080804009474 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.612002603935473 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.509403865140184 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.402626546461191 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.292300480383413 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.183031979729147 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.074195745217539 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.96288816134135 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.849806445965664 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.7390330859592975 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.625730644726584 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.512249510053178 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.398654727669029 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.285359329647489 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.172614549768382 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.060757849314441 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.948090245123623 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.834828937375868 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.721839021516327 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.608877261479695 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.4960174323707225 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.382905056602076 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.269682422962064 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.156670527024702 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.044246996602705 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.931875369487664 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.81971086210506 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.707094856455356 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.594619028223385 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.482119560241699 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.369702013383001 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.2571009029576805 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.14441656773807 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.03201434670425 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.9193291447379375 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.806723172406116 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.6940869899567015 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.5818101337977817 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.469737263120843 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.3574047509361717 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.2449954950321485 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.132768747418426 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.0205250365196625 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.908232277837293 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.796018975121634 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.6857979731126265 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.573591061231107 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.461594142270892 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.349841637318361 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.238408989376492 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.1268348838742925 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.0153438258957075 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.903570906060641 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.7927259362262227 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.680489527212607 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.5683033697066768 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.4561133703446005 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3439482120757407 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2317339919862293 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.1196525849794086 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.0076728978082148 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.8956501086552937 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7838683338362935 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6720121496731474 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5600407062432705 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.44799943846099227 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3359612656123747 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.22396192165336226 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11197624014849639 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   22.4s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  59.654 seconds)

**Estimated memory usage:**  1908 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
