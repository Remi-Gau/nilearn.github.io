
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-90

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 148-150

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 150-163

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-166

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f14334fba90>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-229

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 168.3521270751953 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 25.638157606124878 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 23.630016803741455 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 22.7742391427358 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 22.27504253387451 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 21.927104473114014 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 21.708162864049278 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 21.583327293395996 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 21.41487693786621 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 21.280085775587292 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 21.13196349143982 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 20.990981405431576 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 20.84141667683919 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 20.693458245350765 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 20.559264523642405 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 20.453906536102295 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 20.33036732673645 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 20.210961762596583 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 20.09328476587931 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 19.969022173630567 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 19.840201377868652 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 19.709269160316104 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 19.584462447599932 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 19.47313909945281 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 19.355743408203125 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 19.240338563919067 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 19.122540565637443 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 19.013526059963084 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 18.907861164637975 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 18.80180846411606 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 18.68520991007487 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 18.566530596825384 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 18.464028239250183 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 18.488659208471123 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 18.375743234858795 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 18.292505877358572 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 18.18217881520589 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 18.069301888749404 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 17.955944914566846 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 17.843235535499378 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 17.742125511169434 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 17.633338678173903 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 17.52382773444766 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 17.407105484674144 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 17.28931065039201 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 17.174098756578235 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 17.057361582051154 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 16.949652884868865 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 16.842468698819477 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 16.73102608992129 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 16.62052631378174 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 16.513981131946338 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 16.396717860148502 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 16.281041608666474 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 16.163216908772785 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 16.051375605843283 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 15.93745483670916 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 15.821797960682918 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 15.703587606035429 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 15.591527563030436 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 15.481505870819094 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 15.367018414325402 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.249798820864768 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.134241168461147 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 15.019284337759018 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 14.905590259111845 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 14.790795506853046 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 14.677699163778504 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 14.56416392326355 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 14.458449657412542 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 14.347094774246216 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.233959745353376 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.121324327256943 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.012530140680811 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 13.900432174270216 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 13.787271181742351 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 13.673504289827848 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.560013346857838 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.44810917438605 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.334663855878611 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.221958637237549 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.108412030302448 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 12.995163527930655 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 12.883614252848798 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 12.77176326797122 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 12.66058940045974 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.548022808030593 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.437594263032937 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.331428614529695 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.220564625236426 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.119886159896852 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.008628546536624 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 11.90004142470982 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 11.788263551650509 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.675947843713963 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.56404383558976 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.451830764611561 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.340911034456234 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.234157421150986 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.12514927652147 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.01347804069519 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 10.902798803726045 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 10.793127274980732 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.684111197017929 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.573166920588568 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.46210097131275 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.352041100555995 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.240278689660759 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.128478394614326 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.017800648278053 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 9.908025481484154 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 9.797291233732894 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.6884138243539 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.577052105844547 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.466489306667395 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.355973834576814 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.246066841585883 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.13595294748616 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.025827997821873 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 8.915578160967145 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 8.804486910502115 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.69333766117569 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.582132413739064 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.470514311053888 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.361171568593672 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.250296831130981 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.139793403564937 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.030244502495593 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 7.920790940523148 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 7.812247481457023 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.7012598881354695 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.591001665319195 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.480908747875329 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.370969189737076 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.260496146643339 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.1493941854547565 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.038486256318934 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 6.928853158533138 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.8186003505319785 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.708158499902958 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.597365753991263 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.486534999617448 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.377277340687496 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.266939438306368 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.156622052192688 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.047936661490079 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 5.938533861343174 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.828656121987064 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.718919457616033 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.60861297261795 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.498307466506958 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.388411918223299 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.278634247026945 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.168654929578694 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.0584935863296705 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.9483368781305135 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.838413415811001 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.728013523065361 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.617528577394123 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.507131023227044 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.396821022033691 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.287157667349584 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.177249352137247 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.067278396863879 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.9571293737830184 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.847426530086633 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.737405613244298 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.627089404774283 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.517135938008626 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.4068876836426862 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.298532556085026 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.188682907506039 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.079090988913248 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.9691816024008513 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.8589157099011304 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.7486770834241594 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.638488390228965 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.5282871601945263 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.4184769941179938 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.3085417161440716 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.1984464857313366 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.088729219542024 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.978950458568531 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.869081680891944 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.7590329958044963 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.6491081650192674 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.5390910820294452 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.4290699640059854 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3190584537830758 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2091313745609666 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.0991215956838507 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.9891117417999588 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.8791917065779368 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7693265398549292 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6594106487392151 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5494778461945362 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.43959449262035133 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.32972877037706716 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.21984077944900052 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.10994347016416003 seconds remaining)
    1977 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  57.287 seconds)

**Estimated memory usage:**  1923 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
