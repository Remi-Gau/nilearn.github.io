
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f5efc85ee50>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 142.7602767944336 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 24.85308027267456 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 23.777066230773926 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 23.28127932548523 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 22.73991298675537 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 22.50972819328308 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 22.444475332895916 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 22.153443915503367 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 21.990354537963867 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 21.85281149546305 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 21.788942575454712 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 21.60955986109647 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 21.51564335823059 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 21.393523949843186 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 21.27442697116307 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 21.129408995310467 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 20.953973650932312 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 20.856748538858753 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 20.806731780370075 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 20.732119246533045 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 20.627777338027954 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 20.48177435284569 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 20.36550073190169 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 20.249428075292837 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 20.12725591659546 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 19.99215316772461 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 19.856850825823273 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 19.72634047932095 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 19.615181718553817 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 19.485975388822883 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 19.339150428771973 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 19.19840654250114 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 19.113228678703308 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 19.025132648872606 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 18.920050046023203 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 18.82664496558053 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 18.722648594114514 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 18.619549029582256 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 18.48289463394567 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 18.362785742833065 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 18.237385749816895 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 18.113049239647097 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 17.998342286972772 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 17.886637116587437 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 17.778093988245182 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 17.679564317067467 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 17.55658333197884 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 17.44729410333836 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 17.34277105331421 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 17.23695617305989 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 17.11135697364807 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 16.986054013757144 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 16.885979945843037 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 16.772251934375404 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 16.67052040276704 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 16.57251373204318 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 16.463984421321324 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 16.354137646524528 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 16.237544487262593 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 16.111128742411985 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 15.987305720647177 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 15.874479903549446 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.765020278192335 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.668328341983612 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 15.560463964939117 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.445924978989822 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 15.336936481071241 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.230690742606548 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 15.118468480951647 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 15.003886288490849 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 14.892720903669085 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.771063844922564 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.647528330485025 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.535056352615356 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.455257054921743 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 14.354082345962524 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.232695027401572 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 14.116761111593865 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 14.005255900896513 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.892164710201794 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.77949047088623 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.663024540300723 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.539625295778599 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.418132698679544 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.298135666620164 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.179217001971077 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 13.062372107838474 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.946123367068411 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.824128324335272 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.705861013926816 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.591229650709366 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.473090805850186 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.365062298982041 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.255858464907575 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.141524573589892 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 12.027436758342544 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.915319959322611 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.801255648898096 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.68428703716823 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.562925054569437 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.445605754852295 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.329020596966885 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.214292311200909 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.09432457951666 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.98009285560021 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.863723153159732 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.748509236101835 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.633718851570771 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.522556631653398 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.409063767949375 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.295158364556054 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.184728996173757 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.072658147130694 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.95888713397811 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.84116929037529 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.725718446399854 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.616284789710209 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.503864394293892 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.389124534897885 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.280833144147858 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.169228076934814 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.055465499231639 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.940251897593015 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.826837119048204 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.713966208119546 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.601483678817749 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.48827282209245 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.374313256871982 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.26186090707779 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.146454720534095 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 8.029929344470684 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.920903633569033 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.806180506041556 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.694128920261125 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.579796780401201 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.464379866917928 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.351487776812385 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.237684255098775 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.122766111208045 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.008873569021979 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.893222195761544 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.777278445291181 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.662990687598645 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.54942005330866 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.433664255672031 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.3184679787734455 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.202023287342019 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.086837100333908 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.972132773012729 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.856050880163308 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.7401515642801915 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.626526469426439 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.512956242812307 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.399566209394169 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.288446791760333 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.174008115645378 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.06008716729971 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.945957959837215 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.831348367884189 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.71575277106567 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.599989891052246 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.484250615102164 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.368123675570076 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.252847855807813 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.138126617524682 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.0240488919344815 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.9097465894308434 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.796118580652568 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.6804168791997998 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.565193991689287 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.4502616489634796 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.335896365126671 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.220903002938559 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.1059649224915256 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.9912990208329826 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.876226152692522 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.761605165221474 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.6468159815685897 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.5315025201004544 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.4170046785024293 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.3019802835252547 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.186675988508193 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.0712578977857317 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.9558360785083042 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.8404905070429263 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.7250868436452507 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.6098676240572365 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.4947000251096838 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3795535970241464 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2645459086806685 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.1494428735030324 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.0346018831143204 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9196050961812336 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.8046287514385163 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6897024813386583 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5747238733829596 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.45981726354482216 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.34488077696204794 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.22994050353464457 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11500148437730032 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   23.0s finished

    1999 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  0.217 seconds)

**Estimated memory usage:**  1904 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
