
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fdbc28b0190>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 183.5465431213379 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 31.413768529891968 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 29.023261070251465 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 28.272727171579998 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 27.875953435897827 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 27.518744945526123 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 27.245534817377727 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.972151722226826 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.81195068359375 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 26.596398406558567 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 26.397331714630127 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 26.234820777719673 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 26.083796660105385 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.908871779075035 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.723538977759226 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 25.556957642237347 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 25.43493616580963 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 25.289907511542825 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 25.160515228907265 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 25.038930641977412 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.874250650405884 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.713721945172264 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.551656289534137 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 24.420040804406874 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 24.279529253641762 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 24.13955283164978 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 24.010302708699154 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.860891730697066 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.730432203837804 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.58956265449524 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 23.448865334192913 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 23.30465655942117 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 23.152320206165314 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 23.010002302400995 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.87978315353394 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.749707426343647 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.6009038289388 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 22.45925273122014 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 22.320129482369676 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 22.181912685051945 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 22.04885196685791 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.919680153451313 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.794348387491134 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.651547060456387 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.521107500249688 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 21.397552066379124 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 21.265131888182268 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 21.13919410807021 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.999873081843056 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.85622127688661 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.719483852386475 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.58368132161159 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 20.446870382015522 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 20.30961247660079 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 20.1716447936164 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 20.040255416523326 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.909955978393555 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.776443703132763 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.638754038975154 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 19.497399621090647 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 19.35701123873393 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 19.21687538506555 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 19.07914756190392 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.94297180856977 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.804960399866104 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.6647639641395 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.526181632822208 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.387255501391284 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 18.24931244289174 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 18.11138939857483 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.97315399987357 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.832781298059814 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.699534946017796 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.56117463765079 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.4222787393106 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 17.284565369288128 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 17.1471914115705 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 17.012855390449623 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.878739992777508 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.74045381364943 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.599987030029297 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.460960061461837 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.323274536830624 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 16.186424516769776 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 16.049065714790707 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.916292485068826 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.776707200116888 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.638747075508382 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.497060602361506 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.360088983278596 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.223441494835749 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 15.08576612158136 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.945082135822464 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.805572571293002 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.665343289679669 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.526681473380643 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.38779483238856 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.247642145943395 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.10913117077886 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.97034972364252 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.831162214279175 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.691015368641013 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.551411039689008 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.413315872544224 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.274935648991512 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.149150882448469 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.024610654363093 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.884536068016123 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.74511871514497 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.606991610395799 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.467574249614369 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.329029001631179 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.192128232547216 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.053535822218498 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.914921685269004 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.7749750510506 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.635574192836367 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.495242041400356 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.354607691199092 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.218771928498725 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.08043877283732 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.942167230874054 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.802681160754846 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.664178538128612 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.52529319640129 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.38688702583313 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.248103274239435 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.109981672031672 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.972377344965935 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.835737028787301 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.697165177418634 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.559285520597268 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.42222743323355 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.283379070740894 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.143828192753578 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.004457809306956 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.865417368271771 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.72704696133189 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.587911837342856 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.449164769632352 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.309399536677768 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.170300872613351 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.03159528383067 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.893597474465003 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.754132469495137 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.614698146951609 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.475600823964157 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.336864622271791 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.198474143002485 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.059859581441687 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.920946518580118 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.781959007907387 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.643134844930548 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.504139812943204 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.36553794997079 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.2267894129599295 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.088290575223091 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.949542914226556 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.810200307942643 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.671460129180044 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.532737851142883 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.394082088648163 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.255177450768741 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.11655173418712 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.97775334265174 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.839209455432314 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.70028915749975 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.561973723108897 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.423366137913295 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.284880566173756 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.146194710451014 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.008001683051126 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.871202064114948 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.7343538427628533 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.5958837805123167 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.457644326346261 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.3193771947513926 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.1813226096374168 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.0431461709268977 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.9049666713735913 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.766806920369466 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.628528305180165 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.4899446414067192 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.3516458305504804 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.213228225708008 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.0750195657884754 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.9365560880271337 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.798124063461222 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.659648337262742 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.5212083619738381 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3830428374441046 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2455365295809602 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.1077118019262948 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9702687275842063 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.831706074095264 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6931714339134021 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5545800656688457 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.41597429265830727 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2773420329045768 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13868071326059314 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   27.7s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  9.484 seconds)

**Estimated memory usage:**  1885 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
