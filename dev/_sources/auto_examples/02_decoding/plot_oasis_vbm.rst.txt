
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-90

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 148-150

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 150-163

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-166

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f2fcf9e0fd0>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-229

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 157.4563980102539 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 27.539005994796753 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 25.583461046218872 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 24.933755000432335 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 24.464765548706055 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 24.043784379959106 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 24.078639586766563 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 23.81019312994821 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 23.568838119506836 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 23.34793872303433 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 23.253190994262695 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 23.11793140931563 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 22.98051619529724 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 22.842403118426983 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 22.87292402131217 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 22.71872933705648 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 22.594406247138977 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 22.487113700193518 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 22.382880449295044 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 22.24866284822163 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 22.109103441238403 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 21.969124146870204 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 21.930370525880296 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 21.798852029054064 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 21.686644236246742 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 21.561352968215942 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 21.450884782350983 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 21.32660816333912 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 21.206195286342076 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 21.070894101570392 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 20.98764991760254 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 20.84486667571529 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 20.69976031780243 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 20.56406555031285 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 20.430369910071878 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 20.30217800821577 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 20.175434218512642 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 20.04593145525133 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 19.914183252736144 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 19.815285010215565 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 19.67905044555664 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 19.54131411343086 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 19.41284242130461 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 19.278972503750822 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 19.14052677154541 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 19.013078689575195 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 18.878972177920136 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 18.776785262087557 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 18.6453507343928 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 18.512003519097153 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 18.384084463119507 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 18.257382692075243 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 18.13548731803894 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 18.011736968778216 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 17.94763644536336 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 17.84809376976707 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 17.717216696058003 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 17.586180770606322 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 17.459320125908686 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 17.33223849231914 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 17.21253514289856 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 17.085346655767474 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 16.958878824787753 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 16.869327923608203 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 16.745881289243698 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 16.618775092638458 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 16.495768236391473 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 16.368154031127247 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 16.24475286988651 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 16.119838158289593 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 15.991950682231359 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 15.884201771776441 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 15.75877719455295 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 15.633339124183133 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 15.508356745178634 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 15.389571984608969 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 15.263934951079518 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 15.133875577480762 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 15.00569399809226 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 14.883346195462384 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 14.77233624458313 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 14.640917148119138 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 14.51054160187884 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 14.380948555038636 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 14.255092972800846 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 14.13147082048304 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 14.006128715914349 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 13.87813501522459 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 13.762828350067139 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 13.637206993745954 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 13.510807991027834 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 13.389715181602226 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 13.261575501898061 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 13.134531746628465 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 13.010529244199711 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 12.883897229244836 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 12.769352217515308 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 12.641887168294376 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 12.516634328024729 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 12.39145634391091 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 12.267320394515991 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 12.142210729051344 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 12.014847330018586 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.889921905924973 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 11.766021801875189 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 11.648828722181774 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 11.521734305147856 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 11.395229201450526 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 11.269186814626059 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 11.143854228728408 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 11.01875866543163 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.893380186579249 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.77049251965114 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 10.654992348324935 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 10.529990484839992 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 10.403870458188264 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 10.27745715503035 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 10.151456221556053 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 10.026536157575705 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.900996346433624 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.776562690734863 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.652235941453414 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 9.53592848386921 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 9.411265270496772 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 9.286788994266141 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 9.162023591995238 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.038633940711854 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.915042122517983 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.790772140026093 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.667019219361533 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 8.547878448779766 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 8.423835852673946 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 8.299199797890402 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 8.175265708364043 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.051885060410001 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.928975131776597 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.805116653442383 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.682525135304806 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.560046133787735 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.440387736121528 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.317192384174891 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.193207605510739 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.070296566251298 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.948754163888784 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.829006711641948 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.706556542166348 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.584226520094153 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.465651178035607 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.343217347119306 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.222094980662301 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.099319934844971 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.976257891054974 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.853794348867316 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.732297289605235 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.610539179343681 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.490857362747192 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.368969104228875 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.246984269208968 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.125131350529344 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.003230933123414 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.8809897899627686 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.758688759359514 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.636248685695507 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.516078172285864 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.393733704962382 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.2707392085682265 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.148087478545775 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.025680260743924 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.9029577346075146 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.7803892976433566 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.6581828734453987 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.536031126278883 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.4162166451298916 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.29439009958609 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.1734198537366147 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.051563569477626 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.9295863888480445 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.8073162076163425 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.6850562122430692 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.5627451236021583 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.4418916967180038 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.3198278503523344 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.197689142855969 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.075488266397695 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.953347745149032 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.8312414079099089 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.7092094113749843 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.5870883605059456 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.4654450822383798 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.3432315329395272 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.2211235824384186 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.0989658445587958 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.97678542137146 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.8547056462480613 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.7325421633179655 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6104110876719157 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.48823554661809176 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3662674535954664 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.24414800875114676 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1220581315869662 seconds remaining)
    1978 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 1.302 seconds)

**Estimated memory usage:**  1928 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
