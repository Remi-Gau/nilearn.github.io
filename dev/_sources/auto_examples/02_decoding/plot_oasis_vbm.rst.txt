
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-142

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 143-145

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 145-158

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 159-161

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 161-176

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7faef9ca2d90>



.. GENERATED FROM PYTHON SOURCE LINES 177-179

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 179-223

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 197.4344253540039 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 31.008870363235474 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 28.930216312408447 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 28.112455129623417 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 27.654850244522095 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 27.224834203720093 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.976649522781376 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.720957006726948 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.498165130615234 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 26.27437933286031 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 26.129090547561646 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 26.026409040797844 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.89654986063639 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.718918763674225 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.52712801524571 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 25.331618626912437 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 25.18011474609375 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 25.10443383104661 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.961096816592747 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.801067101327998 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.62323021888733 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.444552478336153 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.276544809341434 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 24.240222557731297 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 24.11681238810221 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.99683427810669 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.839538372479954 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.716045017595643 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.5647657598768 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.42602604011009 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 23.310078541437786 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 23.155186091699907 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 23.02320510149002 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.873497702858664 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.716359573252063 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.559709855488368 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.40308388074239 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 22.272448301315308 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 22.12985538181506 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 21.981499604689773 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.835036277770996 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.68707788862833 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.544529914855957 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.406092494033103 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.254047783938322 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 21.10794160101149 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 20.963178105976272 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.819161374518213 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.68220031261444 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.539676637065654 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.39450240135193 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.25363207798378 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 20.106340610063995 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 19.960488809729522 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.818520528298837 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.704563292590052 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.563509600503107 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.420659951996385 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.277395684143592 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 19.135780770899885 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 18.99763329823812 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.86357930840039 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.73208595860389 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.5973521376413 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.46201005578041 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.325481524834267 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.186275258208767 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.04708740248609 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.90792155265808 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.76707637482795 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.62676794188363 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.488667179161393 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.35026380750868 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.20869452659398 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.06846538749901 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.92895531654358 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.791315530475817 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.664097677577626 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.52550628246405 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.388002211534523 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.248159170150757 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.11006170732004 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 15.971994138345485 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.833189791943653 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.692750839960008 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.554695325739244 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.415071254552796 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.27676408592312 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.140694271434437 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.003785736105414 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.868508418401083 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.731761264277027 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.594097500262054 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.458412442156066 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.32060827600195 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.181466190438522 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.042256434758503 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.903962808785979 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.76719939951994 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.629733239761505 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.493768215179443 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.358949097076264 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.221665770399804 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.085152082072879 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 12.94831840808575 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.811978930518741 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.676098360205597 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.539738129232532 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.403449535369873 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.267204157803036 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.129704475402832 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 11.992908187814662 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.857088463647024 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.721693872350507 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.585626041680051 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.45027324427729 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.31815819904722 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.186118718905327 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.051175073041755 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.91547180824921 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.780030091603596 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.645352091671022 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.514892527314483 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.3815158169444 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.247562508429251 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.11530156135559 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.981871623841544 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.847383919663317 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.712871477007866 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.579552140346793 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.444536924362183 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.31026186469857 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.176745559229994 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.042677359473437 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.908947314789046 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.774766807202939 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.639265733606676 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.503756436118245 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.369045972824097 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.23642918360319 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.104933261871338 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.970629607532041 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.8368860264899025 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.702122348171848 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.568146718872918 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.433035768311599 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.297407849194252 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.163151552888001 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.027353389843091 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.892048589335192 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.756664435068766 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.621516052460828 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.486148407584742 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.353072470309688 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.220058741507592 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.087775745699483 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.953121680479783 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.817724997830239 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.682421319092375 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.546745910584551 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.411603569984436 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.276297092437744 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.141426975344434 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.006888143855369 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.871851514025432 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.737007011066784 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.60282627358494 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.467243038965557 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.3323511850266225 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.196822379467755 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.061350233414594 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.9260424926267032 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.7907574620357782 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.655786241410096 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.520693680335736 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.385482106889997 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.250124801288951 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.1148168986800027 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.9796838010295055 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.844138786113462 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.7086598873138428 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.573000616790181 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.437336182856298 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.3018634684098878 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.1664373978324556 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.031181928273794 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.8959055639082387 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7605066885922682 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6252420709488238 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.4903613448773743 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3552356770164087 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2198668400030486 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0844268600145974 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9489221696408918 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8133563946202859 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.677890569735796 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5423822597581512 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4068057307132005 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2712409062819048 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1356309562472243 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   27.1s finished

    1993 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  7.086 seconds)

**Estimated memory usage:**  1938 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
