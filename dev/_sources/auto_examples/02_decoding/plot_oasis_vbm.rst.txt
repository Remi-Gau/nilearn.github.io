
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 56-65

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 66-68

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 68-91

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 92-94

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 94-110

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 111-113

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 113-148

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 149-151

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 151-164

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 165-167

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 167-182

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f5182befee0>



.. GENERATED FROM PYTHON SOURCE LINES 183-185

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 185-230

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 155.31063079833984 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 26.384140014648438 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 24.515547037124634 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 23.763927221298218 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 23.421727657318115 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 23.197720527648926 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 23.279168367385864 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 23.087872743606567 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 22.882604598999023 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 22.711950672997368 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 22.52115511894226 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 22.41120932318948 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 22.265444835027058 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 22.125073011104877 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 22.000615698950632 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 22.01639191309611 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 21.880374908447266 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 21.745727146373078 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 21.60188145107693 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 21.449443804590327 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 21.30134868621826 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 21.14938982327779 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 21.01790790124373 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 20.866672256718513 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 20.784636179606117 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 20.651545763015747 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 20.532477598923904 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 20.405719333224827 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 20.289836474827357 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 20.153754349412587 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 20.035113652547203 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 19.917600754768618 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 19.855909645557404 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 19.744434681805696 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 19.62506937980652 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 19.499211481639318 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 19.37263168228997 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 19.23843946972409 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 19.11532699434381 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 19.189562779206497 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 19.429808616638184 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 19.286165504920774 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 19.14256637437003 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 19.00136496299921 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 18.87006133252924 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 18.734627776675755 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 18.60298890652864 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 18.469300975190833 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 18.387799501419067 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 18.259632864776922 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 18.127790451049805 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 17.995940755395328 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 17.858884151165302 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 17.721280223918413 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 17.589736885494656 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 17.456843397834085 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 17.326882021767755 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 17.2175544019331 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 17.085983950516273 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 16.953974089380036 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 16.81307395299276 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 16.674371992955443 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 16.53997515862988 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 16.40351802962167 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 16.27626195549965 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 16.14945618922894 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 16.04124809033943 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.911096985660382 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 15.780862906399895 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 15.65626006886579 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 15.529100894927979 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 15.393809966638054 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 15.260426415337456 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 15.128354915200848 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 15.000133984797708 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 14.88520860671997 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.758549351441232 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 14.624402399186964 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 14.494287429711758 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 14.363307684282713 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 14.230530023574829 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 14.10056480066276 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.970376351984536 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.843717575073242 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.727736132485525 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.60261851198533 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 13.47795852949453 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 13.354910825860912 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 13.231439200314608 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 13.110742309120264 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 13.019243054919773 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.897099185775923 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.88412208142488 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.783821503321331 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.659961690293981 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 12.537353565818385 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 12.412468830744425 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 12.287687006684923 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 12.168214180031601 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 12.04393782037677 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.93031096458435 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.80750835059893 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.681708635068407 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.5565492412419 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 11.43427034524771 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 11.310855184282575 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 11.187414736117956 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 11.065428865290134 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.94366529252794 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.831267304376725 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.70926588231867 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.58653142860344 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.468859297888619 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 10.347718597513385 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 10.225230392656828 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 10.099838132443635 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.976162852912113 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.855133509024595 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.740532652806428 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.619571908181456 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.498411019643147 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.378790762798847 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 9.25998652567629 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 9.140242413776676 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 9.018872376411192 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.897063827514648 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.782496592355153 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.662571355113833 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.54143787920475 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.422538864520169 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 8.303530271236713 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 8.183687259222715 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 8.065254074154478 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.949088127093208 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.830020598511197 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.714076386557685 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.592786564546473 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.473650218796556 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.353450253389884 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.232483846678151 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.112733364105225 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.993234056107541 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.873578995046482 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.751720215057159 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.652506695853339 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.551059163849929 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.431448453093228 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.310641123324024 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.1898823622110735 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.068632671497013 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.9484318892161046 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.829185916888004 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.713181470569811 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.593874413982716 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.474359704302502 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.354669186376757 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.23509947458903 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.115157080304091 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.995834480358075 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.875880371849492 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.758051335811615 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.638889029899739 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.519620683458116 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.400389018965645 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.281158487971236 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.162097880334565 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.043136194527867 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.9241558848740814 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.804799125308082 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.6870618261529144 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.572099994210636 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.453057983465362 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.333892944247224 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.214987509512488 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.0957139689346844 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.976199660982404 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.857459089972756 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.7395351970263118 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.6203100333053073 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.5016566614864924 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.382346285714043 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.263184291881751 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.144100988304222 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.0248560788201506 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.9055141366046406 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.7863762958629712 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.6679451696334346 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.548702373861629 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.429523265108149 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.310251270021711 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.1909721274124947 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.0716882001667123 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9524881641070048 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.8333148832765885 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.7144520921805471 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.595899991500072 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.477879558290754 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.35832812580360374 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2388443561515423 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11940270213026498 seconds remaining)
    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 0.788 seconds)

**Estimated memory usage:**  1902 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
