
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-142

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 143-145

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 145-158

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 159-161

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 161-176

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fb0d5b2b640>



.. GENERATED FROM PYTHON SOURCE LINES 177-179

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 179-223

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 289.6857261657715 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 52.53541851043701 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 48.10527276992798 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 47.06233437856039 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 46.232810497283936 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 45.6024055480957 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 45.212237437566124 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 44.94303567068918 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 44.6949520111084 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 44.21971607208252 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 43.88875770568848 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 43.55823735757308 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 43.30610958735148 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 43.11558255782494 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 42.819411175591604 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 42.54229942957561 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 42.39879775047302 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 42.12087085667779 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 41.88076421949599 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 41.64233180096275 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 41.457756757736206 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 41.26548389026097 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 41.026986902410336 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 40.7662469200466 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 40.489460468292236 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 40.25167226791382 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 39.99107403021593 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 39.73775631410104 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 39.49189632279533 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 39.25951969212499 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 39.046142737070724 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 38.78915129169341 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 38.56338804960251 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 38.335935953891635 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 38.08911929411047 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 37.94773834092277 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 37.694456285900536 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 37.42463474015932 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 37.22945978766994 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 37.01071490385594 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 36.802937507629395 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 36.57762542585047 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 36.390759036654515 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 36.14486933308978 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 35.90188615972345 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 35.65907168388367 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 35.41588989548062 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 35.18545325258945 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 34.96479030450185 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 34.7358152379795 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 34.49481511116028 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 34.26324276363148 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 34.01915018375104 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 33.88268609316844 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 33.62939369236982 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 33.4008920842951 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 33.18285472052438 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 32.94677856930515 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 32.72258740457995 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 32.4676235530336 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 32.232728719711304 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 32.01924135645882 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 31.777816841679233 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 31.559677339735483 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 31.34539505839348 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 31.111957641748283 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 30.88479521780303 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 30.65272284621623 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 30.409835857503555 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 30.18520947470181 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 29.940335069383895 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 29.70508205722755 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 29.47171401977539 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 29.245701551437378 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 29.013241671227117 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 28.778866132100426 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 28.556015478937248 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 28.326926178746408 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 28.098408069366062 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 27.855423079261296 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 27.613286018371582 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 27.373628957771963 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 27.14859940366047 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 26.915951254856154 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 26.68626741000584 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 26.486446058048923 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 26.260168424872464 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 26.038948922321715 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 25.799879550933838 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 25.573399969701015 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 25.352730724546646 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 25.127716310731657 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 24.909925429717358 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 24.690480073293052 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 24.461888531421092 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 24.247600680903385 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 24.009495000044502 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 23.771219174886486 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 23.539882158746526 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 23.314808281985194 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 23.082587480545044 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 22.851508537141402 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 22.617764094296625 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 22.38811295935251 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 22.163065030024605 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 21.926426217669533 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 21.69835778002469 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 21.480308171744657 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 21.252785744490446 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 21.019166298962514 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 20.781686392697424 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 20.54416203284049 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 20.3118679693767 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 20.081602278008926 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 19.84619214241965 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 19.616511137589164 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 19.39611689797763 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 19.16935443878174 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 18.939213675967718 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 18.709008657631756 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 18.481565634409584 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 18.25886302151956 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 18.026331096399026 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 17.79214455054058 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 17.561660428200998 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 17.333218145370484 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 17.10116231630719 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 16.866603504015703 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 16.639390602707863 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 16.416690565818964 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 16.181359364436222 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 15.952698141563939 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 15.716221491495768 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 15.485045779020266 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 15.251315821462603 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 15.017810706739072 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 14.791532965267406 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 14.559980011334384 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 14.329192821530329 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 14.101044335811258 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 13.869246482849121 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 13.63785407898274 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 13.406880402229202 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 13.174989028410478 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 12.942334678437975 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 12.710210800170898 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 12.479749594649222 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 12.248091700936662 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 12.015067094081157 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 11.785355790349461 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 11.553112506866455 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 11.324604910730526 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 11.096883773803711 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 10.86378380675721 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 10.63476386937228 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 10.403147566703058 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 10.175962912730682 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 9.947254838457532 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 9.716351970841613 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 9.486488552213466 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 9.255461812019348 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 9.022955106652303 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 8.791014091468151 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 8.558823254942162 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 8.328387946617312 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 8.096816532539599 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 7.864563143396952 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 7.635255630858644 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 7.403279486156645 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 7.17201067992216 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 6.941360613879036 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 6.7122454963929465 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 6.481027375820072 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 6.248856216496815 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 6.0199536866155166 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.78856018611363 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 5.558096441355618 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 5.326535245119515 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 5.095282286740421 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.863625779498223 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.632471693886651 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 4.4009507782551465 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 4.169096663757995 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.936949956612509 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.7048950609953506 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.4729984257672286 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 3.2407114557040635 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 3.0095292986395523 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.7777784733062094 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.5457534588203226 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.31386221082587 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 2.0826868798720275 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.8511008024215698 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.6198239660015994 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.3888729798425106 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.1573206277994008 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.9260829030251015 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.6946505229485217 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.4631269483855277 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.2315411232224661 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   46.3s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  33.748 seconds)

**Estimated memory usage:**  1926 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
