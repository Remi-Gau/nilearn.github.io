
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fd0a8e89b50>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 208.70685577392578 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 34.53111433982849 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 32.044737339019775 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 31.348441123962406 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 31.079087495803833 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 30.62120532989502 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 30.483020146687828 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 30.328746284757344 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 29.93851661682129 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 29.620993534723915 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 29.315595388412476 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 29.176090608943596 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 29.084186633427937 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 29.071200059010433 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 28.888417175837926 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 28.73709797859192 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 28.67832624912262 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 28.476034641265873 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 28.22934529516432 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 28.080709921686275 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 27.871511936187744 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 27.668664148875646 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 27.46245947751132 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 27.280298585477084 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 27.171980381011963 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 26.990190505981445 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 26.793059018942028 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 26.613242034558898 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 26.45393136569432 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 26.36580074244532 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 26.261929035186768 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 26.145513080781505 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 25.994429647922516 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 25.832722974546027 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 25.643923535066495 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 25.488259383610316 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 25.339404529995388 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 25.175342276289655 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 25.014315040487993 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 24.84014335045448 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 24.66315460205078 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 24.477663394881457 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 24.306236970992316 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 24.12621967182603 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 23.981423898176715 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 23.806110170152454 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 23.645319586214814 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 23.473164051137072 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 23.313857634862263 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 23.153181942141785 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 23.011432886123657 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 22.86567340177648 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 22.711970494343685 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 22.5483925567483 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 22.385760263160424 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 22.235420313748445 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 22.088528905596053 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 21.941655426694634 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 21.786181137479584 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 21.637655666318988 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 21.484591086705528 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 21.333060209868385 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 21.174153581742317 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 21.033996740976967 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 20.868091613054276 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 20.701098863895126 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 20.5315404660774 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 20.368088604798956 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 20.201384909012738 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 20.040076639341272 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 19.8933310849326 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 19.74106223818282 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 19.5892940097385 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 19.43854225824957 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 19.281558655403757 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 19.120814402898155 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 18.966692146502044 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 18.81112994466509 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 18.652567019829384 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 18.497880953776686 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 18.341456294059753 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 18.194783143055293 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 18.04203507958389 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 17.897911893316063 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 17.73621995108468 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 17.583749364404117 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 17.431309195451956 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 17.270317433894366 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 17.112337892705742 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 16.954170813721216 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 16.801543262269764 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 16.651984314342123 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 16.500652717507407 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 16.343175242024085 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 16.1918524731981 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 16.0483825583207 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 15.90926961104075 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.752390930333089 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 15.60510041275803 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 15.449790345297918 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 15.302872657775879 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 15.152475130439985 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 14.998239783679738 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 14.84619029748787 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 14.69116445688101 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 14.532892545064291 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 14.376469625616974 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 14.22041145440574 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 14.065179118403682 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.91296290913853 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.756584210829303 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 13.602300633181324 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 13.445902092116219 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 13.291202032460575 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 13.139518997125458 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.98792847343113 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.830815857854383 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.674465527901283 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.517952672505784 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 12.362143969335476 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 12.207863012949625 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 12.052458516822375 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.898649528378346 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.744303990185745 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.591456067177557 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.436266326904297 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.293023582488772 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 11.137356457747812 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.98192474246025 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.829431408135465 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.678886450254 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.524276298421029 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.367908896821918 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.212826465305529 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.077118400317518 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.926459241796422 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.773656171910902 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.620939139902157 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.474428553512132 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.319813496774907 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.165277923856463 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.01026141051705 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.856339565465149 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.705262732672525 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.552037636439005 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.398559142803323 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.245308275092137 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.093952258427938 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.941215347599339 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.789055653066443 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.635657707850138 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.483188695465492 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.328999594638222 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.175722028694901 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.022808582751781 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.871402663569297 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.719255160062741 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.569261359561021 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.417343203025528 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.265626490490991 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.114183306694031 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.963318762571916 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.810887198389312 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.659401500151932 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.506501052437759 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.353470072601781 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.200982814811798 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.048832584997851 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.896012714930943 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.743846221788395 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.591553702073939 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.439626218282688 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.286988818368247 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.1343407148570686 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.9816937473998677 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.8292889935629706 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.676605918190696 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.52409191589571 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.3709300796637374 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.218206735962596 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.064998573727078 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.911756959409345 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.7587684327429467 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.6055661407324786 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.452690953793733 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.299639134793668 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.146387307874618 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.992993692663264 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.8397123864356506 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.6864468685533633 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.5330685063412315 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.3797067921823232 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.2263720830281575 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0732041739429217 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.920092762131052 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.766948687724578 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6135932815318205 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4601832912658072 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3067810535430908 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.15338816475029568 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   30.7s finished

    1999 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  19.190 seconds)

**Estimated memory usage:**  1923 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
