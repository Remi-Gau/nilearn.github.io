
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print("")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f1496bf9c40>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 216.00008010864258 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 42.11567211151123 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 39.02181959152222 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 38.02528953552246 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 37.39120626449585 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 36.866201877593994 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 36.45726132392883 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 36.11183854511806 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 35.99830627441406 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 35.90367709265815 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 35.79361391067505 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 35.65860258449208 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 35.55563100179036 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 35.3647642319019 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 35.19929807526725 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 34.99421429634094 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 34.81701397895813 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 34.63279736743254 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 34.446307049857246 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 34.27713601212753 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 34.10075569152832 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 33.901486884979974 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 33.704210931604564 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 33.51320395262345 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 33.33149894078572 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 33.15534329414368 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 32.94607664988591 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 32.75252483509205 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 32.56768454824175 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 32.392557842978114 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 32.20874706904094 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 32.020312832247825 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 31.80209845304489 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 31.573187987009685 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 31.336536996504844 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 31.118019104003906 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 30.902411063512165 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 30.687394799412907 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 30.47557538434079 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 30.263920392745582 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 30.066030502319336 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 29.87368348168164 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 29.68758265177409 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 29.486476354820784 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 29.283373377539895 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 29.078434122933285 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 28.871305206547614 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 28.676621005890215 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 28.472694198290505 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 28.265161353714614 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 28.05827808380127 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 27.863997992347265 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 27.667806130189163 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 27.486928265049773 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 27.30115955847281 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 27.1018545627594 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 26.908555371420725 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 26.7247202814671 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 26.54270443423041 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 26.36146001088417 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 26.181987762451172 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 26.000779398152087 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 25.816157848604263 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 25.636449265101596 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 25.462754398584366 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 25.288346749085648 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 25.112053762782704 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 24.93275727442841 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 24.754993284449856 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 24.56741441851077 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 24.382228783198766 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 24.197152617951513 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 24.01148944430881 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 23.82807883497787 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 23.65003286825644 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 23.471415837605797 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 23.294542689072458 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 23.110601412785517 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 22.924861944638767 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 22.740122855464115 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 22.542619943618774 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 22.348129039929237 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 22.150479590020527 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 21.959054412611994 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 21.773303610937937 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 21.582671684377335 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 21.394760287085244 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 21.20691507712178 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 21.015517711639404 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 20.822446474868258 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 20.6259773572286 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 20.431936078019195 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 20.233271692110147 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 20.03521470357013 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 19.83835829065201 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 19.647451476046914 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 19.458517332871754 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 19.27077594491624 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 19.08317283708222 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 18.897111295449612 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 18.71111035346985 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 18.518336329129664 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 18.327553660261866 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 18.136360122162163 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 17.94424812610333 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 17.75502546628316 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 17.573683725213105 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 17.39234182767779 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 17.209631160453515 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 17.025456811309954 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 16.8415845524181 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 16.660438378651936 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 16.474914414542063 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 16.290447874406798 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 16.10711367925008 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 15.923849810724672 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 15.738288945165174 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 15.553120981933725 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 15.368032794887737 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 15.18289062155395 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 14.99686336517334 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 14.811797498671478 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 14.62566734532841 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 14.437197760837833 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 14.249669313430786 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 14.059680461883545 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 13.867647640288823 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 13.676488671715804 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 13.4851233959198 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 13.299738861793696 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 13.110535126466017 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 12.921760524502236 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 12.733015356641827 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 12.542764728230642 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 12.354934727967674 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 12.165933741463554 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 11.975627001594095 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 11.7856285572052 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 11.594811183818873 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 11.403376790259381 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 11.21425918170384 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 11.026752634251372 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 10.839468532884625 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 10.651055039225758 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 10.462576376067268 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 10.273900599315247 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.086607844862218 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 9.897950890923845 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 9.709845897313711 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 9.522074168160458 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.334741353988647 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.146428316634221 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 8.959975267711439 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 8.774690154331182 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 8.58945270637413 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.404322355024277 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.218565800251104 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.033052928888115 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 7.847112495687942 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.661333183072648 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.474769592285156 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.288534810083994 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.102156062185028 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.915379930858963 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.72813300970124 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.5421802708596895 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.356624344745314 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.170741510962298 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.984350476946149 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.797726226276194 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.611228381886202 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.424593081948353 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.237850577332253 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.050441334013305 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.86274676761408 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.675323111670358 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.487945112315091 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.300610349676703 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.1138137378049695 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.926730869868614 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.739832454257541 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.5527828003161517 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.365530234116774 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.178468971304555 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.9910577483799146 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.8036160404617725 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.616385252245011 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.4293428831559454 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.2423724367263467 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.0555628645357 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.8686336467140598 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.6816600417591514 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.4947650929292042 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.3077886796368217 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.1209007145203267 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.9339330379779522 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.7470337809348593 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5601563102702805 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3734189139472114 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.18669935087462766 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   37.3s finished

    1995 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  59.682 seconds)

**Estimated memory usage:**  1897 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn.github.io/main?filepath=examples/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
