
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fa989407670>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 193.62688064575195 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 34.84885549545288 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 32.28792357444763 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 31.15381948153178 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 30.471795558929443 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 30.003573417663574 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 29.719163894653324 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 29.410672426223755 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 29.173416137695312 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 28.96425029966566 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 28.872892141342163 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 28.653041709553115 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 28.48679725329081 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 28.318363721554096 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 28.16421450887408 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 28.010530869166057 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 27.836477041244507 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 27.69452846751494 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 27.528457906511093 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 27.36685583465978 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 27.214409351348877 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 27.062621320996964 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 26.912248091264207 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 26.754535021989245 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 26.595995267232258 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 26.42966365814209 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 26.269022611471325 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 26.116965179090148 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 25.95734650748117 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 25.8065419608149 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 25.650821844736736 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 25.485033189096757 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 25.3349227309227 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 25.18133118658355 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 25.092285576988672 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 24.935762439455306 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 24.77722194459703 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 24.620049347748626 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 24.46774340930738 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 24.311873753865562 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 24.162677764892578 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 24.10197298119708 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 23.948915106909617 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 23.796714361323865 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 23.63739096034657 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 23.48131701681349 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 23.33753826307214 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 23.176110156038973 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 23.012126525243122 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 22.872958110303294 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 22.732200622558594 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 22.563602036120844 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 22.4039411178002 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 22.249495308354216 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 22.089722297809743 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 21.92865380373868 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 21.772412640707834 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 21.617288267403318 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 21.46116134216045 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 21.301681474103766 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 21.144578297932945 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 20.987558595469743 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 20.831172858515092 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 20.675411277347138 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 20.520515143871307 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 20.366257172364456 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 20.209307677818067 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 20.054125472680845 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 19.900747439440558 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 19.747357541236326 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 19.59938359260559 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 19.44578560976915 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 19.292463090684677 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 19.135549907814966 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 18.98125273472554 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 18.827550411224365 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 18.67726502920452 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 18.52751403659969 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 18.374559922096058 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 18.220350386221195 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 18.067038774490356 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 17.91361219205974 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 17.761096739187472 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 17.608731422079615 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 17.46011665889195 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 17.311060190200806 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 17.159009822579318 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 17.01030044994135 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 16.86023083600131 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 16.71292196498828 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 16.572378052605526 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 16.4223879300631 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 16.269096540368125 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 16.11763491425463 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 15.964885087723427 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 15.814595762052036 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 15.660891473293303 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.508607146666222 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 15.356880236645134 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 15.206002112590904 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 15.054869890213013 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.902835574480566 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 14.750458319981893 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 14.60171606702712 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 14.451028897212103 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 14.300060726347423 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 14.14924922979103 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.99949242021436 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.847599347432455 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.69717617866096 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.544138236479327 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 13.394237823314496 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 13.243934205600194 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 13.093579302846857 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.942550399847198 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.792005435280178 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.640370854016009 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.492663986662516 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.340218196480961 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 12.189109463651642 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 12.038112163543701 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.888194466425368 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.736265264573646 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.58618350532966 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.434424807948451 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.284069633483886 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.132593911791606 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.981883338117223 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.829225644469261 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.678784287253091 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.532730799454908 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.381179871449943 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.22918879624569 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.078373650859174 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.92784202988468 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.776228622153953 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.62475866429946 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.47436104551719 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.322972888531892 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.172007358331474 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.021101576941353 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.871048306742459 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.720549580077051 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.570562330992905 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.419446892208523 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.269209672664774 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.118895102853644 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.968659931299638 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.817908338598303 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.667351845926887 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.517230908075968 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.366564592778288 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.216697291324013 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.066807718837963 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.916278795762495 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.765919377726894 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.615269502003987 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.465351930849112 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.314452397672436 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.16398091586131 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.012994945049286 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.861921803551431 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.711331079035629 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.561032552660609 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.410131716146702 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.25982387860616 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.109504771519856 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.959386385843426 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.8089204061599 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.6585398834837966 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.509088460136863 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.358638080239992 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.2082950403524 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.057823933617917 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.9071960695858663 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.756650277546474 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.6063560680909585 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.456105222809786 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.305696420455247 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.155215917352858 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.0049526161617703 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.85461575681992 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.7041432359716393 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.554067228661209 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.4042066283847974 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.2539536630785144 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.1043423837231052 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.9540912429279185 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.8038031547627549 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.6535171844341137 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.5032290157518888 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.352776807016103 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.2024677395820618 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.052145692350951 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9018892160395986 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7515786183186066 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6012713325266935 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4509416461596029 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.300610621770223 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.15030268927914414 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   30.0s finished

    1973 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  15.481 seconds)

**Estimated memory usage:**  1933 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
