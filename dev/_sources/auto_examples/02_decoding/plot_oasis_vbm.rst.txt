
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f01fdeea7f0>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 298.4333038330078 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 50.27688002586365 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 46.6120719909668 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 45.63691989580791 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 44.98003649711609 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 44.62721586227417 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 44.29143635431926 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 43.85926914215088 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 43.532936096191406 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 43.17129588127136 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 43.047128677368164 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 42.680762334303424 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 42.377614974975586 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 42.18102414791401 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 42.024948835372925 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 41.715926011403404 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 41.430803179740906 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 41.23080405066995 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 40.93392030398051 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 40.721294227399326 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 40.57277154922485 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 40.30269854409354 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 40.05778206478466 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 39.802099663278334 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 39.556981245676674 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 39.35076379776001 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 39.27137600458585 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 39.01605558395386 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 38.80338965143476 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 38.604285108632055 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 38.40583690007528 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 38.23760087259354 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 38.012628614902496 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 37.782365806175 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 37.572235023274146 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 37.41228420393808 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 37.180704196294144 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 36.998964148598745 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 36.776947297548 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 36.57174449089246 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 36.35428237915039 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 36.116012962853034 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 35.90052706854684 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 35.70132089770117 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 35.49750286882574 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 35.26684080229865 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 35.0432720909948 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 34.80856599706284 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 34.604739824930824 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 34.39494113046296 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 34.17645835876465 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 33.96051872477812 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 33.72612005013686 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 33.50889293202814 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 33.2837462955051 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 33.04673920978199 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 32.812277044568745 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 32.5908303302631 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 32.37875390874928 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 32.140556161686526 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 31.905705213546756 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 31.674804030871783 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 31.44000381808127 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 31.24693151125832 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 31.026224344968796 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 30.791722187629116 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 30.56390279712099 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 30.31478436313458 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 30.08032397662892 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 29.84024961443915 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 29.608162607465474 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 29.3812590988589 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 29.17241456773546 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 28.945939116282005 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 28.74102668504457 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 28.519215186436973 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 28.288861651169626 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 28.084689672891194 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 27.876511041934673 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 27.644791431064846 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 27.413914561271667 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 27.176473944275468 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 26.937654541759954 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 26.706065775400184 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 26.462783677237375 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 26.2255595852347 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 26.00193708441978 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 25.766640512422587 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 25.53191189332442 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 25.30858436863074 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 25.09873323970371 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 24.862426922871517 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 24.63625474598097 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 24.40149331861927 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 24.168784699541455 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 23.93999535159061 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 23.719522098700203 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 23.491443270260525 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 23.268210571639393 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 23.046131502498277 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 22.81447434425354 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 22.59033951900973 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 22.36358267653222 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 22.132635405920084 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 21.9064972950862 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 21.680112827391852 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 21.45731127487039 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 21.22111327625881 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 20.987175897315698 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 20.757979602988705 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 20.536076805808328 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 20.30509808471611 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 20.07815514292036 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 19.85343569780873 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 19.623934022167273 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 19.392746365588643 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 19.166965953234968 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 18.934450061912212 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 18.70311071509022 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 18.470791928908405 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 18.242065747578938 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 18.010546002506224 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 17.781462004927338 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 17.560209501080397 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 17.328194249060846 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 17.099597454071045 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 16.866793458423917 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 16.636248445886327 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 16.408726260066032 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 16.183680118516435 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 15.955282119604256 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 15.725819382048744 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 15.50171008977023 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 15.274926076258037 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 15.043618120364288 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 14.815833418457595 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 14.596152473898496 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 14.367549988475158 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 14.14077927755273 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 13.909776783675598 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 13.679135799407959 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 13.45015786218305 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 13.22038436271775 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 12.991185520078751 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 12.75982873969608 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 12.529264211654663 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 12.301549212573326 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 12.071646894727435 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 11.843413488284963 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 11.614474195761968 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 11.388232866923014 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 11.162028620574647 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 10.932960409867135 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 10.702472428091212 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 10.471943722142802 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 10.24411956725582 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 10.016563843458126 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 9.791403951158948 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 9.564394938794871 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 9.342337930727306 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 9.115516662597656 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 8.889185770698216 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 8.661967251035902 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 8.43400169735306 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 8.2152780672399 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 7.98839671684034 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 7.762196770633559 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 7.532837999081184 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 7.307178361075264 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 7.077678647972423 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 6.848894077188829 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 6.620890314816034 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 6.392627838046052 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 6.164468587478462 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.9364050339008205 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.707608904157365 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 5.479075962846929 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 5.2506154162735585 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 5.0238792012246805 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.794868117604175 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.566756725311279 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 4.339341139925119 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 4.111770559143234 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.8842252538503845 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.6556229176728623 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.4272468412244645 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 3.1982021024150233 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.9707627105202903 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.7424254671056216 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.513382722461034 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.2855328760649027 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 2.058561850592728 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.8300470014413197 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.600888735272106 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.372144239464986 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.1435923148424196 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.9147238682727423 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.6859378040139446 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.45721421338090995 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.22857597365451218 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   45.7s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  40.683 seconds)

**Estimated memory usage:**  1876 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
