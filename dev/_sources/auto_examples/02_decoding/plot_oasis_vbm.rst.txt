
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-90

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 148-150

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 150-163

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-166

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f005abcb3a0>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-229

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 144.87028121948242 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 24.3915798664093 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 22.575674772262573 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 21.802242517471313 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 21.384788513183594 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 21.096680402755737 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 20.941762685775757 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 20.792707817895074 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 20.65308952331543 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 20.495745208528305 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 20.354763984680176 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 20.224803230979226 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 20.076114018758137 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 19.9469871704395 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 19.819505964006698 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 19.68689290682475 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 19.571197509765625 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 19.538152245914237 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 19.414568371242947 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 19.344646278180576 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 19.232994318008423 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 19.107487928299676 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 18.976343718442052 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 18.846959507983666 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 18.726585865020752 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 18.615763187408447 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 18.493908130205597 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 18.37317395210266 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 18.2680983543396 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 18.155734382826704 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 18.05240774154663 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 17.95424732085197 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 17.84232759475708 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 17.727285038341176 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 17.619317405364093 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 17.515038933072773 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 17.421171612209744 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 17.31711085422619 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 17.20767873211911 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 17.10123115930802 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 16.99345302581787 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 16.884051142669303 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 16.779085568019322 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 16.67106126075567 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 16.562130104411732 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 16.44900459713406 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 16.339462974797126 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 16.238324845090826 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 16.133529543876648 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 16.023534074121592 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 15.909873247146606 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 15.801153337254243 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 15.69589275580186 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 15.587174555040756 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 15.479311960714835 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 15.368117267435247 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 15.259894507271904 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 15.153564946693285 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 15.050990178667265 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 14.944885387259013 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 14.835495869318645 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 14.726826691236653 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 14.618122631503688 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 14.50897711799258 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 14.403820723295212 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 14.29531920873202 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 14.193341060118241 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 14.0887573370293 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 13.981595404007855 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 13.872303516968437 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 13.764595917293004 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 13.656628968010486 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 13.54811520046658 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 13.443704605102539 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 13.346113926655537 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 13.240946133931478 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 13.134513089531346 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.028364388973682 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 12.919788476748344 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 12.813728115226649 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 12.709006905555725 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 12.60414477336554 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 12.498516175805069 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 12.392305793532406 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 12.287454514276414 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 12.18153165368473 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.07437798034313 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 11.965890818628772 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 11.85887622833252 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 11.755428209733427 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 11.652014123068916 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 11.547345059258596 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 11.441928894623468 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 11.333658292729368 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.225903404519913 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.11987883166263 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.012031892935434 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 10.904939481892537 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 10.79813289642334 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 10.691048294606833 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 10.583505153656006 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 10.475502236054675 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 10.370340660506605 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.264009508114416 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.156650836651142 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.05050448008946 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 9.9429211256639 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 9.835563075876681 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 9.729716327455309 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 9.622269967280397 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 9.515503016385166 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 9.420645086614936 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.314750024250575 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.208642377262622 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.103602179309778 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 8.996790409088135 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 8.889513459698907 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 8.782730836134691 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 8.675953917584177 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 8.569019049155612 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 8.462962627410889 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.356116164814344 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.250034215020353 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.144360344584396 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.039180755615234 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 7.932829856872559 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 7.8270363883366665 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 7.721013502811822 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 7.614741504192352 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 7.508283646531807 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.401976952185997 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.297644515073936 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.1918723366477275 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.086299460633358 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 6.980175007635088 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 6.873438508422286 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 6.767183752620921 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 6.661024713168179 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.554940030194711 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.448714316320076 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.3429184300558905 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.236828695797751 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.1312292394503745 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.025656243304272 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 5.919547292921278 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 5.8135493541585985 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 5.707849365391143 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.603026900972639 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.497148803762488 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.39076806074821 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.284642616907755 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.1791516202964525 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.073539181759482 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 4.967641850702124 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 4.861632433804599 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.755690866901029 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.649470237585215 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.543933528244116 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.437724665750431 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.331871533543809 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.225848376750946 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.120512978630777 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.015305154117537 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 3.9096741895734164 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.8037461129630485 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.6985219102917295 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.5927208044442787 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.486955879691118 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.3813808077857606 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.275426493593927 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.1699309629552506 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.0642559444695188 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 2.9587466162304548 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.852865440997085 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.747134208679199 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.6412349087851386 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.5353888598355376 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.4296576478387 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.3237628749247348 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.2181273931897554 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.1123831537034774 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.0067580681479438 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.9013780735351227 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.7958175367344926 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.6901223141214121 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.5843736352147284 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.4787101617423437 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.3731106742818089 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.2678795926114346 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.1621509140761441 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.0564739955099005 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.9508106733491908 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.8451269567012787 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.739474656050687 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6338383094551637 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5281654749161158 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.42266157208656774 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.31699396874093766 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.21133588540433634 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.10566371289928954 seconds remaining)
    1974 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  56.196 seconds)

**Estimated memory usage:**  1936 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
