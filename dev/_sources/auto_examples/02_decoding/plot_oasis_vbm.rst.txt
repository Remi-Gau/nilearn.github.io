
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-142

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 143-145

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 145-158

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 159-161

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 161-176

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f4c7015ad30>



.. GENERATED FROM PYTHON SOURCE LINES 177-179

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 179-223

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 179.37421798706055 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 32.41647744178772 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 29.917760610580444 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 29.037843386332195 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 28.60591173171997 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 28.296029090881348 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 28.027067502339683 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 27.77188869885036 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 27.566362380981445 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 27.413698328865898 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 27.335548400878906 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 27.200201836499303 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 27.049845218658447 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 26.859237029002262 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 26.704681532723566 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 26.532352447509766 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 26.36758601665497 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 26.22053280998679 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 26.05749429596795 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 25.90445657780296 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 25.734673261642456 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 25.58383536338806 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 25.42522209340876 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 25.263594886531003 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 25.1079994837443 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 24.938069105148315 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 24.7963764667511 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 24.658001599488436 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 24.5268338407789 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 24.381448425095655 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 24.24432714780172 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 24.10432967062919 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 23.975633025169373 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 23.840403975862444 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 23.70244190272163 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 23.56581657273429 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 23.417057063844467 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 23.269622622309505 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 23.132456302642826 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 23.000758709051674 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 22.852070808410645 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 22.702501041133228 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 22.55593448593503 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 22.410535185836082 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 22.263322591781616 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 22.107811715867786 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 21.956647323525473 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 21.800156836814068 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 21.655038674672443 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 21.49718012615126 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 21.343043088912964 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 21.197875359479116 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 21.045826306709877 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 20.898114087446682 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 20.75311812648067 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 20.60899613120339 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 20.465542929513116 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 20.322364706742135 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 20.219412746100588 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 20.078389466819115 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 19.944372812906902 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 19.8041531023432 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 19.667055383805305 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 19.527043751307893 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 19.382919013500214 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 19.243778944015503 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 19.098741256829463 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.955630530172318 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 18.80956275322858 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 18.692090614982273 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 18.55735799244472 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 18.414645336043666 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 18.2760747273763 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 18.137849941645584 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 18.001167877300364 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 17.86582907040914 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 17.72607559906809 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 17.585103768806952 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 17.44365967848362 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 17.303597317466252 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 17.162886142730713 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 17.0316110510885 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.89044441246405 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 16.75014731970178 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 16.60925549552554 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 16.472996781854068 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 16.336279442143994 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 16.19739969297387 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 16.054236238653008 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.913711261213495 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.77411323123508 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 15.633831427647516 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 15.49116123240927 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 15.349427459060506 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 15.206978290639025 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 15.066414506811846 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.925626715024311 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.784531283624393 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.643768252158653 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.502518969352797 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.363229513168335 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.222965379752734 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 14.082884858636296 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.940222048065039 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.79872908959022 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.656100295838856 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.51377782731686 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.372339444739795 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.231674671173096 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.089900211456719 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.94776300950484 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.806638459901553 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.66385383265359 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.521356793631494 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.378977336381611 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.23609733581543 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.09417355471644 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.950600108529768 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.806962247622216 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.664532400980717 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.521974563598633 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.378555981580877 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.23917058256806 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.096821436067906 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.953495187144126 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.81161060333252 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.672066340370785 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.527913581667923 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.385185271501541 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.239670855130335 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.095432098095234 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.952312787980523 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.80854292349382 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.66484874890263 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.52133655192247 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.377556641896565 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.234277276431813 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.090895262947917 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.946365601774575 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.80271973884363 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.658388239996773 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.514519911285833 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.370630176974014 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.226476224152359 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.082656158341303 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.938695323878321 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.794824848436329 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.651126363650471 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.506505354030713 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.362140961141394 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.216989517211914 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.072291053683553 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.927705814963892 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.78345806302588 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.63936466056031 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.495945384425502 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.352439354627561 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.2088893629183435 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.066388570809665 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.922427324379015 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.778570890426636 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.634510657802132 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.490575116357685 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.34776925163035 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.203482715094962 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.059041933579879 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.915066989071398 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.7712141610905086 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.62661870320638 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.4825126828526605 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.338203640545116 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.194025455162539 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.049609600111496 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.905370100385192 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.7610353491772184 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.616502864020211 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.471872448921203 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.3273990369785977 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.183014288377226 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.0384979327963717 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.894043551550971 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.749545549160868 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.605070617172744 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.4604940727108815 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.316041552502176 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.171659585591909 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.027009476897537 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.8824128620127305 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.7378461969659682 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.593131011125272 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.4483516216278076 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.303604248306514 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.15883207321167 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0140589704167657 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8692287366414808 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7245786190032959 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5797032336799466 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.434798360476034 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.28987760736484725 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.14496148531161362 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   29.0s finished

    1973 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  11.385 seconds)

**Estimated memory usage:**  1939 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
