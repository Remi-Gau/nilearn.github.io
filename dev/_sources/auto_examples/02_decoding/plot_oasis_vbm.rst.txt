
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f854c34b280>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 177.08539962768555 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 29.855143070220947 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 27.84887194633484 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.21601510047913 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 26.839796543121338 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 26.47909927368164 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.259393374125164 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.022104161126276 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 25.783727645874023 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 25.588147746192085 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 25.397987842559814 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.21062267910351 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.039835055669148 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 24.862386263333836 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 24.692776577813287 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 24.538393417994182 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 24.41528034210205 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 24.27862463277929 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.129907528559364 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 23.979476238551893 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 23.836156368255615 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 23.69039023490179 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 23.544424620541662 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 23.413550345794015 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 23.28024705251058 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.177716732025146 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.119005863483135 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.0578332123933 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 22.940836429595947 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 22.846679103785547 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 22.718156099319458 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 22.58766545018842 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 22.443754255771637 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.297718727227412 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.161284194273108 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.029204572950093 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 21.883881595399643 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 21.74316260621354 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 21.59988893960652 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 21.457497676213585 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.324917793273926 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.18430505729303 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.047620466777257 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 20.902678556220476 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 20.76187562942505 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 20.622563891940647 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 20.489536554917045 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.35019965881997 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.208364208539326 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.067145386520696 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 19.928747177124023 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 19.78629090271744 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 19.647325369027946 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 19.510422301742267 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.37207367685106 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.241627758199517 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.10362264088222 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 18.96539690620021 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 18.82660176836211 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 18.68957978992139 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 18.55163343747457 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.414842222557695 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.27462460917811 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.136905253879608 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.00016662478447 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 17.86033003146832 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 17.72095036506653 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 17.592325758578173 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.453165657380048 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.3172402796538 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.183911766324726 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.04976827661756 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 16.915448082817925 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 16.782655552641987 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 16.651267290115356 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.523631016413372 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.389365472291644 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.25369855645415 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.13878142528045 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.00540559804892 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 15.871060609817505 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 15.73621756353496 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 15.602560496911769 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.467761602746435 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.333411852518717 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.201224902096918 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.067980250646901 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 14.934174186881933 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 14.799910892139781 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 14.666602914252977 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.533791250652738 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.399793056341318 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.268825126730878 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.137398950515255 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.003504296566577 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 13.869966895956743 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 13.73611658811569 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.603908551107978 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.468611979971127 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.33436262246334 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.200623035430908 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.076438596933194 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 12.943388602312874 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 12.808321938931364 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 12.675280204186073 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.542433999833607 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.409123195792144 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.275606130885187 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.142814962952226 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.011789816235183 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 11.87857636538419 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 11.74651939160115 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.614689009530203 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.483805523509472 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.351346643347489 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.219014789747154 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.085888887273855 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 10.954487264665783 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 10.822462797164917 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.689534854488214 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.557250340779621 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.429036475410147 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.297055647021436 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.164591979205124 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.032627198003954 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 9.902542304992675 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.770120359602428 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.636997780461948 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.504412338137627 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.37714176030122 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.24451154928941 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.113586924458279 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 8.98142959132339 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 8.849336409031 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.717236657640827 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.58478045463562 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.452665665570427 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.320625557516612 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.188894897267438 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.057091827872846 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.925246000289917 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.793852838218635 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.661852168365264 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.529721016650433 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.398993055025737 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.266900564062184 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.135162804224719 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.0041383204816965 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.876913785934448 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.7452999537423155 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.612927277882894 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.481304883956909 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.3498408417952685 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.2181397590761875 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.086929872438505 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.955242364637313 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.822986975694314 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.690491292127378 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.5586294463918176 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.426300671115611 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.293993890285492 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.161931280763993 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.02982912240205 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.897734413849064 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.765747512259135 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.633319370674364 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.501816766807832 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.369508687607542 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.2372160866146995 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.104879950630594 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.9725025541642136 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.8400533701244153 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.7075292010639993 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.5748660481734085 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.4422669438110005 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.309812034879412 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.178105050867254 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.0456375941044866 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.912994065981233 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.7804835748406096 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.6479131910536022 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.515431546374579 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.3829686667892958 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.2506209436010143 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.1182112901107124 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.9858740149317562 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.8534490421254148 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7209250136492724 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.5884194272629757 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.4559926280268916 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.323587505440963 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.1911848190567256 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.058784306049347 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9264038498537527 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.794027006503233 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6616317125467154 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5292791444428112 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.39693913362958105 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.26462252934773767 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13230233695638838 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   26.4s finished

    1993 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  8.467 seconds)

**Estimated memory usage:**  1902 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
