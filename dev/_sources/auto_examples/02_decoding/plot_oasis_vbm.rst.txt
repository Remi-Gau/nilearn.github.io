
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f9099653340>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 175.69541931152344 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 30.331920862197876 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 28.01381278038025 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.18636234601339 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 26.664453744888306 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 26.275763511657715 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.009140412012737 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 25.781249625342234 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 25.558055877685547 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 25.46265527937147 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 25.281808137893677 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.10321747172963 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 24.93167416254679 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 24.754945021409256 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 24.59957425934928 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 24.4300008614858 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 24.27095127105713 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 24.119567997315354 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 23.99473124080234 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 23.88471057540492 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 23.738084077835083 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 23.609722716467722 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 23.466945409774784 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 23.32790067921514 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 23.190449078877766 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.06337332725525 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 22.931748115099396 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 22.808798057061654 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 22.666841506958008 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 22.53342816747468 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 22.39440131187439 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 22.25588593175334 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 22.11338746547699 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 21.98665035132206 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 21.854699541540707 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 21.714769669941493 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 21.572487301296658 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 21.436448245435148 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 21.29416014018812 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 21.16189965223655 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.031912803649902 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 20.893070279098136 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 20.756907474426995 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 20.62289736437243 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 20.49055051803589 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 20.352734141879612 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 20.217781263849012 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.0828443233003 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 19.946261882781982 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 19.814538887568883 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 19.681807279586792 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 19.54629732580746 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 19.418200804637028 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 19.284408708788316 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.15272856641699 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.01889694820751 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 18.886855397905624 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 18.755416430925067 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 18.62087219336937 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 18.485583737745124 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 18.353713909784954 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.22086567175193 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.08588470182111 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 17.952809973368566 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 17.828256249427795 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 17.704591402640713 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 17.576595826582476 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 17.44336650264797 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.31350827217102 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.182027457416922 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.047027587890625 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 16.915345944149394 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 16.78442849053277 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 16.652818516509175 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 16.52057788823102 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.390013297398887 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.25671184690375 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.123457982942654 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 15.992177015695816 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 15.862502906895891 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 15.731541752815247 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 15.600353367534685 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 15.467730527970849 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.3362421788365 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.204473370597476 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.078770988127765 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 14.949772180512893 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 14.817651518459979 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 14.686232783577658 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 14.555158684762675 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.424844185511272 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.29283313174824 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.160675940306291 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.0284944939357 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 13.897683777707687 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 13.767517955679644 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 13.636955638726551 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.505529209510568 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.374591438137756 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.242790438912131 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.111324787139893 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 12.978569389569877 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 12.848094823313694 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 12.716835795096982 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 12.584697576669546 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.454765819367909 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.32518720626831 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.192134382568787 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.060921863273338 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 11.930308455720954 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 11.7994685606523 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 11.671187409409532 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.539999110358101 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.408820403360687 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.27794287079259 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.14577992066093 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.020700479375906 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 10.889476342078968 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 10.75840450545489 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.626628515099277 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.494057178497314 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.363161370773947 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.230728716146752 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.098463543062287 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 9.966349163363057 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 9.835358047485352 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.703562657038372 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.571620648301492 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.440815955400467 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.308710209158964 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.177345074140108 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.045969529916311 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 8.91468214266228 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 8.783461850388607 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.652201549330753 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.520940453917891 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.390074673820944 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.258152986094899 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.126565190329067 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.994898971036184 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.8639711652483255 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.732838393948602 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.602168445855799 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.4709693952040235 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.341336250305176 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.210513484889063 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.0927495401199545 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.963547112990399 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.832140845221443 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.700955139710599 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.569334189097086 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.437875190318025 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.306663713957134 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.175404910168617 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.0435785937618896 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.912452374735187 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.782272724004892 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.650286021505951 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.518687556061563 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.386890600312431 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.255056619644165 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.1246678118379965 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.993318428227931 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.861481780654813 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.729974746704102 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.598286455327814 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.466923638998744 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.335117157347902 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.203494753156389 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.071704439862946 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.940479418810676 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.80893541916072 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.6773849864338723 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.545798691710985 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.414494344557839 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.2829353128160745 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.1514644080942324 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.019969571108198 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.888573847459943 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.75715945686042 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.6256763405270047 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.4941939003559765 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.3628184507181356 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.231580977882844 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.100132195845894 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.968737589346396 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.8375896664075955 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7063084451910009 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.5749675060840362 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.4436425481523785 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.312329467974211 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.1810081417023823 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.04970912138621 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9184791732946207 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.7872683928184903 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6560075221917568 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5247739967034787 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3935683584455306 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2623657024267948 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13117804599167715 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   26.2s finished

    1973 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  5.320 seconds)

**Estimated memory usage:**  1898 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
