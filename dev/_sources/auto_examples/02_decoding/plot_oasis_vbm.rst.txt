
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (:term:`VBM`)
to study the relationship between aging and gray matter density.

The data come from the `OASIS <https://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard :term:`VBM` pipeline (using SPM8 and
NewSegment) to create :term:`VBM` maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the :term:`ANOVA` step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the :term:`ANOVA` step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

:term:`SVM` weights are very noisy,
partly because heavy smoothing is detrimental for the prediction here.
A standard analysis using mass-univariate :term:`GLM`
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 112-123

Prediction pipeline with :term:`ANOVA` and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

In nilearn we can benefit from the built-in DecoderRegressor object to
do :term:`ANOVA` with SVR instead of manually defining the whole pipeline.
This estimator also uses Cross Validation to select best models and ensemble
them. Furthermore, you can pass ``n_jobs=<some_high_value>`` to the
DecoderRegressor class to take advantage of a multi-core system.
To save time (because these are anat images with many voxels), we include
only the 1-percent voxels most correlated with the age variable to fit. We
also want to set mask hyperparameter to be the mask we just obtained above.

.. GENERATED FROM PYTHON SOURCE LINES 123-149

.. code-block:: default


    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 150-152

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 152-165

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-183

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f787bcb0af0>



.. GENERATED FROM PYTHON SOURCE LINES 184-186

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 186-231

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 178.17974090576172 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 30.248132467269897 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 28.357431650161743 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.61407279968262 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 27.455885410308838 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 27.18706440925598 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 27.221413771311443 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.97354531288147 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.702848434448242 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 26.433569881651135 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 26.24170970916748 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 26.04555182023482 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.853385607401528 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.68703414843633 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.661062002182007 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 25.47663505872091 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 25.39596402645111 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 25.246744015637567 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 25.0875633292728 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.925395363255554 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.76569628715515 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.711679549444288 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.56438784165816 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 24.400474641634073 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 24.244812965393066 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 24.087754249572754 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.938975921043983 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.8036661501284 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.66064977645874 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.575456380844116 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 23.42074751853943 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 23.273882004522505 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 23.117281436920166 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.97414023948438 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.835256155799417 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.690588678632466 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.603993866178723 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 22.46294779390902 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 22.43858565782246 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 22.303728232016933 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 22.1630859375 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 22.024550007610785 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.88963230450948 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.81792407812074 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.6677124933763 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 21.521739350424873 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 21.37647615308347 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 21.238532355491152 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 21.090454777081806 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.9488075606677 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.838537454605103 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.69317299711938 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 20.550601574090813 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 20.408955695494168 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 20.266508649896693 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 20.124358372254804 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.97815949576242 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.82969770933452 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.71176796123899 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 19.561455997370057 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 19.425378958384197 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 19.27735947780922 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 19.127461148846532 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.98053569263882 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.84392958879471 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.718765002030594 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.57377363696243 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.43148812607153 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 18.285778831033145 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 18.144460895787116 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 18.00379684993199 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.863774245893453 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.735923343234592 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.599988787141566 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.456619771751196 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 17.309107780456543 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 17.164524028175755 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 17.01886254471618 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.874049143913464 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.73203439048574 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.606526970863342 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.46760677113945 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.328704281551083 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 16.188520336725624 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 16.054388284683228 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.919266869040097 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.78773015598918 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.665918769507574 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.536459185860373 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.397788650534125 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.25978962580363 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 15.121079877182677 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.985298198202383 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.846324820672313 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.722322803862552 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.585518899716831 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.446940958499907 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.308453407484231 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.16957255772182 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.030595899832369 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.892879962921143 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.766643358929322 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.628152992211136 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.490802563509895 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.35209479698768 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.212598051343646 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.074158335631749 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.938509118891208 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.80087583153336 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.669896937291556 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.529148600318216 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.38875489191966 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.246693764414106 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.103631144076322 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.96153950272945 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.821010517037433 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.686368596964869 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.54587517436753 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.403449369689167 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.261422513913708 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.11849308013916 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.976985955041302 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.836646721011304 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.695607381138375 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.562428143716629 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.42398533821106 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.285787408314054 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.144877807361873 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.005046382546425 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.867581480233245 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.7258164699261 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.5911089354799 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.45221852533745 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.312129588951743 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.170713567022068 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.03057645868372 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.889890670776367 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.749800958772646 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.615361493566763 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.476350295457909 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.336566584450857 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.19621930900195 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.055428417635635 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.915727657038015 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.777493874231975 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.636619773404351 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.511482078735142 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.370574954415665 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.230109221226461 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.090680589611899 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.950925747553507 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.81217632388437 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.673417417626632 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.538304665509393 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.3988896561907485 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.259991284339659 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.1207586863102055 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.981085833470533 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.841391089596326 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.701440488767324 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.565883636474609 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.425833152688068 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.285967485404309 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.145837178259539 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.005999908214662 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.866536263263587 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.726710443037102 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.589704654887765 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.450130417233422 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.310518156141924 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.170842128641465 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.032027344954641 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.893104015394699 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.753860280692922 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.6146491176780615 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.4773454666137695 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.338341322812167 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.199195609927851 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.0601382898480702 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.9213820342911023 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.7826417287190752 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.6438971593235077 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.506037848336356 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.3669794986808235 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.2279063100400176 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.0887597638207516 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.9497027884247484 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.810433371181794 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.671270619047449 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.53276820536013 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3934012463218286 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.254076312349729 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.1147542297840118 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9754368159437425 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8361263619255774 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6968264212975135 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5576946589411521 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.41827688604442 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2788639357595733 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13942493985046694 seconds remaining)
    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 7.333 seconds)

**Estimated memory usage:**  1903 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
