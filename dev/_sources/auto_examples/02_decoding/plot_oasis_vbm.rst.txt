
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-142

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 143-145

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 145-158

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 159-161

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 161-176

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7ffae1c0db20>



.. GENERATED FROM PYTHON SOURCE LINES 177-179

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 179-223

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 186.6745948791504 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 29.230905294418335 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 27.405835390090942 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 26.93248216311137 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 26.623506546020508 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 26.216970205307007 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 25.894979794820152 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 25.66303106716701 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 25.430831909179688 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 25.26419077979194 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 25.09807777404785 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 24.952209494330667 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 24.856738090515137 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 24.67840411112859 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 24.50559905597142 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 24.369470755259197 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 24.209959626197815 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 24.041641179253077 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 23.896522680918373 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 23.73960718355681 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 23.592161178588867 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 23.4410655384972 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 23.300823731855914 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 23.148062249888547 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 23.019658088684082 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 22.905954837799072 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 22.787452697753906 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 22.65158964086462 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 22.513363225119456 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 22.37366203604073 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 22.244404951731365 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 22.117737723935033 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 21.98177021741867 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 21.844222834615998 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 21.70816041441525 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 21.573880740574428 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 21.44230712784661 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 21.31387887774287 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 21.180268689205775 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 21.038545736899746 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 20.905351638793945 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 20.788450991235127 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 20.66320929073152 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 20.52767020602559 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 20.39539484544234 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 20.270498858557808 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 20.1327164069466 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 19.995269856554398 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 19.870592792828877 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 19.739653441370752 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 19.60223150253296 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 19.46864802229638 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 19.338907168461727 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 19.20824447217977 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.07303632630242 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 18.941024260087445 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 18.80734981809344 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 18.67582043430261 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 18.55471925077767 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 18.42005277084092 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 18.28751079241435 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.156637824949673 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.02110590473298 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 17.889058381792097 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 17.760763257741928 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 17.63512994692876 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 17.50464921286612 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 17.372024002359876 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.24279792168561 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.115822902624156 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 16.989180939538137 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 16.860345558381418 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 16.73542997572157 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 16.609136473642636 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 16.482162681785788 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.35472853978475 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.234128525382594 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.10787320137024 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 15.97948013819181 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 15.84959478016141 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 15.720411658287048 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 15.591910126768513 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 15.457404886803975 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.328487376132642 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.196833905719576 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.080222536535825 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 14.946463839952335 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 14.815843664366625 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 14.681784629821777 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 14.550507183825031 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.416392114427357 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.2875813468472 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.154440154200016 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.02310513424617 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 13.893227775046165 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 13.763566807696694 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 13.634358048439024 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.503938060445885 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.373852695737567 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.242523853224936 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.109383344650269 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 12.979732267927416 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 12.84872132656621 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 12.717372646609556 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 12.591031661400429 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.458543368748256 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.328576816702789 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.19675588384967 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.065640829227588 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 11.936678746424684 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 11.807917811653832 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 11.676713208894473 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.546422055789403 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.41527771949768 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.284373571998195 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.152344910994819 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.023675375971301 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 10.895285268115183 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 10.768424377603047 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.639074794384612 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.508569876352945 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.380184847461292 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.25173149734247 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.127316412886952 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 9.996867164488762 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 9.86622633934021 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.73518194849529 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.603662984577689 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.473441272974014 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.343247217725413 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.212418281115019 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.08911403990884 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 8.95897017103253 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 8.827747787748065 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.696785627906001 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.56533983901695 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.434194228228401 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.303236134730986 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.172179723131483 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.041425931367943 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.910551377705165 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.778989528087859 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.649539937435741 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.51851993173986 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.38720456759135 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.255925869119578 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.124358013884661 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.992749421774936 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.860982488941502 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.730892187796983 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.598874807357788 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.4668980276347785 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.334957348672967 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.2027584711710615 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.070929288864136 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.939292876951156 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.808396889613225 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.676183289023721 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.544668867618222 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.413025079283324 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.281271934509277 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.149636758780628 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.01825045067587 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.886277195866122 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.754748675881363 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.623030265172322 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.4911665945168 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.3592437826944685 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.227104959033785 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.095443642351049 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.9635459956000836 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.8318041960398355 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.6999303296554924 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.5678210354953834 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.4360668138525954 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.3041536808013916 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.1725684837861494 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.0406532247187728 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.908712148666382 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.7767687043664178 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.644858333799574 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.5130204350908816 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.380905028227921 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.248764882322218 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.116679523302161 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.984488564568597 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.8522424595330351 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7201127444996553 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.588040067794475 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.4557629766918363 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3234561744489166 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.1912302171996751 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0591091612974801 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9278987788165789 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.7956479898433095 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6631648846161671 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5305601090801005 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.39795801361200167 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2653336645376803 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13268266011722124 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   26.5s finished

    1963 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  5.139 seconds)

**Estimated memory usage:**  1860 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
