
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fdefd807070>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 247.77650833129883 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 44.123462200164795 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 40.582998275756836 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 39.124194939931236 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 38.29872703552246 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 37.660808801651 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 37.312706629435226 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 37.09592390060425 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 36.84397315979004 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 36.519957330491806 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 36.18800067901611 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 35.86514633352107 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 35.60353899002075 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 35.91009163856506 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 35.74532226153783 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 35.611841917037964 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 35.3565069437027 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 35.05105826433967 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 34.81773206922743 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 34.57884895174127 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 34.35700750350952 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 34.176104772658576 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 34.04998059706255 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 33.87414314435876 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 33.662978649139404 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 33.46443247795105 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 33.24339206402119 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 33.00906989309523 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 32.81260480199541 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 32.61332088503344 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 32.41997249921163 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 32.242194552575384 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 32.006438076496124 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 31.812639619364884 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 31.644031931372254 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 31.515849454062327 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 31.34752305348714 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 31.11756605715365 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 30.93041038513184 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 30.726022433011963 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 30.53716278076172 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 30.308996654138333 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 30.132125230062574 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 29.947138919386752 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 29.738435918634586 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 29.53754183981154 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 29.32425383899523 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 29.117332417914206 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 28.919593691825867 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 28.7250392826236 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 28.529536485671997 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 28.38265585899353 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 28.185293582769543 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 27.983291900382852 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 27.787723267519915 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 27.596518451517277 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 27.42456947054182 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 27.236176582804895 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 27.02022371620967 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 26.81452228255191 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 26.63644631703695 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 26.47963493378436 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 26.281609019925515 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 26.09951647501143 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 25.909597247838974 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 25.707906796382026 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 25.52966757254167 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 25.34236103385242 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 25.141137221280268 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 24.97210639456044 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 24.789077418191095 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 24.604756644074346 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 24.40768093532986 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 24.20853481554005 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 24.004167737187565 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 23.811365763346355 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 23.60780298082452 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 23.40698114308444 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 23.21394263781034 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 23.026194813885265 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 22.82587766647339 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 22.62860996046184 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 22.43237686738735 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 22.28190848626286 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 22.10600275085086 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 21.914587581858918 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 21.724886406299678 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 21.527249295136027 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 21.330655401403252 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 21.135701557223715 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 20.94460892677307 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 20.747563210162486 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 20.558771050494652 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 20.379554381934547 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 20.195653940768953 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 20.023828493921382 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 19.837164481480915 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 19.6466385187562 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 19.46501133879837 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 19.26989319107749 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 19.110125303268433 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 18.925156562635213 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 18.738257810181263 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 18.546176759942064 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 18.359759110670826 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 18.17109043257577 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 17.978408327642477 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 17.791025576190414 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 17.59632417007729 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 17.40321222357794 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 17.214492364363238 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 17.021977564236067 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 16.82834276131221 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 16.647329408510597 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 16.455669411441736 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 16.26556148736373 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 16.077026441179473 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 15.887758589198448 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 15.700414968749225 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 15.504523419532456 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 15.309297720591227 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 15.115453347686895 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 14.918634230973291 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 14.727999148330067 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 14.537297656459193 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 14.346165132522582 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 14.15440745202322 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 13.962934366361361 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 13.772277742624283 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 13.579855739608291 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 13.386024768535906 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 13.196921115613165 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 13.004235990119703 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 12.81282901584654 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 12.619776825406657 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 12.430440540666932 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 12.2372906628777 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 12.043246878324634 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 11.850102562835252 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 11.65611117349254 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 11.463961805616105 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 11.270616969318255 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 11.080023302158839 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 10.891236315240393 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 10.69960273636712 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 10.511708596657062 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.32025596866869 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 10.12835607398935 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 9.938403574196068 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 9.745837009993176 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.55937639872233 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.367145288858982 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 9.175600327943501 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 8.98386455205531 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 8.794145404518424 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.603904316502232 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.412570134187355 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.22132892973104 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 8.029700309415405 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.837105284696855 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.6459367871284485 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.453965634292698 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.263400690055187 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.07054827110899 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.879194027040063 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.6879300565430615 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.495817132743008 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.3029781073153375 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.111328170413063 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.918777336030317 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.726450695711024 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.536522718898037 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.346183582793835 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.154721080912331 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.96241333566863 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.771415710449219 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.581731037660078 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.392196808831167 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.202532259266028 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.012435313709621 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.821901162465413 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.63208190512262 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.440352806678185 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.248826521993335 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.0575400642726733 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.866017212738862 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.675032315715667 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.4844403126660515 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.2937841821224128 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.1024743463627242 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.9114924732007477 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.7204303816350968 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.5293134152889252 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.338028446998003 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.146828639138605 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.9558308552473019 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.7647001110777563 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5735667381189802 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3823135501206524 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1912243641800617 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   38.2s finished

    1960 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  29.188 seconds)

**Estimated memory usage:**  1942 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
