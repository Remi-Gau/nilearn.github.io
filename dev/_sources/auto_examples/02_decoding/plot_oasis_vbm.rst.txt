
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (:term:`VBM`)
to study the relationship between aging and gray matter density.

The data come from the `OASIS <https://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard :term:`VBM` pipeline (using SPM8 and
NewSegment) to create :term:`VBM` maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the :term:`ANOVA` step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the :term:`ANOVA` step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

:term:`SVM` weights are very noisy,
partly because heavy smoothing is detrimental for the prediction here.
A standard analysis using mass-univariate :term:`GLM`
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 112-123

Prediction pipeline with :term:`ANOVA` and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

In nilearn we can benefit from the built-in DecoderRegressor object to
do :term:`ANOVA` with SVR instead of manually defining the whole pipeline.
This estimator also uses Cross Validation to select best models and ensemble
them. Furthermore, you can pass ``n_jobs=<some_high_value>`` to the
DecoderRegressor class to take advantage of a multi-core system.
To save time (because these are anat images with many voxels), we include
only the 1-percent voxels most correlated with the age variable to fit. We
also want to set mask hyperparameter to be the mask we just obtained above.

.. GENERATED FROM PYTHON SOURCE LINES 123-149

.. code-block:: default


    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 150-152

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 152-165

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-183

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f8f93dee9a0>



.. GENERATED FROM PYTHON SOURCE LINES 184-186

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 186-231

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 133.18300247192383 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 20.795321226119995 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 19.073042392730713 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 18.372151533762615 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 18.045214414596558 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 17.844898223876953 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 18.299509843190513 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 18.020435299192158 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 17.770437240600586 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 17.55919517411126 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 17.392772674560547 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 17.24344949288802 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 17.114144563674927 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 16.994414182809685 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 16.859616483960835 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 16.758782466252647 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 16.642109751701355 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 16.54232639424941 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 16.621259371439614 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 16.49942784560354 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 16.38759970664978 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 16.308948528198968 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 16.21316287734292 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 16.09719623690066 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 15.996220429738361 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 15.889055252075195 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 15.77965285227849 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 15.681274087340743 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 15.596972261156356 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 15.616198835701777 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 15.500099897384644 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 15.388696793586975 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 15.282982885837555 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 15.181216117107507 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 15.07756872738109 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 14.980757883616857 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 14.88036052385966 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 14.777535651181195 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 14.67225227857891 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 14.574011802673342 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 14.475631713867188 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 14.457117772683864 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 14.376313016528174 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 14.274126490881276 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 14.176399794491854 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 14.081941074795195 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 13.983498562937198 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 13.885890803438551 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 13.782392581303913 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 13.680221489497594 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 13.58311128616333 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 13.495275647032495 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 13.454922125889706 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 13.356073190581125 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 13.259217703783953 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 13.162730758840388 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 13.068823405674527 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 12.982621866360045 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 12.883208373497272 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 12.784894442154188 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 12.683871189753216 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 12.58734649126647 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 12.495344869552119 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 12.397831564857846 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 12.344512611627579 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 12.24691832982577 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 12.153766791025797 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 12.059105538610202 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 11.969087951323566 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 11.875319121540457 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 11.77974854196821 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 11.684396347529452 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 11.591354793972439 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 11.49660988703166 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 11.403147001524228 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 11.34131669998169 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 11.244693831393594 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 11.148043601543872 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 11.054787293458595 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 10.959404208992101 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 10.86521852016449 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 10.770052559581805 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 10.67451067087127 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 10.578955047101859 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 10.489135412942796 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 10.393794957329245 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 10.298281065253324 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 10.229735264832946 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 10.139048359610818 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 10.04738981000493 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 9.957378970252144 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 9.865231768115535 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 9.771875941235088 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 9.679206063670497 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 9.58556827585748 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 9.493591434077214 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 9.401842574278513 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 9.311156730061954 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 9.238349909685097 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 9.144837930949047 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 9.052047967910767 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 8.959887070230918 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 8.867024000953226 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 8.775794920412082 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 8.684476045461802 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 8.592691830226354 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 8.501976629473129 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 8.410032180982215 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 8.318419535954794 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 8.243344070714548 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 8.151403297077525 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 8.06038598541741 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 7.969161970274789 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 7.877833172283341 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 7.787835819679394 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 7.697857006736423 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 7.604956873531999 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 7.512747214390681 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 7.420643054832847 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 7.3286618104501935 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 7.238117376963297 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 7.164729015886292 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 7.0789503230423225 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 6.990687193909311 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 6.899971662029143 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 6.810692453384399 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 6.719450613809011 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 6.628563355273149 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 6.5457611829042435 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 6.476268847783406 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 6.387700374309833 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 6.305942025803428 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 6.2141342885566475 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 6.121411786043555 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 6.078218776788284 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 5.986054279186107 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 5.893923815558939 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 5.80112319445088 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 5.707637904346853 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 5.613397690889647 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 5.519588776997157 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 5.434961369697084 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 5.341721064607862 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 5.247722535700231 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 5.15458087126414 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 5.0608950894454425 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 4.967753942698648 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 4.8745607389073795 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 4.7812261452546 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 4.687940391118095 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 4.594354311625162 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 4.503256500951502 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 4.410982734278629 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 4.325579259909836 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 4.23315632807744 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.141047616158763 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.048551486088679 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 3.955985178613359 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 3.8897647555870343 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 3.796578512251752 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 3.7035773396492004 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 3.610470998361244 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 3.517382227344277 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 3.430160213833206 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.336846898241741 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.2433903217315674 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.1502374597342615 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.056929718234582 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 2.9640768141973584 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 2.871612912804417 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 2.778357183232027 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 2.6852692330789845 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 2.5919858854870466 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.4990707477393177 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.4091339111328125 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.3160647324153354 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.222665656696666 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.129832269108228 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.036708513002717 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 1.9436716873552546 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 1.8507892025841606 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 1.7579248715500804 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.6652169620597754 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.5726050275271057 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.4799977592799973 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.3889478477271828 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.2966498303157028 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.2037703825190742 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.1109728762444029 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.0181423898727173 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 0.9253568900258917 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.8326303197451287 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.7399404048919678 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.6472406745574635 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.5546346128601389 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.4620491052285219 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.36955400875636507 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.2774013867838129 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.18487733301490245 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.0924136902219686 seconds remaining)
    1984 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 45.922 seconds)

**Estimated memory usage:**  1903 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
