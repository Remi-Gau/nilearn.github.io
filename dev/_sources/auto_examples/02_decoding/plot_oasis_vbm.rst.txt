
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print("")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f40d3f934c0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 189.7430419921875 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 41.899653673172 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 39.375351905822754 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 38.51385545730591 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 37.94840359687805 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 37.39114809036255 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 37.027894814809166 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 36.72432163783483 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 36.560359954833984 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 36.44142460823059 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 36.28216028213501 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 36.14926073767923 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 36.02616095542908 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 35.90073580008287 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 35.741204432078774 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 35.54097008705139 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 35.31167006492615 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 35.083093390745276 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 34.85613656044006 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 34.6544384454426 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 34.4581139087677 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 34.292671714510234 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 34.11252338236029 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 33.91379104489866 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 33.72393671671549 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 33.51483082771301 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 33.30235158480131 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 33.11238452240273 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 32.92227922167097 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 32.71406813325553 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 32.523476918538414 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 32.30739600427689 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 32.08916527032852 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 31.880094997810595 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 31.66511508997749 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 31.462851864951 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 31.257306999630398 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 31.05403996802665 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 30.858496916921517 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 30.666560509266002 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 30.45756435394287 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 30.268277319466193 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 30.07506215004694 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 29.879280439642972 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 29.682866595008157 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 29.484025425381134 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 29.278537853904393 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 29.07420528188665 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 28.914004484812416 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 28.7160191438636 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 28.522886753082275 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 28.337066253026325 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 28.14221350963299 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 27.95929955086618 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 27.765531169043648 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 27.55868491259488 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 27.3621392931257 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 27.16402500972413 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 26.96629375424878 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 26.765785580974512 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 26.571479320526123 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 26.37063089745944 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 26.180256197529452 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 26.001950544024268 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 25.806144505739212 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 25.60980529051561 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 25.418106295845725 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 25.230207240403587 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 25.03586032811333 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 24.838488710099373 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 24.649730954851425 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 24.462459910083826 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 24.285267300075954 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 24.104863950650987 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 23.920373961732192 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 23.72542222340902 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 23.531347613585623 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 23.341693853403065 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 23.14568536098187 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 22.94550514522987 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 22.75183117389679 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 22.562201358653883 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 22.365845854689436 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 22.172654628753662 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 21.976014307567052 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 21.780827718622547 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 21.589698913485503 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 21.39489319406707 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 21.20436685735529 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 21.01708753993002 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 20.830680078930328 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 20.645532652571962 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 20.45957559088002 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 20.27267871877199 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 20.081799228140646 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 19.890072621797263 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 19.700566152731575 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 19.514088333267527 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 19.323754461444153 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 19.13155711058414 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 18.940327167510986 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 18.753129555447266 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 18.56435516768811 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 18.37441121953205 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 18.184418238126316 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 17.998986948104132 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 17.812936688369177 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 17.62530511339134 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 17.434300042964793 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 17.242962310073572 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 17.050981196490202 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 16.859586808058594 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 16.66890471322196 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 16.47833506828916 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 16.289142596094234 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 16.101218036983322 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 15.91100887594552 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 15.720366465739716 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 15.529249070054394 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 15.339033214985824 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 15.149537404378254 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 14.961754058018204 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 14.7729154610243 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 14.584387785050927 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 14.395189669824417 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 14.206654500961303 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 14.017054092316402 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 13.828935591254647 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 13.641598641872406 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 13.453264744706855 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 13.265505423912634 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 13.076390401097655 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 12.88459488839814 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 12.69418870416799 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 12.504016986533777 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 12.315697608170685 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 12.125629537245807 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 11.93573994706147 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 11.745374575905178 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 11.554787527743002 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 11.363465820040021 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 11.173282714600258 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 10.98453300771579 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 10.79546715329577 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 10.606564892662897 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 10.418870029778315 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.229202894315327 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 10.038422284483099 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 9.848550010371854 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 9.659325537265547 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.468313217163086 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.279018619992085 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 9.089877379568 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 8.900167621039099 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 8.710337062934776 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.519607367054109 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.328384735645392 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.13757904471865 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 7.947044351432896 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.762004868789289 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.572198808193207 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.382172346115112 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.1926920384536555 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.0027016159946935 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.812505309174701 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.622958761273009 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.432991249015532 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.243123507071398 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.054029056004115 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.864245928250826 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.674462206223432 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.48524778907062 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.29631769934366 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.107017326906237 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.918650860073923 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.730910948344639 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.542480891401117 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.354214882446548 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.165771390614885 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.9769422901409297 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.788209597269694 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.599277136734177 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.410123025978004 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.2210222137430327 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.0315401865088423 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.842411936940374 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.6530102452924176 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.4634559995987835 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.2736309538496298 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.0839673072572737 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.8944131826099595 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.7049768807376242 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.5154423713684082 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.3260084495643258 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.1366329340590644 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.9472646957788712 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.757724465156088 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5682558553472994 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3788542843828298 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1894398214829028 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   37.9s finished

    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  0.223 seconds)

**Estimated memory usage:**  1849 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn.github.io/main?filepath=examples/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
