
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fa84aa9f640>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 170.73631286621094 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 25.591329097747803 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 23.796019792556763 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 23.227187315622967 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 22.871201038360596 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 22.574063301086426 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 22.348777453104656 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 22.122167008263727 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 21.933523178100586 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 21.76155850622389 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 21.66100311279297 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 21.577181404287167 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 21.434656222661335 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 21.290952682495117 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 21.15513028417315 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 20.97836748758952 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 20.802079916000366 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 20.661447707344507 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 20.554223034116955 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 20.41055330477263 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 20.276633262634277 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 20.1334574790228 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 20.014009584080092 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 19.89280797087628 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 19.8081636428833 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 19.732893228530884 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 19.656033919407772 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 19.58360802685773 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 19.497459479740687 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 19.41323965171288 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 19.32038720448812 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 19.206406601013676 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 19.0757052898407 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 18.950854272553414 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 18.830536253312058 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 18.714202676500594 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 18.58657834264967 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 18.45793257532893 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 18.33235630236174 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 18.207531598898083 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 18.089543342590332 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 17.96468255578018 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 17.833217938741047 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 17.705724405687906 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 17.585722641511396 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 17.473191022872925 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 17.36370777047199 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 17.245773097302052 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 17.125289519627888 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 17.01198757911215 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 16.894809007644653 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 16.776188583935006 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 16.656450271606445 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 16.534545691508168 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 16.413017414234304 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 16.2893891768022 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 16.179699080330987 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 16.067654145391362 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 15.952103450380521 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 15.832366729186752 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 15.711363156636557 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 15.59033652211799 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.468380097419983 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.347793601808092 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 15.229461699724197 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.138082816050604 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 15.049788987997806 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 14.954103847048176 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 14.853240335688872 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 14.743562428847603 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 14.629208598818098 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.5193377078419 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.398407406277126 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.27750596934802 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.15819188066431 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 14.03865098953247 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 13.922095875991017 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.806690949898261 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.68963437813979 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.578534259071832 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.463607788085938 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.356444005612975 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.251805596235322 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.1447286835636 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.043293351218814 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 12.946804102729349 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.842612394066743 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.738514332935729 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.633574442429977 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.525054618213954 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.415752940707737 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.30520646388714 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.191597451334415 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.078350287611768 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.967652823062652 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.855825336355913 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.751153647899628 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.640662252288504 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.53121574070989 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.419006728162667 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.306469440460205 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.194313431730365 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.08482008821824 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.971028804779053 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.85764239384578 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.744386934098744 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.63508054895221 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.523269281209073 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.411376697045785 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.297640807038054 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.183952223170888 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.073410498129356 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.961106606892177 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.848737560542283 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.745130363263582 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.634652158488397 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.523295402526855 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.416294305752485 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.305789624230338 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.196717302338417 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.08724006017049 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.976914860985497 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.86349651461742 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.750858969804717 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.639973517387144 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.526127910614013 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.411042940048945 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.29574470444927 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.182874411344528 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.067680595457091 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.951814303031334 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.837325116150252 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.723119388927112 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.608033382802978 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.493847850543349 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.3786648114522295 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.264773200539982 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.152101582854334 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.038404119187507 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.923566538652928 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.810338871819632 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.697253210324767 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.583694474797854 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.469636461951516 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.356649438540141 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.243281257563623 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.131032724903054 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.0177516402030475 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.904607837264603 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.791245393305017 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.678493897120157 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.565239633155974 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.451907735121877 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.338041204253054 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.225901393147258 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.113827167018767 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.0018535149403105 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.888958021334022 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.776757243313367 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.6650844190105705 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.552828311920166 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.4396652064708455 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.326822919610105 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.214409550274808 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.101439284115303 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.9877789959763037 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.8745019148631266 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.761017109819515 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.6472279684884206 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.5338631198251034 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.420659149394316 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.3069946584645766 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.193072429923124 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.0787817977067364 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.9647557954678594 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.850485392979213 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.7362515276128594 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.6223693203791387 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.50870961285709 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.3948946372090774 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.2810117403666177 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.166866879436851 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.052932621358515 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.9389742306672813 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.824856073960014 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.7107675397718276 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.596735764575261 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.4824846785336254 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.368275870668127 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.254136944574023 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.1399441518281634 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.0257617715765668 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9116915861765543 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7976331846701665 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6837155179879101 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5698723059434156 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4559520896600217 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.341969297622061 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.22796059858919396 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11397166467791227 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   22.8s finished

    1986 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  59.747 seconds)

**Estimated memory usage:**  1865 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
