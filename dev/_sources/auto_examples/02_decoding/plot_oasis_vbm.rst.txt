
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print("")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fb565a51c40>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 192.5206184387207 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 39.95520305633545 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 37.99126982688904 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 38.10732777913412 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 37.244906187057495 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 36.815163373947144 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 36.33604709307353 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 35.98320092473711 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 35.58551788330078 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 35.26472907596164 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 34.9129683971405 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 34.620783740823924 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 34.370985905329384 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 34.15472302070031 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 33.91269493103027 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 33.688254833221436 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 33.47132360935211 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 33.27852150973152 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 33.08046340942383 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 32.900428771972656 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 32.74037146568298 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 32.56786750611805 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 32.37760827758096 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 32.16756055666053 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 31.97784344355265 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 31.790003299713135 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 31.582270750632652 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 31.39322328567505 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 31.189865691321238 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 31.00396573132482 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 30.818352699279785 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 30.62124492276099 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 30.448187291622162 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 30.279552416367963 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 30.090363081763776 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 29.906625407082696 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 29.71052450603909 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 29.516523122787476 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 29.334144228383117 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 29.14816139905881 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 28.9620361328125 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 28.792927247721973 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 28.624481201171875 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 28.43754650271216 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 28.25301504135132 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 28.075174834993152 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 27.90136246059252 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 27.715848349510356 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 27.532501697540283 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 27.354261057717462 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 27.16815733909607 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 26.98153437352648 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 26.79261821966905 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 26.600246888286662 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 26.411101509023595 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 26.2284159226851 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 26.032821791512628 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 25.84208475916009 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 25.662123902090663 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 25.480327727430957 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 25.300663073857628 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 25.120448479886917 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 24.950646700397613 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 24.77543052037557 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 24.59432265162468 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 24.408243821217464 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 24.22498552726977 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 24.044931920606697 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 23.861824792974136 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 23.677045991455298 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 23.493194716317316 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 23.314250616960123 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 23.131052229139538 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 22.949810243632697 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 22.76654888488151 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 22.5842022895813 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 22.40045438314739 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 22.217079013973088 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 22.037191048646584 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 21.851974864549273 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 21.67014491558075 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 21.486107258149136 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 21.305116095194002 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 21.12673258781433 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 20.95298779578436 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 20.77070066508125 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 20.634065084679182 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 20.451608934621703 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 20.26950385353782 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 20.084134067042488 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 19.90465537707011 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 19.7240477341872 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 19.540920309398487 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 19.357580146481915 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 19.174119229012348 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 18.99339919341238 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 18.811308483282723 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 18.627288680715658 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 18.442973759709574 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 18.263468737554067 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 18.079139947891235 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 17.895571968343 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 17.715169065138873 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 17.532235793697023 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 17.350329472468452 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 17.171125309807913 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 16.99484283519241 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 16.814864292323033 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 16.632297613002635 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 16.452015798026267 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 16.27068875052712 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 16.08811037819665 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 15.906530482428414 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 15.72724317660374 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 15.54695345226087 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 15.366053311721137 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 15.182179064586245 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 15.002864733720438 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 14.822147005695408 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 14.639211163801306 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 14.457716782887776 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 14.274805047295311 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 14.090881066244158 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 13.913499083945421 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 13.735047509593349 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 13.557489824295043 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 13.376963744087826 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 13.196252836017157 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 13.01894997060299 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 12.840910935586736 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 12.661161587788508 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 12.483228108355107 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 12.304162906877922 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 12.12420487941656 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 11.944271521781808 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 11.766665176109031 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 11.587241565479951 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 11.405673704008116 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 11.224657932917276 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 11.043701086112922 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 10.862221956253052 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 10.680143853451343 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 10.498434479807464 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 10.317604755188201 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 10.13612883620792 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 9.954475526151985 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 9.771706424347341 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 9.588667806313962 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 9.406049277331379 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 9.223688512840527 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.042136748631794 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 8.860754575160955 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 8.679119561847887 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 8.498015710730959 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 8.316742732927397 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.13482935966984 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.9533398029131765 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.7731341313404645 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 7.592179669609552 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.411019509693362 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.230214416980743 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.050089036455806 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.870161453882853 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.689916188000169 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.508734592577306 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.3281834847999345 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.147052569561694 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.965923066624624 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.785547528948102 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.6053268331042405 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.424613994710586 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.244172471308569 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.063316511553388 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.882481976051551 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.70193755215612 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.521442515509469 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.34106107191606 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.160224719236126 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.979214579871531 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.7984749471675086 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.617507908079359 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.4368651321579735 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.2560491352290897 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.075433450969842 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.8947039272474204 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.713810559865591 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.532667503562025 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.3517128949496837 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.1707604083609073 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.9898206947972534 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.809066245430394 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.6282776113580035 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.4474467436472573 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.266578031945105 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.0855891065499217 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.9045997521816156 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.7236860966195865 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5427409186581065 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3618286980523004 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.18091180216726946 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   36.2s finished

    1976 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  57.202 seconds)

**Estimated memory usage:**  1872 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/nilearn/nilearn.github.io/main?filepath=examples/auto_examples/02_decoding/plot_oasis_vbm.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
