
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print("")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f80970f4c10>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 202.08358764648438 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 39.25348711013794 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 37.536903619766235 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 36.39238405227661 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 35.74949812889099 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 35.18940711021423 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 34.72571094830831 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 34.38364808900016 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 34.02160835266113 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 33.77712572945489 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 33.528315782547 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 33.235543727874756 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 32.99501887957255 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 32.748332665516784 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 32.531758649008616 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 32.31117065747579 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 32.097971081733704 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 31.87749931391548 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 31.6585160891215 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 31.452881223277043 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 31.255461931228638 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 31.085480428877332 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 30.904679580168295 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 30.72924209677655 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 30.554624239603676 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 30.367265462875366 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 30.19892868628869 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 30.016208692833228 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 29.85334042140416 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 29.689076579850294 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 29.50400424003601 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 29.32224598238545 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 29.14159655570984 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 28.978181701717954 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 28.810798574896424 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 28.6424207006182 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 28.465795596440632 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 28.297105170585013 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 28.12790638522098 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 27.9574386890118 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 27.78399085998535 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 27.6104910257386 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 27.43463050751459 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 27.263738349426625 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 27.079904599623248 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 26.89694815211826 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 26.713351871656336 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 26.53365397453308 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 26.350822687149048 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 26.168216038723383 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 25.99824285507202 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 25.816428432277604 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 25.64200650728666 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 25.464372936284768 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 25.285285852573537 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 25.119252920150757 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 24.950437341417587 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 24.772031118995262 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 24.600287190799055 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 24.430110381821454 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 24.262936274210613 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 24.091680511099394 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 23.945866630923362 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 23.7915670077006 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 23.61548200249672 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 23.436479165003853 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 23.2609819354433 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 23.091654492847955 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 22.913632056292364 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 22.733093337736268 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 22.556654180799214 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 22.384978102966095 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 22.219557020399304 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 22.052538368799915 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 21.88664583902101 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 21.711033185323082 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 21.537953163448133 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 21.35774327563001 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 21.18443209085709 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 21.014408413367935 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 20.838431239128113 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 20.661783556879303 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 20.483811454075138 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 20.30494598882744 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 20.12717260633196 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 19.951832855449005 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 19.7760781853698 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 19.597838536076164 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 19.42338514328003 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 19.252210314354198 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 19.076890336142647 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 18.90315548666231 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 18.73138372794442 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 18.557388746610254 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 18.386236444432683 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 18.211515388990705 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 18.036794463793434 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 17.86160825699875 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 17.686086635200347 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 17.51286560116392 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 17.339866399765015 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 17.167999456424525 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 16.992544866075704 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 16.819340319309422 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 16.644691173846905 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 16.469363110406057 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 16.295225296380384 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 16.12248726648705 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 15.951676898532444 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 15.77777156261129 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 15.605729731646452 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 15.43128329569155 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 15.25864154951913 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 15.089744283034738 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 14.915906947955751 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 14.746412608934484 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 14.57825571915199 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 14.41576117124313 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 14.251138388100317 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 14.085977343951955 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 13.917393843332926 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 13.744585437222947 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 13.57553819359326 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 13.402471914523984 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 13.231982492631483 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 13.06066575050354 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 12.891996871857417 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 12.718444456265667 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 12.545420721173286 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 12.373652874037276 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 12.199345662043644 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 12.025864204377617 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 11.851805947043678 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 11.678575630474809 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 11.504319970287494 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 11.333475174727262 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 11.163744645960191 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.993225513583551 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 10.822726377542468 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 10.653051004135351 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 10.48363024847848 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 10.312399312959496 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 10.14065603806939 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.970782525055892 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.796438429090712 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 9.626597708669202 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 9.454377082929218 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 9.28019120255295 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 9.110320252341193 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.935607863752635 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.75962209701538 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 8.590076225482864 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 8.416650897578188 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 8.240649520961288 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 8.065045093561148 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.888390002712128 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.712647462502504 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.538192076288211 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 7.364202577856521 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.189307590700546 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.013329803943634 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.837094278809447 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.661421666910618 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.485714989937156 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.311176212822518 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.135238784732241 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.9591006514537765 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.78357881842973 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.607800665355864 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.432577683375432 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.2569193840026855 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.081295780271117 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.906242326248524 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.730886759785559 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.555134534835815 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.379467930112566 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.204021388834173 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.028511553834387 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.8528570887747775 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.6776384161837274 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.5022542476654053 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.3268746196894354 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.1521660836188348 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.976910687535187 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.801595107368801 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.6264166123158224 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.451438775626562 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.2762541566940553 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.10116279886124 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.925821238724643 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.7505215218192651 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.5752694207336266 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.4003063937028248 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.2252707851983105 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.050161147854992 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.875201934423202 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.7001407389738121 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5251210474120784 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.35008084894430763 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.17508648867583154 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   35.0s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  2.560 seconds)

**Estimated memory usage:**  1922 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
