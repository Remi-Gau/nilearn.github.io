
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f51315558b0>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 167.75846481323242 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 29.52373766899109 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 27.473034381866455 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 26.732662677764896 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 26.285309553146362 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 26.340582132339478 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 25.99408499399821 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 25.79338438170297 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 25.713380813598633 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 25.588562647501625 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 25.37353515625 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.14670963720842 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 24.969545602798462 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 24.76946234703064 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 24.578978776931763 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 24.41473968823751 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 24.268182039260864 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 24.10659944309908 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 23.979018449783325 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 23.81579401618556 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 23.660913705825806 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 23.492698521841138 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 23.344284621152013 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 23.216431897619497 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 23.063591957092285 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 22.91561794281006 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 22.770750265855057 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 22.628439708992286 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 22.48764681816101 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 22.343609234382363 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 22.204010248184204 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 22.05472767737604 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 21.916903495788574 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 21.77156846451037 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 21.637377248090857 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 21.499353442873275 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 21.35653660032484 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 21.222344675579585 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 21.087553250162227 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 20.948133376928478 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 20.82624340057373 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 20.716546785540697 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 20.604040270759945 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 20.491768836975098 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 20.360668139024213 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 20.231026940875584 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 20.103671291600104 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 19.970942106652767 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 19.84192649523417 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 19.713853067281295 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 19.580310344696045 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 19.441872400396008 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 19.30348143210778 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 19.170200707777493 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.03517303643403 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 18.897055994380604 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 18.762199197496688 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 18.62910407467892 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 18.503861961693598 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 18.37223170571408 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 18.236873785654705 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.103260399865324 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 17.9696369324961 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 17.832982157904002 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 17.698806315660477 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 17.570063187525825 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 17.435458363908708 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 17.306033337294167 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.17225418371313 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.041985767475072 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 16.908943040030344 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 16.776616472593496 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 16.643477969699436 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 16.509340096826424 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 16.37736839861483 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.246223052342735 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.115738705584878 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 15.985361987894231 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 15.85425696006188 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 15.720990428441686 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 15.594804167747498 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 15.473429094126196 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 15.350061585263507 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.220676327326212 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.088198956989107 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 14.956212885239546 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 14.827362947685772 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 14.698117617903085 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 14.566545919938521 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 14.436798607365468 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.31412802802192 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.186203621246003 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.055035342340885 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 13.925816589786162 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 13.796150958284418 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 13.66537390257183 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 13.535065372784931 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.406178216344303 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.275981611135055 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.144684960143733 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.015138864517212 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 12.884401248233154 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 12.753272926106172 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 12.623441145258044 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 12.492763886084925 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.362785123643421 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.232886287401307 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.103855253380036 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 11.974539500695688 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 11.844238272500695 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 11.713988412510266 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 11.583414636216723 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.453681332724434 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.322377576237232 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.192798041460808 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.062418782192728 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 10.933405711733062 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 10.802730446187859 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 10.672886088743049 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.542358664905324 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.412909348805744 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.283813900198819 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.15484386975648 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.030209582026412 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 9.904215743464809 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 9.77628321647644 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.646250573415605 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.514768322621743 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.384134441614151 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.252958831861037 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.122370903308575 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 8.99204190632769 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 8.86264492526199 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 8.732134482018035 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.601360210731848 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.477194362216526 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.34945712370031 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.218421365222792 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.087970799294071 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.956828185980268 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.826007740838187 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.695317227789696 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.563970653104111 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.434791479911004 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.304691460397509 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.173998783374654 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.04358319387044 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.9131210855886245 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.782237239786097 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.65146643203377 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.520944118499756 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.390290623469069 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.260047109503494 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.129954406638551 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.999637575892659 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.869071675885109 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.739353332764063 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.608680406193824 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.478172293192223 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.347457659319511 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.216923952102661 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.086737115931067 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.956060515509711 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.827347440953635 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.6982964713399005 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.56843521378257 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.438273676906723 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.3088097343901675 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.17812747047061 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.04760421662641 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.9171384362613457 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.7863807301772265 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.656100500461667 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.5257868697877566 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.395144673599594 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.2643899577004567 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.133674014698375 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.002944798119324 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.8722479584511746 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.7417406130103426 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.6110576523674855 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.4806656336916086 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.350402994470282 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.219785635588599 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.0890639139258345 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.9585053147496405 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.8279737580207087 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.6973996060417298 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.566772014536756 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.4367053571832242 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.306034853583888 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.1753361262576119 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0447315971056619 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9141485419298082 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.7834587711648843 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.652856435531225 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5222602766387316 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.39169405075499253 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.26114212142096627 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1305745498618888 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   26.1s finished

    1960 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  5.695 seconds)

**Estimated memory usage:**  1916 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
