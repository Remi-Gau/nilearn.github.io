
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f25ecd1ff10>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 249.04966354370117 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 42.26256275177002 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 39.197216749191284 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 38.29775357246399 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 38.219566345214844 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 37.685895681381226 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 37.30486671129863 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 36.85601595469884 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 36.647151947021484 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 36.30723439322578 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 36.1115984916687 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 35.82684029232372 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 35.675789435704544 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 35.52784321858333 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 35.443279470716206 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 35.31319046020508 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 35.09968948364258 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 34.98877943263334 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 34.77150011062622 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 34.657329747551366 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 34.49118661880493 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 34.2493668283735 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 34.015437581322416 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 33.81137143010679 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 33.622539838155106 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 33.429256439208984 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 33.258851546507614 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 33.02859777874417 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 32.849308422633584 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 32.64291959795458 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 32.48861336708069 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 32.30866847499724 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 32.09270632266998 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 31.877126903244942 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 31.64491427645964 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 31.462529284613474 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 31.253214465247257 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 31.03326968244604 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 30.839996112020394 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 30.63895846024538 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 30.444449424743652 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 30.246569586963187 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 30.027875820795696 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 29.81694792592248 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 29.61980873888189 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 29.485062625673084 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 29.328385239062104 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 29.120325945793315 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 28.90451649824778 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 28.710754151246988 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 28.498354196548462 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 28.31091822829901 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 28.116516516758846 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 27.917440895764333 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 27.73103404928137 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 27.533527504314076 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 27.341035366058353 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 27.15449487953855 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 26.95929852025262 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 26.766088134151392 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 26.567557891209923 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 26.386015548080696 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 26.180372415050382 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 25.987513863851152 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 25.786911457777023 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 25.596570198352524 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 25.398725907007854 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 25.212395397584828 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 25.040953580070944 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 24.84186683530393 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 24.647285052708217 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 24.452660876260676 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 24.266108194986977 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 24.091925209515715 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 23.908731144827765 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 23.715181350708008 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 23.51557099191766 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 23.31999032838004 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 23.12386819643852 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 22.938067306446122 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 22.74272131919861 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 22.556210353050705 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 22.35839976915499 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 22.168665647506714 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 21.97931070554824 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 21.783344703562122 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 21.589239070581833 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 21.396822129172843 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 21.206022132526744 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 21.01484698124146 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 20.82383916113112 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 20.630366731476 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 20.43654264574466 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 20.253649865427327 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 20.05953588384263 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 19.86530640250758 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 19.67439911762873 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 19.484951444507875 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 19.295546760364456 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 19.1033875653238 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 18.909261226654053 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 18.725131436149674 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 18.540255294126624 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 18.35209606920631 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 18.16186677492582 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 17.974473646708898 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 17.796310852158744 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 17.606350990099326 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 17.41715395892108 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 17.230163607028647 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 17.04207567735152 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 16.849866478292792 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 16.660937241145543 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 16.472731862447958 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 16.281316184161003 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 16.091722467671268 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 15.89841628074646 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 15.708432670332428 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 15.51921494936539 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 15.326587097985405 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 15.136730829874674 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 14.945418761781426 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 14.7546700141469 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 14.563284476598103 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 14.370383501052856 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 14.180788707733154 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 13.98925198449029 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 13.797262587885218 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 13.606293395161629 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 13.417708398759826 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 13.230357500223013 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 13.052989461039768 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 12.864094228455514 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 12.672073179617861 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 12.482377564729148 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 12.29476558720624 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 12.10820904900046 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 11.920316767518537 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 11.730736266011776 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 11.540079830361785 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 11.350725480488368 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 11.161187251408895 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 10.972023090846102 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 10.782746570093648 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 10.601575811704 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 10.410664624181287 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.22284971851192 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 10.03200568147257 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 9.840790097777909 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 9.65931590771515 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.480101585388184 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.292291885969654 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 9.102457523345947 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 8.916202646454956 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 8.724815975536 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.533679308429841 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.344311274014986 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.155788945544298 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 7.966994001895566 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.780138531570914 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.591876268386841 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.402298078773925 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.212467632175963 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.022301120992087 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.830953725954381 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.641272436488759 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.451517748545451 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.261569335789024 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.072009949457078 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.882555518629988 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.692570882685045 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.502922875142237 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.3132775606111045 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.12368711019527 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.934777503726126 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.745627437319074 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.5571147636933755 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.368182765561982 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.181018004256687 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.992162904259879 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.8033224476708303 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.6130393091486304 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.4226554147489776 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.2328378659128494 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.0428418905838677 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.8524041369154647 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.66215463607542 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.472096911088668 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.2826467524183554 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.092329946144548 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.901899914992483 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.711503765345868 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.521262139081955 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.3308554461582953 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.1407779811583845 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.950569226191594 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.760349468309052 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5702169449801373 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.380163089193479 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1900728899030829 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   38.0s finished

    1992 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  29.840 seconds)

**Estimated memory usage:**  1858 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
