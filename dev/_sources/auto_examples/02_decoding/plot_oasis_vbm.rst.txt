
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fba6bc946d0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 145.59030532836914 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 24.66975164413452 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 22.64048981666565 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 21.95723843574524 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 21.608543634414673 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 21.30703639984131 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 21.03643528620402 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 20.870998689106532 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 20.656030654907227 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 20.48987587292989 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 20.383443117141724 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 20.2787618637085 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 20.151610374450684 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 20.022427192101112 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 19.88800130571638 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 19.776913245519005 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 19.654422521591187 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 19.541740221135758 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 19.425732215245564 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 19.30791106976961 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 19.199490308761597 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 19.104754572822934 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 18.99961159446023 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 18.90938444759535 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 18.79093583424886 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 18.668885231018066 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 18.55015199001019 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 18.440847096619784 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 18.325751202447076 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 18.213956150515326 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 18.09742299715678 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 17.976600693118186 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 17.86747670173645 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 17.752305110295612 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 17.645492090898404 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 17.53426112447466 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 17.42748853895399 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 17.338688843959087 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 17.228410570245043 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 17.11497509785188 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 17.00611114501953 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 16.902314744344572 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 16.790535495394753 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 16.679686224737832 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 16.5696194822138 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 16.461324532826744 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 16.34886637977932 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 16.237738868023488 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 16.126747449239094 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 16.013965835376663 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 15.903942346572876 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 15.798380346859203 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 15.68813391832205 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 15.580065857689336 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 15.47275044299938 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 15.368713769045742 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 15.26831204550607 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 15.1704461909177 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 15.063968485799327 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 14.96372573254472 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 14.856723546981813 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 14.752516852050531 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 14.647094226652575 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 14.545440299170357 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 14.440094083547592 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 14.336238164168138 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 14.2309783299764 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 14.126015727199725 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 14.02101499894086 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 13.917005849921186 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 13.813469682421003 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 13.71246106523863 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 13.608042822943792 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 13.501611631210537 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 13.393368012196309 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 13.284628788630169 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 13.175727505432931 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.069330187586996 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 12.963459351123907 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 12.85506348066692 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 12.745644450187683 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 12.636556940314211 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 12.528359872538868 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 12.420520719275418 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 12.313919203622 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 12.208058216992548 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.100219571313191 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 11.99258624000111 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 11.890664187344637 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 11.782592642173338 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 11.67482786708408 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 11.567360385433657 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 11.460167729336284 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 11.353989842117475 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.25276255607605 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.145790815353395 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.038528243700663 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 10.930736856362254 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 10.82515717039303 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 10.71763510896702 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 10.609402418136597 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 10.502379542530173 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 10.395182488011379 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.288727355234832 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.182102056650015 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.075614656720843 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 9.968705591165795 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 9.862823343722619 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 9.756635453965929 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 9.64946591744729 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 9.543053887107156 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 9.436021207689166 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.330235941069466 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.222593763233286 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.117023125029448 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.009705222171286 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 8.903155236408628 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 8.795891533550035 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 8.689442149663376 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 8.584460783405465 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 8.47828451792399 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.372634674891954 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.266206287946858 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.16018573636931 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.05467100297251 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 7.9484351634979244 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 7.843315533229283 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 7.738015287504421 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 7.631663426756859 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 7.525605952092843 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.41917925614577 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.313124794996422 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.206614133083459 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.101167212751576 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 6.994942070832892 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 6.8900899710478605 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 6.784305348115809 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 6.677814746425099 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.5712502002716064 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.465360907341936 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.359808785574776 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.253937689125115 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.148429863889453 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.042019383890645 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 5.935286508666144 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 5.829216159623244 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 5.723813961629998 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.618265967790773 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.511677394042144 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.4054609593129 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.299465576807657 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.194708468898242 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.089271645796926 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 4.983506374109805 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 4.877682441240781 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.772085151364727 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.666420533106877 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.5603943205183475 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.454537783996968 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.348732642407687 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.243181765079498 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.137650888158668 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.031582953017435 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 3.9255218023171454 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.819388337251617 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.712994365981131 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.6069769801863703 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.50064530915129 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.394583883739653 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.2884725720219357 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.182429425856647 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.076279550965069 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 2.97003238700157 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.8636577818435054 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.757851044336955 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.651916776384626 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.5458917401053687 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.440019070091894 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.3341253446728993 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.228011720007358 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.1219019095102944 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.0158817438789494 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.9098180833753648 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.8039493274167588 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.6977284058280613 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.5914905457883268 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.4852792498885945 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.3792108558715983 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.2730905045854284 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.167155689663357 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.0610618340341669 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.9549301981301832 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.8488435447216034 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7427390486465216 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6366205436667216 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5304800485953306 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4243853627418985 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3182935230623042 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.21222927112772008 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.10612007241752279 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   21.2s finished

    1976 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  57.297 seconds)

**Estimated memory usage:**  1898 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
