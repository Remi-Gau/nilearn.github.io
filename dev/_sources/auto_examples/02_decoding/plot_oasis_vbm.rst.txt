
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-60

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 61-63

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 63-86

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 87-89

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 89-105

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 106-108

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 108-143

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 144-146

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 146-159

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 160-162

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 162-177

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f748259b370>



.. GENERATED FROM PYTHON SOURCE LINES 178-180

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 180-225

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 163.67435455322266 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 27.735856533050537 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 25.67539644241333 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 24.950945456822716 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 24.51718497276306 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 24.191516160964966 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 24.09758798281352 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 23.856043577194214 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 23.680944442749023 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 23.50368356704712 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 23.357425212860107 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 23.206873850388963 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 23.099161863327026 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 22.998105122492863 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 22.87411185673305 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 22.750651359558105 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 22.634159803390503 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 22.53126786736881 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 22.422929022047253 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 22.300960666254948 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 22.189443111419678 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 22.055166925702775 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 21.927341959693216 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 21.783674675485365 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 21.657201131184895 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 21.538341760635376 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 21.41676510297335 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 21.277413412376685 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 21.14157693726676 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 21.023659031966634 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 20.89838274319967 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 20.780022659609394 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 20.654307425022125 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 20.528217965906315 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 20.399647305993476 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 20.26479128428868 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 20.129773351881237 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 20.012563505688227 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 19.8914927808862 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 19.792468339968952 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 19.709853172302246 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 19.62894112307851 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 19.533367122922623 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 19.396192972050155 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 19.266809008338235 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 19.138607846366035 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 19.00474681024966 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 18.87182996628132 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 18.742324193318684 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 18.621428815685974 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 18.487223625183105 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 18.354068181094 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 18.224754663614128 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 18.10045020535307 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 17.964756727218628 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 17.844073512337424 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 17.72081974574498 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 17.59799937616315 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 17.471107655558093 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 17.344711546170508 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 17.21751133600871 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 17.094978496676585 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 16.969410042608935 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 16.83985832759312 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 16.713620513677597 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 16.58889809021583 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 16.4682251106609 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 16.341977934339152 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 16.215211082907285 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 16.09383071332738 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 15.990753855024066 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 15.869765946562861 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 15.754609425862629 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 15.627406482827174 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 15.500770646172601 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 15.374765396118164 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 15.248564833088924 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 15.12273570159813 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 14.995638449986776 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 14.867601041552387 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 14.742709994316101 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 14.616901285854388 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 14.492273423729873 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 14.367206079414093 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 14.239658639544531 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 14.115471853929408 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 13.993831789770791 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 13.868506132871255 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 13.742019826715643 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 13.616545682542778 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 13.492815176645916 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 13.369819798312344 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 13.244489783826083 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 13.120731233268657 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.999070913233655 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 12.876558592444972 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 12.752250790596008 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 12.629739751520844 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 12.508111866153017 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 12.386943846037893 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 12.26400089263916 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 12.140121941519256 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 12.016930940104466 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.894441921734115 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 11.775263126079853 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 11.650818881534395 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 11.528109064641988 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 11.404753199247557 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 11.280896186828613 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 11.157892395596985 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 11.034507036209106 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.911883184501717 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.78865030833653 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 10.665575569709844 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 10.543990398708143 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 10.422912877538929 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 10.300591805885578 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 10.177258035056612 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 10.054931179951813 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.93167241481172 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.809918721516926 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.68769350130696 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 9.56505998236234 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 9.445983072606529 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 9.3226144929086 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 9.19900860786438 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.077099266506377 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.960552296300571 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.836810648441315 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.712672359259553 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 8.589459841067974 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 8.468635120464645 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 8.345492153456716 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 8.222040113649872 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.099555318035296 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.976195008666426 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.853044734281652 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.729993452991012 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.606953123341436 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.48503031490518 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.362438338143485 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.239292696012673 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.1157718309214415 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.993244796366125 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.8702445824941 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.747173810827321 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.624490078181436 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.502665915456759 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.3798483900121745 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.257385161099018 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.134916941324869 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.013027702735749 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.890488022252133 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.769219909618104 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.6466773516171935 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.524792878858505 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.402703395256629 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.280560153305151 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.157836591141133 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.035184953197743 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.9122068881988525 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.789313340038987 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.665881401226844 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.543105640294361 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.422404923090121 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.29896127093922 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.175859086484794 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.057401492924034 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.9341299420311335 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.810886257498927 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.6882122123942658 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.5655337969462075 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.4424876612286237 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.319264577303319 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.1961398289121434 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.0732669830322266 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.950190338221463 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.827175922986478 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.7044035772259316 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.581743207057761 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.4588729275597463 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.335902526233736 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.2129110268184116 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.090575646832993 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.9676451683044434 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.8446353255091488 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.7217302630024571 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.5986726143780876 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.4756484792587603 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.352572028599088 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.2294797269921554 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.1064687948576444 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.983523537715276 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.8605869557573387 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.7375842001020294 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6146444173959585 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.49170491646747194 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3687687537391779 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.24581799362645007 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.12290915172902783 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   24.6s finished

    1959 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  1.587 seconds)

**Estimated memory usage:**  1891 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
