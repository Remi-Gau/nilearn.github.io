
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f3b1440ca00>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 147.9053497314453 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 25.816030025482178 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 24.093305110931396 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 23.422795295715332 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 22.979077339172363 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 22.647324800491333 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 22.55756441752116 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 22.302801336560933 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 22.17989730834961 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 22.010681443744236 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 21.838282823562622 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 21.70250045169484 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 21.597739855448403 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 21.485933432212242 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 21.29358438083104 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 21.17981791496277 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 21.067185878753662 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 20.928066604277667 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 20.805495103200276 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 20.701507329940796 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 20.548725128173828 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 20.450293007351103 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 20.3497136072679 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 20.205171191174053 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 20.081421534220375 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 19.9580819606781 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 19.8486831004803 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 19.73590964741177 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 19.626605374472483 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 19.57390130799392 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 19.465365807215374 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 19.329932443557247 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 19.23645830154419 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 19.119170571818497 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 19.01006437750424 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 18.874806097575597 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 18.76494354671902 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 18.64138329995645 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 18.518559656645124 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 18.438074258657604 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 18.317766189575195 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 18.200164946114143 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 18.08771019890195 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 17.979046450104825 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 17.844201694835316 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 17.72543681992425 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 17.627329567204352 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 17.511420173847927 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 17.396571040153503 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 17.288925749914988 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 17.157556772232056 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 17.04257328370038 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 16.931409248938927 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 16.80336686800111 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 16.686018837822807 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 16.563045133243907 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 16.452320643833705 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 16.331854021340085 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 16.214259534046565 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 16.096581689382003 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 15.983128945032757 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 15.865668961259185 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.74845742410229 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.632383626604836 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 15.516165941953659 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.408087510329027 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 15.284790421977187 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.178096230350324 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 15.058990590712604 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 14.94272606269173 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 14.825407675334386 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.706272222626378 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.590865665011934 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.474582234474077 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.361793408522734 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 14.244423309961956 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.130443987093473 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 14.010397957516956 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.896347210957455 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.783184377452995 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.665331721305847 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.555031620425943 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.442469026984238 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.331049631877118 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.216480345953078 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.102874264997595 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.991980746734972 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.872960087896764 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.762685905803334 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.649617489804042 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.532716433207195 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.427559629901424 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.315355974694958 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.198444379273282 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.082939995096085 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.968171646720485 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.852301081021626 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.738038296552048 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.62907292891522 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.511240997699774 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.395019292831421 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.2813507637175 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.167954664604338 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.054820975053659 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.937323203453651 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.82929313750494 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.713642678170833 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.599798416422907 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.48475412969236 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.370657706479413 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.254954099655151 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.140324745092306 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.029083388192312 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.914860529182231 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.801928775352344 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.687428661014723 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.577699184417725 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.46451659487863 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.353766449427201 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.23702692785183 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.12462027867635 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.008684950426591 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.893751433638275 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.779068256781352 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.665169992754537 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.553240394592285 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.440944141811794 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.325815529335202 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.212106332182884 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.098692439323248 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.984656920799842 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.871382334760127 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.756125139467644 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.642313322626559 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.5297091078402385 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.414371066623263 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.299768447875977 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.184983585872789 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.071251437283944 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.957901518979519 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.843527351106916 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.72908764020771 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.615331041980797 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.5003121949575995 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.386380871136983 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.273083719713934 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.158079356363374 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.044645395408683 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.930670203389348 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.8165827805563906 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.703560511271158 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.588829174736477 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.475403434351871 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.362143142550599 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.246599807367696 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.132212308145339 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.018070153700999 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.904091081801494 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.790104205095314 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.675917019634126 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.56154602766037 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.447065517769097 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.3326428466373015 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.218433826247607 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.104212871411952 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.9909689787662392 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.877500341599246 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.7638205011447745 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.6505092439197355 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.536768735513179 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.4219904506907746 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.3084255617264415 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.1942635026088984 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.079475798358807 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.9654610074799637 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.8507922717503136 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.7368168397383252 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.6231142881899903 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.508904333864705 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.395136529506918 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.2809220949808755 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.166579640372682 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.0523175171443393 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.938030209046244 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.8238352278004522 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.7097128661903176 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.5957584534921954 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.4816337575249494 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.367829992416057 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2539690285132674 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.1400159032721269 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.0259216930229627 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9118641217549641 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7979328224696025 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6838757278992957 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5698705514272053 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.455862638901691 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3418973073136383 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.22793375121222603 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11396417785529515 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   22.8s finished

    1968 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  59.942 seconds)

**Estimated memory usage:**  1847 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
