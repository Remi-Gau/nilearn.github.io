
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (:term:`VBM`)
to study the relationship between aging and gray matter density.

The data come from the `OASIS <https://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard :term:`VBM` pipeline (using SPM8 and
NewSegment) to create :term:`VBM` maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the :term:`ANOVA` step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the :term:`ANOVA` step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

:term:`SVM` weights are very noisy,
partly because heavy smoothing is detrimental for the prediction here.
A standard analysis using mass-univariate :term:`GLM`
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 112-123

Prediction pipeline with :term:`ANOVA` and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

In nilearn we can benefit from the built-in DecoderRegressor object to
do :term:`ANOVA` with SVR instead of manually defining the whole pipeline.
This estimator also uses Cross Validation to select best models and ensemble
them. Furthermore, you can pass ``n_jobs=<some_high_value>`` to the
DecoderRegressor class to take advantage of a multi-core system.
To save time (because these are anat images with many voxels), we include
only the 1-percent voxels most correlated with the age variable to fit. We
also want to set mask hyperparameter to be the mask we just obtained above.

.. GENERATED FROM PYTHON SOURCE LINES 123-149

.. code-block:: default


    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 150-152

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 152-165

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-183

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f651ce3ae50>



.. GENERATED FROM PYTHON SOURCE LINES 184-186

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 186-231

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 170.6075668334961 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 30.122734546661377 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 28.013694763183594 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.53615212440491 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 26.998690366744995 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 27.089404106140137 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.72325134277344 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.4079578604017 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.226957321166992 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 26.007273965411716 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 25.79234290122986 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.578001824292272 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.399171113967896 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.364144545335037 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.200200864246916 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 25.0285005569458 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 24.853304266929626 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 24.684576567481546 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.53145877520243 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.39260765125877 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.23275637626648 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.168554703394573 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.010067636316474 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 23.848776371582694 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 23.694356282552082 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.55110478401184 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.395081043243408 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.24404091305203 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.171825681413925 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.023751217743445 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 22.871209859848022 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 22.722069032730595 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 22.572367429733276 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.427400328896262 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.304645482231592 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.164019550595967 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.088079293568928 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 22.05888355100477 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 21.913385190461813 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 21.77633460974082 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.631175994873047 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.486189365386963 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.338590871720086 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.231314232183056 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.08306511965665 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 20.93583122889201 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 20.789017563280854 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.64694698313449 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.518305102984108 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.379480089460102 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.250629425048828 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.14834272627737 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 20.004105677971474 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 19.859854122377794 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.719520833757187 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.57408343661915 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.467945098876953 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.353571615721048 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.276443645871918 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 19.14703449556383 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 19.01533619562785 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.885617529759642 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.7494145747154 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.613262297615172 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.476155430078506 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.35317430129418 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.212012832814995 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.0701436462687 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.931105683831607 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.79011262672535 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.644879749843053 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.505538792677328 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.367710537380642 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.25264244536831 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.10945313685649 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.970691680908203 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.8344270932047 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.695173932360365 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.553403016848442 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.412997556638114 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.271838784217834 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.165821773034555 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.0427451598935 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.901978797223194 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.761179083869571 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.618487007477706 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.4795184745345 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.34149969309226 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.214120518077504 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.074140170986732 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.936768982145523 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.796989061020232 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.661420759947404 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.521490197027884 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.38279201629314 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.243942235645497 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.11979955434799 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.981966075208998 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.842233988703514 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.706468810938825 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.565856456756592 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.428956664434754 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.289646756415275 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.167328982677274 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.030075219961313 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.892321745554606 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.754409736057498 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.615882242951438 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.477310339609781 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.339223037072278 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.200225504961882 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.074144283930462 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.93645259312221 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.799044912895269 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.662942840341936 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.52500441799993 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.387034539518686 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.250260966455835 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.120680946414755 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.984415795622754 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.847898960113525 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.711594246635753 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.574973118109781 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.440220363740998 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.304444982159522 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.168380832672119 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.038959389641171 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.902680250603382 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.766747936606407 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.630711512972217 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.495180735221275 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.362843906606427 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.226923993139556 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.096987190103173 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.960610193992729 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.824447181489733 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.690891602460075 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.553965697323319 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.417729260264963 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.281695878762992 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.148445129394531 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.015017915279307 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.87834232625827 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.742295872081409 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.606136851840549 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.4690886201529665 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.332598725410357 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.202065070470175 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.0749257126369995 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.938701394420343 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.80217440923055 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.666197863635638 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.5300656368857934 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.393791469873167 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.257618811223414 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.125752848963584 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.989410926134158 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.852897647080148 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.715917886057986 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.579160285445879 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.442171335220337 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.305256348959408 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.168642261881887 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.034709545732276 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.898126067184821 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.761784502954194 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.625454868178769 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.488733098892395 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.352525574820382 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.2159196554556395 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.081886866513421 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.945274796402245 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.8087372336276744 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.6723055109123277 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.5361000422773694 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.400185142244611 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.2638984810222276 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.1275686557683566 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.9925005864561274 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.856180032538302 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.720469209882948 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.5842433344593365 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.448056978183788 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.3117458507662914 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.1755097016044282 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.0404326013616614 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.9042883124402774 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7683844413349334 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6339495334219425 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.4976854740627228 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3614398052817895 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2251292273636265 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.089398354291916 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9530785577902521 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8168300746642437 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6806424030890831 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5444737989075329 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.40832974462944843 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.27219972706804374 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13608894635684526 seconds remaining)
    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 4.755 seconds)

**Estimated memory usage:**  1890 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
