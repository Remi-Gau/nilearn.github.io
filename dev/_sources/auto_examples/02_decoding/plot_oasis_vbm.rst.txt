
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-142

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 143-145

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 145-158

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 159-161

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 161-176

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f1432844ac0>



.. GENERATED FROM PYTHON SOURCE LINES 177-179

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 179-223

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 169.2819595336914 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 25.60300064086914 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 23.432786464691162 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 22.622374455134075 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 22.127060174942017 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 21.873676300048828 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 21.59529733657837 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 21.330088206699916 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 21.114744186401367 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 21.029596699608696 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 20.944124460220337 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 20.85529830239036 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 20.719405571619667 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 20.57844110635611 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 20.435279846191406 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 20.280164400736492 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 20.136452555656433 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 20.003649683559644 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 19.85925385687086 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 19.733516191181383 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 19.6197452545166 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 19.48893632207598 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 19.3515888560902 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 19.223422827927962 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 19.1167786916097 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 19.007102251052856 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 18.920723236524143 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 18.803789571479516 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 18.70165685244969 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 18.588687608981953 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 18.466051181157432 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 18.350262564997518 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 18.24051010608673 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 18.139950325994782 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 18.023833050447355 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 17.910093069076538 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 17.805202960968018 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 17.71249411557172 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 17.63161773430674 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 17.51834847376897 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 17.40034008026123 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 17.285657138359255 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 17.177724395479476 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 17.059801828029542 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 16.943458622152153 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 16.824295361836754 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 16.708422702291738 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 16.607256006687244 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 16.501538395881653 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 16.392143804199844 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 16.279926538467407 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 16.18286476415746 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 16.079573172789352 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 15.963735148591816 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 15.847147588376647 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 15.739693771709094 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 15.632821491786412 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 15.526825687341521 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 15.415676289591294 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 15.308116145053152 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 15.216654459635418 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 15.103930457693632 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 14.987615808363882 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 14.870945570960876 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 14.758396416902542 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 14.65120790554927 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 14.540017041293057 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 14.453409088191702 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 14.355886711793787 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 14.260780673096145 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 14.166096244539533 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.064128163834694 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 13.952973259819878 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 13.84555384884142 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 13.741751703056128 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 13.636930386225384 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 13.528098507931357 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.420109835537996 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.313743707461235 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.206539706338809 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.09753954410553 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 12.987639886361581 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 12.875742766915298 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 12.76452086345259 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 12.65310347647894 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 12.542630448060878 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.430925629859747 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.323575896778326 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.217049555345016 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.106250934386521 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 11.99267323811849 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 11.88126690833123 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 11.772065069364466 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 11.667776100097164 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.555857039512471 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.444453226892573 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.335446218649546 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.226383238723598 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.116573304546122 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.003927462028734 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 10.891688585281372 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 10.784019286089604 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 10.676207336724973 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.566369623813815 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.45619795872615 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.349742389860607 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.241496288551474 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.135825134883417 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.025765586782384 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 9.9180619279179 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 9.813885602084074 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 9.70915792439435 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.603843450546265 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.494825496082813 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.384350111610011 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.276202699412469 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.169922713575692 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.061030571277325 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 8.951407206260551 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 8.843063094034916 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 8.734757741292317 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.62699946293161 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.517088499225554 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.406561399863017 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.29700215401188 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.187716531753539 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.077097132092431 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 7.966939060706792 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 7.857064202427864 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 7.74869714966116 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.640067412303044 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.52968684225592 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.419655113509207 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.30938492323223 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.201327608592474 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.09164320981061 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 6.982498505536247 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 6.873922348022461 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.767647605011429 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.658832275610176 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.550834076745169 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.442880354874523 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.340671163209727 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.235669457829082 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.126599947611491 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.016924364813443 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 5.908345209409113 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.80129336662033 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.692953676790805 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.5828232413170324 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.472886085510254 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.364983533391889 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.2563886642456055 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.146465279697593 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.037703374763588 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.928748722999327 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.821230918933184 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.712880984992738 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.604576201378544 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.495378819651574 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.386777102947235 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.277445307429533 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.167744336304841 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.0577037817130055 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.948260813224606 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.8393659519426753 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.729736043746213 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.6201076393355867 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.5106113070533387 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.4011340056650736 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.291145016165341 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.180953870739853 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.0707652402478596 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.960775974858014 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.8512410295420683 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.7419193472181047 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.632093093611977 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.522225521378598 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.4124807186341015 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.30301374430097 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.1930519474877253 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.083179201210401 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.9733266149248394 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.863655998407166 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.753994900247325 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.644219005430067 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.5344579168545303 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.4249806735604842 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3155231881648934 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2059197665522337 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.096255151849044 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.9866642864586795 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.8771399756272633 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7676440162362211 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6581065753071579 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5483690591958853 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.43871883470184947 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.32911638075930216 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.21943962694418553 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.10971322131516346 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   21.9s finished

    1989 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  57.853 seconds)

**Estimated memory usage:**  1908 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
