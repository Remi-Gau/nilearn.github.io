
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f2a93decaf0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 177.63614654541016 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 26.346468448638916 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 25.117812395095825 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 24.343095302581787 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 23.805521488189697 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 23.429685831069946 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 23.080456892649334 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 22.940855503082275 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 23.0214900970459 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 22.833380142847695 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 22.625439167022705 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 22.426259734413843 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 22.263513724009194 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 22.069730208470272 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 21.888265473502024 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 21.735321680704754 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 21.6184823513031 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 21.47772233626422 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 21.358730951944985 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 21.249439741435804 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 21.137770414352417 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 21.012776919773646 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 20.884188023480505 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 20.752242129781973 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 20.626171429951984 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 20.520169258117676 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 20.39360393010653 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 20.26993155479431 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 20.14289164543152 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 20.03873634338379 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 19.896403868993126 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 19.787178354878577 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 19.664895594120026 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 19.545931895573933 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 19.423964542501114 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 19.29778872217451 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 19.177873531977333 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 19.067355336369694 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 18.978568215119214 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 18.864940478251533 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 18.746956825256348 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 18.625339891852402 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 18.517018795013428 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 18.400363927663758 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 18.281659971583974 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 18.15354103512234 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 18.033190136370454 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 17.9078526750524 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 17.787431240081787 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 17.66196362826289 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 17.550492525100708 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 17.433950125002394 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 17.321986033366276 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 17.207119055514067 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 17.09350397851732 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 16.999613285064697 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 16.881105014256068 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 16.7653203261526 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 16.64334569306209 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 16.530098797911304 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 16.411196152369182 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 16.286898065785895 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 16.169979433859545 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 16.052673260370888 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 15.927285641431808 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.805873632431032 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 15.684056347066706 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.563542426522098 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 15.453539666007547 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 15.33539747155231 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 15.220686980656216 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 15.106562386096364 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 15.001317342122395 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.882936934902244 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.768534486358229 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 14.65714693069458 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.545114303890028 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 14.431044241050621 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 14.317274356499697 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 14.202999763850924 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 14.08828604221344 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.970580574906903 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.849832999997021 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.725675120411148 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.606235946927752 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.48545307271621 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 13.364338458970535 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 13.245229079805572 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 13.124454108151522 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 13.003727457496558 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.880943218866985 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.762380193878005 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.644289493560793 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.52782239196121 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.40903744291752 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 12.288727961088483 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 12.170221388339996 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 12.051015418829378 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.929062643829658 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.804667679950443 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.683069944381714 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.564935570896262 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.447094964046105 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.325600256040259 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 11.204913579500639 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 11.083881673358736 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.968686972024306 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.849648769770827 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.731210072835287 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.610945891896518 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.492510622197932 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.376741256799784 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.257409759930201 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 10.137760554794717 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 10.019105861061497 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.904945290606955 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.787189845381112 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.667518644251375 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.548561233585165 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.430947339835287 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.314717451731363 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.198884889114002 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 9.08328848197812 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.96852773379504 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.854085691513554 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.736933088302612 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.618475456086417 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.50039432931134 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.384966254234314 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.268118174501167 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 8.150577068328857 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 8.032873359345297 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.917180733247236 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.801489754727013 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.6845778493738885 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.566017671867653 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.448624891393325 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.331781284652487 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.215210617452428 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.096805968730569 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.9780394690377365 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.862636454561923 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.744614530617083 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.626762126709198 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.509311199188232 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.393051862716675 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.27620146045946 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.157741483376951 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.039450716327977 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.921902315728617 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.80628760655721 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.689522046916532 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.572695531343158 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.456267721512739 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.34056788605529 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.22399293222735 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.1071370259309425 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.9903460460104 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.874998768673667 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.759753171752834 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.643701374530792 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.527319819290446 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.411326899940585 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.296457717755089 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.180165337353218 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.0640632094758935 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.9481984506170433 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.8324201521045436 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.715964498974028 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.5992368269248827 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.4825861173517567 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.3663590902473493 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.2504928611045663 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.13412499152167 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.0176533227679374 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.9014505999428883 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.7854581962932237 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.669372123513518 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.552851462632083 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.4364306886768876 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.320452054341634 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.2040521374064914 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.0877901381188697 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.9713393352070794 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.8548284820888352 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.738785846813305 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.6226831225938696 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.5066393059205243 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3905580956885155 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2747036023114724 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.1587655167830617 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.0430270639389598 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9269415736198425 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.8109520161090119 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.695095893034001 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5792000782795441 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.46328465306029026 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3474476627892044 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2316660567967579 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11582814628754429 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   23.2s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  0.914 seconds)

**Estimated memory usage:**  1872 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
