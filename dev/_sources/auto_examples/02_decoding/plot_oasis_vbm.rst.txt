
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (:term:`VBM`)
to study the relationship between aging and gray matter density.

The data come from the `OASIS <https://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard :term:`VBM` pipeline (using SPM8 and
NewSegment) to create :term:`VBM` maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the :term:`ANOVA` step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the :term:`ANOVA` step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

:term:`SVM` weights are very noisy,
partly because heavy smoothing is detrimental for the prediction here.
A standard analysis using mass-univariate :term:`GLM`
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 112-123

Prediction pipeline with :term:`ANOVA` and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

In nilearn we can benefit from the built-in DecoderRegressor object to
do :term:`ANOVA` with SVR instead of manually defining the whole pipeline.
This estimator also uses Cross Validation to select best models and ensemble
them. Furthermore, you can pass ``n_jobs=<some_high_value>`` to the
DecoderRegressor class to take advantage of a multi-core system.
To save time (because these are anat images with many voxels), we include
only the 1-percent voxels most correlated with the age variable to fit. We
also want to set mask hyperparameter to be the mask we just obtained above.

.. GENERATED FROM PYTHON SOURCE LINES 123-149

.. code-block:: default


    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 150-152

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 152-165

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-183

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7ff18238ddc0>



.. GENERATED FROM PYTHON SOURCE LINES 184-186

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 186-231

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 161.07559204101562 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 28.631908416748047 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 25.517040967941284 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 24.355949004491173 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 23.65493392944336 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 23.4201922416687 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 23.094741423924766 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 22.836704322269984 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 22.639039993286133 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 22.435818672180176 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 22.463996171951294 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 22.26517445390875 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 22.08315841356913 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 21.98733161045955 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 21.866330112729756 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 21.739703019460045 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 21.605392932891846 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 21.485994184718415 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 21.400544140073986 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 21.44594380730077 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 21.330116987228394 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 21.191902137938 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 21.120194348421965 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 21.042775060819544 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 20.962490717569985 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 20.821699857711792 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 20.695184304164005 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 20.642728867354215 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 20.53582000732422 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 20.43629032990028 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 20.326380014419556 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 20.179420378900343 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 20.029168367385864 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 19.89144585349343 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 19.769551641800827 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 19.650871447154454 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 19.563700252109104 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 19.43601818986841 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 19.316509271922865 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 19.18642698801481 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 19.05695343017578 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 18.91846917315227 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 18.787512790589105 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 18.656991426334823 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 18.562580108642578 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 18.42609312799242 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 18.2905940802201 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 18.16454167568937 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 18.044614791870117 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 17.926235252497147 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 17.79951810836792 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 17.678446938009824 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 17.56398182648879 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 17.465506648117643 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 17.338488578796387 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 17.213720906864513 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 17.086111000605992 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 16.96028335470902 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 16.839998508321827 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 16.719140404361788 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 16.592621644337974 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 16.48311999977612 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 16.352046651224935 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 16.228636404824634 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 16.120552897453308 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 16.071098877833442 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 15.943369309107462 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.816193726525377 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 15.692312521093031 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 15.578014124994693 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 15.46410870552063 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 15.343503119240344 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 15.222520616319443 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 15.100341715224802 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.975842392122424 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 14.852440357208252 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.731540391319676 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 14.624308329123956 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 14.51385855063414 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 14.395118613786336 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 14.274124145507812 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 14.148080928826039 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 14.02798907931258 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.907096971948462 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.787327777771722 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.66379901942085 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 13.538932434348173 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 13.42684905008338 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 13.301518483595414 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 13.178759248069163 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 13.05880241923862 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.934057872373979 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.810219899467802 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.687424739201864 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.567548701103696 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 12.453828184228195 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 12.328864236672718 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 12.20555662617241 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 12.08190986088344 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.959240434145686 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.836355924606323 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.71444840242367 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.596657668842989 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.481545404323096 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 11.372928252586952 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 11.250784771783012 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 11.132515394462729 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 11.011751522527677 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.893790889669347 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.774868018036589 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.66096544265747 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.540507058839541 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.420202119009835 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 10.307497583659348 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 10.189789772033691 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 10.07247325648432 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.952462607416614 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.830871496445093 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.71053516662727 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.592183083045382 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.475421905517578 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.361058869637734 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 9.24019359369747 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 9.120050897443198 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.999411406055573 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.879083442687987 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.759082404393999 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.63909480139965 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.520544677972794 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.399794833604679 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 8.285424562600943 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 8.166104531470145 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 8.04842320355502 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.928631260879058 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.8097257507381155 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.6894601627632415 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.572084202485926 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.4520845848278405 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.338767490525177 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.221095213787161 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.104847771780831 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.984348992083935 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.86489191525419 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.746571274070472 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.628136052025689 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.511101977578525 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.393144480169636 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.277603173742489 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.159207775786117 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.04081200273245 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.92198634147644 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.8036767299601575 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.683761496292917 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.571189517289206 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.453811626929741 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.338053472580449 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.2194315653580885 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.099401129279167 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.979618120797072 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.862996708672002 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.7473660707473755 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.6348145156173235 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.5152049859364825 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.399421794282878 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.2799505257025 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.160359209234064 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.041265266487398 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.9221043172710672 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.803294499715169 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.68465416106952 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.565596426234526 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.4474543772245707 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.3295022221498716 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.2107933656328678 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.0919407373187187 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.9735482760838097 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.854525273496454 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.735411075548937 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.616619734281904 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.4981940325412006 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.3825744522942434 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.2635376282159796 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.144505312154581 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.02551844211224 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.9062321704366931 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.787289116833661 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.6681756614356913 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.5488893016774388 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.4306131017969008 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.3116394464301053 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.1928354940916361 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.0745303643311506 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9548865854740143 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.8353486258748899 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.7158777664617165 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.596396531814184 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.47699202810014996 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3577819536180061 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.23847502168982923 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11921319051004535 seconds remaining)
    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 0.167 seconds)

**Estimated memory usage:**  1903 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
