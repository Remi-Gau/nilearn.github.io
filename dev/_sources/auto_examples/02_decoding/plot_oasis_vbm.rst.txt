
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f6839cb58e0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 163.65528106689453 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 23.80738592147827 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 22.015966415405273 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 21.364731311798096 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 21.069045305252075 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 20.819404363632202 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 20.64423894882202 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 20.418285506112237 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 20.243093490600586 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 20.080302503373886 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 19.958927631378174 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 19.821207241578538 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 19.692502737045288 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 19.599387590701763 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 19.493665286472865 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 19.37745277086894 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 19.28494668006897 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 19.165159379734714 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 19.04721739557054 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 18.962796801014953 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 18.87279510498047 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 18.77695513906933 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 18.66520194573836 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 18.55085800005042 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 18.44112412134806 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 18.351304531097412 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 18.259932077847996 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 18.18457243177626 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 18.075193813868932 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 17.95834917857729 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 17.843676328659058 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 17.726261900317283 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 17.61802339553833 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 17.50307445092635 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 17.385028011658616 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 17.273350954055786 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 17.16349509027269 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 17.048445766036576 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 16.937134190609584 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 16.823059118711033 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 16.709667205810547 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 16.598233589311924 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 16.497445696876163 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 16.389886390331178 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 16.28064868666909 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 16.179094367557102 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 16.07722043991089 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 15.999080886232091 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 15.90891937414805 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 15.811511219764244 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 15.707493782043457 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 15.60519117000056 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 15.503044183437641 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 15.413597358847564 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 15.31474350116871 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 15.208238493312487 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 15.100151947566442 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 14.998761490771644 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 14.900555290024855 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 14.802488820027495 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 14.701020161310833 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 14.59982644925352 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 14.494512827165664 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 14.38718535408141 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 14.283451795578003 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 14.17605284544138 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 14.06915351116296 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 13.960483672013924 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 13.860052501454073 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 13.755112492519876 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 13.649682794298444 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 13.54718050486605 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 13.44124984741211 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 13.333653962775452 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 13.22632363035872 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 13.119833866755169 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 13.016578398252788 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 12.912876819635366 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 12.80497697683481 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 12.699904496156716 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 12.593362927436829 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 12.48925084832274 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 12.38585840783468 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 12.291803227849753 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 12.189429146902901 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 12.08223251735463 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 11.977364085441412 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 11.871951152538433 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 11.765371842817826 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 11.66104196162706 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 11.55505993631151 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 11.448026067608005 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 11.345423667327218 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 11.24355144654551 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.141010289496563 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.037434126201429 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 10.931607584158579 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 10.825276964718533 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 10.721916120879504 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 10.619702083895904 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 10.51784634590149 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 10.414796293371975 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 10.30933596573624 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.203988565981968 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.103246101966272 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 9.997698602222261 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 9.89122956653811 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 9.784525140423641 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 9.678011814753214 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 9.574369378046159 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 9.467823678796941 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 9.361288143707826 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.254610146795 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.148871911310517 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.04388752318265 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 8.937587074611498 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 8.83109578593024 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 8.724287238895384 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 8.617722119315196 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 8.512476388145895 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 8.406105836232502 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.300176013599744 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.193990468978882 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.088010725936268 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 7.9813735869623 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 7.875219297409057 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 7.769174572021242 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 7.662806910792673 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 7.556786879897118 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 7.452557857646498 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.347284317016602 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.240761760536951 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.134268594510627 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.029060494630857 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 6.924469716513334 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 6.818866756227281 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 6.713131736306583 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 6.60751140900772 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.502160642458045 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.39581760228109 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.290292160851615 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.184916002530578 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.079305128312447 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 5.974497076514718 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 5.87033916844262 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 5.764543911506389 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 5.658697040113684 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.552958640922495 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.447690261376871 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.343209588287661 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.238378445307413 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.132899788041778 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.027480326200786 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 4.922353939293257 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 4.816924705133809 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.711806258847637 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.607597937950721 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.502509183944411 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.397079036205629 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.292018936864985 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.1875744462013245 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.083486241583499 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 3.980220164781735 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 3.875888379804927 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.7718519524830145 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.6672868728637695 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.563113574522087 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.4587563654619777 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.35376044682094 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.24936748679573 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.144565301782945 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.0396337662523947 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 2.9346143922140433 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.8312097629370716 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.7259344917604293 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.620997497013637 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.516228361563249 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.4113170211598023 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.3070499602328525 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.202243505243483 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.0973771942986383 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 1.9925338154998273 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.8874594955653934 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.7824815010112494 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.6775735150212827 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.5727738883044269 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.468046183227211 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.3632618921963289 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.2583856379732172 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.153509571438744 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.0486074623308683 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.9438102594844958 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.8389218151569366 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7339644543247519 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6290626722512787 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5242958496778439 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4194949013846261 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.31464488373190014 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.20978076289398503 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.10489305898771813 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   21.0s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  57.421 seconds)

**Estimated memory usage:**  1889 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
