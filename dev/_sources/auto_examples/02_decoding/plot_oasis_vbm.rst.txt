
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f18acfd2cd0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 185.6708526611328 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 31.24538516998291 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 28.71946120262146 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.741576512654625 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 27.274701356887817 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 26.866634845733643 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.60539817810059 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.336240530014038 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.14053726196289 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 25.91499384244283 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 25.743442058563232 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.566077015616678 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.38660955429077 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.23380413422218 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.05650762149266 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 24.953447341918945 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 24.859073042869568 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 24.69337711614721 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.58437071906196 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.45548722618505 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.57665205001831 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.45787784031459 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.342745022340257 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 24.210732035014942 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 24.095245838165283 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.967878341674805 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.824819234701305 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.682184766840052 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.54341963359288 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.40811413732068 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 23.246060927708946 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 23.096813609523156 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 22.948707818984985 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.798073111158427 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.654097206452317 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.503988879067556 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.35273093647427 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 22.20780361020887 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 22.08064661527935 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 21.955812888267715 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.834192276000977 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.69306559097476 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.552626303264073 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.41676749739536 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.277224280617453 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 21.190117756525677 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 21.056524919426963 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.913278605075593 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.774464885393776 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.62759819322703 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.48479914665222 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.348178442786722 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 20.199878234129688 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 20.05478981305968 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.91716181790387 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.774356495250355 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.630388259887695 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.481898500208267 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.33673025821817 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 19.20073170177007 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 19.061389764149986 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.9170952703132 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.782135909603486 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.646084293486577 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.504394501447678 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.3716770869035 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.230803634181168 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.08864789578452 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.95386217622196 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.812632405239604 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.675120558057515 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.5433140875588 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.405145009358723 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.265316969727817 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.12820302473532 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.991936763127647 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.853977391594334 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.713965474785148 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.57664954967988 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.436646874946884 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.2974613904953 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.15948259977647 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.022381044015653 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.88421742887382 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.747987565540132 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.613571096869077 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.477994198022886 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.34361566894356 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.210071390325373 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.077675109498955 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.943616602155899 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.80906102683518 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.672686597575314 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.540125416171167 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.402909897743386 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.265276432037355 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.128395080566404 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.992324620178065 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.854462570073654 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.715179303679802 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.58086371421814 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.442203802637534 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.304122761184095 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.166386180711024 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.029147148132324 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.890822546822685 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.753153432090327 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.618850514153454 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.48115395616602 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.342932073348159 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.204012589021163 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.065843923671826 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.928572603634425 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.793037505276434 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.655540897135149 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.518262500348298 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.380542977102872 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.245364183034653 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.1096156290022 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.972385452575043 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.836182912190754 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.700382400150142 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.565429073865298 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.430205725072845 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.295133152315694 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.160159683227539 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.024603749078418 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.88963957846634 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.754890829324722 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.618658976961475 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.483918923598068 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.350103514795086 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.218113993153427 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.084049895293731 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.948626810045385 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.814096309520579 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.68004596934599 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.54487530332412 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.410619569861371 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.277935381415936 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.141084432601929 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.004097968974012 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.867952031148992 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.731271265269993 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.595530430475871 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.460357518031679 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.323778828529462 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.1878577008539315 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.052730528084008 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.917283642212016 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.78201945622762 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.647449755510747 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.51108832108347 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.374672320933124 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.23836722002401 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.102093065938642 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.966245797964243 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.830662498048916 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.6960864338693735 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.5598451806314335 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.4234864711761475 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.287200330947497 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.150969796710544 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.014716537452183 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.8782705504719805 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.741907141425393 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.605793252048722 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.469705004891949 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.333684512547084 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.197819330283171 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.062101588529699 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.926839316797535 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.7911267225132437 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.6552564849743265 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.5194600313559348 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.3836873599461144 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.2480280290950425 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.11247827104256 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.9767414451984875 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.8411062935877114 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.7054134739769826 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.5696865432170215 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.433991780647865 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.2985349743744066 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.1630298987678858 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.0274873617533093 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.8920735389955583 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7567463201635025 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6214210378362777 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.4861783464118916 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.351044265847457 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2159307165295665 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0808392365773518 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9457181957719238 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8105896305792111 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6754057162847275 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5402508657805773 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.40523819511917036 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.27013780131484527 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13506298448572207 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   27.0s finished

    1963 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  8.162 seconds)

**Estimated memory usage:**  1886 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
