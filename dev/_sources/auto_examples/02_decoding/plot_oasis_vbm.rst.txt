
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f2eb40cfd30>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 148.1151580810547 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 25.069810390472412 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 23.34207844734192 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 22.88355040550232 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 22.421950101852417 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 22.270166158676147 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 22.18701457977295 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 22.0125926562718 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 21.91021728515625 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 21.777425951427883 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 21.60262107849121 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 21.477477550506595 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 21.343005021413166 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 21.289971828460693 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 21.156923123768397 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 21.077309290568035 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 21.02459454536438 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 20.9597347203423 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 20.860417551464504 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 20.74942163417214 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 20.63838815689087 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 20.516135374704998 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 20.38951513983987 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 20.25783690162327 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 20.129350503285725 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 20.01436161994934 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 19.90893662892855 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 19.799357325942427 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 19.659506968089513 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 19.540619274665566 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 19.412817160288494 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 19.282926413320723 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 19.152106404304504 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 19.037183595426153 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 18.912327780443082 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 18.788994107927596 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 18.763417535358005 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 18.706129873121107 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 18.576326646302878 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 18.44531138126667 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 18.3125 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 18.182734408029695 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 18.065675860359555 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 17.94319034731665 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 17.83308343453841 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 17.719644758436417 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 17.597306676532913 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 17.469437827455238 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 17.350723385810852 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 17.239099346861547 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 17.125365257263184 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 17.00986091295878 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 16.92457123903128 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 16.808723850070304 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 16.691221510922468 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 16.5693640275435 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 16.44620398112706 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 16.326251862341895 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 16.20182524878403 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 16.078316252110366 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 15.963994105656942 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 15.847685251079623 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.730845428282214 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.61335333945259 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 15.499126642942429 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.381977319717409 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 15.263903148246534 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.144247339732612 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 15.026017974404727 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 14.910005369048188 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 14.791981526783536 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.6817181076802 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.576719919840494 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.464017296490605 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.351993631672213 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 14.238748153050741 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.123631452259264 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 14.01046803400114 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.895449613913511 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.780215888083735 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.669061422348022 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.556153883168728 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.443338074335237 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.324990709143949 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.209094399497623 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.094561731114108 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.978023645489714 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.86228483024685 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.748439008539373 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.634811069188492 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.519672473271688 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.406758392250145 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.293425767318062 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.178438709628198 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.063456880285385 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.948515779093693 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.83632191022237 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.724137957563105 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.61014876560289 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.49389882039542 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.385716915130615 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.274990688456167 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.159964056576 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.044508082195394 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.930418014526367 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.815413145791917 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.699403438927993 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.584889298287507 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.473556562706277 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.36205351462058 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.24916130846197 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.13428433091791 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.02037353175027 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.908389262393513 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.795737827033328 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.686567109564075 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.577334551975644 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.469622936004248 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.360634908837788 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.248079666570455 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.135024706522623 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.022617296739059 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.911081376622935 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.800042460604411 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.686095599205263 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.57254900932312 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.460268100102743 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.347866965091134 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.234916776418686 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.12334247892217 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 8.01006086056049 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.8973429567031275 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.784732768029877 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.671438930626203 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.559911763490136 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.4463888715814655 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.333753249224494 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.220947067232897 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.108121802841407 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.995798304784212 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.883195025580269 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.7693174933710845 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.656091448286889 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.542546910839481 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.428592933548821 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.315415176851996 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.202374164372274 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.0885620684850785 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.974799633026123 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.862549031340836 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.749635299046834 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.6353965895065405 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.521444897902639 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.406529912761614 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.2917428790748895 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.1766998075669814 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.061480106451572 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.947065894011479 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.832200282736669 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.717829716280571 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.603185474872589 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.487944071337303 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.372678683127885 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.258232589148305 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.143483446865547 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.029064077319521 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.9144535754100382 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.7996691786600443 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.6846609569731212 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.569197845176832 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.4538328367121083 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.3383315167231866 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.223063762797866 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.107632927811904 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.9935192897402008 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.8783439568110873 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.763419931585138 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.648160399690186 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.5329046115446627 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.4189705009567004 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.3042838308546276 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.1895009022391303 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.0747034575912977 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.9600070447869642 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.8452915316042693 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.730439817583239 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.6160764924941524 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.5010572946007876 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3858780252172591 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2707997655111645 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.1556137862958407 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.0403366425898688 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9249426921208699 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.8094604077116813 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6940473502444238 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5784802497961582 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4628849856707514 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3472649385481317 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.23153659550830574 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11578729164660277 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   23.1s finished

    1939 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  0.028 seconds)

**Estimated memory usage:**  1902 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
