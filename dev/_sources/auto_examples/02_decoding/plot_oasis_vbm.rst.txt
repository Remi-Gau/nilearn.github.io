
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (:term:`VBM`)
to study the relationship between aging and gray matter density.

The data come from the `OASIS <https://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard :term:`VBM` pipeline (using SPM8 and
NewSegment) to create :term:`VBM` maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the :term:`ANOVA` step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the :term:`ANOVA` step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

:term:`SVM` weights are very noisy,
partly because heavy smoothing is detrimental for the prediction here.
A standard analysis using mass-univariate :term:`GLM`
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 112-123

Prediction pipeline with :term:`ANOVA` and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

In nilearn we can benefit from the built-in DecoderRegressor object to
do :term:`ANOVA` with SVR instead of manually defining the whole pipeline.
This estimator also uses Cross Validation to select best models and ensemble
them. Furthermore, you can pass ``n_jobs=<some_high_value>`` to the
DecoderRegressor class to take advantage of a multi-core system.
To save time (because these are anat images with many voxels), we include
only the 1-percent voxels most correlated with the age variable to fit. We
also want to set mask hyperparameter to be the mask we just obtained above.

.. GENERATED FROM PYTHON SOURCE LINES 123-149

.. code-block:: default


    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 150-152

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 152-165

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-183

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fdf4bfa48b0>



.. GENERATED FROM PYTHON SOURCE LINES 184-186

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 186-231

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 182.53564834594727 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 32.503634452819824 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 30.476359605789185 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 30.40111859639486 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 29.72545838356018 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 29.264533281326294 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 28.860704421997074 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 28.626264946801324 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 28.346391677856445 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 28.102980958090885 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 28.147759914398193 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 27.945619127967145 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 27.747155586878456 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 27.532857399720413 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 27.346676485879083 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 27.15771063168844 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 26.98845601081848 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 26.959188601549936 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 26.79583636919657 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 26.612028385463518 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 26.430734395980835 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 26.244256723494757 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 26.07704091072083 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 25.901418032853503 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 25.832759698232014 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 25.675342321395874 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 25.500500128819393 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 25.365096516079372 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 25.200211490903584 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 25.031735831293563 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 24.864443063735962 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 24.786750908820856 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 24.615905106067657 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 24.449581254612315 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 24.29394486371209 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 24.1502354826246 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 24.012255801094902 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 23.856896013826937 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 23.762724713275308 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 23.604931971965694 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 23.44545269012451 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 23.395449068488144 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 23.24926319576445 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 23.104125749233155 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 23.00089612874118 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 22.84956759876675 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 22.691995029864106 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 22.533100057155526 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 22.375571489334106 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 22.214465204550297 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 22.055588722229004 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 21.935028987772323 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 21.7792420570667 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 21.623478952443826 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 21.46945743207578 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 21.316570238633588 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 21.159683908735005 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 21.0029283322786 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 20.877857241137274 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 20.724085807800293 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 20.568183819452923 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 20.412503629434305 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 20.258050134105066 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 20.102802613424874 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 19.947165429592133 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 19.831623425850502 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 19.67610664801164 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 19.525965879212563 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 19.38295323708478 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 19.230763753255207 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 19.077662127358572 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 18.925840324079488 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 18.796266767713757 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 18.642699760933446 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 18.48670541273581 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 18.334436416625977 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 18.180785166589835 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 18.05093186551874 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 17.89772967191843 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 17.764207978791827 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 17.610263228416443 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 17.459900700015787 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 17.307823873147733 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 17.157630710716706 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 17.00540338243757 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 16.85539398473852 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 16.72426169972087 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 16.572907524547357 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 16.424178860404275 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 16.273825985662054 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 16.124103281233047 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 15.973393162528236 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 15.824668034263281 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 15.689962189684634 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 15.541431751657038 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 15.389942746413382 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 15.240695536136625 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.09019722152002 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.93917041895341 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.78971250851949 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.654490232467651 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.505266487008274 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 14.355534034616808 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 14.20751011024401 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 14.057960656973032 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.909984316144671 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.76076481927116 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.625198477896575 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.477151482193559 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.332042715965061 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.182252450422808 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 13.033414930910679 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.885318347385951 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.736388284548193 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.598627312141552 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.449937084446782 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.30157707477438 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.157603204759777 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.00870369248471 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.85987718766477 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.71267000834147 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.573505314913664 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.424986319463763 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.276747916772113 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.129580597723685 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.98159384727478 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.833951696516976 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.686044116658488 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.54424375295639 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.397019253220668 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.249440064797033 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.101153963394747 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.95307605194323 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.808026874872079 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.661994496388221 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.520756580211497 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.37285187665154 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.22431310075913 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.076469487038212 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.929274426947394 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.781345810209002 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.633901966379044 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.491836198618714 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.343864475930488 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.206347240342035 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.058455648093387 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.911197329220706 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.76356923823454 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.6158048977723 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.472589129569546 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.326018571853638 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.1790122559528475 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.03103158348485 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.883741953793694 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.736022850135704 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.588463183372252 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.444733778635661 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.297123224112638 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.150103369845619 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.003330128747712 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.8562599420547485 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.70929771772823 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.5621254444122314 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.418225226958105 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.271204175018683 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.12423732063987 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.9771856773330505 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.830287256640588 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.683334713890439 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.536683463485988 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.392014012617223 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.245015692292598 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.098220370536627 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.951437254172529 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.80479846603569 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.658313649041312 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.511660955168984 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.366546063773376 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.2197672302803295 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.0730206460260145 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.9265573289659286 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.779842275282296 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.6333521591438043 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.4867339003932933 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.3413816742275073 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.195044311317238 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.0555224290458107 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.9148979926491805 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.7673341974299004 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.619797222198002 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.4730659911507054 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.3258767502470166 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.1783543328444162 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0310457555741226 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8836444284498077 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7362639476091434 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5889317210839718 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.44180407257854637 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2945086570701214 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1472286710787059 seconds remaining)
    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 10.541 seconds)

**Estimated memory usage:**  1902 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
