
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f78e6143fa0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 213.8042449951172 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 32.68440103530884 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 30.19427490234375 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 29.624808231989544 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 29.036622524261475 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 28.67387580871582 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 28.399660189946495 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 28.06818447794233 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 27.938547134399414 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 27.815494828754 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 27.648531913757324 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 27.465386477383703 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 27.315699815750122 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 27.155036541131828 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 27.037303958620345 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 26.892913103103638 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 26.73891532421112 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 26.63389168066137 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 26.521650817659165 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 26.39895554592735 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 26.271421909332275 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 26.122471003305343 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 25.98490305380388 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 25.826844972112905 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 25.692044734954834 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 25.54978036880493 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 25.386921038994423 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 25.240892869454843 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 25.10066458157131 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 24.966008243889643 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 24.837273677190147 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 24.734044105775894 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 24.61030876636505 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 24.483457348563455 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 24.362246288972745 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 24.23097722870963 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 24.089339468214245 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 23.920757158382518 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 23.755204250938014 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 23.600521588936832 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 23.437905311584473 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 23.277105034851445 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 23.119851032892864 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 22.9568981015405 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 22.807777534831654 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 22.645329475402832 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 22.485824118489806 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 22.33560250160542 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 22.1841953198115 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 22.026765940140706 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 21.865525245666504 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 21.709748071782727 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 21.555879281117367 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 21.399654176999938 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 21.2440574698978 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 21.101433667269617 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 20.95313787460327 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 20.79848063201235 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 20.64676527319283 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 20.49038199651039 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 20.33851234118144 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 20.19171504114495 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 20.044408367526145 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 19.893999326796756 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 19.745118111371994 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 19.603098722604607 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 19.450240915471856 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 19.310439978072893 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 19.168370667625876 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 19.018227487370588 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 18.872061559132167 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 18.727787299894953 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 18.588589562310112 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 18.44828557314938 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 18.307300889814222 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 18.16904942194621 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 18.026772787696437 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 17.884759193891053 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 17.745827314181206 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 17.60585774952852 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 17.467037558555603 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 17.322742609330167 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 17.178189661444687 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 17.03564968741084 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 16.896299260003225 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 16.758586028042963 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 16.6190063454384 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 16.47789020647948 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 16.33560085296631 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 16.194869113772103 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 16.05209035343594 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 15.911156798457052 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 15.771906510643339 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 15.629896353649839 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 15.48101761493277 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 15.331756729828685 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 15.188363015651701 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.037385756207495 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.88672938638804 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.736465179558955 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.591579914093018 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.440604047019884 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 14.2894845569835 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 14.13908253595667 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.989841901339018 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.840787774040585 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.694458313708036 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.546953945516426 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.400526726687396 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.253268987760631 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.103341666134922 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.953799144641774 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.813815849167959 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.6729728437103 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.555559384195428 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.499569426412167 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.413130431339658 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.320883329098042 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.22450828148147 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 12.131224219538584 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.996798356374104 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.843313146228633 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.691095680486962 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.538302105616747 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.38457691284918 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.23144826889038 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.077269883382888 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.924084314211147 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.770773336291313 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.618360072143318 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.46558794608483 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.312870409652477 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.160973259896943 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.008771855132025 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.860930389432765 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.7089434199863 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.558009091545554 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.408529831545197 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.257207020469334 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.10509883928642 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.952886717660085 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.800593612887335 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.649353816475667 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.49799685544901 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.348444766468472 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.197371926800958 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.046926423294902 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.895854791005453 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.745318999161592 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.595713295392542 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.445311784744263 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.294425864882816 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.143750391508403 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.993612041660384 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.84265476078182 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.691517599167363 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.541659116744995 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.391594610396464 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.2423160227039185 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.092533213537444 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.9431570172309875 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.794064478844589 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.643982422204665 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.494840927650592 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.3456286453619235 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.197117726008098 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.047223860958972 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.897853774224926 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.748556863693963 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.599217373943893 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.450107209822711 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.30089903714364 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.1519967511642815 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.00300149145843 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.854669834005422 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.7056038720267157 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.5573794516650112 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.4086534747969632 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.2600416226333446 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.1116764505482255 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.963181760576036 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.8146551142739984 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.666218474671081 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.5176879226184283 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.3691809903020444 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.2209067409102983 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.072838152608564 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.9244270350206345 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.7762637392003484 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.6281718085051844 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.4799859523773193 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.3317503105283408 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.1835632026195526 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0354842534337019 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8874809496181527 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7394382403447077 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5914339727284956 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4434972898609142 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.29562174671828145 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.14777977622334082 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   29.5s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  12.893 seconds)

**Estimated memory usage:**  1921 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
