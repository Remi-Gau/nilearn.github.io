
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-90

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 148-150

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 150-163

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-166

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fb31a4fbca0>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-229

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 171.3252067565918 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 30.516008615493774 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 27.92966651916504 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 26.909248431523643 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 26.422181844711304 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 26.032361268997192 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 25.716665983200077 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 25.47901136534555 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 25.255788803100586 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 25.08548469013638 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 24.900494813919067 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 24.735666275024418 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 24.59287063280741 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 24.435848511182346 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 24.28164614949908 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 24.118120114008587 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 23.975117802619934 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 23.840948118883023 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 23.691750155554878 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 23.557009985572414 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 23.431468963623047 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 23.29277135076977 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 23.153818672353573 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 23.009387254714966 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 22.86979023615519 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 22.737229347229004 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 22.607727637657753 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 22.466043410477816 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 22.343379225049702 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 22.207767815425477 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 22.074198404947918 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 21.93300720953172 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 21.79520970582962 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 21.662932583779998 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 21.5261109716752 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 21.395996229989187 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 21.257759677039253 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 21.12578779297906 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 20.9982143452293 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 20.8608568081489 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 20.735063552856445 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 20.59908481923545 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 20.467150585991995 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 20.33526160550672 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 20.20791610804471 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 20.077697859870064 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 19.94569552463034 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 19.813221140110745 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 19.699009497960407 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 19.567101867831482 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 19.437671899795532 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 19.30713752671784 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 19.18918820527884 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 19.054906894575875 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 18.922566846564965 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 18.793231400576502 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 18.661368370056152 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 18.534684427997522 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 18.40975843626877 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 18.284543704178372 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 18.15423838297526 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.025288069834474 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 17.896012336977066 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 17.767087228714473 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 17.63664621114731 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 17.5074742940756 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 17.376954634984333 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 17.248556482258127 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.118042637320126 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 16.986095742902894 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 16.85269171851022 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 16.726850237644893 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 16.605555216471352 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 16.476549426170244 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 16.34492480432665 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.21414105097453 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.08198723040129 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 15.950282994802896 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 15.820986203658276 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 15.690344765216489 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 15.558050751686096 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 15.427474116101678 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 15.295659495563042 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.164115066987922 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.033570346378145 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 14.901645632351148 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 14.769480893778246 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 14.637306769688925 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 14.50669596411965 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 14.37569394808137 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.245460669199627 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.114808189999925 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 13.984164289806202 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 13.852107694072108 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 13.72747275677133 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 13.596974034058421 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 13.467134912808735 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.338165391351758 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.210045688006343 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.082021756605668 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 12.950609922409058 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 12.819726655978968 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 12.690090244891596 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 12.559394153576454 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 12.4294459269597 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.301197392599923 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.171614089102116 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.040095652375266 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 11.908899669294005 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 11.777548868721778 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 11.648487502878362 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 11.518394446587777 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.387489795684814 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.258047817027673 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.128388689275374 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 10.997351998868195 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 10.866572314295276 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 10.736327038870918 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 10.607150279869469 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.476696240801772 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.346992015838623 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.217713864381649 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.087379951946073 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 9.957953078960015 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 9.827804203956358 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 9.698915147781372 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.569182138594371 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.439790316454069 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.311301738023758 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.18192539843478 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.052157347018902 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 8.922104937429646 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 8.792481805339003 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 8.663369822322874 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.533474488044853 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.404172552956474 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.274502810309915 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.146092689820449 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.01706338274306 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.887224091042717 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.757325819560459 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.630317917952301 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.500396218098386 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.37106673033921 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.241656343142192 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.112516074345029 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.982731469689983 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.8534819901395005 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.72388388659503 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.59565551649004 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.466383695602417 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.3365657755870695 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.207300386930767 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.077664560741849 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.947805618310904 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.817846190544867 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.6884310979109545 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.559068698032647 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.429454767251316 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.299913547323935 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.171036005020142 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.041558173872669 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.9121291431379905 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.782503274320825 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.653107032543275 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.52334704543605 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.394253176378917 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.264814855095869 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.135545776003883 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.006397426481078 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.8770881119896385 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.747990479943348 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.6188352717909704 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.489435985598261 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.3601633789895597 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.230796132768903 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.1017250689593228 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.9723772625465177 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.8430019121491505 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.713888147023803 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.584711604648166 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.4553953534331767 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.3261767638908637 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.1970590841574746 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.067740709885307 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.9385116551373458 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.8091091058587516 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.679796932852842 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.550727717419888 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.4215043814724715 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.2922294390828986 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.1629431297641775 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0337044298648834 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9044696123488826 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.7752312212875209 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6460229678031726 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.516802826706244 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3875899387495167 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.25839422688339697 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.12919354318973408 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   25.8s finished

    1993 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  4.213 seconds)

**Estimated memory usage:**  1809 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
