
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f2e2066a160>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 240.0803565979004 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 42.401055574417114 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 44.763261795043945 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 42.29937243461609 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 40.874218225479126 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 40.4657506942749 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 39.44094761212667 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 38.817593404224944 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 38.28465270996094 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 37.85938019222683 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 37.55904984474182 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 37.126730463721536 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 36.72980626424153 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 36.35522103309631 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 36.07768177986145 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 36.002178033192955 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 35.833741545677185 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 35.67814804525937 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 35.90605619218614 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 35.58176965462534 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 35.372360944747925 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 35.04481594903128 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 34.75675728104331 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 34.51124338481738 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 34.23894103368123 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 33.99776911735535 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 33.81184277167687 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 33.550404636948194 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 33.2992525441306 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 33.05350579064468 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 32.821379582087204 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 32.62723067498976 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 32.39981532096863 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 32.22192538145816 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 31.962901900796332 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 31.754247563225885 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 31.547155751122368 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 31.41238017339964 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 31.208432699504655 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 30.987203524662903 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 30.793224334716797 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 30.590104300801347 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 30.443765776497976 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 30.27538112706916 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 30.02825117111206 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 29.79475683636136 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 29.572053235510122 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 29.35337562256671 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 29.16243541240692 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 28.95495840967918 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 28.741692066192627 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 28.572175577575084 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 28.35465460557204 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 28.137276204127186 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 27.941451266959863 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 27.72961688041687 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 27.527565070561003 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 27.31501892575046 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 27.12250391368208 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 26.94135701858391 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 26.74621295928955 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 26.564699806150845 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 26.407348948140296 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 26.199767540371607 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 25.993063062429428 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 25.819394423411445 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 25.635428818789396 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 25.445330854672104 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 25.244265275843002 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 25.048964966898378 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 24.857039315359934 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 24.66579126975906 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 24.49980756971571 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 24.32245745724195 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 24.131543726534456 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 23.930599292119346 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 23.73371097916051 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 23.543370928083146 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 23.336682227941658 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 23.141821656046034 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 22.94804549217224 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 22.752073573477475 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 22.54911500651662 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 22.357254154710883 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 22.158751374199277 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 21.968500025132123 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 21.776558526726653 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 21.58440293936894 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 21.385755278847434 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 21.195314988661348 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 21.004694541295372 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 20.80413027386089 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 20.60940658527872 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 20.42330675484032 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 20.223505167250938 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 20.026026211286847 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 19.8360667626063 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 19.644983318663137 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 19.461307948949386 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 19.286550175059922 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 19.093499422073364 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 18.89413089327293 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 18.69308314603918 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 18.505137144940573 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 18.306895329402046 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 18.110052120117913 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 17.9175410135737 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 17.72610448676849 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 17.53084498864633 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 17.3300549962105 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 17.128577015616678 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 16.93751977370666 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 16.74631893634796 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 16.555715662188234 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 16.35797541601616 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 16.1666654607524 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 15.97511650776041 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 15.783679615738047 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 15.59036371263407 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 15.39589752469744 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 15.201050758361816 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 15.009874231559188 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 14.816451436183494 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 14.6314296315356 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 14.439477412931382 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 14.245069313049315 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 14.059345563252768 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 13.88468608518285 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 13.698278680443764 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 13.510853238808092 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 13.320459182445818 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 13.125624248999676 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 12.935187354232326 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 12.74326733538979 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 12.550548524998906 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 12.358339380334924 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 12.16292661779067 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 11.97004921418907 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 11.779038007708563 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 11.59571690182034 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 11.405606133597237 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 11.217373825979571 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 11.026527733869957 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 10.83528572529346 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 10.644479552904764 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 10.455566233602063 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.266835888771162 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 10.076273760828032 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 9.886278088028368 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 9.695215524443045 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.503586530685425 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.315507277747653 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 9.127544628946405 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 8.937616102056566 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 8.748896933221197 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.558307040122248 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.370166185574654 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.17901906086381 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 7.989365544500229 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.799183805033846 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.607808768749237 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.418586953086143 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.227553717884017 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.036503607510057 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.846687223853134 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.6572174953691885 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.466913094003516 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.276079043656766 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.085402307056245 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.896849666121443 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.707929989870857 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.517214966099164 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.327120559160099 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.136370566538993 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.945519847431402 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.754903520856584 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.564435406164689 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.373925238679358 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.184751620453395 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.993901519136056 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.802642530865139 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.612248369343373 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.4215001195341674 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.2309842409331946 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.041445421135944 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.851189980635772 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.6612717182405534 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.471580580594068 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.281071881030468 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.0906869191972035 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.9005124067005357 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.7105563248639333 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.5209969381491342 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.3308084394030002 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.1407805103616617 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.9505187120193089 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.7603155642139667 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5701302792215105 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3800433886171592 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1899820404436121 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   38.0s finished

    1981 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  32.540 seconds)

**Estimated memory usage:**  1876 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
