
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fdc8659afd0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 149.93906021118164 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 24.946025609970093 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 22.888066291809082 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 22.120626052220665 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 21.711302995681763 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 21.42180562019348 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 21.16992974281311 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 20.953654391424998 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 20.857114791870117 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 20.655406316121418 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 20.491029500961304 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 20.364025679501623 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 20.294075568517048 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 20.17524836613582 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 20.034501007625035 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 19.898835023244224 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 19.756832003593445 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 19.6286960068871 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 19.51573242081536 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 19.382619318209198 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 19.260095357894897 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 19.164364076796033 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 19.055312135002833 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 18.92769561643186 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 18.821898301442463 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 18.69869565963745 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 18.574115863213173 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 18.460963125582094 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 18.339503526687622 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 18.221364966754255 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 18.126402775446575 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 18.009553655501332 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 17.922702848911285 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 17.823272733977348 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 17.722907977945667 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 17.61056879588536 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 17.498389959335327 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 17.39063924067729 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 17.2752490545574 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 17.167376078092136 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 17.057143211364746 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 16.949878884524832 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 16.84486659367879 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 16.732126319131186 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 16.62109923362732 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 16.50713872909546 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 16.39474838712941 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 16.27892102586462 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 16.168589115142822 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 16.080644476170445 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 15.97470760345459 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 15.870154198478248 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 15.77275301859929 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 15.660123015349766 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 15.557393312454224 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 15.448732354424216 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 15.33600916181292 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 15.234094636482103 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 15.135637529965104 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 15.025189040070872 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 14.91764283180237 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 14.811557988651463 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 14.706917593556064 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 14.605603588951958 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 14.495176434516907 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 14.383948968007015 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 14.303899360425545 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 14.22360436951936 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 14.12556944173925 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 14.021303145781808 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 13.919018949781146 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 13.809355450348116 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 13.69830576578776 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 13.589339481641169 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 13.478843663189862 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 13.368457158406576 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 13.267260852612948 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.174689419857867 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.08191083639096 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 12.980570437032965 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 12.882556915283203 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 12.778052065107559 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 12.679485937444175 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 12.5715289834034 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 12.461676325116839 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 12.35142700812396 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.244942404503044 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.13567550703027 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.027435129339045 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 11.916683314891342 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 11.80660645167033 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 11.697715740937452 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 11.590816964273868 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 11.483243129586661 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.377092396959345 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.273535640616167 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.165740172068277 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.05595940167142 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 10.94636402811323 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 10.83940882393808 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 10.729209899902344 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 10.620504239998242 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 10.51319050321392 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.406146952249472 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.29817089667687 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.190945965903145 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.082987600902342 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 9.974659654581657 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 9.86966296478554 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 9.76039404825333 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 9.651776985688644 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 9.542781771840277 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.434057916913714 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.325667969948423 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.219070263076247 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.111858544142349 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.00426563723334 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 8.896184768432226 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 8.789889557886932 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 8.682734523500715 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 8.574827035268147 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.465600677758209 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.358119921606095 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.251667187465884 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.145705961411998 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.037884330749511 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 7.92968559643579 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 7.823369835305401 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 7.715230733156204 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 7.606715183849483 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.4986503674433775 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.3913807614159035 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.283257448312008 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.176650219393853 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.069205771631269 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 6.961373337992915 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 6.8539898816277 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 6.747641159670196 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.640273667763973 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.532252162480526 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.424376658030918 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.316446994213347 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.20861033318748 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.10149963085468 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 5.994400103886922 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 5.886537971167728 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 5.7795490891966095 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.672024251652413 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.564498579179919 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.456833876219372 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.34887433052063 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.241196427124225 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.134037770723041 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.026921033859253 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 4.919605911552131 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.812326523565477 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.705481064625276 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.598245941149961 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.491189072403726 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.383838568093641 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.27639502286911 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.169251908426699 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.061887891204268 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 3.9551238999044966 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.8482147309838273 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.741401376146259 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.63415829819369 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.5269551348543455 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.419655300322033 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.31276395476076 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.205447743920719 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.0987835362640737 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 2.9920302823532463 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.885010906726639 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.7780490716298423 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.67108576638358 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.5644633878361094 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.457771957257373 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.350968181417229 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.2439391586367643 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.1371841695573592 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.0307448450373022 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.9240178511692927 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.8169621326884287 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.7100204799486243 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.603619736594123 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.497048149826706 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.3901336358830254 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.2830930669256981 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.1762847534563174 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.0693278312683105 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.9624524490995557 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.8554772138595581 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.748546008619002 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6416918543196216 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5347017997350448 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4279208572543397 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.32098899153888527 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2140051644257825 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.10699147794713926 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   21.4s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  57.171 seconds)

**Estimated memory usage:**  1877 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
