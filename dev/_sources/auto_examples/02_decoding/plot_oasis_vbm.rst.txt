
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fea901c12e0>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 150.28953552246094 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 26.263771295547485 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 24.202636241912842 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 23.540388663609825 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 23.09955906867981 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 22.85741114616394 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 22.59358024597168 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 22.377733128411432 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 22.151796340942383 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 21.99663045671251 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 21.838926076889038 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 21.675336794419724 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 21.542025248209633 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 21.399048970295834 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 21.258956602641515 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 21.15630865097046 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 21.043441772460938 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 20.930746036417347 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 20.822647068235607 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 20.725830153415078 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 20.620357275009155 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 20.501078548885527 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 20.37695912881331 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 20.27973140840945 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 20.17004632949829 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 20.052443265914917 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 19.933755727914665 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 19.805235703786213 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 19.67616060801915 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 19.541326415949854 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 19.412691513697307 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 19.287896717748332 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 19.16778391599655 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 19.039468786933206 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 18.915734936209287 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 18.796419075557164 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 18.68118561638726 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 18.569201437202658 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 18.453104496002197 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 18.324814716974895 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 18.20612621307373 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 18.09534409569531 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 17.976037979125977 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 17.865348915721093 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 17.752725622870706 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 17.639379580815636 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 17.52057086903116 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 17.403095909889707 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 17.284612496693928 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 17.178875207901 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 17.06361436843872 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 16.951419844346887 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 16.843239839260395 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 16.740672786280793 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 16.636065827475655 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 16.52946253256364 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 16.418948446001327 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 16.305223728481092 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 16.19444943296498 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 16.084489248566708 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 15.978747447331747 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 15.870556866536376 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.764215246323614 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.656994161151703 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 15.544538766145706 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.4295910688547 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 15.318759470274953 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.208061869464704 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 15.096271991729736 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 14.986189945884373 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 14.878249168395996 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.770523232473455 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.66079330444336 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.551225838595874 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.43725859152304 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 14.325104554494223 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.218304408224006 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 14.105515359284041 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.991761366526285 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.881343545792978 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.767500638961792 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.653584433190618 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.539325434987138 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.42438150888466 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.310935054506574 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.195897228577559 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 13.081476605215737 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.966737486850256 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.85556155985052 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.74172214443764 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.632998413509794 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.519829692421379 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.406139560367752 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.292919605009018 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.181053516712595 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 12.069192070710033 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.95660348733266 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.844013128084006 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.731318897130539 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.614837022742838 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.499696969985962 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.390028009320249 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.27827948214961 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.163870987382907 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 11.049493789672852 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.934367123104277 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.820355361362674 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.705905615726364 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.590923856805873 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.476466157020779 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.360523700714111 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.24486990447517 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.1294150522777 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 10.013885926356357 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.897847556231316 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.781677349754002 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.66637030141107 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.551338770450691 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.43586306248681 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.321626865563273 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.2073974609375 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.094332828994625 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.979193890681033 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.86450208881037 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.750380308397355 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.634860801696776 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.519825882381863 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.413617404427114 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.299531728029251 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.184427793635878 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 8.069775691399206 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.954421991610345 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.840246944716482 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.724729905451151 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.608655214309692 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.493449643806175 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.377556520349839 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.261798199075852 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.146345573922862 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.030941340563109 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.916164125714983 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.8007942700216955 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.685093436442631 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.569421664818184 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.453945649994744 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.337975995293979 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.222926704850915 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.107345370208325 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.991992905333236 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.877041178261674 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.762491623560587 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.6468644047415015 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.53141797216315 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.417377590353972 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.302312250261183 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.1872101906807195 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.072586365235157 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.958121662686585 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.843123260932632 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.727666541465424 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.611953556537628 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.4966661885658405 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.381287271593823 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.266054813115875 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.150929049747746 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.03539448073416 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.9200429198253586 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.8047086307388582 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.6894025802612305 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.5739684796192237 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.4586580781375664 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.3434087588773136 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.2282913562863373 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.112779606284434 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.997462776885636 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.882045337132045 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.7667568271810357 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.651302673048892 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.535891227507859 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.4204270293592742 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.3049793243408203 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.189544049415799 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.0743926750434625 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.9590337875762274 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.8437053224314814 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.728386588998743 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.6131129034103886 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.497798273270143 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.382551203382776 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2673228304222146 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.1520477219631797 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.0368589830648214 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9216412703196207 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.8064582187277047 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.691258405901722 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5760640303293864 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4608365272989078 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.34561019984598695 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2304220319998385 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11521735502846876 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   23.0s finished

    1973 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  0.206 seconds)

**Estimated memory usage:**  1902 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
