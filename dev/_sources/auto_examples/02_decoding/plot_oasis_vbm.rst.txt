
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-142

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 143-145

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 145-158

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 159-161

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 161-176

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f7ec2d803d0>



.. GENERATED FROM PYTHON SOURCE LINES 177-179

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 179-223

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 235.89134216308594 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 43.17270588874817 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 42.58287048339844 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 40.80081240336101 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 39.798808097839355 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 39.27410531044006 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 39.33787234624227 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 38.7570116519928 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 38.40594291687012 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 37.96451213624742 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 37.56762957572937 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 37.41244658556852 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 37.16278600692749 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 36.81642477328961 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 36.490997825350085 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 36.215134620666504 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 35.97101044654846 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 35.751775965971106 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 35.51224321789211 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 35.29288246757106 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 35.046382427215576 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 34.794672262100946 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 34.736944285306066 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 34.56436228752136 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 34.33452971776326 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 34.098000049591064 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 33.94466444162222 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 33.7226679943226 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 33.48902876036508 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 33.30049491750783 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 33.0797913869222 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 32.87404970199831 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 32.6422353386879 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 32.43459177017212 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 32.21758650330936 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 32.01856337274824 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 31.798398044374252 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 31.576348317636025 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 31.368847545824554 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 31.1633245578179 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 30.95231819152832 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 30.758145524234305 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 30.543701058342343 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 30.4143494228984 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 30.21125572377985 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 30.01125658882989 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 29.808945448502254 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 29.6177071611932 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 29.42534784475962 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 29.24846227801576 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 29.046416759490967 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 28.841007279414754 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 28.657275053171013 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 28.458199172649746 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 28.263087466911035 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 28.057196833870627 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 27.875067165919713 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 27.714033089186014 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 27.516797189054817 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 27.387835482419547 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 27.185888687769573 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 26.984268641862712 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 26.791235585366522 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 26.59039730117434 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 26.41010183095932 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 26.217789118106552 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 26.011493653962106 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 25.81102855169951 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 25.61973073903252 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 25.450570776842643 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 25.27751398086548 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 25.072322301461664 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 24.874499426947697 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 24.674064450068016 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 24.495199074616302 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 24.305005073547363 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 24.11005441766036 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 23.923888141458683 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 23.724937885235516 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 23.530898625337624 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 23.333201050758362 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 23.131702063996116 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 23.01201532526714 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 22.844326611024787 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 22.67718930471511 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 22.48802307072808 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 22.28639504521392 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 22.0930664402315 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 21.897355469790373 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 21.697019641319017 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 21.50241706106398 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 21.311127707198427 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 21.108122255491175 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 20.906055624767017 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 20.70609934279259 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 20.51866932919151 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 20.32784662644068 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 20.125367297339686 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 19.925246365216314 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 19.727521576062596 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 19.523090362548828 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 19.321473733033283 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 19.12373529695997 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 18.92177770207229 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 18.727100812471832 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 18.531120095934188 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 18.332190248201478 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 18.134541007959953 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 17.93539065784878 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 17.746511258116556 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 17.55060397494923 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 17.35764092153257 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 17.16198636804308 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 16.965724949288155 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 16.765767197859915 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 16.566761566245038 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 16.368578047587953 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 16.170279753513825 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 15.975600351721555 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 15.779029814135127 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 15.58143122990926 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 15.394125024149242 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 15.198181042905714 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 15.004767981971181 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 14.806498442926715 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 14.610189199447632 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 14.412610008603052 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 14.21423340970137 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 14.019776031374931 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 13.822372741477434 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 13.62628856072059 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 13.429391919201567 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 13.23717408469229 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 13.042930086752527 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 12.846995745132219 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 12.652372148301865 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 12.462511287016026 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 12.268650561353585 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 12.073485277701115 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 11.877636599026138 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 11.68123596055167 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 11.48672881024949 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 11.292418926534518 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 11.098360686869054 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 10.901134014129639 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 10.705123679391269 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.512042496302357 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 10.317237722630404 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 10.12015909761996 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 9.924744263591382 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.728402217229206 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.532531648282184 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 9.33604363391274 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 9.140788506838232 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 8.946321546257316 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.75050001759683 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.55549588570228 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.360746646383006 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 8.164731348617167 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.9691078392964485 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.773532211780548 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.5784104255415645 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.383397970670535 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.187889910914415 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.993096113204956 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.799109220504761 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.606300822223525 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.411973089515092 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.217004367283412 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 6.024162288248186 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.829084550633151 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.634777887522826 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.440477044083352 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.246819815883747 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.051609847737455 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.857535873140607 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.6627187945626 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.468548233226194 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.273724357733566 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.079038181784433 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.8844404220581055 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.690539171682537 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.4964516031873094 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.3016646012582416 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.106966910154923 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.9124268905536552 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.7189524173736572 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.524599942294034 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.330788987748166 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.136573448382988 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.9421411188025222 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.7476296212660705 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.553240289290746 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.3594101302981993 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.1651928670627556 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.9708018669715294 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.7765841143471853 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5824481884235053 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.38834475748466724 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.19414735918668047 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   38.8s finished

    1965 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  28.692 seconds)

**Estimated memory usage:**  1895 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
