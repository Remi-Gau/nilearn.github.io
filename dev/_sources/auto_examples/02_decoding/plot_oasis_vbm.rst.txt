
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f6875b5d370>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 137.4053955078125 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 24.58895230293274 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 22.69961643218994 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 22.029444615046184 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 21.70295000076294 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 21.422735452651978 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 21.144020239512127 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 20.921752997807094 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 20.742433547973633 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 20.566081100040012 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 20.406527757644653 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 20.26858214898543 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 20.113051652908325 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 19.990281930336586 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 19.866167306900024 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 19.742727041244507 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 19.624141931533813 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 19.5222604414996 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 19.45093584060669 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 19.36650252342224 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 19.257807970046997 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 19.13811167081197 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 19.01192647760565 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 18.89671708189923 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 18.78967523574829 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 18.666685581207275 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 18.55106784747197 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 18.434855673048233 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 18.32890295982361 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 18.221495710570235 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 18.109063545862835 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 17.996791255089544 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 17.88387018442154 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 17.780673337705206 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 17.67591087958392 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 17.561315161841257 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 17.468976497650146 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 17.374260386905153 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 17.27912769819561 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 17.166263885987114 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 17.0581111907959 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 16.947857711373306 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 16.855653706051054 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 16.7493936571964 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 16.63858092914928 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 16.52816605567932 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 16.41991672308549 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 16.31164959136476 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 16.21181241671244 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 16.104647728861597 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 16.006715297698975 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 15.894304499906651 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 15.793102832940908 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 15.685154226591003 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 15.575847943623861 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 15.466961167075416 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 15.367530482155937 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 15.266971282791673 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 15.160401615603215 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 15.049412666741063 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 14.971702814102175 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 14.861020525947946 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 14.750477406286423 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 14.640878964984227 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 14.533019363880157 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 14.432173765622654 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 14.323441910021232 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 14.21182966943997 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 14.102436219944673 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 13.994042766266976 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 13.886125462395805 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 13.776216513674024 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 13.666724734836153 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 13.55835809446361 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 13.458007973593634 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 13.348985115687054 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 13.246116826408787 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.137315802759938 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.030434559553097 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 12.922952383379393 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 12.818382382392883 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 12.717677902292323 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 12.612327069770998 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 12.506952119160847 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 12.402443556558518 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 12.297569078557633 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.192427080731058 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.087817230443845 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 11.980594938451594 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 11.878177819627053 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 11.770977205700346 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 11.66221007671985 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 11.554510583048282 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 11.44731406498981 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.340883006440832 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.233202783684982 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.12400851647059 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.017697646445836 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 10.911524519628408 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 10.803094307581583 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 10.693993330001831 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 10.584919367686357 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 10.476057071311802 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.369220279952856 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.261926357562725 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.156093801770892 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.049101645091795 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 9.94266639914468 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 9.83463274108039 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 9.727318059413804 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 9.623970963738183 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 9.519499662760142 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.418967638696943 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.311557619972566 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.204160799059952 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.096272022827812 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 8.988012042538873 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 8.88051039337093 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 8.773581274485185 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 8.667953288855673 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 8.5613161722819 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.457403220421027 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.351435950545014 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.245451060737052 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.136298564172561 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.027541017532348 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 7.920410292489188 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 7.811870083095521 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 7.703256547451019 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 7.5950597275135125 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.4872599198268 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.38002111347577 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.272835413614908 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.164836272261197 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.057496586842323 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 6.950859228769938 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 6.843619739308076 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 6.7376224629200285 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.63076126748237 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.524733260381136 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.416981731142316 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.3090744492010025 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.201592384929389 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.093607058891883 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 5.985973397890727 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 5.878561274758701 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 5.770836069159311 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.663181673101827 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.555862781163809 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.448696579709149 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.341209093729654 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.235074095378648 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.127740358051501 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.020938962113624 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 4.914351172261424 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.807398734554168 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.7003150047400055 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.593383751097758 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.486938434311106 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.380140237088473 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.273242890834808 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.166353083545377 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.0589311741016525 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 3.9520186822107233 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.845187262790959 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.7381601116874004 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.631869313228561 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.525394198423374 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.4198014395577565 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.312889207749677 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.2060727091396557 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.099023549877412 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 2.9918852406878806 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.8851553925200006 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.778337960955741 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.671297550201416 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.56418333270333 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.457734873065841 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.3510986633515087 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.2444543545472557 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.1374610794915094 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.0304794548624785 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.923514208950839 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.816424530060565 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.7096043462338655 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.6027603471601333 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.4958778888948503 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.3889527983843961 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.2819546993742597 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.175025500948467 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.0681317479986894 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.9614014388379002 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.8547285000483195 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7478475830097889 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6410515455855537 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5342236359914143 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4274287807698152 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.32101426148777684 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.21403581445867367 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.10701367244049532 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   21.4s finished

    1965 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  56.876 seconds)

**Estimated memory usage:**  1854 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
