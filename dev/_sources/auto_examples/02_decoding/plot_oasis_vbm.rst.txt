
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7ff8225bb7c0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 144.87981796264648 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 24.7951021194458 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 22.813219785690308 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 22.22815251350403 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 21.769505262374878 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 21.4318106174469 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 21.165181080500286 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 20.97326983724322 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 20.811372756958008 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 20.655502451790703 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 20.520723342895508 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 20.37257090481845 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 20.235051552454628 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 20.1018626506512 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 19.97673419543675 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 19.84230399131775 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 19.70327889919281 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 19.588509657803705 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 19.456340577867294 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 19.34241136751677 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 19.223273992538452 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 19.10811182430812 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 19.002541780471805 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 18.906909320665445 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 18.82206090291341 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 18.705867052078247 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 18.60248829768254 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 18.48235168280425 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 18.36733330999102 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 18.250409775766833 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 18.153420845667522 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 18.04799032980396 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 17.93961077928543 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 17.845690293745562 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 17.74574535033282 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 17.63039905684335 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 17.521201928456623 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 17.409811973571777 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 17.30057712605125 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 17.19422026169606 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 17.089262008666992 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 16.97903241180792 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 16.873303958347865 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 16.768360221108725 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 16.658101493662052 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 16.555188284979927 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 16.446789979934692 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 16.338338324364194 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 16.229741970698036 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 16.123062712805613 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 16.016620874404907 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 15.91206180815603 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 15.805587951953594 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 15.695937624517477 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 15.591270958935773 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 15.480040203441272 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 15.371432713099889 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 15.26304450787996 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 15.152370288454252 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 15.044619677430491 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 14.9351282119751 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 14.825306818133495 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 14.72036592421993 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 14.610078467263115 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 14.502820611000061 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 14.393444483096784 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 14.286841016827207 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 14.1790598541943 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 14.078994302188649 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 13.972753289817035 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 13.867995943341937 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 13.759961319641329 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 13.652357737223307 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 13.546112455733835 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 13.441404374870093 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 13.333755731582642 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 13.225116729736328 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.117702004197357 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.012353964340992 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 12.906490395340738 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 12.806734800338745 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 12.70199774812769 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 12.595050079066578 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 12.487334558762699 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 12.379517918541318 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 12.271119286032285 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.163391872893932 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.055863920299487 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 11.947199041193182 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 11.84088641873906 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 11.733770026101007 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 11.62632716357053 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 11.520636942075647 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 11.413811268345004 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.306922050232583 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.19928046276695 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.092856029669443 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 10.98529871222899 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 10.877732203931226 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 10.769504024524881 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 10.661803245544434 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 10.554648540987827 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 10.446473977145027 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.340700688871365 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.234057573171762 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.126869564964657 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.020345561909226 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 9.913388809311055 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 9.806276701114795 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 9.699218039118916 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 9.592399315400558 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 9.485071328309205 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.37768166405814 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.27097811108142 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.165287557401156 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.058733473653378 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 8.952479716004996 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 8.846141576766968 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 8.73978754625482 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 8.632552295171914 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 8.526792685190836 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.422851144774887 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.316357944832474 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.209929526336794 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.106031317864694 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 7.9992241859436035 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 7.892258125638206 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 7.7850804967204414 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 7.678144499659538 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 7.571094932482223 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.463801053854135 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.35636122900111 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.2490831721912725 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.141931533813477 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.035594826313987 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 6.92823169849537 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 6.821702620562385 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 6.7171623062913435 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.610272625218267 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.503881809522779 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.397327729633876 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.291489183480012 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.1853582791879145 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.078737187218833 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 5.971596121788025 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 5.864602689085335 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 5.757695861058692 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.650855461756389 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.544056840845057 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.436983945385721 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.330374797185262 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.2242145443594215 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.117240403827868 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.011076065449934 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 4.9042518262739305 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.797386792398268 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.690885733335446 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.584155384901982 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.477579412581045 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.370784792510219 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.2639647126197815 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.156955538329131 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.050475932933666 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 3.9436302053416434 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.837086625215484 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.7303214506669478 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.6235152554799273 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.5173458025127116 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.410757064819336 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.3040647760650814 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.19735037579256 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.090682874646103 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 2.984031411104424 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.8771731757015164 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.770488999355799 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.6639391354152133 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.5572537400505757 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.4505111699723927 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.3437863708881848 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.2371933060651386 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.1306117905510797 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.024084687891586 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.9174511196849109 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.8108694357950181 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.7042590224224587 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.597704165690654 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.4912891387939453 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.3846546022649755 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.2780737826164732 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.1715983259614813 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.0651265570991917 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.9585679139142261 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.8520147303740183 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7454819395134485 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6390865979735385 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5326148668924967 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4260937778317198 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.319549047402319 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.21302881144513988 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.10650682569149152 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   21.3s finished

    2000 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  56.863 seconds)

**Estimated memory usage:**  1861 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
