
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print("")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f5a6fa6c160>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 263.4906768798828 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 45.915565967559814 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 42.76570272445679 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 41.76526276270549 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 41.12562584877014 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 41.184929609298706 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 41.192749182383224 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 40.769685234342305 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 40.4315128326416 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 40.09943742222256 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 40.03680729866028 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 39.74329402230003 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 39.40873908996582 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 39.07214555373559 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 38.83981091635568 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 38.7288027604421 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 38.44097328186035 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 38.149287700653076 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 37.861088514328 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 37.631702849739476 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 37.52357840538025 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 37.29800520624433 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 37.05671603029425 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 36.803715488185055 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 36.6137302716573 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 36.49202346801758 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 36.25996008286109 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 36.03865262314125 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 35.80052059037345 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 35.627761553073746 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 35.47324411074321 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 35.2481928179341 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 35.00220465660095 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 34.76427815177224 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 34.581678839290845 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 34.35139805930002 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 34.11262088351779 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 33.89195944811846 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 33.676140433863594 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 33.5011927164518 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 33.28486347198486 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 33.05397169764449 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 32.82836786905924 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 32.65024511204209 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 32.48431908000599 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 32.27190483940972 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 32.057625957157306 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 31.825454539441047 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 31.618011951446533 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 31.416213882212737 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 31.192710399627686 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 30.96911754795149 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 30.744312084638157 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 30.544215661174846 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 30.349151169812238 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 30.133542255921796 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 29.914255346570698 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 29.68897836250171 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 29.493204125042617 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 29.289513248508257 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 29.069213946660362 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 28.857147482574963 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 28.641587272767094 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 28.44892402300759 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 28.233043372631073 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 28.019177858646103 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 27.805524587631226 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 27.599182808577122 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 27.402158807305728 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 27.18525323314943 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 26.963500806263514 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 26.743767771922368 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 26.52555974324544 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 26.34052237745834 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 26.203888409846538 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 25.98938822746277 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 25.770596265792847 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 25.560676008075863 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 25.354508723968113 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 25.145611503456212 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 24.930843472480774 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 24.71383508340812 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 24.51789529149125 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 24.3330800159868 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 24.127405881881714 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 23.914658069610596 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 23.70081429703291 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 23.512965512001653 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 23.31319743936712 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 23.102067899168205 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 22.887028031879 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 22.67466012986152 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 22.47635336544203 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 22.263547469210884 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 22.048820865915175 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 21.83543906713787 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 21.6272430618604 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 21.4306568755317 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 21.22004292449173 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 21.00561265511946 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 20.792097806930542 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 20.587236444548804 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 20.390867331448725 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 20.1814612694157 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 19.971400847801796 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 19.759930463064286 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 19.561146452741802 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 19.363912569028194 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 19.152272551148027 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 18.94027196814161 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 18.727002317255195 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 18.5256249109904 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 18.315784301076615 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 18.108494604583335 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 17.89929924094886 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 17.689184593117755 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 17.48783252157014 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 17.279906910708828 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 17.071345947556576 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 16.858469712634047 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 16.648624897003174 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 16.43788369036903 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 16.226551505385853 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 16.014130067049972 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 15.803045288208992 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 15.596376657485962 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 15.395116893071977 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 15.18529774072602 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 14.973675236105919 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 14.769515893256017 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 14.565194716820349 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 14.357107258935011 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 14.145912134286128 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 13.936272897218403 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 13.725898109265227 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 13.520646942986382 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 13.310518601361442 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 13.101641825515859 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 12.890980133111926 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 12.681100375360723 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 12.478386742728096 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 12.270951411402818 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 12.061137454610476 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 11.851052514322987 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 11.642542190021938 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 11.440238508684882 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 11.233662863300271 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 11.0236784990142 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 10.813708646877393 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 10.606263615140978 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 10.400741656621296 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 10.19168333186219 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 9.981918811798096 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 9.771876642127443 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 9.562809659289075 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 9.352960294292819 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 9.14429235458374 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.936280478337768 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 8.726688025872917 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 8.520416694617122 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 8.315125703811646 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 8.106450323732744 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.8990660655645675 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.6904504284536905 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 7.485070135535263 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 7.277939110091238 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 7.069001108767038 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.859806467673022 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.650695573715936 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 6.445643712783001 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 6.238274658427519 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 6.030156000315794 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.822450072266335 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.614880350972876 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.408699356276414 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.201292072023664 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.993162783709439 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.784675072815459 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.577837110905165 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.371297054450605 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.163159370422363 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.954837202367203 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.7464261736188615 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.5392771887648955 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.331165085668149 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.1228753102792277 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.9146730310173448 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.706433220980639 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.4992189914622203 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.2911364704212813 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.082769895854749 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.8742411323866919 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.6662099361419678 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.4585020999216662 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.2501092964840919 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.041663286013481 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.8332129254633066 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.6249290384011825 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.41659066653010823 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.20828199027171687 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   41.6s finished

    2014 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  5.766 seconds)

**Estimated memory usage:**  1945 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/nilearn/nilearn.github.io/main?filepath=examples/auto_examples/02_decoding/plot_oasis_vbm.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
