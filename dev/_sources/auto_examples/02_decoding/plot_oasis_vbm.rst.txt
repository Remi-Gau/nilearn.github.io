
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print("")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f4bf8110ac0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 174.87764358520508 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 40.936941146850586 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 38.79244136810303 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 37.73892283439636 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 37.12942457199097 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 37.108479022979736 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 36.88396255175273 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 36.66888696806772 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 36.313093185424805 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 36.14570116996765 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 35.90272235870361 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 35.80199113759128 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 35.67219988505045 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 35.42422250600961 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 35.18103075027466 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 34.97962943712871 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 34.8025426864624 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 34.50458243313958 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 34.27962562772963 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 34.08573317527771 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 33.94031023979187 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 33.881934756324405 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 33.61430495435542 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 33.40346537465635 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 33.21517594655354 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 33.04500699043274 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 32.83137906514681 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 32.59047683963069 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 32.400802510125295 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 32.20584864451967 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 32.02399794260661 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 31.847791018024566 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 31.644546031951904 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 31.435340505657773 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 31.236698136610148 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 31.049796172550746 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 30.831416236029728 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 30.61006421656222 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 30.422180000104404 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 30.231402060924434 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 29.98417377471924 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 29.80448557690876 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 29.622096708842687 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 29.453794983930365 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 29.272312597794965 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 29.064818302790325 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 28.849429379338805 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 28.67876079234671 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 28.482479651769 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 28.30994979216128 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 28.10954761505127 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 27.908328921187156 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 27.72767417247479 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 27.5615166853059 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 27.369725774835658 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 27.177992430600252 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 26.98924357550485 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 26.81007993430422 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 26.629888024823416 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 26.416567992355862 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 26.237195412317913 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 26.046091263411476 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 25.857903288256736 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 25.672553149480667 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 25.501532077789307 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 25.307963187877952 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 25.116743355086356 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 24.93153006283205 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 24.725654672173892 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 24.56167979862379 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 24.366162606648036 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 24.182206936285528 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 24.00395117865668 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 23.817456656939363 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 23.626372943053372 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 23.448007106781006 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 23.262909700995998 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 23.074285798258597 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 22.878166015331562 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 22.694890366324895 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 22.51201093196869 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 22.328508706740394 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 22.135674563849843 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 21.9426803991019 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 21.7552623181116 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 21.56969903497135 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 21.382332519043324 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 21.187533754041826 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 21.004928198727693 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 20.80449197265539 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 20.618510219785904 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 20.41837853389782 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 20.238218338593196 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 20.046413939486268 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 19.858526716841027 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 19.67624578977886 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 19.493060866991677 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 19.303838174367687 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 19.11135572316695 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 18.929298111886688 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 18.73935055732727 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 18.551376002849917 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 18.368646317837285 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 18.180343102482915 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 17.992212735689606 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 17.79866660208929 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 17.61052755589755 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 17.428469816100932 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 17.23820349905226 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 17.053153164889835 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 16.86059214852073 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 16.67588217194016 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 16.485005259513855 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 16.29754636983956 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 16.11135369016413 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 15.926675889803015 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 15.739053257580462 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 15.552542034377401 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 15.367563587124065 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 15.181380398133223 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 14.989593029022217 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 14.794202899144702 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 14.607492169395822 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 14.415631466764744 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 14.231264114379883 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 14.046219205856323 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 13.857342042620221 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 13.66825878338551 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 13.48004624247551 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 13.285006234812181 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 13.100860082186184 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 12.913885826372917 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 12.723925446019027 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 12.538130453654698 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 12.349411992884393 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 12.160042506677133 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 11.973965813131894 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 11.785225419232445 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 11.596431949864263 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 11.412626686713677 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 11.225989375795637 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 11.037729346160347 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 10.847737550735474 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 10.659712254584251 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 10.471242388089498 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 10.280453040682035 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.093473359330059 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 9.90642616051395 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 9.719600174878096 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 9.531280507977376 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.345617055892944 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.161110060104471 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 8.973757191708213 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 8.785595544802598 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 8.601915638168137 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.414525824208415 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.227621585894854 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.041040999114893 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 7.852562481843972 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.6657256120405854 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.481915533542633 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.293910570026185 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.105487535029281 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.919585669698891 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.73033425284595 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.54378274715308 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.3553793056901675 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.168443214393662 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.981509163266137 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.794755666213628 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.6070220049689805 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.421352898168284 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.23462612684383 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.047466891349396 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.860702347481388 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.673469918114798 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.486471555449746 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.298958848425224 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.111896555075485 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.9256432216260686 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.7383872667948403 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.550681502779544 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.3652195930480957 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.1780575468240544 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.990669830985691 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.803748826722841 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.616576281926965 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.4299033019631944 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.2427985769637084 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.05579311254794 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.8684732412037095 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.681643235121722 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.494871844847997 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.3080314873413716 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.1212503860906229 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.9342652895511725 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.7473716151957609 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5605190175438896 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.37366156626229335 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.18686414124378606 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   37.4s finished

    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  59.670 seconds)

**Estimated memory usage:**  1882 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn.github.io/main?filepath=examples/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
