
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print("")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f903ecd9100>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 217.08965301513672 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 42.95924949645996 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 40.61736488342285 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 39.737681309382126 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 39.0926353931427 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 38.57549428939819 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 38.171667178471886 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 37.847746338163105 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 37.564870834350586 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 37.33950885136922 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 37.21983790397644 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 37.046349633823745 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 36.8154661655426 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 36.610610044919525 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 36.481191056115286 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 36.28758255640666 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 36.1467387676239 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 36.00147132312551 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 35.84532642364502 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 35.616390328658255 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 35.39209771156311 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 35.198658137094405 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 35.04687270251188 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 34.8801106888315 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 34.732863108317055 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 34.56415057182312 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 34.361641260293815 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 34.14845320030495 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 33.95081101145063 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 33.77162674377704 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 33.56396849950155 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 33.38013821263467 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 33.21044594049454 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 33.026818333250105 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 32.843037633334895 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 32.635622467313496 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 32.42014503479004 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 32.202982844533146 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 31.99665622962149 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 31.80426019888658 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 31.614096641540527 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 31.401161513677458 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 31.190630924134027 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 30.991895570311435 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 30.805486288937654 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 30.60627614127265 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 30.40007328987122 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 30.19516776977701 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 29.984612822532654 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 29.783238143337016 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 29.590399503707886 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 29.390882010553394 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 29.20325726729173 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 29.01478438557319 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 28.826454904344345 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 28.640361070632935 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 28.453846795218332 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 28.268223946554617 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 28.088619043087135 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 27.905263520903503 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 27.72271283467611 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 27.529081833167155 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 27.345560789108273 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 27.15998123562525 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 26.969002693891525 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 26.773402525828438 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 26.580477996305987 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 26.390968618108264 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 26.192870378494263 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 25.985915128735527 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 25.786442279815674 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 25.589996408408798 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 25.382416195339626 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 25.186811323035254 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 24.985633250829334 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 24.819876750310264 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 24.63996171951294 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 24.442469739294673 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 24.253211223162136 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 24.07344675064087 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 23.875775456428528 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 23.670405693996102 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 23.471775682961066 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 23.27567196754088 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 23.076258909134637 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 22.873931407928467 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 22.67621161771375 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 22.481784179292877 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 22.27971280704845 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 22.075947922267268 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 21.873948891957603 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 21.6722103370415 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 21.471342242282372 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 21.267964555371194 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 21.065953954737235 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 20.866006700616136 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 20.665363152821858 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 20.466067375596037 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 20.263236026374663 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 20.068080413221107 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 19.87339758872986 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 19.678520622819956 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 19.48147827503728 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 19.28131396330676 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 19.081376442542442 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 18.880117598034087 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 18.678173865912097 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 18.477921122702483 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 18.278760980676722 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 18.08110956314507 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 17.883359800685536 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 17.680299361546833 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 17.48064010483878 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 17.277452445663183 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 17.078390213481168 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 16.881703293841817 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 16.681950626702143 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 16.484834832003994 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 16.286879442505917 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 16.089691827277175 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 15.891183058420816 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 15.69400950108678 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 15.49777123185455 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 15.298132954574212 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 15.099504863062213 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 14.901682090759277 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 14.702389009415159 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 14.502768473362359 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 14.305977925658226 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 14.110165224518886 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 13.914846438627976 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 13.716578607340805 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 13.518379753286188 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 13.319744549299543 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 13.120394500333871 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 12.922365073804501 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 12.724208046408261 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 12.525820793026554 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 12.327562180118285 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 12.154756093196731 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 11.954546417508805 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 11.756467286576616 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 11.55802887929997 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 11.359626391550877 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 11.163576046625773 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 10.966230713087937 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.768249658689106 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 10.569126912525721 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 10.370495293591475 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 10.172097871767594 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.971694946289062 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.772349138133572 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 9.573943865926642 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 9.374440928689795 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 9.17560574915502 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.976384447466943 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.777545812802437 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.578939612504023 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 8.380567608000357 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 8.18153495308738 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.981419742107391 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.781282079886206 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.581970138314329 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.382207254690626 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 7.188085538585011 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.988897923267249 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.7890593804508805 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.588927555940822 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.389161427815755 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 6.189501918984588 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.989702379002291 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.7898829652552015 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.590045701625735 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.390081740528173 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.191125543638208 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.9924220357622415 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.794014909050681 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.595479675605472 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.396609255437101 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.197347878077843 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.9980238013797336 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.7988043727137106 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.6005240718086995 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.401225117386365 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.2017104936682657 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.0021318100594185 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.8025338880477415 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.6024967476645893 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.4026593908350518 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.2027361090221103 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.002527789065712 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.8023595148356173 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.6022775173187256 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.4020657774080265 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.2018175223439012 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.0015920797983806 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.8013774472839977 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.6010350309652726 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.4007223663908063 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.20038952899338613 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   40.1s finished

    1939 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  2.792 seconds)

**Estimated memory usage:**  1908 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/nilearn/nilearn.github.io/main?filepath=examples/auto_examples/02_decoding/plot_oasis_vbm.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
