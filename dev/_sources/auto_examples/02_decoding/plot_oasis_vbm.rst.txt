
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fc16ddcfa00>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 196.86222076416016 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 35.01429724693298 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 32.747907400131226 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 31.828004757563274 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 31.355297088623047 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 30.9249165058136 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 30.54232446352641 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 30.243415151323592 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 29.940656661987305 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 29.728766679763794 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 29.517191886901855 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 29.31827480142767 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 29.08752965927124 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 28.910847572179943 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 28.72340624673026 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 28.534618377685547 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 28.35024356842041 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 28.208784383886 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 28.035305102666218 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 27.864984261362178 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 27.696380853652954 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 27.537814662570046 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 27.358120549808852 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 27.194043439367544 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 27.021790822347004 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 26.884256839752197 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 26.72880220413208 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 26.58884401674624 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 26.416479349136353 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 26.25649328889518 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 26.140385548273724 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 25.98559639530797 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 25.836563050746918 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 25.703225973880652 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 25.539848720326145 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 25.53408602305821 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 25.381582180658974 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 25.24262644793536 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 25.082944468448037 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 24.9591715274713 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 24.81014347076416 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 24.650659543711964 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 24.50093596322196 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 24.346783887508302 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 24.18447563864968 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 24.018948104646473 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 23.85351788479349 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 23.700738140877256 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 23.540507793426514 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 23.377262261449076 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 23.21408486366272 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 23.052677855772128 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 22.88904014000526 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 22.72905993461609 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 22.58217390378316 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 22.435071099888194 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 22.273219994136266 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 22.110756769514918 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 21.94877771673531 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 21.7852019051374 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 21.622932036717735 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 21.461091057198946 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 21.305806806010583 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 21.148158762190075 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 20.991522669792175 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 20.83314079504747 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 20.672854127305925 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 20.513622742980274 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 20.355094208436853 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 20.2157884888027 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 20.061070203781128 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 19.904710564814824 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 19.74713431464301 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 19.58831044745772 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 19.430967498469997 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 19.274121522903442 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 19.116294057745684 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 18.96006989479065 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 18.803333117411686 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 18.64515512804442 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 18.487256169319153 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 18.331640702706796 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 18.175989825551103 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 18.02177431497229 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 17.868617148626416 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 17.716690876904657 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 17.560161601665406 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 17.40938067984307 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 17.2549409866333 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 17.100003976500435 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 16.94328104125129 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 16.78953681411324 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 16.636053240817528 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 16.484746399746147 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 16.330705323117844 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 16.176448608699598 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 16.021540423234303 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.867438222944122 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 15.712360002556627 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 15.555468949404629 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 15.401836633682251 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 15.246959931779616 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 15.091555782392915 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 14.935216264817322 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 14.792319444509653 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 14.6373051575252 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 14.482197055276835 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 14.328598350007956 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 14.177126760836002 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 14.023410939295358 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.867207483811812 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 13.712270083728137 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 13.557243449347359 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 13.400872144023928 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 13.244627346072281 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 13.090053776036138 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.933668276359295 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.780198637236897 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.627584590750226 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 12.474846623524899 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 12.32266632715861 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 12.173075333114499 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 12.020818690784642 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.869745481305005 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.716660168863113 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.564152479171753 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.411427827108474 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 11.25815504179226 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 11.105253383517265 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.953070287556612 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.801240847660944 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.648410760719358 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.495164574998798 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.34286191588954 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.1902649509373 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.037061894381488 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.884008744183708 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.731340068970283 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.579685798589734 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.426606975871024 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.272691249847412 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.119884171384445 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.96590344334992 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.813159465789795 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.659170243475172 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.506542436007795 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.352340495749695 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.200577502347985 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.046716400094935 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.8924928559552905 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.7386314868927 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.584389408692618 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.431494461862664 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.2779261910058315 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.124165528780454 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.97007175414793 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.816261933400081 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.6624258445326685 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.508426793013946 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.355372865245028 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.202024757862091 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.047551014408562 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.893875266298835 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.739142063936573 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.584555846888844 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.430021871219982 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.275431960462088 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.121707426573702 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.9673990067981535 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.812744331077711 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.658137111102834 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.503551717390094 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.349055434382239 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.194224959853067 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.039861251567973 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.8849007061549594 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.730198632587086 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.5751254019764183 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.420022080453594 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.265010853719445 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.1099824375576444 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.9552750165949866 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.8002371761825056 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.6452071640660857 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.490002404088559 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.335260571660222 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.180011744140297 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.024590791865466 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.8692045871247636 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.7138066266579601 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.5581064726177014 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.4026038247253259 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.2470563650131226 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.091205902050196 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9353659423356204 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.779494774647248 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6237740662633156 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4679110776349373 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3119662289667611 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.15598697398775188 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   31.2s finished

    1993 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  11.803 seconds)

**Estimated memory usage:**  1880 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
