
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-90

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 148-150

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 150-163

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-166

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fd219c06310>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-229

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 281.78930282592773 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 50.35369396209717 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 46.46511697769165 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 45.47137173016866 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 45.88321137428284 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 45.18972730636597 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 44.59535845120748 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 44.158299514225554 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 43.72063064575195 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 43.85534670617845 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 43.3862681388855 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 43.079581845890395 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 42.685640255610146 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 42.51192177259005 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 42.48539185523987 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 42.45721618334453 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 42.18224108219147 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 41.90565137302175 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 41.91976414786445 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 41.60102456494382 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 41.266841411590576 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 40.92631816864014 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 40.59549723971974 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 40.454637796982475 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 40.15517457326253 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 39.86805868148804 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 39.58759573789743 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 39.44070422207868 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 39.296212026051116 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 39.06714633415485 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 38.81937901178996 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 38.53208881039773 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 38.36800181865692 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 38.143722873745546 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 37.890315771102905 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 37.63524004391262 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 37.47863483428955 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 37.202470934068835 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 36.943979012338744 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 36.79319571837401 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 36.50611877441406 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 36.46470971223785 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 36.1770034404028 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 35.990971875745196 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 35.831154649907894 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 35.61302590370178 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 35.350891382797904 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 35.1058240139738 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 34.83950388431549 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 34.665292550106436 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 34.43557548522949 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 34.21543880537444 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 33.96786137727591 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 33.74213359041034 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 33.53266883779455 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 33.29413275285201 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 33.04022741317749 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 32.808641626123794 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 32.618484850587514 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 32.39070268404686 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 32.14141488075256 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 31.883064000332944 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 31.64451322247905 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 31.43947571042984 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 31.192849457263947 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 30.945753941169155 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 30.708095174847227 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 30.502148763457342 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 30.27254807247835 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 30.03776198193647 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 29.806933334895543 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 29.575030108572733 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 29.375799391004772 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 29.13776962071249 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 28.89647290513322 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 28.65945339202881 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 28.433762512708963 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 28.205372042470163 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 27.964775372774174 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 27.731993955901906 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 27.493618726730347 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 27.281020564797487 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 27.04315785082375 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 26.802586753684356 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 26.56042152359372 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 26.322024008807016 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 26.097797421521918 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 25.858235356451452 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 25.624179449948397 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 25.38338096757953 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 25.17090556356642 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 24.93489869872292 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 24.70144697894221 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 24.470511521062544 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 24.242802898934546 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 24.02480695122167 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 23.788226902484894 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 23.56607765512368 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 23.323698885586797 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 23.098614343489057 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 22.85887098312378 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 22.628664727258208 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 22.391340779323205 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 22.156714689384387 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 21.9365474994366 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 21.69956358273824 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 21.462931025703 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 21.221126331347172 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 20.997544014895404 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 20.774360549559287 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 20.55095438523726 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 20.31378020037402 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 20.07639237812587 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 19.854217668550202 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 19.622129130781744 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 19.387547980184138 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 19.152460936842292 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 18.924025284938324 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 18.695449804855606 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 18.46229258104533 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 18.236200968424477 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 18.015083230231422 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 17.79888081550598 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 17.565768313601733 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 17.33563886150237 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 17.106865739822386 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 16.88300077120463 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 16.655910523857656 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 16.42753230035305 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 16.19885129152342 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 15.97551969381479 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 15.753737784524 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 15.526217316136215 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 15.298182964324951 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 15.06851681310739 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 14.851658829936273 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 14.623180389404297 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 14.388557895256655 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 14.155810915905496 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 13.923655604287017 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 13.70009728840419 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 13.472701289129596 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 13.240930943421915 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 13.019824864981057 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 12.795600308312311 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 12.56641521125004 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 12.33872639316402 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 12.11022637003944 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 11.88071200009939 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 11.655612206299033 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 11.426274855931599 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 11.194625145552173 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 10.96568064940603 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 10.744183532552782 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 10.513662802708613 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 10.28273008715722 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 10.052342488215519 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 9.821759532211692 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 9.59835054602804 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 9.368707628370082 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 9.139186382293701 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 8.909527386197393 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 8.683616791242434 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 8.455080452140855 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 8.224850387108035 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 7.994316512888128 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 7.763701843928142 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 7.537154413268952 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 7.307990210396903 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 7.078253351019684 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 6.8483262482811424 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 6.619210138655545 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 6.3927766056947934 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 6.164140582773727 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.936143255781854 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.712459598268781 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 5.48441638729789 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 5.254683895973162 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 5.025712902626295 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.7964227679055496 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.567262146208021 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 4.3415057316669445 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 4.112235365333138 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.8839057664402197 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.6549073302227515 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.426785385286486 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 3.1979322561653714 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.969030984582748 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.7407052618391967 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.5117877210889543 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.284312750163831 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 2.055780925051704 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.8275460799535115 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.5992505118019222 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.3713020073998836 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.1427600506024482 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.9144381552326435 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.6857514635560477 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.45735018662732063 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.22868204835671277 seconds remaining)
    2009 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 35.928 seconds)

**Estimated memory usage:**  1906 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
