
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f3dcce7a940>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 194.5328712463379 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 31.07339596748352 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 28.826384782791138 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.96780792872111 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 27.427882432937622 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 27.16361403465271 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.891350905100506 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.623878955841064 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.466779708862305 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 26.25572901301914 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 26.0356285572052 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.88187757405368 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.782726367314655 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.621965114886944 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.463250977652415 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 25.353057781855266 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 25.217822909355164 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 25.071716014076685 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.92763180202908 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.797780601601854 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.659234046936035 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.51910093852452 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.389452457427982 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 24.25780531634455 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 24.113703727722168 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.982953786849976 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.86434789804312 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.74888327386644 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.672303370067052 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.538596465669826 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 23.40613333384196 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 23.351706781694965 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 23.273021399974823 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 23.197930950106997 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 23.06643988104428 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.940836838313512 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.804467227723862 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 22.686842544658763 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 22.548960309279593 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 22.424681584040325 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 22.28592872619629 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 22.146978919099016 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 22.00858293260847 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.8675359016241 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.728466055609964 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 21.592577748828464 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 21.451678649238918 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 21.319291637298907 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 21.179759780565895 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 21.05631524202775 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.922858238220215 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.790325875375785 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 20.652370324501625 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 20.51354414112163 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 20.37230192290412 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 20.233790332620792 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 20.08606828962054 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.94159374738994 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.803233097339497 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 19.662141250351727 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 19.52316379547119 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 19.38515851536735 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 19.2493956165929 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 19.107437973930722 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.96689960360527 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.835557955961963 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.698090914523963 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.562659203116574 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 18.426868621040793 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 18.300942825234454 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 18.160367352621897 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 18.01905131004226 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.880163404676647 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.739678578834013 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.601806672843725 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 17.467670440673828 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 17.32737562530919 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 17.18792092026054 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 17.05324598459097 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.915713367582875 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.783958673477173 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.64517542756634 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.504368840194328 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 16.36584465187716 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 16.225482929320563 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 16.086851035847385 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.946786813957745 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.811300524349871 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.672935182398016 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.532457973180192 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.393582661946615 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 15.25409082527999 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 15.114089851794036 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.976066927756033 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.837785807061703 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.696873865629499 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.560741345087687 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.420371566851115 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.28004147081959 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.140041972651625 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.000324487686157 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.859791878426428 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.71747128168742 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.574422743713972 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.434009625361517 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.294072923206148 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.150867300213509 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.008865891215956 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.866918607994362 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.725566717462803 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.584758498451928 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.445172872629252 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.305982606751577 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.168336285954028 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.028404838160466 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.889655849208001 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.750064636098928 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.611740564688658 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.47305547989021 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.334458677708602 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.195191701253254 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.055759812189528 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.917552357814351 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.782615543380984 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.644174506587367 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.505376291275024 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.366423644716777 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.226883279995656 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.08673144876957 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.948251509851262 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.807889699935913 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.668702471347256 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.529175772811428 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.3891380568196 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.249165645286219 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.10897143681844 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.967664269840016 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.826981652392089 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.687026645826256 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.547843689541164 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.40975134713309 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.269192440289977 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.129361498523766 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.989600419998169 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.849602315160963 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.709631179941111 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.569488691957029 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.429057710024775 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.289632571710123 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.149104703992806 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.008352279663086 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.868333532320743 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.727635233025802 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.58738690575743 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.4466741982992595 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.306094477253576 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.165458086209419 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.024870031198878 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.8849138489252395 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.744504810129322 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.604586720466614 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.465103442624489 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.3251790941497426 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.184907600192204 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.044860223444497 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.904676675796509 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.765263387955815 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.624870717168569 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.484969320751372 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.344754250091913 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.20467002251569 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.064880825622737 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.9247890405876693 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.784743030636297 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.6447138430058272 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.505015066691807 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.365107655525207 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.225015036803854 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.084935102569923 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.9448425663250117 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.8044648700290256 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.664228489385784 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.524147086091094 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.384111864319265 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.2438639765200405 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.1036688637089087 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.9636259540434806 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.8233760588946828 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.683042967573125 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.5424923644494757 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.4023253917694092 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2619571535999239 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.1215936839580536 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9813657894035694 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8411942806440531 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7009535691676996 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5607323500574851 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4205255883599296 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.280372947153419 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.14018202187427922 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   28.0s finished

    1964 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  10.115 seconds)

**Estimated memory usage:**  1902 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
