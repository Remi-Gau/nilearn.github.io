
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print("")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fa74e7cf790>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 236.20843887329102 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 44.38374710083008 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 41.58007836341858 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 40.51046903928121 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 40.15126943588257 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 39.79333305358887 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 39.427549600601196 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 39.14102475983756 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 38.85429382324219 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 38.55958686934577 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 38.285269260406494 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 38.005729371851146 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 37.81921434402466 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 37.65885835427505 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 37.48756323541914 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 37.29205298423767 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 37.172802209854126 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 36.976350882474115 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 36.79322862625122 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 36.613932709944876 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 36.421454429626465 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 36.232713949112664 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 36.034137053923175 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 35.87428973032081 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 35.687510331471756 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 35.47763109207153 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 35.26449960928697 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 35.063837925593056 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 34.84504747390747 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 34.6450685386 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 34.442843437194824 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 34.23585982476511 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 34.007232785224915 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 33.802316289959535 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 33.59393309144413 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 33.375031675611226 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 33.1589007112715 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 32.94680904697727 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 32.7487004305187 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 32.5563126894144 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 32.34532070159912 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 32.13759620015214 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 31.933658202489216 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 31.736797183058982 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 31.52918080850081 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 31.31858391231961 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 31.111870579097584 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 30.903711060260203 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 30.704282681147255 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 30.493389105310246 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 30.28090739250183 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 30.080269991182814 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 29.872861091907208 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 29.668524661154116 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 29.457018755100393 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 29.25138614394448 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 29.049158028193883 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 28.850905305460877 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 28.652610951456527 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 28.451453483710853 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 28.243123054504398 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 28.040305004745235 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 27.83603799727655 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 27.643679755074636 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 27.442250072956085 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 27.237804321142345 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 27.040275385885526 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 26.840376060400434 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 26.645743089563705 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 26.446504824403405 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 26.245709112712316 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 26.043391348610463 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 25.841434902615017 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 25.645410348291268 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 25.44328973099992 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 25.244688193003338 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 25.04563644057826 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 24.840867881651047 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 24.638392601257717 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 24.435899704317503 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 24.232481360435486 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 24.033601301687735 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 23.833727900574846 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 23.632388522826044 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 23.431595268703642 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 23.230392666424024 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 23.03137784225996 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 22.83597091422684 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 22.63740669597279 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 22.441420362236794 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 22.238328297932945 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 22.036600820310824 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 21.841309640718546 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 21.650378124688263 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 21.449779677898324 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 21.25256752967835 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 21.052850425243378 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 20.85390571958011 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 20.65149863398805 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 20.447320201180197 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 20.242993593215942 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 20.04137092061562 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 19.838414472692154 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 19.636631752680806 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 19.430553509638862 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 19.22676362310137 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 19.029777868738716 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 18.82733724718896 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 18.62464219552499 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 18.423010294590522 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 18.218250469727952 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 18.018096305228568 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 17.816350136484417 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 17.615677002256948 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 17.412177851325588 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 17.207822457603786 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 17.00827508137144 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 16.805496344199547 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 16.604693477436648 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 16.40231261934553 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 16.20000902811686 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 15.996946037308245 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 15.79662395696171 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 15.594586139771996 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 15.394713278739683 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 15.190816354751586 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 14.987454955540006 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 14.786204687253695 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 14.583488389849663 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 14.380968445031217 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 14.177337298026451 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 13.9741275874713 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 13.7725028702707 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 13.572012189635657 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 13.369249084102574 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 13.168634644261113 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 12.965199975406422 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 12.762506747767873 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 12.560378672420114 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 12.359373457997822 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 12.157719816480363 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 11.957855885755931 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 11.758145382706548 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 11.556235158360087 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 11.354320380422804 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 11.152856777454245 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.950652187817717 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 10.748425089583105 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 10.54698118003639 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 10.347316599532261 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 10.145029544830322 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.943436872090725 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 9.741060733795166 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 9.540251861210743 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 9.337338215344912 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 9.134431139115366 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.934611167663183 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.732557718920859 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 8.529717351816876 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 8.326989913136703 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 8.12415200471878 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.922278293171285 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.719965593314464 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.517753900925806 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 7.316775100987132 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 7.115600513689446 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.913121594003884 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.711078511026805 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.507836659749349 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 6.305841740771863 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 6.102967458612779 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.8997565961023515 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.697016006292299 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.493930262637276 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.291525788690852 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.088273968015398 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.884935324842279 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.682181740884727 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.479413067356924 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.275969503978112 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.072336011462741 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.8690388913971283 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.665680599736643 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.46225777740687 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.258538183958634 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.0549473762512207 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.851645008210213 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.6482795266544117 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.446596713776284 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.242702976105705 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.039129006235223 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.8351379851396172 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.6312312185764313 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.4273457008322286 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.2235596524071448 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.019530333005465 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.8155737263815743 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.6116508130494713 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.407838761204421 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.20393704409575342 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   40.8s finished

    1941 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  3.502 seconds)

**Estimated memory usage:**  1841 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/nilearn/nilearn.github.io/main?filepath=examples/auto_examples/02_decoding/plot_oasis_vbm.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
