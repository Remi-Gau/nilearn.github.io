
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f6fff900c10>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 142.78888702392578 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 24.715678691864014 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 23.020339965820312 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 22.58885463078817 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 22.317309856414795 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 21.951103448867798 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 21.678129116694134 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 21.479485069002425 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 21.284442901611328 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 21.110785802205402 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 20.96585464477539 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 20.852193182164974 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 20.736770629882812 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 20.599292828486515 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 20.476223741258895 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 20.334057807922363 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 20.334863901138306 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 20.202628318001246 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 20.09278334511651 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 19.993315470846078 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 19.880520343780518 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 19.753829967407952 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 19.622273228385232 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 19.500550809113875 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 19.391435305277504 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 19.283435344696045 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 19.177024511190563 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 19.067774260485614 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 18.952145406178065 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 18.838744295054468 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 18.714426120122276 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 18.592451826218635 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 18.467843413352966 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 18.354888634248212 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 18.249013802584482 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 18.140611001423427 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 18.026425732506645 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 17.91879793115564 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 17.825153513958583 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 17.713858066461025 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 17.596413612365723 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 17.473396940929135 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 17.35638487906683 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 17.256799731143683 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 17.146987958387896 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 17.04659128189087 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 16.93267886534981 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 16.82375008501905 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 16.719226042429604 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 16.61462170250562 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 16.503167867660522 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 16.38791072134878 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 16.270915306531467 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 16.156147417032493 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 16.038183865723788 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 15.920545643026177 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 15.811329092298237 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 15.696256604110983 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 15.581471624045536 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 15.472050965842554 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 15.367537975311281 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 15.26303756041605 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.153833396973146 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.04361127293299 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 14.930733382701874 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 14.818005323410036 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 14.70457148551941 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 14.593768397373939 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 14.480179646435905 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 14.364577338315438 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 14.248505524226598 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.140355385525126 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.029527028401692 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 13.92094356393161 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 13.812686011597917 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 13.704089721043905 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 13.588969807875783 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.47887506113424 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.366901813409267 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.254850967020928 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.144927740097046 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.032006393244238 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 12.920672137562821 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 12.811662696930298 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 12.70206710270473 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 12.59233630404753 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.483205501423324 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.3740335442554 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.262969710610129 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.150516464469138 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.038852055867514 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 11.930414647846431 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 11.818649302358214 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 11.707059421846944 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.597099933218448 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.486716860219053 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.377024193604786 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.265253605301847 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.157106861776235 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.046211941073638 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 10.935334920883179 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 10.823645020475482 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 10.712444880429436 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.603889055622435 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.49686123774602 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.390132960819063 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.280537911181181 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.169312887102643 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.062747575618603 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 9.951991429022693 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 9.841795206069946 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 9.731951225985279 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.622202055794851 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.51366071152476 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.404308055576525 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.295731845109358 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.185367107391357 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.075554831415161 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 8.965863013671617 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 8.855566335325483 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 8.746637980143229 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.636985629058081 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.526920639100622 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.417494845584155 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.308207211955901 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.198872089385986 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.092447640403869 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 7.984245356612318 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 7.876161530613899 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 7.76722092961156 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.658241803829486 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.5487510284394705 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.438576409311005 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.3287674448543925 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.219170047276055 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.109544091754489 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 6.999692916870117 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 6.8895882655234235 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.779166708821836 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.669413166938068 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.560744660241263 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.452822815441916 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.3433320354407945 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.233576334439791 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.12425602806939 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.014362713386272 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 5.9042938539426615 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.794146959473487 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.684786313288921 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.5752041451883 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.465486526489258 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.356055619700855 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.245962720168264 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.138113464405334 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.029502075987977 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.919747575636833 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.8117227004124565 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.702387117276526 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.593121235883689 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.4835369182082845 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.373689651489258 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.264099843753791 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.155396355523004 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.046260093618756 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.937195667406408 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.828085653709643 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.7198378953589013 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.6111235390166323 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.50175362541562 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.3928033698945352 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.2841951706830197 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.1750051236292074 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.0655625254608867 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.956069674795074 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.8466487972215675 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.7370964799608504 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.627597873861139 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.5178906365302995 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.4081495611855153 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.2987102543175553 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.1894366476270886 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.0799367809822544 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.9707764059632689 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.8612100869580046 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.7518198801123577 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.642401289295506 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.5332203244650235 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.4237340350839545 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.314290072055573 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.204736652828398 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.0951428915324963 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.9855366464684772 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.8759144246578217 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.766460416230513 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6569789930717232 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5475682478684645 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4380443096160888 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3285261822230925 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.219023767143789 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.10957908989796088 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   21.9s finished

    1974 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  59.105 seconds)

**Estimated memory usage:**  1881 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
