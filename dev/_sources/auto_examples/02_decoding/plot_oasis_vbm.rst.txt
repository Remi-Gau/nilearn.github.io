
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f842c6868e0>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 173.08950424194336 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 30.177011966705322 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 28.081719875335693 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.419748624165855 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 26.89824414253235 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 26.581352949142456 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.334254185358684 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.113535540444513 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 25.94268035888672 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 25.730909215079414 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 25.579208612442017 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.460048220374368 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.330084403355915 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.598311442595264 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.430935519082208 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 25.278098662694298 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 25.111887454986572 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 24.96161034527947 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.86500965224372 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.822328278892922 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.76575207710266 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.64035827772958 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.500677997415718 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 24.3756609895955 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 24.212350368499756 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 24.055261850357056 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.896146022356476 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.740676765088683 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.590572970254083 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.443056476527246 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 23.29307301839193 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 23.173130658365064 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 23.024027466773987 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.87389706842827 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.734659503487983 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.582145486559188 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.438183228174843 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 22.292363617871256 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 22.143153152967756 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 22.00347376481081 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.857738494873047 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.713570420334978 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.568125770205544 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.427604414695917 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.284140543504193 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 21.141853862338596 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 21.000521141549818 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.863514793680068 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.72625184059143 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.603232724326 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.46572756767273 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.324873760634777 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 20.182987121435314 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 20.039376173379285 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.902455612465186 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.766127412969414 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.62858704158238 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.48801087078295 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.349870254253517 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 19.209308600021618 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 19.07062339782715 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.927717513725405 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.786061302308113 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.643245693237063 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.502332985401154 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.367594352135292 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.230240670117464 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.098191086925677 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.956743184257956 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.817281118337657 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.68101171084813 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.544268823005783 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.40636316935221 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.26857965286464 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.128192469880386 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.988007227579754 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.858073159268027 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.719780299570655 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.580942129477478 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.441932020308094 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.3055237531662 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.16936124401328 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.049611423073745 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.924299481403397 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.826107127325875 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.69113087654114 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.555286363113757 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.419606236205706 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.282612497156316 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.145873136734695 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.008892059326174 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.871872545598627 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.735035782274993 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.599485179429415 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.464201577166293 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.326646767164533 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.19039475917816 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.05398601355012 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.91838078596154 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.781871696915289 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.645404577255249 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.509158113215229 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.371903770110187 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.232482683311389 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.093617879427397 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.956576756068639 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.819454863386335 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.680710703413062 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.54297677675883 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.406135174112583 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.268174344843086 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.133108575064858 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.9939945936203 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.85581892570563 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.717927368063675 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.579969250637552 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.442223351577233 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.304102243521275 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.1654942641824 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.02845505305699 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.895706017812092 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.75955829147465 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.622991190582026 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.48805847982081 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.350089957637172 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.212349891662598 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.074801233079699 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.938617096172543 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.80171012878418 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.66447667003602 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.527364125618567 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.389692248278902 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.252063137112241 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.114907185834154 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.978013209442594 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.840989589691162 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.704275355619542 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.567279666009611 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.43092857927516 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.296058611904117 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.160063130514962 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.023922133953013 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.887822584367134 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.751945907419378 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.615574558575948 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.47911158101312 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.343660037811488 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.207780494170935 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.071265104654674 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.934817258143585 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.798914194107056 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.663546707456475 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.527448629078112 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.391241629918417 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.255668064216515 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.120569713654057 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.985282072654138 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.851620652873045 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.7160116207750535 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.5803071147990675 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.444448173046112 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.308607730806244 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.172893035559007 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.036703039532059 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.901895290467797 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.7657248973846436 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.629125526152461 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.492862852747569 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.356813703264509 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.220292183069082 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.084026364719167 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.9477849118193684 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.8117501957471984 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.6755578366318193 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.5392871588126 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.403444971357073 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.2676053914156826 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.1314542549478133 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.9955007279856822 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.8594023635267547 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.723292271296183 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.587106164647729 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.4509638325198666 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.3149645784513546 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.1788352468739385 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.042744791185534 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.9066870315100557 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.770413166698925 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6341672146573978 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.4978519608734775 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.361572880493967 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2252830822430356 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0890129804611206 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9531750963141881 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8171893690050263 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6809873214134803 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5448827451589155 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4086829248418663 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2724500256355363 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13622158975457427 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   27.2s finished

    1967 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  8.195 seconds)

**Estimated memory usage:**  1904 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
