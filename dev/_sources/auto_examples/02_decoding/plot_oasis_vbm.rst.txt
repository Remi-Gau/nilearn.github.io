
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-90

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 148-150

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 150-163

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-166

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f61508750d0>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-229

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 161.52381896972656 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 28.0024516582489 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 25.9806125164032 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 25.2062033812205 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 25.849610328674316 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 26.87101435661316 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.14581863085429 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 25.64753065790449 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 25.259010314941406 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 24.892879406611122 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 24.570369958877563 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 24.30618062886325 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 24.038062810897827 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 23.803832127497746 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 23.608605929783415 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 23.424710035324097 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 23.217165350914 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 23.015641955768363 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 22.820683452818127 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 22.640074290727316 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 22.44620132446289 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 22.276808522996447 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 22.103434757752854 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 21.93802425135737 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 21.77412907282511 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 21.614323139190674 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 21.4524963085468 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 21.296270661883884 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 21.141787835529875 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 20.990395274655572 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 20.840325911839805 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 20.68155890126382 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 20.538202464580536 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 20.3872214086128 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 20.237433167064893 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 20.097740752356394 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 19.969933165444267 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 19.82529377937317 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 19.694996181287266 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 19.577023934095337 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 19.46713161468506 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 19.343316810887035 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 19.209814741497947 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 19.076959621074586 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 18.962774081663653 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 18.82928072081672 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 18.69655442237854 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 18.56608265511533 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 18.43050185839335 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 18.29743706936739 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 18.167085886001587 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 18.03389680151846 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 17.89942160019508 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 17.770703855550515 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 17.63965379750287 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 17.507408380508423 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 17.37562956128802 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 17.24785486857096 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 17.120052444523775 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 16.994287733304297 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 16.866504748662315 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 16.740807736506227 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 16.614679144274803 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 16.486898736348227 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 16.357802033424377 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 16.229729340626644 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 16.102650866363987 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.974404160656146 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 15.851116460912367 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 15.736630750739057 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 15.618153606142316 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 15.498874184111475 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 15.377078586154513 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 15.25665435072494 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 15.135383084013656 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 15.015413363774618 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.89512602906478 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 14.776625661106852 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 14.654882345444117 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 14.534312610384784 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 14.41453492641449 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 14.294417825745949 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 14.174918122407867 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 14.05526028483747 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.937101852326165 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.814631672466504 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 13.692975382472193 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 13.572127375109444 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 13.452688650651412 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 13.329830887612331 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 13.209733300738865 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 13.086361633552299 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.964338136755902 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.843167825411726 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.722234690442997 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 12.600973530819543 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 12.478428304195404 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 12.355981605569111 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 12.235962590392756 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 12.115493942992854 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.9924898147583 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.870566691502486 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.751309595856013 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.631830372856658 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 11.511906623840332 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 11.391512291772026 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 11.276169587981027 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 11.155492397112267 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 11.03234346707662 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.911241682297593 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.790527452122083 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.669271606582779 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.549450431551252 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 10.43158661158739 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 10.311856905619303 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 10.19158411026001 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 10.07134486889017 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.951155758311605 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.83042205794383 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.708834291506214 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.586909929911295 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.466228439788189 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 9.346827847058657 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 9.225746842903819 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 9.106507824313256 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.986977338790894 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.86690422466823 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.747329214426475 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.628250122070312 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.508566714072412 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 8.388101761157696 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 8.268449612246215 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 8.148515759092389 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 8.02901624199143 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.908629093597184 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.788487434387207 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.66803819992963 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.547542109106579 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.426982537559841 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.30666800368604 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.188776390893119 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.068818405164895 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.9486415151139385 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.827774292939193 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.70652977625529 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.5866081139137 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.466925480594373 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.347834916341872 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.228070078669368 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.108233952682291 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.988649209340413 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.869159985851768 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.74929518448679 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.629614945330651 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.509608175847437 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.389809377731816 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.27024089373075 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.15044191384771 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.030631291715404 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.9110881682461915 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.791564524173737 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.671971371455222 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.552051232184892 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.432118989207262 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.311966523891542 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.192055882829608 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.072308862065694 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.9524953707963406 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.8324482327415827 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.7125955488554823 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.592989290461821 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.4732648169088085 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.353855792866197 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.2341256444853856 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.11414228636643 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.9944119453430176 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.8745292208411475 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.7546193855630476 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.6349090994074102 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.5155923206712947 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.395402669906616 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.2754032769914487 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.155301327233786 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.0354144898920112 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.9154288872428562 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.7954918436101965 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.6755812603940246 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.5557315094585724 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.4359203145859087 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.3161210748884413 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.196319354207892 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.07673085422416 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9570441643397013 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.8384282860731214 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.718641728470006 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5989386546306121 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4791649020448023 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3594024399210354 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2396062841319075 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11980381682889546 seconds remaining)
    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  0.128 seconds)

**Estimated memory usage:**  1848 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
