
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fc94f65aa30>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 170.54319381713867 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 29.889920473098755 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 28.29492974281311 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.479993502298992 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 27.156696319580078 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 26.803406238555908 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.550965865453087 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.341893775122507 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.1610050201416 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 25.930410967932808 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 25.70373249053955 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.534755446694117 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.415785392125446 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.336299951259907 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.216475793293547 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 25.089195330937706 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 24.9395809173584 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 24.763696810778452 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.595710542466904 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.46509234528793 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.28731679916382 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.125270139603387 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 23.975518833507195 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 23.841218886168107 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 23.716690381368 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.596326112747192 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.467221571848942 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.35921465026008 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.21196518625532 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.060064258246584 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 22.90601396560669 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 22.749889219960856 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 22.589687168598175 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.444316054835465 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.31632898835575 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.176483290536062 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.041878620783486 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 21.90596908492011 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 21.77505808127554 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 21.6403656800588 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.49746322631836 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.365571743104514 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.238607156844367 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.102385471033493 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 20.96446498957547 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 20.83874665366279 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 20.703547228937566 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.573576445275165 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.442770401636757 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.312110078578094 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.17907738685608 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.049383677688297 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 19.908884506959183 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 19.779423344810056 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.64665762583415 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.51741955497048 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.391132763453893 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.256648762184277 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.12322210443431 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 18.996107182260285 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 18.8684024810791 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.734394530780982 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.597845700479322 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.461609496010674 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.331165343523026 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.194605240455044 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.05815761017077 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 17.92342725796486 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.787700442706836 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.650744479635488 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.512485333851405 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.37828650608869 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.250217861599392 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.114655337921562 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 16.976658041412765 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.837486823399864 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.70289067218178 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.567052791645 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.43215096913851 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.34364065942885 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.207096338272095 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.07225819575934 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 15.936936843685986 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.796846338065274 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.656095368521553 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.515819956274594 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.378890625266141 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.245930852561163 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.107048034667969 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 14.968210064963008 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.842354933420818 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.704243796212332 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.566277721653815 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.432326427070045 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.294791206400445 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.159996283681771 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.026611487070719 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.8933657813318 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.759379202005816 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.62539441176135 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.489598512649536 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.353950309281302 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.216928626976761 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.08249633983501 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 12.947445135850174 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.810908783049811 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.67304682281782 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.536163521704273 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.401436434851753 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.265363572934351 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.129573193463413 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 11.994028793798911 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.859923311642238 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.721684877851368 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.582304394036008 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.44417577204497 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.307921730238816 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.173704919652042 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.036256353733904 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.89882591992867 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.762274901072184 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.624943906610664 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.487649198438302 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.35183294614156 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.216353908661873 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.081067991256713 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.94699874378386 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.813030751671377 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.676590040326118 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.541541931241058 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.407276520362267 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.273893359963221 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.138980959400985 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.00312994835072 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.867752149923524 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.732885316566184 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.596621906056123 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.460472881358905 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.332212883493174 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.197270144661553 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.061846562794276 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.92645000565982 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.79122836489073 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.655617565541834 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.520171933703953 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.3850463587662265 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.250750375120607 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.116096206262809 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.981895137477566 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.846859802335701 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.71282688776652 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.57872665323169 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.444629091965524 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.310214651955499 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.1753942409119045 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.041309364380376 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.906996592497214 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.7724244184554765 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.637734005722818 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.502674440167985 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.368048548698425 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.234167250046819 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.101512664630089 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.967549776007061 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.833142920238216 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.6993123040054785 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.565347990357732 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.43103734176316 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.297409420921689 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.163462400436401 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.029656241921818 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.8956748268060513 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.761341405469318 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.6270192799540615 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.492503618371898 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.3579917635236467 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.223774487322027 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.0893504996757724 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.9549224671353116 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.8204462075366656 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.6859942542182074 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.5514938515194214 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.4168891199342495 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.2828050975591108 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.148386644280475 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.0141537189483643 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.8798113176899571 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7455680434079093 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6113154938880432 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.4768310930363084 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3424605319374485 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2081732625112485 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0738949378331502 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9397148381860762 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8054281092181649 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.671091996706449 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.536859638836919 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.40259551759903806 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.26837324855303524 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1341644974809196 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   26.8s finished

    1959 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  8.404 seconds)

**Estimated memory usage:**  1843 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
