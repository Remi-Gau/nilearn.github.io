
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f46d7e63220>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 157.72104263305664 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 26.70401620864868 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 24.72467350959778 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 24.051061073939007 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 23.60061025619507 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 23.334173440933228 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 23.0959054629008 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 22.877526010785786 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 22.66798210144043 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 22.52177408006456 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 22.357986211776733 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 22.20113032514399 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 22.027824799219765 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 21.86524271965027 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 21.688705955232894 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 21.530148585637413 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 21.3715683221817 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 21.21382393556483 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 21.07176399230957 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 20.93224368597332 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 20.795063495635986 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 20.65715416272481 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 20.520721500570126 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 20.381220786467843 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 20.25197124481201 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 20.127908945083618 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 19.99795829332792 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 19.935953228561967 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 19.814917019435338 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 19.689069739703474 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 19.59452509880066 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 19.47110520639727 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 19.35999208688736 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 19.2458285779664 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 19.123472494237564 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 19.01905345916748 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 18.934364477793373 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 18.869526637567056 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 18.782826812643755 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 18.699895106829132 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 18.598466873168945 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 18.489812188032197 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 18.36980390548706 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 18.249387014743892 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 18.122446450320158 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 18.004039658440487 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 17.88618540763855 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 17.769741372859222 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 17.649024566014607 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 17.52682171549116 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 17.402433156967163 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 17.27950897871279 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 17.154803239382233 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 17.029637035333884 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 16.906462369141757 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 16.786343531175092 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 16.662531035287042 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 16.538254043512175 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 16.421657948658382 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 16.299855260525717 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 16.180310805638634 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 16.06043109737459 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.949078582948253 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.827065460265628 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 15.712395012378693 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.595792293548586 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 15.478967038067903 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.36485530725166 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 15.249947043026195 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 15.136550692544468 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 15.023863145283292 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.915496604543337 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.803209092881943 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.690714460529694 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.573523798504391 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 14.460150003433228 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.345685933765612 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 14.227305622843952 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 14.111280496303852 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.992980145200898 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.873462557792664 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.756415434825568 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.63840335171397 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.521447279367102 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.40250985963004 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.281701158074773 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 13.162962664005367 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 13.044292197830377 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.926430095325816 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.807730163081308 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.688720014360216 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.572031977412465 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.454278261765191 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.335536062076528 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.216809617712142 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 12.099013039940283 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.980382402737934 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.86423932891531 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.75166198185512 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.636010882830378 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.520736455917358 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.406663292705423 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.293628697301827 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.17841649749904 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 11.062415269704966 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.947631688345046 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.834747674330226 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.722143244520526 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.609662629939892 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.496094550561468 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.382270271127874 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.269295750437557 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.154074089867727 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 10.039643969156046 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.922708113988241 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.809469565101292 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.693067887733722 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.579616544593094 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.464295860064233 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.350325167679987 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.235674858093262 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.119374440721245 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 9.003859602037023 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.886614055168337 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.769828711786579 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.65375657081604 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.53722045535133 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.42042861585542 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.303675070405006 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.186746366264284 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 8.07032143152677 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.954061453579036 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.8378296909910254 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.721631661393589 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.605258080496717 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.489004355889779 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.374086940989775 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.259387265156655 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.144285955290863 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.029503727988374 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.91394111088344 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.798793906015707 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.683635916508419 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.5687805655952936 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.453710145420499 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.339126504700759 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.223647329905261 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.108374230715693 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.993098819578017 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.87827457677598 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.764084815979004 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.649496760589398 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.535292700717323 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.421058910344941 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.3059733904801405 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.190890942850421 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.075632284849118 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.960490984521853 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.845089028153238 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.7292075127175766 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.6135435700416565 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.498339482716152 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.382769293255276 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.266792895603765 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.150790726266256 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.035271030483824 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.9206363350512032 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.806437099765161 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.691002891177223 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.575672602512427 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.460579423343434 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.3453817953143203 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.230035737503407 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.115053908673325 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.000406320067658 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.8854269640786305 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.770172823559154 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.6548764799947793 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.5394269402107494 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.4239614036496127 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.3082651562160916 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.1925254592579373 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.0769479772546786 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.9614671188625483 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.8458348771800166 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.7304329163319356 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.6150727477124942 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.4995996123329203 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3842730674337833 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2689387154957603 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.1534588587911505 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.0380208542209646 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9226630826791127 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.8072885416949969 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6918835246685854 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5765529290223733 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.46119630093477204 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3458687121492957 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.23060036668873798 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11530300720253182 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   23.0s finished

    1981 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  1.159 seconds)

**Estimated memory usage:**  1908 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
