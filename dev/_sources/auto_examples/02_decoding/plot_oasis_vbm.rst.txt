
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fac0a891d60>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 279.6602249145508 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 56.308221101760864 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 51.52623724937439 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 53.53901886940003 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 51.84263515472412 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 50.162527084350586 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 49.079945802688606 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 48.33745438711984 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 47.65789604187012 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 46.88361016909281 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 46.42898774147034 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 45.97309099544179 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 45.454524755477905 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 45.26465089504536 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 44.93558590752738 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 44.76912808418274 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 44.394654393196106 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 44.05524890563068 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 43.97609069612291 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 43.592466241435005 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 43.30763554573059 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 42.911742233094714 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 42.542390758341014 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 42.39059621354808 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 42.04306332270304 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 41.77707600593567 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 41.38588505524856 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 41.113327282446406 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 40.828510931559975 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 40.57761417586228 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 40.261966705322266 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 40.11640194154555 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 39.87148457765579 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 40.01528265259483 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 39.750571601531085 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 39.54258901732309 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 39.30475669436984 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 38.99317729795301 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 38.6867158036483 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 38.37084907751817 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 38.13916778564453 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 37.867331760685616 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 37.67434020269485 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 37.46372887145641 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 37.23277395421808 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 37.011598110198975 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 36.7475975389066 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 36.48716366544683 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 36.21892968813578 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 35.95053705390619 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 35.69583320617676 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 35.415553663291185 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 35.14495926636916 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 34.883119191763534 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 34.632669669610486 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 34.35927091945301 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 34.10860368183681 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 33.850637218408416 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 33.60324848931411 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 33.359809568372825 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 33.103843450546265 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 32.852244291149205 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 32.613286556736114 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 32.379848756487405 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 32.13493695855141 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 31.884029278388393 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 31.65362696214156 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 31.439286441945317 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 31.1810541713939 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 30.912606332613073 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 30.666199037006923 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 30.42830108924651 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 30.167746649848088 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 29.901188115551047 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 29.649364510098017 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 29.392846822738647 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 29.13921988637824 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 28.86881734798481 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 28.62243133936173 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 28.371025471747675 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 28.126742362976074 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 27.867821069411292 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 27.622973000131 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 27.36624267589615 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 27.11180795942034 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 26.887959185768576 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 26.695705075596653 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 26.53936219215393 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 26.31127795306119 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 26.059270845370346 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 25.81032098664178 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 25.557584757333274 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 25.355467589005183 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 25.11415309034368 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 24.88414116108671 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 24.635034009029994 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 24.40777633587519 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 24.164271221947423 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 23.940789247045714 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 23.691789875126847 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 23.46368408203125 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 23.211755679385497 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 22.964957307366763 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 22.724018099238574 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 22.476034971383903 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 22.24105065209525 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 21.995029035604226 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 21.745051479785243 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 21.497154862792403 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 21.253019304450497 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 21.010951085524127 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 20.764721071397936 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 20.54002387183053 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 20.300549129469204 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 20.06029596663358 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 19.822253465652466 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 19.59503857020674 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 19.353414095365086 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 19.110395811371884 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 18.875326028391093 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 18.630532105763752 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 18.39082788829961 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 18.159148974496812 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 17.92694769448381 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 17.692254297194943 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 17.45614356994629 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 17.220103691494653 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 16.981813306883563 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 16.744892343878746 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 16.511081627173017 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 16.269459100869984 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 16.02492818759598 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 15.793674938606493 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 15.566081868078477 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 15.337643345790122 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 15.099320967992146 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 14.871983696432675 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 14.644006046935589 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 14.43067895502284 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 14.197961709482206 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 13.96546299116952 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 13.731903810027642 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 13.502540044381584 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 13.263597665133176 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 13.031393051147461 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 12.794898764840488 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 12.558503454678679 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 12.325438475122258 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 12.09402210003621 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 11.856734751054905 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 11.623566548029581 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 11.390289322429934 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 11.161504720386706 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 10.931670777937946 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 10.69641308660631 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 10.466186054291265 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 10.232624616378393 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 10.001995158043636 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 9.769371597072745 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 9.538345662302941 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 9.303258955478668 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 9.069788053169013 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 8.836076218404887 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 8.601065407501407 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 8.368824458703763 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 8.138499881281998 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 7.904807263110057 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 7.675453371630457 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 7.442303793770926 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 7.209095842034153 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 6.97648993660422 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 6.745596592886406 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 6.511629071346549 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 6.276729174432038 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 6.043949420424714 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.810254778180803 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 5.577039924534884 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 5.343367967228431 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 5.110714309670952 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.878620752409184 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.647409094704522 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 4.415115565884838 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 4.183175537612412 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.950964966758353 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.718525803607443 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.486048595325367 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 3.2531754380913194 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 3.0208646524398723 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.7884300465279437 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.5559032013807346 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.323187752773887 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 2.091376563017281 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.859198083480199 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.626494688073588 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.3939635876527767 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.16181398049379 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.9297000145425601 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.6972699201651636 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.4647801572626288 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.23241512140436987 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   46.5s finished

    2004 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  41.026 seconds)

**Estimated memory usage:**  1902 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
