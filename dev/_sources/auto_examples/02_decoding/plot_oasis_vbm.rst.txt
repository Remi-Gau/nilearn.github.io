
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f7a29112bb0>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 199.1415023803711 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 34.24653744697571 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 31.73064637184143 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 30.76512416203817 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 30.157068729400635 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 29.742253303527832 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 29.39220770200094 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 29.152089050837926 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 28.940380096435547 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 28.738640122943455 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 28.53134274482727 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 28.321330482309516 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 28.114402850468952 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 27.931073849017803 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 27.762824331011092 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 27.606392065684002 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 27.45801079273224 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 27.295662655549894 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 27.121620045767887 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 26.96778800613002 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 26.873350381851196 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 26.72580283028739 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 26.561507333408706 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 26.40871080108311 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 26.24269374211629 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 26.08550190925598 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 25.919854347522442 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 25.771330921738237 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 25.620514154434204 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 25.467876113694288 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 25.326606353123985 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 25.172336832169563 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 25.02001315355301 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 24.86097363992171 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 24.702481115565583 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 24.551308495657786 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 24.406732453240288 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 24.264396938117773 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 24.120787758576245 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 23.96697412393032 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 23.823628425598145 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 23.670196399456117 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 23.52423276220049 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 23.372419756512308 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 23.224995049563322 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 23.079193724526302 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 22.934185587841533 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 22.778906959168452 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 22.634095907211304 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 22.480769060095962 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 22.350732564926147 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 22.20383491703108 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 22.052968061887302 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 21.902831581403625 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 21.76438859657005 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 21.619767167351462 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 21.46565008163452 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 21.317729473114014 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 21.171238545713752 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 21.024963261717456 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 20.869725545247398 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 20.740220918030037 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 20.599726992268714 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 20.452437283500792 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 20.296674728393555 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 20.147190350752613 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 19.99482659860091 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 19.843728492509072 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 19.69165752915775 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 19.539695860683054 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 19.391395126070297 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 19.24227274639506 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 19.09448284573025 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 18.942283009829588 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 18.79269796448785 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 18.643720944722496 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 18.491347752119363 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 18.33779338118318 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 18.187663585711746 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 18.039689196815974 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 17.89010453224182 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 17.741494776290143 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 17.59311842918396 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 17.444176955395434 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 17.295693499701365 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 17.146425247192383 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 16.995979869088462 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 16.85284589624953 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 16.70111201026223 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 16.55019912291109 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 16.39670523007711 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 16.246624482857 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 16.098509726317033 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 15.948357943565616 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 15.800807186897764 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 15.649783297588952 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 15.500377078851063 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.350492499538303 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 15.198342196795405 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 15.049329509638776 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.901105880737305 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.756604322112432 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 14.6069941146701 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 14.455804496135526 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 14.30493318117582 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 14.154423815863472 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 14.002840766366923 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.853338426518663 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.703017420238918 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.55326760143315 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.404020027680831 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 13.254863075307899 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 13.10445155416216 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.954360242438527 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.804725224511666 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.656532329061756 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.507169000033675 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.356185430135483 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.209878675008225 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 12.060769846459397 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.911097526550293 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.764441066537023 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.615034013498025 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.464663660623193 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.314757916235155 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.165307712554931 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.016015435022021 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.866964753218523 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.719052568078041 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.569953094157137 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.420056709876427 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.270610982225142 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.12121084242156 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.971956365986875 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.822887986453612 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.673857971473977 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.524707008810605 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.375139109409638 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.224868501442065 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.075825217816469 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.926836797169276 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.776999274044172 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.629631673786003 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.480360164508953 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.331474900245667 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.182323694229126 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.033659850081351 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.884085431390879 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.73554193651354 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.585818687541373 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.43640923500061 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.287366533910991 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.137808272713109 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.988523347705018 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.840260765769265 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.691701927492696 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.542830950174576 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.3941724330756315 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.244932926153834 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.095868326582998 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.9464738965034485 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.797344130758914 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.64842994124801 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.499528817603925 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.350763413964248 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.201862898739901 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.0529089175074935 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.904088568544673 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.7554517927623925 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.6062255935556085 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.457603300318999 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.308986719588787 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.160200512686441 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.011534711529065 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.863031450359301 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.7144295147487094 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.565502578561956 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.4169072013790323 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.2683108120821833 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.11956838256154 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.9706963698069253 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.822082585392736 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.6736884798322404 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.5256128936517435 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.3769464078156846 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.2286669950227482 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.0800831215355986 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.931394645874513 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.7827558111637196 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.6342885128404727 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.4857353787673147 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.33719263900637 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.1885727445284524 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0400232416360489 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8914430534716734 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7428148832076635 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5942571893030283 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.44567876902933656 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2971214597875422 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1485583602483548 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   29.7s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  13.365 seconds)

**Estimated memory usage:**  1890 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
