
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (:term:`VBM`)
to study the relationship between aging and gray matter density.

The data come from the `OASIS <https://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard :term:`VBM` pipeline (using SPM8 and
NewSegment) to create :term:`VBM` maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the :term:`ANOVA` step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the :term:`ANOVA` step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

:term:`SVM` weights are very noisy,
partly because heavy smoothing is detrimental for the prediction here.
A standard analysis using mass-univariate :term:`GLM`
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 112-123

Prediction pipeline with :term:`ANOVA` and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

In nilearn we can benefit from the built-in DecoderRegressor object to
do :term:`ANOVA` with SVR instead of manually defining the whole pipeline.
This estimator also uses Cross Validation to select best models and ensemble
them. Furthermore, you can pass ``n_jobs=<some_high_value>`` to the
DecoderRegressor class to take advantage of a multi-core system.
To save time (because these are anat images with many voxels), we include
only the 1-percent voxels most correlated with the age variable to fit. We
also want to set mask hyperparameter to be the mask we just obtained above.

.. GENERATED FROM PYTHON SOURCE LINES 123-149

.. code-block:: default


    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 150-152

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 152-165

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-183

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f31384ae5b0>



.. GENERATED FROM PYTHON SOURCE LINES 184-186

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 186-231

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 290.04812240600586 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 54.37145662307739 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 49.59823751449585 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 47.74533406893413 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 47.3281626701355 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 47.17563557624817 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 46.30813002586365 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 45.781668288367136 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 45.40254592895508 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 45.778480052948 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 45.26834583282471 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 44.766223343935884 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 44.369923909505204 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 44.297532246663025 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 44.72676127297538 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 44.58272711435954 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 44.20735836029053 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 43.77832035457387 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 43.75794614685906 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 43.44863474996467 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 43.09881806373596 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 42.76381587982178 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 42.66714067892595 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 42.365681648254395 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 42.07857688268025 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 41.7413375377655 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 41.38003728939937 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 41.33218686668961 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 41.04885567937579 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 40.72810733729395 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 40.45331700642904 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 40.41067931728978 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 40.08856898546219 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 39.8033993099675 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 39.52513243170346 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 39.234031370707925 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 39.08996272087097 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 38.783729843191196 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 38.495157969625375 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 38.24543514618507 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 38.15959548950195 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 37.89165703261771 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 37.5857355594635 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 37.32269486715627 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 37.07270076058128 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 36.82704790433248 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 36.55103356941887 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 36.38156361275531 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 36.113938212394714 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 35.924558877944946 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 35.67992949485779 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 35.402656924490834 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 35.13299122223487 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 34.93104040847634 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 34.67080563086051 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 34.39328156818043 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 34.12916319710868 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 33.864523586473965 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 33.659564675955934 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 33.41901369822227 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 33.168398777643844 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 32.91383939492898 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 32.670302129560895 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 32.43951431910197 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 32.182072162628174 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 31.935399440618664 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 31.67152999386643 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 31.476411367530254 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 31.237767682355994 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 30.98318438944609 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 30.725724697113037 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 30.473302310621236 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 30.28830888536241 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 30.030509991188573 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 29.783112384177542 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 29.532888730367027 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 29.332515302457306 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 29.084068313821568 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 28.839553612929123 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 28.586942265305336 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 28.332945227622986 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 28.13346283229781 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 27.89444273855628 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 27.64007452597101 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 27.379346279870894 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 27.156298553242404 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 26.91957493161046 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 26.66554811631126 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 26.41431830146096 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 26.16727499211772 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 25.947079022725426 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 25.69514611003163 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 25.443087940630708 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 25.20134100862729 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 24.991616482430317 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 24.743617848346112 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 24.513120929400124 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 24.262913603143595 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 24.01802070773378 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 23.796137253443398 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 23.54828715324402 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 23.303979691892568 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 23.063102077035342 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 22.83755781581101 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 22.59440693488488 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 22.368987310500373 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 22.132831753424878 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 21.893645738886896 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 21.678616011584246 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 21.43344120804323 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 21.188074220310558 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 20.969777820346593 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 20.747470566204615 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 20.495993538240416 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 20.251000053004216 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 20.00821324016737 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 19.767909049987793 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 19.548461239562076 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 19.31408035957207 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 19.070019565710503 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 18.82630125681559 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 18.605067755565173 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 18.364556738587677 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 18.127290617159712 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 17.88612284198884 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 17.646968221664427 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 17.420680231518215 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 17.179721475586177 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 16.95289671421051 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 16.71743485354638 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 16.492084484833935 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 16.253853135436547 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 16.013232346737023 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 15.77598285854311 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 15.538362296659555 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 15.301432680200646 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 15.064826628741097 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 14.82516541968297 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 14.587816995123159 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 14.360020092065385 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 14.12935321671622 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 13.889179349791073 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 13.651317606509572 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 13.422597019822447 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 13.188937173949348 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 12.950476087372877 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 12.714908897060237 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 12.476322342749356 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 12.250483499990928 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 12.011779162707745 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 11.771527608235676 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 11.538992283360058 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 11.30271577835083 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 11.066336823444741 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 10.824598216391228 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 10.583298290929488 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 10.343531125631088 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 10.110290613903361 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 9.873557449896124 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 9.638739893271488 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 9.40078467130661 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 9.164980199766456 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 8.93993635236481 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 8.703322195567967 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 8.466402071278269 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 8.229693759571422 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 7.998156918100563 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 7.760981729644501 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 7.524685450962611 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 7.28909594067455 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 7.054626871557797 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 6.822294770625599 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 6.586393450581751 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 6.351032268105215 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 6.122019222412987 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.887798036847795 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 5.649314371022311 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 5.411966224174715 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 5.175328857443306 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.942934985933357 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.706881999969482 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 4.471533127252568 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 4.235379436513879 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 4.0010169607694035 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.7677300494650137 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.5310754711563526 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 3.294655904974989 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 3.058496049381195 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.8237553708096765 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.5885487145217008 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.352926329562538 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 2.1172992958448322 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.8817649980386097 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.6473120654802864 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.411823781495242 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.1763553374852889 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.9411595840843355 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.7063654824561879 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.47084635917586515 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.23540953056297112 seconds remaining)
    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 36.013 seconds)

**Estimated memory usage:**  1856 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
