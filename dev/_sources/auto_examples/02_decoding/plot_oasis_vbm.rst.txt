
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f8e8c477c70>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 250.43010711669922 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 45.091251373291016 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 42.15031385421753 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 41.043529748916626 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 40.36766457557678 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 39.701242446899414 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 39.04414908091228 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 38.63408643858774 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 38.31023597717285 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 38.156429290771484 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 37.924752950668335 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 37.563524202866994 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 37.372246185938515 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 37.26263790864211 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 37.08956234795707 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 36.973820765813194 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 36.7165424823761 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 36.46108632929185 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 36.295638428794014 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 36.18340351707057 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 36.16692566871643 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 36.02789518946693 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 35.855052341114394 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 35.67342464820199 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 35.52014970779419 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 35.32423639297485 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 35.09617170920739 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 34.890534241994224 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 34.63114537511553 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 34.45857021726411 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 34.24785073598226 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 34.02276062196301 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 33.80757200717926 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 33.58465843489676 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 33.399725212770356 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 33.1961738041469 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 32.956421269310844 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 32.7469857705606 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 32.51965209057457 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 32.31560380642231 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 32.16270065307617 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 31.939291006181296 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 31.73588999112447 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 31.56601453936377 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 31.36167656291615 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 31.16928291320801 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 30.945175450781118 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 30.745574864935367 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 30.526121894518532 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 30.345780489396077 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 30.132330894470215 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 29.938636424494725 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 29.757012568987335 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 29.533269625789714 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 29.326440749345004 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 29.151122331619263 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 28.950058528355193 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 28.752531967665018 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 28.529733222106405 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 28.3085657661244 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 28.09447534879049 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 27.866577105443987 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 27.65641665458679 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 27.452993218860925 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 27.23540386557579 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 27.034668830724865 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 26.823036605661564 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 26.618590575545582 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 26.4032626432531 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 26.194278416426286 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 25.992193835122247 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 25.78365609007822 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 25.585451761881508 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 25.382206057848997 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 25.18084163923521 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 24.982526699701946 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 24.784089251568442 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 24.57242200900982 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 24.36625064947666 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 24.164333868630322 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 23.97789967060089 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 23.771393228460244 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 23.564375714557926 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 23.359944699758508 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 23.146246785209293 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 22.9381924236522 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 22.73660400301911 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 22.531397356384105 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 22.336185455322266 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 22.133633313554057 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 21.927156580819027 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 21.72079977098402 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 21.510534773702208 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 21.325307594832555 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 21.12571262298746 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 20.9190623383773 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 20.728097399075825 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 20.52147354047323 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 20.32546880780434 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 20.123247840187766 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 19.927631855010986 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 19.727186941864467 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 19.527001123802336 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 19.327779573144266 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 19.128229214594917 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 18.934131463368733 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 18.738971408808005 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 18.53274130375586 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 18.33645909803885 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 18.14143823046203 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 17.941823374141347 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 17.73289175935694 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 17.54739943572453 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 17.34734355875876 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 17.169491454174644 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 16.97455506739409 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 16.775331579405687 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 16.576023892459705 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 16.374628749944396 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 16.18003665098623 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 15.993069648742676 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 15.796918084798767 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 15.594855191277677 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 15.39606799536604 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 15.199180487663515 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 15.00203161239624 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 14.810902406298926 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 14.613989754924624 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 14.414698585867882 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 14.21561507291572 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 14.014616104272696 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 13.810257212806293 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 13.608904253352772 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 13.407918033743265 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 13.209774853578255 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 13.009093417061699 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 12.808827007518095 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 12.611073017120361 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 12.412819230038187 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 12.212831560656321 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 12.013390711375644 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 11.8159351923787 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 11.615568926636602 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 11.417563096626655 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 11.222105330891079 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 11.021442142026178 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.827112962121832 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 10.63210711836004 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 10.429150465372446 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 10.234973449835042 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 10.034621874491373 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.842902371425502 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 9.648271585765638 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 9.44659997123519 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 9.247081626545299 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 9.047937962316698 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.846662399096367 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.647488395119929 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 8.446595952480653 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 8.247265907203627 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 8.04804277420044 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.845982479012531 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.643698353826263 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.442006981445967 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 7.240504747483788 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 7.040403785127582 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.839995033769722 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.643358877319062 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.4416290918986 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 6.245980389724822 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 6.044531317318188 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.842755586780302 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.640717134919278 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.441858743656578 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.240051795696391 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.038228273391724 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.837926279414783 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.636013068721793 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.4334898209303955 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.232138160886711 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.030371454026964 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.8294030539897266 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.6275479583949832 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.426537911097209 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.225096909896187 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.023375350075799 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.821997739935434 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.6199112002224845 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.418360304325185 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.217191168870875 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.015528465572156 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.814102130410559 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.6131966014703114 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.4120161113343708 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.210588106175059 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.0088981603964782 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.8206843843265454 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.6273345196912736 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.42484703449287803 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.21231477464263762 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   42.4s finished

    1965 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  28.493 seconds)

**Estimated memory usage:**  1969 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
