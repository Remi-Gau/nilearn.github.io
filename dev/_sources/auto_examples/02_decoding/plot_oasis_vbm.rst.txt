
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7ff57e11fd90>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 205.15918731689453 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 36.14776539802551 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 33.12804079055786 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 31.9830006758372 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 31.40897822380066 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 31.11270546913147 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 30.911941528320316 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 30.6375778062003 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 30.418516159057617 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 30.314976692199707 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 30.11275839805603 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 30.009348392486576 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 29.790502627690632 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 29.493581184974083 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 29.22671903882708 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 29.005521138509117 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 28.822438716888428 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 28.656937374788175 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 28.47833686404758 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 28.292199699502245 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 28.118569135665894 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 27.953510273070563 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 27.781828533519402 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 27.611961924511455 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 27.42742379506429 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 27.25695562362671 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 27.07758434002216 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 26.912168546959204 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 26.771662780216765 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 26.61129123589088 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 26.448480447133385 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 26.275149122361213 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 26.115051984786987 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 25.954232663819283 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 25.799311722026154 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 25.665867396763392 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 25.50648268063863 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 25.331354167010332 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 25.19220106225265 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 25.03070614888118 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 24.878031730651855 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 24.719269403597202 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 24.55321134839739 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 24.411487656970355 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 24.25906426256353 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 24.11746652921041 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 23.94985868619836 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 23.77721319300063 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 23.60882250467936 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 23.447643148655796 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 23.315128326416016 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 23.165071384579527 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 23.012254604926476 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 22.85160131274529 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 22.683160296192877 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 22.5235651623119 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 22.37426294599261 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 22.218471824077135 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 22.056226705682686 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 21.89907699520305 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 21.735791762669884 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 21.58357662841922 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 21.430477426898094 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 21.27660607156299 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 21.12162059545517 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 20.9592965566195 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 20.80003269513448 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 20.64361914236154 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 20.48871929505292 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 20.3317899496659 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 20.172558886664255 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 20.003631813425415 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 19.84384367201063 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 19.693010803771347 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 19.541740295049305 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 19.392829736073814 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 19.23889206585131 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 19.082710597422217 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 18.927204119853485 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 18.774909408786627 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 18.620981097221375 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 18.464975954573834 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 18.306665658950806 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 18.151465441807208 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 17.996988012677146 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 17.844200372695923 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 17.69047191531159 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 17.533710131700012 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 17.3776328346946 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 17.228129440479062 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 17.07558618651496 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 16.91607341661558 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 16.75344499297764 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 16.59395972887675 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 16.43996207764808 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 16.323474319357622 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 16.168476939201355 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 16.01386646880317 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 15.857770661918485 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 15.711738511769457 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 15.556090354919434 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 15.402557309311215 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 15.242197630452175 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 15.08150280100628 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 14.92344276721661 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 14.769067684809366 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 14.614231811379486 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 14.459603882281579 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 14.30435706951 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 14.150131634615978 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.99396341497248 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 13.837529249019452 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 13.682540995734078 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 13.524551096215712 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 13.36939291368451 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 13.215972454651542 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 13.060418622247104 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.90525114026844 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.749118513980155 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 12.59246715978414 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 12.437090237935383 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 12.281449666693192 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 12.125976339715427 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.969157240255091 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.810250166923769 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.653630542755126 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.49897114814274 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 11.345014055882851 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 11.193366900086403 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 11.037288839502851 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.880559829565195 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.723663122599362 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.568507302891124 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.412714612215085 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.256507592414742 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.098688319877342 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.94144204083611 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.78466271309957 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.645045270090518 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.489751858676938 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.334831544331141 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.179103964609457 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.022545139554522 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.866014228834139 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.709998620880976 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.551989547137556 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.395046789352207 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.237538170652325 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.081592405164564 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.9268847135889455 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.773988326390584 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.619523436817902 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.463128792612176 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.307610458797879 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.151581600114897 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.996063224730953 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.8395406405131025 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.683121365346726 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.526446547689316 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.371432533803976 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.216481566429138 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.061466852330273 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.906090256608563 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.750713582419179 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.5964721295891735 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.44099159674211 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.285407118050449 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.1307560241151 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.974184853690011 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.817861422984557 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.661976014866549 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.506429737771463 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.350887298583984 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.195628998596544 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.0398143324358715 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.8844730854034424 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.7289037921211934 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.573414541233731 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.417459236102158 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.2616973096431967 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.105903016196357 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.950432947327419 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.7951299908396963 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.6398657332352604 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.4849726428156313 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.3298680266818486 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.1747732957204184 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.01963486773445 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.864384980911904 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.7090557857795996 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.5540216094569155 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.398577848654143 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.243230253458023 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.087996186370059 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9326647237404105 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7772764364878336 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6218384771930927 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.46638830906243495 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.310937443164864 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.15547233610296968 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   31.1s finished

    1965 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  19.030 seconds)

**Estimated memory usage:**  1841 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
