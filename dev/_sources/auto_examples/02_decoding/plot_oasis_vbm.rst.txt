
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f7a81a5d790>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 157.68051147460938 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 26.298264026641846 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 24.774051904678345 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 23.83342488606771 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 23.313255548477173 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 22.951063871383667 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 22.782169977823894 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 22.649443864822388 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 22.49216079711914 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 22.318836741977268 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 22.115257740020752 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 21.918761014938358 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 21.723885854085285 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 21.558609228867752 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 21.416219677243916 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 21.28120032946269 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 21.12080752849579 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 21.01983202204985 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 20.914821704228718 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 20.841439084002847 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 20.97217082977295 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 20.878667729241506 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 20.731806776740335 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 20.58530958839085 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 20.416658560434975 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 20.25485110282898 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 20.122111228796154 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 19.967517428927952 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 19.8197706086295 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 19.664563006368176 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 19.521658182144165 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 19.395379550995365 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 19.283822536468506 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 19.169365153168187 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 19.034119339550244 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 18.905672652380808 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 18.78606006834242 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 18.670733735368056 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 18.555437263689544 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 18.453454005412567 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 18.35675048828125 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 18.256336177267677 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 18.131020091828844 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 18.01186274927716 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 17.90314461968162 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 17.797484053505794 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 17.678705474604733 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 17.558569984233124 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 17.43350072701772 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 17.328395561296112 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 17.212610721588135 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 17.09839321117775 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 16.980371897037212 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 16.864719885700154 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 16.764047975893373 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 16.63940488208424 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 16.518014226640975 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 16.400029174068518 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 16.292290482027777 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 16.180897732912484 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 16.06253997484843 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 15.947896816691415 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.83545870934763 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.721505305123706 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 15.599709272384644 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.476399164933426 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 15.358976790399263 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.242608372844867 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 15.121573027442484 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 15.00412528756736 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 14.890665973935809 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.779362765836044 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.665757497151692 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.552752654846401 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.437820028614352 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 14.319010972976685 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.207723642650404 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 14.098239972993925 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.990328642038198 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.876124496701397 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.76071286201477 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.649495039457157 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.534425078368768 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.420359255319617 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.308645486831665 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.198424213072833 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 13.082988556041274 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.969526066177194 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.859565171328457 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.75090382608135 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.642649888992311 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.529056727231204 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.414195423540862 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.302280966953566 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.188868324807348 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 12.071752385089273 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.951333403587341 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.831301657194944 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.711251010700149 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.589280065864022 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.467557907104492 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.34831138412551 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.227714599347582 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.109688950973807 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.991163033705492 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.872531754629952 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.754372128900492 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.63843298181195 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.523018068737453 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.405540840341411 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.286758856339889 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.169600433057493 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.053462743759155 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.935937210521866 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.818747449339481 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.701628840487937 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.585235439497849 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.46873328828404 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.351602493706396 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.233787234089956 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.117686748504639 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.002191988889837 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.884666513224118 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.76772585535437 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.651926309831682 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.537143993377684 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.426747708093552 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.310374947044792 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.194433256983757 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.079748615738033 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.963947296142578 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.8477952862513884 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.733436165433941 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.6189221564988445 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.502838294897506 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.388443319885819 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.272789001464844 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.157354984840337 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.041913975840029 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.92640200450266 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.811810663768223 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.697674712390764 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.583103948915508 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.468614846676379 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.356310923894246 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.243984296404082 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.131913400676152 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.019013281582164 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.906586118646571 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.792561622274002 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.678985277811686 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.565580514882574 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.45073117707905 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.337049099354963 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.224185089012245 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.111816098613124 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.999076647636218 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.885359765617711 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.771327411072163 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.65681432478083 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.542882561683655 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.4296759759417235 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.31659741754885 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.203028207907647 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.089446905182629 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.9750657442844277 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.8607805550816545 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.7476203441619873 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.6347923278808594 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.521614348394631 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.4080489803763 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.294858606238114 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.181720678196397 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.0683783368568203 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.9553639176248137 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.8420410496847968 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.7286430272189053 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.6156452160097112 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.5023385112205245 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.3886986085156487 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.27481746673584 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.160957518203482 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.047303708045037 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.9331742218934775 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.8189849853515625 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.7048619051237366 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.5912528627662248 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.4778022511120148 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3641407641958683 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2503542887470709 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.1365553454348916 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.0229323247340338 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9092522660891215 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7955355038914655 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6819118494840013 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5683592955271403 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.45473294841999906 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.34109650408556014 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.22738390739517986 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11368536709541052 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   22.7s finished

    1989 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  0.551 seconds)

**Estimated memory usage:**  1956 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
