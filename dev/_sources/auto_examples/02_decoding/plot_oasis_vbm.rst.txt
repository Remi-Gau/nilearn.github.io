
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-90

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 148-150

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 150-163

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-166

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fd95ff12640>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-229

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 161.29732131958008 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 27.305575132369995 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 25.084484338760376 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 25.40887228647868 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 24.66405749320984 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 24.2187602519989 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 23.865689833958946 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 23.58411591393607 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 23.29738998413086 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 23.052513811323376 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 22.85870909690857 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 22.672354849902067 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 22.495276927947998 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 22.321981173295242 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 22.153992176055908 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 21.996811151504517 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 21.866016030311584 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 21.729601789923276 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 21.597007062700058 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 21.44552362592597 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 21.302814245224 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 21.160945108958654 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 21.036160317334264 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 20.942766355431598 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 20.8210711479187 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 20.69275665283203 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 20.618630427580612 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 20.518917825486923 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 20.385108300617762 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 20.25756915684404 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 20.12584670384725 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 20.01062759276359 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 19.89182460308075 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 19.75626603762309 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 19.616131852654853 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 19.49445707457406 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 19.36577712164985 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 19.247063733435965 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 19.119897817310537 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 19.0018296730824 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 18.880699157714844 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 18.760485736335195 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 18.63848166238694 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 18.516093220821645 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 18.413306496360086 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 18.29385378625658 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 18.168631574381955 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 18.052696116427157 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 17.934609413146973 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 17.81606348193422 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 17.702282667160034 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 17.57922459116169 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 17.45907737658574 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 17.33660645754832 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 17.21559178387677 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 17.09203017841686 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 16.97888823917934 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 16.859412791436178 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 16.740999953500154 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 16.616022760585203 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 16.499755144119263 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 16.389869502333344 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 16.270408353497903 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 16.152075597218104 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 16.03325182199478 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.918949787433332 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 15.800450982469501 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.682035787781672 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 15.562268215067247 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 15.44824939534284 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 15.331626619611468 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 15.218074100118288 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 15.104356129964192 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.988711164422233 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.88664371902878 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 14.77284034093221 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.656631683048449 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 14.535875233736904 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 14.421718554619032 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 14.298740392998804 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 14.179898142814636 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 14.058754208647175 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.941809979880729 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.820948554808835 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.697710661661057 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.576348066329956 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 13.455769450165503 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 13.337881756925036 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 13.228231516751375 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 13.106405110841386 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.98521622021993 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.864860537287953 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.743499507074771 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.622760103594873 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.503377853555882 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 12.384897332442435 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 12.267908294995625 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 12.147559812388469 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 12.02658061105378 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.906904263929887 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.78710675239563 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.665966470642845 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.546270314384909 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.433249200432046 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 11.314702033996582 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 11.198128382364908 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 11.080287865872654 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.962516432610627 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.843366296203047 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.723502224738445 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.602632175792348 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.486772644627202 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.367005399295262 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 10.248393077765945 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 10.129396325663517 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 10.009065254874852 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.89034681484617 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.771113554636639 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.651431722156072 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.530954769679479 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.41280190149943 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.29331411211944 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 9.17629337310791 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 9.05860216830804 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.93939128229695 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.826514863967896 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.70887749914139 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.590099742093424 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.470763817429543 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.35262371033661 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 8.235248565673828 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 8.116323660348208 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.997933048190492 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.879834517500455 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.761483139066553 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.64366086324056 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.524718228508444 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.405710232518885 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.287923681563226 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.170237210157106 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.0527815478188645 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.934578427186249 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.817014815102161 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.69924615813302 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.581246256828308 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.464107439435761 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.347229941250526 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.240549496241979 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.123303091203844 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.0061025331484394 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.889399449030558 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.773091144119666 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.655858315919574 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.537822757671083 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.420385927348942 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.303417813393378 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.184400699077508 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.066286911630327 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.9477597248705125 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.8311384114079505 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.713185012340546 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.594556581899987 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.475560067612448 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.357425885697816 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.238979141886642 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.120641506079472 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.001887146248875 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.8832394876879848 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.7654249100458053 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.647096676233957 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.5291132926940922 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.411238522557487 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.2933916213900547 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.1753671458690844 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.05722015205471 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.938920157296317 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.8208605592901055 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.703416619597182 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.5854011948189037 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.4675224919558905 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.3497432072957354 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.232016813689174 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.1143111842019215 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.9965036697075016 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.878820688828178 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.7614298962258004 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.6441144635600429 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.5264854112410928 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.4089194713754856 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2914092868724196 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.1738289029974687 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.0563942836841365 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9389671484629313 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.8215489177506204 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.7041295213797658 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5867201426090338 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.46933745851322095 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.35202639236062916 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2346799494040133 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11733126520511493 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   23.5s finished

    1981 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  0.046 seconds)

**Estimated memory usage:**  1869 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
