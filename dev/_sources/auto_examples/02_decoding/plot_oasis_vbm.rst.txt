
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (:term:`VBM`)
to study the relationship between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard :term:`VBM` pipeline (using SPM8 and
NewSegment) to create :term:`VBM` maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the :term:`ANOVA` step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the :term:`ANOVA` step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

:term:`SVM` weights are very noisy,
partly because heavy smoothing is detrimental for the prediction here.
A standard analysis using mass-univariate :term:`GLM`
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 112-123

Prediction pipeline with :term:`ANOVA` and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

In nilearn we can benefit from the built-in DecoderRegressor object to
do :term:`ANOVA` with SVR instead of manually defining the whole pipeline.
This estimator also uses Cross Validation to select best models and ensemble
them. Furthermore, you can pass ``n_jobs=<some_high_value>`` to the
DecoderRegressor class to take advantage of a multi-core system.
To save time (because these are anat images with many voxels), we include
only the 1-percent voxels most correlated with the age variable to fit. We
also want to set mask hyperparameter to be the mask we just obtained above.

.. GENERATED FROM PYTHON SOURCE LINES 123-149

.. code-block:: default


    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 150-152

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 152-165

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-183

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f4cb7fd11c0>



.. GENERATED FROM PYTHON SOURCE LINES 184-186

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 186-231

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 179.29553985595703 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 31.723870992660522 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 29.385809898376465 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 30.726484775543216 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 29.60684585571289 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 28.960329294204712 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 28.36078437169393 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 27.904628208705358 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 27.54283332824707 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 27.214940362506443 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 27.199196815490723 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 28.90170940485868 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 28.461733897527058 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 28.091230850953323 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 27.740553208759856 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 27.41411598523458 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 27.22332799434662 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 26.982951879501346 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 26.701029274198742 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 26.463520388854178 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 26.222955465316772 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 26.00710714431036 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 25.802756981416184 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 25.59521786026333 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 25.485339800516762 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 25.285994291305542 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 25.094805589089027 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 24.894102184860795 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 24.699095249176025 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 24.5260735791305 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 24.346253554026287 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 24.25009710557999 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 24.053213238716125 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 23.86533597021392 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 23.70006958176108 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 23.529587541307723 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 23.346859455108643 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 23.1789349865269 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 23.011262918773454 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 22.90386906036964 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 22.73202419281006 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 22.558601094455252 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 22.38936432202657 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 22.224874740423157 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 22.06743394244801 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 21.90895093811883 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 21.786065039427385 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 21.62607042332913 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 21.469114303588867 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 21.30748316219875 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 21.142426013946533 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.981250547895243 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 20.82797221037058 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 20.66818376757064 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 20.5463558656198 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 20.598975658416748 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 20.480654648372106 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 20.324614303153858 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 20.170123314035347 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 20.014114864801954 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 19.893434286117554 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 19.739802473881205 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 19.585312012703188 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 19.42869130770365 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 19.27801677584648 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 19.127912466342636 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.97941611029885 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.82895560051078 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 18.699275914360495 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 18.54721688878709 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 18.39440485409328 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 18.241928755397527 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 18.09556452433268 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.950962821098223 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.801868670695537 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 17.670030196507774 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 17.52065392544395 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 17.373325778292372 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 17.226214836805294 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 17.07937247843682 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.932344555854797 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.784418671219438 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.655558033687313 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 16.512275787721197 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 16.362188952309744 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 16.219451918321496 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 16.073458521865135 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.927312237092819 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.78465548428622 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.639851355820559 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.51011167632209 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 15.361689017369196 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 15.215739602627963 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 15.071172516833071 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.927646824654111 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.783901365179766 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.639822045962015 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.506079184640313 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.363396279665888 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.317956541523788 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.171822786331177 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.025239602173908 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.878594403173409 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.731870223017573 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.596636772155762 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.461971532730828 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.315160440948775 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.16715117035625 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.020472155676948 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.873307540876056 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.727053490552036 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.59247291625083 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.444760526929583 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.321484337865778 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.17481363447089 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.030774417130843 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.885406979199114 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.739423279069428 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.623810675184606 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.480210492590897 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.333969751993815 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.188839839509697 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.043859274660955 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.898000007722436 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.752587826021257 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.615739822387695 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.470056238628569 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.325459260640182 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.18017116189003 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.035188469775887 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.89064911695627 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.746573286202118 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.602326530398745 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.464945228476275 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.320374755717035 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.176066884288081 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.03349629570456 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.890461685013596 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.7466189066569 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.602623634201159 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.465323959078107 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.321471466240308 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.17804297594957 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.06746622565743 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.924548029899597 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.7817726957386935 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.63914029565576 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.50076006383312 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.357655261013959 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.219273279177263 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.0766673882802325 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.933498884668413 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.790252861223722 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.6469578026166936 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.50751789204486 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.3641484168268025 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.221059786967742 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.078642940824958 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.935568115379236 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.792195672509055 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.6495314836502075 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.5071681967433195 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.367301505288959 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.224819527081917 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.082165223796193 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.9401327913457695 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.79778222003615 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.6557355355359835 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.513380186898368 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.373758888808933 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.23162969420938 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.089711883611846 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.9480865667032643 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.8065185615782107 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.6649590744369336 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.5233427797045023 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.382466619664972 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.2425109060470665 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.1009889184758905 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.959516461335081 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.8180212444729276 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.676507540170659 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.5353169362623613 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.3940920973084663 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.2539594691732656 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.112901694065816 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.9717113279527234 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.837775881915169 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6960660548920325 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.5542771967630538 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.4127033384222734 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2716956787708542 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.1301367978254953 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9887805602711098 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8474011445782849 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.706077435077765 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5647496544584936 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4235010812730354 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.28240959572069574 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.14118406880441023 seconds remaining)
    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 9.747 seconds)

**Estimated memory usage:**  1866 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
