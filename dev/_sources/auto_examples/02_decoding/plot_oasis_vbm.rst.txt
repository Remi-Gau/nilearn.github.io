
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f573aa1f580>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )  
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 148.1485366821289 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 26.17542815208435 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 24.268796682357788 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 23.61182769139608 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 23.36389923095703 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 23.158695459365845 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 22.9370334148407 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 22.767839908599854 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 23.348413467407227 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 23.176817231708103 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 22.976913690567017 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 22.811225002462216 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 22.62098217010498 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 22.458738290346588 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 22.30186026436942 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 22.14849368731181 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 21.98192071914673 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 21.802955094505762 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 21.61489669481913 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 21.45118358260707 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 21.283380031585693 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 21.15110909371149 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 20.97371012514288 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 20.782519775888197 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 20.61177857716878 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 20.494319200515747 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 20.370905344302837 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 20.231384489271377 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 20.08554782186236 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 19.938765122972683 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 19.881476243336998 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 19.763912547019217 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 19.63618290424347 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 19.529711138118397 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 19.39748953370487 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 19.251371996743337 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 19.099664635128445 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 18.942293534407742 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 18.792597620110765 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 18.648864189783733 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 18.515005111694336 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 18.379341113858107 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 18.236507234119234 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 18.115241316861884 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 17.967762903733686 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 17.83040428161621 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 17.684315111326136 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 17.5437529137794 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 17.4069265127182 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 17.26857992580959 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 17.131120204925537 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 16.9940755554274 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 16.858720192542442 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 16.730607532105356 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 16.600579226458514 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 16.4739614833485 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 16.343536376953125 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 16.220867152799638 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 16.09031185610541 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 15.960708533303212 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 15.830911397933962 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 15.701564753641849 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.576266042647822 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.456516398323906 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 15.330783516168594 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.20719467676603 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 15.08990320292386 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 14.967996942463206 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 14.84409145747914 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 14.722101850786071 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 14.602751765932355 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.490391549929766 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.370614369710285 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.248849026144368 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.130702166943935 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 14.01204268137614 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 13.899196687497591 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.781030769471998 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.667551327974369 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.55543671680402 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.44180679321289 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.323534456300148 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.20533026137003 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.086251408220773 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 12.969338076455251 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 12.851789292167215 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.736043248065682 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.622673867762774 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.505677049810236 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.389806645639826 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.276495271258884 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.165453012172993 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.055965465048086 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 11.943629462231872 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.829988043358986 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.720039606094362 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.606720189253489 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.493571470693215 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.380760937320943 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.275469794417871 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.160555601119995 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.045177554139997 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 10.929233331306309 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.816106615714657 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.70161694746751 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.58734403337751 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.471852581456023 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.357330404709433 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.242630658326325 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.129993521839106 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.01600711995905 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 9.901928725543323 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.791333624294825 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.67779710440509 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.565534767351652 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.453181650327599 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.340131998062134 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.227845945928852 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.11341029910718 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.000881441501008 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 8.888478914896647 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.777140637074622 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.666019459239772 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.555897247500535 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.444913010443411 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.333001565933227 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.220778578803653 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.108517588592889 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 7.995717242360115 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 7.884481733159501 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.778436605746929 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.669608500167613 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.558067668568004 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.446015732628959 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.337485398819197 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.225395591170699 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.113917631261489 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.001034042260943 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.887999151064002 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.777149673846128 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.665502037320818 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.554084372013173 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.442194579352796 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.33010196685791 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.218404822879368 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.106064064749356 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 5.99440002768007 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.882095492615992 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.770425641858901 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.6588216932027935 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.547347942988077 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.436169014861252 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.32495127226177 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.213622051126817 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.1016680358292215 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.991461400062808 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.880411196977664 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.769052535864957 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.658426764645154 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.546771394381733 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.435270607471466 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.323495404320474 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.212157952932664 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.101177532980047 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.9897833975349983 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.879067370385835 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.7679051634777023 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.656443979925738 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.545394534156436 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.433816726391132 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.3225535785450657 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.211650180537798 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.1004337321880255 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.9888678754685243 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.8777111152122763 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.7664435931614464 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.6554594906893643 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.54440561660939 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.4339235150412226 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.322893498330143 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.2122421264648438 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.1018669842356474 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.9910637389172563 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.8803533960561285 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.7694673330887505 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.6589350635940965 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.5486355853337115 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.4378899801223672 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3271684646606445 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.216447247399224 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.105998666662919 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.9953427239862412 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.884637286265691 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7740436193238885 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6634630591598983 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5528285503387451 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4422276020050048 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.33164271848455906 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.22108724623015436 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11053637403938639 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   22.1s finished

    1982 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  59.386 seconds)

**Estimated memory usage:**  1821 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
