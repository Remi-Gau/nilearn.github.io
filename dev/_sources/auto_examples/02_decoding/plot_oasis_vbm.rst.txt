
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f5e1bc0d6d0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 149.81746673583984 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 25.622690439224243 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 23.61514663696289 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 22.89100273450216 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 22.561859846115112 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 22.41390895843506 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 22.106086889902752 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 21.87032151222229 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 21.658172607421875 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 21.597869820064968 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 21.424793243408203 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 21.26441632617604 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 21.11116337776184 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 20.99566417474013 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 20.89693604196821 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 20.80238469441732 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 20.686964869499207 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 20.568293809890747 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 20.45633750491672 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 20.32834311535484 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 20.211298942565918 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 20.081765560876754 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 19.962768944826994 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 19.83364895115728 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 19.71297534306844 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 19.595261573791504 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 19.484021847064678 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 19.391515837775337 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 19.27256430898394 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 19.159980445072566 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 19.048601468404136 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 18.93259533759086 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 18.81870299577713 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 18.703941381338872 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 18.59200624858632 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 18.474464791161672 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 18.36337447166443 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 18.24386891803226 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 18.126775992544076 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 18.003439426422123 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 17.88754367828369 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 17.77573060407871 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 17.667788641793386 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 17.567444679348966 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 17.448919773101807 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 17.34055338965522 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 17.229154711184297 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 17.115213526056166 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 17.003432273864746 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 16.901290484837123 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 16.78806710243225 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 16.674903734057555 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 16.562092249210064 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 16.444143560697448 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 16.346350872958148 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 16.227645288814198 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 16.108458995819092 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 15.989953049442223 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 15.873994868377158 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 15.75761102417768 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 15.637660423914593 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 15.521979191264169 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.406146941646451 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.291859437548924 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 15.17279914021492 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.057634867154636 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 14.941279721982552 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 14.828630098656042 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 14.71666157946867 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 14.602594164834507 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 14.490895577839444 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.376723017491086 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.265912797715927 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.153359756077807 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.040115936382396 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 13.926113843917847 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 13.809476074419523 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.692225583187945 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.575264404981564 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.45585994780818 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.337314367294312 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.220716064358935 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.105820051053675 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 12.990843876298651 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 12.8765644913628 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 12.761772001490874 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.652413468028223 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.539303552145245 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.422748825766824 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.306053164299954 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.191188944710627 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.077943539881444 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 11.96154396430306 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 11.847006392735308 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.731776658524858 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.617427286348846 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.50668571392695 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.392458694497334 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.278793393349162 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.16539666146943 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.05456280708313 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 10.941219360521524 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 10.82736619313558 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.713829778930517 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.602315902709961 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.489701974959601 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.377250059595648 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.265071753029511 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.153623669235795 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.044839351549061 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 9.936022086576983 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 9.824072608002671 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.713771786008563 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.60332815837016 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.491946638676158 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.38158917427063 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.270546247219217 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.1603480689546 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.050768246084957 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 8.941454490693678 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 8.832679430643717 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.724363376286405 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.616125259243075 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.507273608106907 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.398400475901942 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.289766216278077 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.180689819275386 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.071664879641194 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 7.961224436759949 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 7.850521054378776 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.740485521463247 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.631071869653599 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.520300735126842 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.4099069448342005 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.299135681408554 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.188774311984027 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.0790828256046066 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 6.96876557203975 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.8583245968473125 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.748366870468469 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.638717753546578 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.528493759479929 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.418411305252935 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.307795306185742 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.197239451938206 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.087742188881183 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 5.977080070809142 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.8657257881294305 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.754954402511185 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.644581546719443 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.533351182937622 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.422374600606249 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.311768280832391 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.200935910729801 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.090530290232076 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.979518475071076 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.868556957978469 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.758004211316443 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.647777195218243 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.536944344358624 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.426773846149445 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.316243173172755 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.2059599146430875 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.09565566068778 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.986523977140101 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.875860647721724 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.7649480492235665 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.6543655109976583 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.543255533490862 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.4323351637146176 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.321258082109339 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.210118233808997 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.09927941477576 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.988289039259012 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.8773866357474494 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.766885416848319 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.656319585713473 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.5456085137728244 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.434796046674921 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.32399409709696 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.213171852959527 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.1027728997541395 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.992157207740532 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.8815631071726482 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.77080367959064 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.6601852339667245 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.5497742083764845 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.439110613124256 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3284642493471186 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2176627482055986 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.1069713266272294 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.9963034322748634 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.8854866921901703 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7747308120826365 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6640372546677737 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5533668200174967 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4426566824621083 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3319558952060448 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.22132570574982 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11066517278776695 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   22.1s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  58.342 seconds)

**Estimated memory usage:**  1933 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
