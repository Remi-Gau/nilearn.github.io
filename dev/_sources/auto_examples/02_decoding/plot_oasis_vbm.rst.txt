
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f0788a392e0>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 245.54729461669922 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 44.797754764556885 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 42.16291809082031 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 44.05436460177104 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 42.35725450515747 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 41.41971230506897 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 40.68683163324992 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 40.33493096487863 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 39.824541091918945 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 39.479858213000824 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 39.16162943840027 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 38.81845157796687 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 38.61599373817444 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 38.444213775488045 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 38.23736296381269 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 37.96315058072408 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 37.66838502883911 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 37.36779179292567 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 37.107643551296654 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 36.82022359496669 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 36.573705196380615 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 36.32727585520063 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 36.09221607988531 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 35.871902673140816 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 35.63457743326823 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 35.42095422744751 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 35.18982691031236 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 34.96654985569142 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 34.74228729520525 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 34.59237456321716 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 34.37451465924581 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 34.14758363077717 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 33.93349653482437 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 33.71982859842705 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 33.50699299924514 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 33.30841040611267 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 33.08475393719143 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 32.86066304026423 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 32.756674214413295 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 32.545407301340354 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 32.28481864929199 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 32.044063777458376 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 31.800100530896867 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 31.6141334467156 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 31.41996945034374 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 31.217059824201797 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 30.974249300749406 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 30.730784182852886 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 30.485031445821125 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 30.248183425591918 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 30.030908346176147 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 29.826463007459452 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 29.623062353867752 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 29.41870784309675 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 29.22178844169334 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 29.01658890464089 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 28.82328966685704 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 28.612452272783244 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 28.399742932155213 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 28.186725151740898 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 27.984581311543785 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 27.80912669760282 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 27.610446522312778 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 27.40844767434256 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 27.207564026117325 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 26.997572642106277 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 26.79295070243604 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 26.581606213726214 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 26.372994703405045 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 26.15867887027022 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 25.940932171685358 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 25.73626153234025 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 25.530940161810978 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 25.326765746286473 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 25.13030458785392 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 24.922619660695396 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 24.719376200123836 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 24.517788630027276 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 24.31648939083784 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 24.11655904673323 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 23.912750601768494 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 23.700021311088847 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 23.483264056647695 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 23.274401906024977 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 23.07509469985962 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 22.87555649701287 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 22.67767236953558 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 22.47888504773721 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 22.282023213126443 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 22.094765344362578 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 21.90615389082167 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 21.701499818445562 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 21.497961604076885 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 21.289504164008687 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 21.089597869426644 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 20.888627642079406 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 20.701134065786995 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 20.499812647239448 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 20.29766261334322 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 20.09895716532312 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 19.896141052246094 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 19.695578898533736 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 19.496398444269218 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 19.299906628803143 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 19.10127221621 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 18.904162157149543 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 18.709233454938204 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 18.514264623695446 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 18.31642375168977 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 18.11996825681914 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 17.922169707038186 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 17.726997777148412 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 17.529304776872905 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 17.325378257616432 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 17.123007452278806 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 16.92016859676527 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 16.721754263187275 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 16.515617657930424 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 16.309189178175846 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 16.101934925848695 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 15.897344748179117 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 15.698046120730314 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 15.497929303372494 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 15.295636981483396 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 15.096442760959748 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 14.895475101470947 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 14.689829731744434 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 14.485997196257584 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 14.286512061953545 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 14.082069672355356 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 13.880781008647038 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 13.68173438356123 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 13.48410550030795 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 13.289307988675914 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 13.091477586262261 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 12.898050758573744 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 12.699992123772116 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 12.504691407628302 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 12.306767401487932 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 12.11037644894003 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 11.913941247122628 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 11.715901329162273 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 11.518319811619504 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 11.32091781642887 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 11.119370539983114 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 10.917227531301563 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.717482805252075 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 10.51404019602302 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 10.311741190987664 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 10.110051822342328 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.907911698023478 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.706681592574972 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 9.506008725417287 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 9.305196093577965 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 9.104673463028746 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.904967500317483 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.703966562564556 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.502486930531301 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 8.302028308940839 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 8.102402252221257 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.902488708496094 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.704207574358638 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.508596867690851 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.308996918742642 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 7.109663974948046 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.912054061889648 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.714827638074576 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.517611860515115 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.3199621836344395 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 6.122645249733558 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.924860154881197 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.727891484199211 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.528755797896275 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.3318900593443415 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.134250934096589 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.936028616768973 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.739028258757157 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.543073671685773 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.345423296596227 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.148154514461922 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.9509279198116722 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.75261326784587 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.554017019795847 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.356168843357941 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.1593551013780674 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.961759470604562 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.7644945754799792 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.5665329994364856 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.368936665514682 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.1714776621924505 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.9741113185882568 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.7769929626225178 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.5793719788392384 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.3815267481334468 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.1840424881767981 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.9866547523400722 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.7897290891530562 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5923941970476645 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3950052983833082 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.19751057433123564 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   39.5s finished

    1989 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  26.599 seconds)

**Estimated memory usage:**  1868 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
