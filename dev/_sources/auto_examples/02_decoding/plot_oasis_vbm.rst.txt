
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print("")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fb458e4c9a0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 210.28757095336914 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 40.67689347267151 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 38.36510109901428 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 37.36268981297811 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 36.89315748214722 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 36.5062358379364 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 36.111449241638184 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 35.89452385902405 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 35.648746490478516 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 35.38478734758165 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 35.21118879318237 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 35.13191602446817 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 34.88442985216776 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 34.671557646531326 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 34.50632439340864 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 34.337181091308594 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 34.134154319763184 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 33.93785173752729 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 33.73766451411777 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 33.54413528191416 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 33.364991426467896 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 33.20213400749933 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 32.99650831656023 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 32.798257392385736 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 32.61131954193115 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 32.401819705963135 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 32.20296522287222 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 31.99818902545505 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 31.813096421105524 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 31.6780218009291 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 31.50051506360372 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 31.31115021244172 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 31.14478576183319 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 30.94177171678254 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 30.750686631483195 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 30.55913574354989 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 30.385084523095024 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 30.208340110005558 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 30.020396834925602 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 29.83875592549642 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 29.64329719543457 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 29.467595955220663 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 29.28189592134385 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 29.10312682528828 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 28.916791157288984 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 28.725476423899334 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 28.540010182753853 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 28.365439242505012 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 28.176097790400185 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 27.975001189173486 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 27.778131008148193 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 27.59734999432283 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 27.429100073300877 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 27.25551140083457 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 27.066689244023078 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 26.88074166124517 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 26.685171195438933 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 26.486621346390034 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 26.31809928499419 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 26.13310871285907 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 25.937755982081097 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 25.747902420700573 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 25.560328060580837 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 25.36942330617753 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 25.18087488412857 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 25.008418706747204 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 24.82105168429288 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 24.63683457872761 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 24.456605546614703 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 24.2681690160779 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 24.08428566796439 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 23.8945820533054 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 23.712787628173828 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 23.520777303878575 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 23.339545978082192 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 23.152168591817222 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 22.966507058394583 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 22.778481152150537 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 22.599926221065033 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 22.411741250677952 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 22.231568455696106 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 22.053109142515396 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 21.864608642531604 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 21.67799507566245 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 21.488204036440166 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 21.308483544517966 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 21.12166669756867 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 20.92589471806055 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 20.74137410250577 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 20.56310188100579 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 20.376507653130428 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 20.19438005541707 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 20.00725467308708 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 19.823643315222956 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 19.636140620454828 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 19.450893063294263 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 19.261110027631123 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 19.077670195668013 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 18.891937815413183 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 18.71589772869842 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 18.530452251434326 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 18.370070273333255 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 18.193023826561724 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 18.0028441855051 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 17.814630581782417 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 17.626886254265195 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 17.439943592503386 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 17.255868492839493 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 17.068196022952044 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 16.882625872935723 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 16.696710348129272 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 16.50660624590006 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 16.320965664727346 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 16.135030088171494 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 15.950920159356636 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 15.765707451364268 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 15.584480869358984 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 15.39627321357401 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 15.212690729205892 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 15.028215246040281 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 14.840701738993326 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 14.656480728102126 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 14.46833694958296 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 14.281129367952424 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 14.094059144296954 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 13.905274629592896 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 13.719470595556592 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 13.533755276146836 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 13.345063403248787 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 13.159018470335376 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 12.972563651891855 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 12.785027700526113 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 12.598866925095066 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 12.416471047508987 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 12.230551883355895 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 12.04640860027737 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 11.861443687887753 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 11.675495692413218 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 11.488880395889282 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 11.302107447342907 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 11.116575581686837 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 10.931441090631147 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 10.74559273854108 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 10.559828026311381 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 10.374441477987501 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 10.189556919295212 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.004861256847642 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 9.818873389237591 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 9.631827425312352 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 9.445413072637264 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.260584433873493 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.075703946170428 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 8.891860108626515 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 8.705340659696294 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 8.519939540268538 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.333742672397245 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.147481655463194 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.96319809385166 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 7.776759805558602 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.590316755966571 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.405026972293854 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.219284353789336 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.0336749171033315 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.848958351860748 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.664314333985492 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.480562462951198 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.295278238962932 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.110123403058081 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.92625854128883 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.740860800771318 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.555246283026303 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.370019016210098 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.184477650842002 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.000126714651295 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.81458636261951 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.629474435533796 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.443829926577481 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.258297256157223 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.0729467842016325 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.8874209939434543 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.7020104461246066 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.516979478340781 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.3314717208946143 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.146092726233227 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.9650968883348545 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.77965073972135 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.59479941860322 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.4093992863109404 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.2237204389369234 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.038944225462656 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.8536293632105776 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.6681353946006736 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.4826199909051259 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.2970656570375274 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.1117542084959364 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.9265034932356614 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.7412031815976512 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5558521590257054 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.37052890267034977 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.18526542126832896 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   37.0s finished

    1980 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  59.114 seconds)

**Estimated memory usage:**  1888 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn.github.io/main?filepath=examples/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
