
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f75aa2b56d0>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 220.06511688232422 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 33.43095278739929 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 31.48358917236328 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 31.302505970001224 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 30.699733018875122 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 30.391276359558105 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 30.085273424784344 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 29.80162719317845 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 29.59453010559082 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 29.365075323316784 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 29.18547248840332 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 29.017799117348414 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 28.84385855992635 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 28.696410931073704 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 28.49103079523359 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 28.351681311925255 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 28.17990291118622 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 28.00163142821368 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 27.83669908841451 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 27.67997045266001 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 27.518380880355835 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 27.432307141167776 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 27.280909473245796 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 27.129238781721696 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 26.971155325571694 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 26.820388555526733 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 26.658011528161857 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 26.491038075199835 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 26.32446472985404 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 26.167338659023414 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 26.008509318033855 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 25.83969118518214 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 25.68674862384796 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 25.52606933767145 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 25.35708339074079 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 25.20725819042751 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 25.04412078857422 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 24.880713018211157 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 24.711002262015093 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 24.55160922270555 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 24.383946418762207 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 24.22944188117981 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 24.074565637679328 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 23.929816323657366 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 23.778140544891357 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 23.628843360477024 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 23.47567756279655 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 23.33088959531581 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 23.169805884361267 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 23.015020336423603 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 22.857778787612915 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 22.711561726588826 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 22.571038411213802 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 22.429325513119966 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 22.285680841516566 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 22.14205555482344 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 22.003206457410542 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 21.855508026323818 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 21.709432026435586 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 21.564974530268522 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 21.435041109720867 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 21.28414258409719 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 21.128740126086818 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 20.97943858494834 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 20.828473925590515 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 20.674438531582172 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 20.517280968752775 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 20.361904745671286 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 20.20777496169595 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 20.053710902946584 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 19.89835705075945 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 19.743459040010478 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 19.589785257975258 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 19.43472832849581 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 19.289158556912394 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 19.13972576459249 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 18.989068909695273 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 18.83625236424533 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 18.689204044831104 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 18.53550178189821 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 18.387276649475098 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 18.241847073590314 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 18.0933682278889 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 17.943326591009118 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 17.797278710774012 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 17.646098207024966 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 17.495672031890514 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 17.34406567990095 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 17.19284829226407 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 17.039885936158427 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 16.888132333755493 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 16.7387589936728 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 16.58416243221449 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 16.436087726264873 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 16.284884097728323 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 16.132853696220803 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 15.982045272986094 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.830355968671975 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 15.675766570227488 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 15.524259208428738 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 15.371227979660034 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 15.216471532783885 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 15.062346070420508 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 14.904798271586595 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 14.74767956366906 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 14.589522134690057 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 14.433112823738243 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 14.278710712896329 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 14.123096580858585 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.967573362752931 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.813823331486097 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 13.659157718624082 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 13.502509321485247 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 13.350228891963452 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 13.195420089520907 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 13.039509659228116 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.885671804691183 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.732178802164192 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.578602415020184 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 12.423863032284906 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 12.269738356272379 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 12.116107347582984 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.962172176017138 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.808851379689163 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.656417054514732 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.507967281341552 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.353889325308423 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 11.199150581059493 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 11.044512748718262 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.88988632934038 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.736712052271915 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.5816324867365 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.428809050357703 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.277521466850338 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.126514997055281 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.972990124313919 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.820065666647519 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.667440562352647 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.513838201329328 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.363850269386237 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.209926434925624 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.057194692868713 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.905200713117358 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.753560996555782 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.601509915457832 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.449193584507908 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.297114091376736 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.143214725312733 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.989624184531135 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.836782561052566 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.684040546417236 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.5309597182747545 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.378134426317716 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.225168782901141 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.072345464260547 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.9189482965777005 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.765251471446111 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.611518727745979 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.457870761050453 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.305183127241315 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.152009904384613 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.9977462424995 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.843679024849409 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.689756184267852 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.536304764631318 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.382689649408514 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.228358682379665 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.074714439357826 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.9206411724998835 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.766521167472975 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.611877904218786 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.458380799544485 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.304915223010751 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.150915278175662 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.9967911627100805 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.8429798398699075 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.68897008895874 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.535163266510613 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.3820829552211116 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.228090251624251 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.074288845062256 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.920450239550343 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.7666485152401767 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.6128691910394557 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.4589227386142896 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.305072758648847 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.1513210240230767 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.9976167500337816 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.8439955508455315 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.6904071537905898 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.5371150468525132 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.3834571101902668 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.2297266920407612 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0759925409919857 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9223486934740519 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7686196168263753 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6148296910889294 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.46111325806167525 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3074236084716489 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.15371103981631484 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   30.7s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  16.979 seconds)

**Estimated memory usage:**  1893 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
