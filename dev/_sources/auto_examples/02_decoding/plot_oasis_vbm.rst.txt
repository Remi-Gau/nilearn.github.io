
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-60

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 61-63

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 63-86

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 87-89

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 89-105

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 106-108

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 108-143

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 144-146

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 146-159

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 160-162

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 162-177

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f66180c9a60>



.. GENERATED FROM PYTHON SOURCE LINES 178-180

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 180-225

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 184.64088439941406 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 31.8060462474823 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 29.457635164260864 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 28.613420724868778 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 28.021973133087158 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 27.574748754501343 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 27.426592985788982 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 27.2287038734981 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 27.011775970458984 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 26.795758485794067 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 26.826082706451416 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 26.627835598858923 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 26.48800770441691 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 26.341658188746525 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 26.233427626746042 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 26.066160360972088 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 25.901546239852905 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 25.789370088016287 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 25.630204253726536 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 25.45946860313416 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 25.292821168899536 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 25.12462148212251 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.99456769769842 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 24.842370116192363 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 24.80252726872762 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 24.65816617012024 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 24.67091675905081 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 24.53457552415353 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 24.390655074800765 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 24.224926989654012 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 24.049048026402794 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 23.907264378763013 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 23.753872275352478 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 23.59324253689159 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 23.445986789815567 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 23.313785791397095 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 23.171469158596462 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 23.02703198871097 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 22.871786243037175 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 22.739752812263294 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 22.605687141418457 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 22.464159791062517 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 22.42084668931507 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 22.28910843716111 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 22.13526691089977 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 21.986039638519287 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 21.83249380277551 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 21.68146815198533 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 21.53270125389099 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 21.38971138487057 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 21.23959708213806 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 21.084876523298373 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 20.93496395991399 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 20.783069574607993 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 20.63148412881074 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 20.47941259904341 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 20.340701580047607 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 20.197502834755078 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 20.048648250514063 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 19.908752857628514 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 19.76401154200236 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 19.61882450932362 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 19.472487088172663 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 19.32805139299423 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 19.18481132388115 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 19.039833343946018 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.896694761334043 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.761919462858742 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 18.614771436242496 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 18.475571936455324 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 18.332718883241927 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 18.18967648291252 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 18.04288101196289 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.899997603403378 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.75422730316987 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 17.607714732488 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 17.458693818042153 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 17.316371877472122 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 17.17428211676769 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 17.03203622902496 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.885445952415466 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.742364291791564 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.59905726153676 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 16.456945267068335 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 16.31222112973531 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 16.170477965298822 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 16.030465580696283 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.888424484209084 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.747732682661576 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.604106490531663 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.463133255640667 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 15.322310054695214 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 15.181842731392903 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 15.039443680035172 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.898846002335244 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.755953989530866 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.613088329633076 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.469944784321736 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.328822787927121 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.190628066207422 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.049262285232544 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.90342388766827 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.758999399110383 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.623487514199562 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.481581834646372 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.339186293738228 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.195970134915047 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.057591003792307 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.915760464138454 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.773700390387019 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.631192120638762 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.489477909363067 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.353451371192932 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.21624704588831 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.078768951851025 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.93911778408548 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.799600954713492 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.663049728442461 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.525540311457748 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.387495822265368 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.249433517456055 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.115238776876907 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.97630069685764 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.836590383110977 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.697841736578173 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.559682512283326 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.421304078329177 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.281217837896872 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.14129401743412 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.000974531321562 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.86010037935697 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.719646708655903 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.580906795732902 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.440510825106973 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.301192205343673 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.160057924411914 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.019398857565488 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.879341567519807 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.743300572685573 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.602956042872917 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.463565247399465 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.323641927529733 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.183269967495557 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.041134305767246 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.898664408259922 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.759067995794887 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.61843281902679 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.47677864833754 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.3359698927080315 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.194672878956635 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.052888552347818 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.9106410086549666 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.76855667013871 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.626940808265038 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.486838421264252 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.345197831430744 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.203019496722099 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.061254179401762 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.91991346697264 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.7790102088976205 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.637036681175232 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.495276505902687 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.35400950467145 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.212932978671021 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.0717558453722695 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.930244127909343 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.788454486663083 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.647317352409134 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.506174450828915 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.365192616479637 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.224658727645874 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.084041238528246 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.9427114087481834 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.8011694615975973 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.6598798735388396 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.518630164010184 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.3775526827031914 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.2364066994122864 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.0954698096500355 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.954435604244637 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.813627905315823 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.6726515240432147 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.5318004482395047 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.3911649503343093 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.2506815246913745 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.1102226360424146 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.9693036720316899 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.8283306073377477 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6879729210062229 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.5472508094928883 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.4064759078778717 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2657581049734385 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.1251078248023987 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9843794533625785 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8436480060066145 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7030189587519718 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5623864640994948 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.42179900135485654 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.28119619928225126 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.14059293090398586 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   28.1s finished

    1961 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  9.812 seconds)

**Estimated memory usage:**  1925 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
