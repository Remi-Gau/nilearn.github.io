
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-142

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 143-145

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 145-158

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 159-161

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 161-176

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f55e5e09fd0>



.. GENERATED FROM PYTHON SOURCE LINES 177-179

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 179-223

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 205.34753799438477 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 36.5014226436615 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 34.004035234451294 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 33.11838491757711 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 32.658154010772705 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 32.345430850982666 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 32.045013984044395 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 31.863286801746916 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 31.58932113647461 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 31.402852985594006 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 31.15469741821289 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 30.96586060523987 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 30.743784189224243 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 30.549535714662994 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 30.346527917044504 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 30.15174992879232 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 29.97164249420166 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 29.828313757391538 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 29.66795039176941 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 29.49612835833901 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 29.365774869918823 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 29.211221626826696 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 29.27430402148854 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 29.102977286214415 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 28.90275239944458 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 28.719008445739746 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 28.557452036784245 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 28.37072730064392 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 28.18268200329372 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 28.02845157425979 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 27.894530852635704 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 27.828973647086848 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 27.655827820301056 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 27.463911735650264 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 27.26234114871306 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 27.072348015648977 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 26.909893963072033 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 26.7284229188352 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 26.636199963720223 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 26.448766830639965 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 26.259002685546875 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 26.07238103122246 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 25.885143030257453 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 25.702614645625268 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 25.510619597001508 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 25.324605067571007 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 25.149545109790306 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 24.97613391470402 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 24.79719376564026 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 24.642360784569565 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 24.480156898498535 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 24.32729636921602 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 24.168059459099403 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 23.992829601719695 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 23.818860451380413 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 23.643280397761952 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 23.466429029192245 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 23.299528209786665 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 23.130689744291633 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 22.956500918178232 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 22.79288649559021 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 22.625774520342468 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 22.47633853266316 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 22.32127577161032 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 22.153802782297134 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 21.980678943487316 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 21.808651794086803 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 21.645750761032104 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 21.47399858867421 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 21.312694214392398 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 21.158732107707433 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 20.999992686258235 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 20.842208438449436 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 20.694291591644287 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 20.537762171513325 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 20.384072065353394 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 20.261904666298314 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 20.096847574432175 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 19.93545097571153 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 19.77478675299053 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 19.61158311367035 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 19.454291543842835 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 19.295451472445233 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 19.13566934918783 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 18.975226379576185 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 18.816481365877042 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 18.657982648805127 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 18.49739638690291 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 18.328864097595215 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 18.15826221798243 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 17.99247052934435 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 17.836605360219767 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 17.67443953389707 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 17.51186531077149 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 17.350633357433562 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 17.19348316443594 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 17.03503636519114 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 16.87700977276281 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 16.718665371135792 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 16.557701488937994 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 16.39163613319397 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 16.222413426578633 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 16.054341699562823 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 15.886862023362836 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 15.717442879310022 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 15.548034304664249 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 15.38151893075907 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 15.218206884705017 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 15.055148513228804 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 14.893548182391246 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 14.7267306284471 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 14.563289275040498 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 14.401927743639265 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 14.242565809097965 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 14.078714688618978 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 13.91435021939485 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 13.750453406366809 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 13.584350027589718 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 13.418008477000868 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 13.24996822621642 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 13.082465648651123 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 12.914493958812116 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 12.746558259745115 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 12.58257542586908 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 12.418575948284518 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 12.25246911048889 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 12.084813129334224 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 11.922994016662356 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 11.760150656104088 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 11.593328588692716 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 11.429005549504206 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 11.264072585651892 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 11.100327932473384 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.934529725770306 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.768641162274488 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.603459349385014 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 10.438070521635167 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.278684671777878 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 10.113997124243474 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.948966016014703 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.784825597490583 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.619154316313724 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.453418980182057 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.288149937049493 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.124576515621609 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.960156046111008 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.797155393313055 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.635379333885348 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.472695434415662 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.309671011547115 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.14529784520467 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.981701683524428 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.818290760642603 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.655060740078198 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.491052670912309 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.327169710589994 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.164096471590874 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.000010128993138 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.837642195858532 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.67711426027166 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.517184555530548 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.357750399512534 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.197895232542061 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.036096115053797 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.873976509745528 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.711776104840365 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.5493476333388365 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.386521620664768 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.223746935526529 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.061210836884538 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.898608908933752 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.735926905570671 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.572675333466641 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.410325361814113 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.247494478335326 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.084409747804914 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.9216949289495293 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.758904493461221 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.595677314179667 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.4324885719981273 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.269066598680284 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.1060114552302913 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.9428386635832733 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.7806568028496916 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.6175865919693657 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.45434189487148 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.2909477141595658 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.127829857688537 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.9646362903270314 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.801107159367314 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.637510161650808 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.474178136955381 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.3105653127034504 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.146838198054022 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9829736296663579 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.8191679685543745 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6553849882009077 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4915491578542642 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.327696068118317 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.16385574197050315 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   32.8s finished

    1967 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  15.263 seconds)

**Estimated memory usage:**  1918 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
