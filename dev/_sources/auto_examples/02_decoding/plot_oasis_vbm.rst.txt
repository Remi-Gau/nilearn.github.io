
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f9a847e59a0>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 243.28231811523438 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 45.441919565200806 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 42.31905484199524 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 41.10105045636495 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 40.06159448623657 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 39.76459193229675 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 39.37256995836894 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 39.13751448903765 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 38.88838005065918 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 38.7525868150923 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 38.53998398780823 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 38.28442005677657 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 37.85298824310303 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 37.57182985085708 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 37.2738573891776 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 36.99557161331177 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 36.7625994682312 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 36.56506061553955 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 36.339216232299805 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 36.04537279982316 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 35.868561029434204 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 35.71272202900478 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 35.40768681872975 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 35.17171880473261 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 34.98531325658162 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 34.780200242996216 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 34.610073181299065 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 34.468215262448346 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 34.267350264957976 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 34.04865461382372 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 33.81612904866537 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 33.6041905418519 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 33.38808685541153 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 33.17876185070384 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 32.941024499780994 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 32.703951052257 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 32.46328173743354 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 32.28809427570652 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 32.13593673706055 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 31.990265962405086 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 31.799471855163574 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 31.61938811511528 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 31.475138210114977 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 31.269982759342636 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 31.053692384199664 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 30.81897200478448 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 30.59888175259466 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 30.425863448609697 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 30.25341721375783 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 30.063835946881042 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 29.86435103416443 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 29.66821727098203 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 29.46584444779616 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 29.283163830919086 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 29.09603923338431 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 28.908038811250165 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 28.720596313476566 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 28.554253461068136 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 28.34956041697798 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 28.15905378632626 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 27.94095492362976 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 27.730698010960566 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 27.530380079823153 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 27.33208492067125 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 27.129857182502747 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 26.913880788362945 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 26.71524859197212 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 26.500621607054526 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 26.29704531501321 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 26.123306101646975 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 25.926432541438512 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 25.731948761872843 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 25.533477783203125 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 25.33075471446939 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 25.139487311646743 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 24.945565859476726 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 24.758577158576564 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 24.56515500142977 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 24.382241823734383 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 24.178717658489564 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 23.98159432411194 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 23.784514665603638 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 23.58942712807074 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 23.39070008461734 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 23.19252245766776 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 22.988510187934427 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 22.787224647610685 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 22.59532689226085 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 22.39159939505837 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 22.192620221148715 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 21.993373844358658 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 21.783372260712003 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 21.586288939351622 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 21.382039472620978 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 21.17908571628814 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 20.970948231847665 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 20.759897927443184 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 20.548381301545604 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 20.33682985695041 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 20.148757122983834 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 19.94736409187317 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 19.750165707994213 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 19.55777331427032 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 19.351826973331786 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 19.150934292719917 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 18.953381606510707 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 18.755291731852406 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 18.55298808801954 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 18.354211224450005 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 18.153997281275757 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 17.951778758655895 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 17.75429758939657 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 17.55439579486847 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 17.351406869635117 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 17.149393399556477 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 16.943250386611275 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 16.74343590900816 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 16.547051482730442 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 16.357142476712244 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 16.157800858762084 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 15.96304702758789 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 15.764933649173454 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 15.569147305410418 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 15.366837811663867 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 15.166837353860178 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 14.96726517677307 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 14.769946760601469 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 14.568151772491575 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 14.368706747889519 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 14.1740697261899 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 13.975024461746216 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 13.775297330536004 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 13.579125028668027 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 13.383353676114764 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 13.183934724152977 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 12.98496506832264 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 12.784871718462776 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 12.58534169719167 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 12.382965364317963 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 12.183551347512992 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 11.980313198907034 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 11.78174204691082 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 11.58575321251238 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 11.385998510814213 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 11.187297105789185 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 10.983696082542682 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.784701902572422 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 10.589009218475447 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 10.388608764957738 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 10.18445870540286 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.983839750289917 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.78195386375023 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 9.582105009179365 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 9.382334043777067 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 9.184966728284762 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.983560515988259 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.782373354985163 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.582596637640789 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 8.382468920719774 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 8.183023728664566 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.985028505325317 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.786303175162085 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.586853819128907 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.388675353278411 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 7.189902846406146 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.989969983245388 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.790117243686354 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.590749119570155 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.39111954825265 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 6.192830613378942 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.992078164044549 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.792454863152308 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.591854938240939 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.39472307221738 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.19444080604904 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.994358267102922 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.795079079541293 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.5950537495693915 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.3960472814152745 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.196045972781475 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.9978218873341875 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.798034255675848 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.598016424493475 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.398563084055166 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.1985414753789487 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.9985442225997514 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.7986320552005566 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.5983649600635874 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.3985195058457394 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.1984618328235768 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.9980297465073433 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.7977768750715006 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.598143974939982 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.3981829121940492 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.1985077022277204 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.9988222733522073 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.7990513723723742 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5992500140582244 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3994941037110608 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.19971609115600586 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   39.9s finished

    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  29.426 seconds)

**Estimated memory usage:**  1927 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
