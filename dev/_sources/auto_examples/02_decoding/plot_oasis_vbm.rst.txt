
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f4f35cbbf40>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 210.72864532470703 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 36.74386811256409 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 34.029999017715454 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 32.978559811909996 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 32.47768259048462 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 32.07265520095825 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 31.748962640762333 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 31.56150211606707 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 31.444896697998047 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 31.187367412779064 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 30.936516761779785 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 30.71817196499218 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 30.519659519195557 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 30.38731754743136 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 30.460173674992156 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 30.359175443649292 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 30.244189739227295 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 30.05853190141566 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 29.888773202896118 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 29.69233943286695 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 29.522351503372192 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 29.35739619391305 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 29.20435957475142 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 29.028620730275694 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 28.86062987645467 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 28.733391284942627 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 28.565366066419163 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 28.41570727913468 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 28.2755036013467 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 28.10897008303938 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 27.944630066553753 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 27.769883694187286 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 27.818604826927185 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 28.30084321715615 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 28.12820454204784 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 27.934950317655293 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 27.7729734049903 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 27.560241609006315 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 27.367944303311802 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 27.194487700095547 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 27.014528274536133 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 26.801983856573337 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 26.616554453259422 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 26.41577590343564 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 26.220634590495717 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 26.048731830384998 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 25.864518372908883 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 25.685082344298667 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 25.52206250031789 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 25.353990734839925 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 25.189114093780518 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 25.064452087177948 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 24.902623359973614 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 24.89981672448932 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 24.73421118877552 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 24.55344002897089 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 24.386862005506245 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 24.21909515481246 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 24.04878443685071 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 23.86326589422711 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 23.688809871673584 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 23.513046405354483 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 23.339289711367698 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 23.16445099739801 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 22.983814537525177 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 22.814559569725624 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 22.64778772989909 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 22.4863921243753 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 22.34266439606162 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 22.18418940944948 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 22.013434103557042 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 21.838570530985443 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 21.660909440782333 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 21.479993888776598 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 21.300033794867026 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 21.128043731053673 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 20.94818595836037 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 20.77385572644023 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 20.59959746018434 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 20.425027977062175 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 20.261001348495483 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 20.101207362280952 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 19.955815268725882 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 19.81278522043343 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 19.64475503421965 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 19.488773752661313 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 19.34055164802906 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 19.18665701767494 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 19.022414077411998 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 18.848433984799332 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 18.678250100877552 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 18.513675522018264 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 18.341551376425702 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 18.167964922484533 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 17.994523322328607 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 17.81930900874891 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 17.638617734114327 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 17.461428317827046 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 17.297926513516174 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 17.137057130986992 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 16.981590747833252 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 16.82159140794584 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 16.65854601766549 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 16.48773560477692 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 16.320729622474083 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 16.159233899343583 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 16.01060690519945 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 15.85478729176744 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 15.690202315648397 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 15.532123248511498 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 15.366332726045089 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 15.194980335665178 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 15.023749675069537 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 14.852564113329997 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 14.691279177080121 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 14.523007859354433 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 14.351156349839835 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 14.176568387920021 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 14.004158488774705 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 13.834674284237774 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 13.66414992014567 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 13.495079007030519 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 13.319712169834826 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 13.147677136630547 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 12.975556173632222 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 12.8053457736969 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 12.634905122575306 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 12.462913913050974 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 12.295899912714958 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 12.122962014619693 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 11.94867390852708 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 11.77339553287011 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 11.599142074584961 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 11.425012891453909 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 11.249972126377163 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 11.073838746106183 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 10.899183722103343 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.723693845915967 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 10.548495140628539 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 10.37337435921319 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 10.202340807233538 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 10.02836428466418 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.855110285987317 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.6829431340411 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.514373858769735 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 9.350786365311722 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 9.188991474778684 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 9.029304053507694 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.867969390508291 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.702648801291549 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.532765229543049 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 8.363207831288015 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 8.19300217377512 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 8.022988473667818 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.851728786121715 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.680239023700838 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.510960915149786 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.3404107093811035 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 7.16880340214017 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.997344193968383 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.825885117053986 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.655315960416143 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.483215329087811 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.311557126191496 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.141879733015851 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.974941795522517 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.806073016430958 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.641197737105593 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.471730640956333 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.30619767995981 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.134254918378942 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.96179043061552 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.790192110593929 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.619108821615319 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.447978433521315 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.2765121800558905 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.104976188052784 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.9337048732628257 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.762618046128348 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.591182869905866 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.420134358935886 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.2489446368665327 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.0777667459550795 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.906627355377531 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.7356514930725098 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.5647476106076628 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.3936354370527373 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.2223077470606025 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.0512570624655866 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.8803722543060464 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.7094415614479466 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.5387477887238508 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.3676380415757496 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.196929914346013 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.0260114006160461 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.8550911866701566 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6842945789804263 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5132066332144181 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.34215022096730247 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1710719031904211 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   34.2s finished

    1968 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  19.480 seconds)

**Estimated memory usage:**  1856 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
