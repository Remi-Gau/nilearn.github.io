
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f8a8d39c430>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 153.80144119262695 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 25.924015522003174 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 24.388064861297607 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 23.623976866404217 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 23.347999334335327 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 22.937776565551758 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 22.707594394683838 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 22.48183172089713 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 22.312162399291992 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 22.21591591835022 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 22.101482152938843 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 21.980654499747537 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 21.82675019900004 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 21.714890828499428 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 21.60154734339033 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 21.469850778579712 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 21.322421312332153 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 21.191356743083283 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 21.048255072699654 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 20.92331085707012 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 20.8990581035614 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 20.76453743662153 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 20.649522369558163 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 20.526739535124406 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 20.4243532816569 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 20.32257628440857 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 20.208546473429752 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 20.091999106936985 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 19.98182102612087 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 19.859461266418982 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 19.733232180277508 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 19.61220388258657 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 19.50019097328186 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 19.385728388121635 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 19.290042484507843 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 19.17581401552473 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 19.06151435110304 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 18.94866904052528 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 18.838754089255083 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 18.723730466304684 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 18.608078002929688 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 18.48670276199899 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 18.363557838258288 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 18.24799420667249 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 18.129864822734486 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 18.013642999860977 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 17.916078992511917 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 17.802792031714258 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 17.690988540649414 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 17.57943931404425 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 17.46044111251831 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 17.3452931432163 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 17.23218736281762 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 17.118143954367007 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 17.000695793716996 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 16.88331621343439 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 16.765573842184885 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 16.641651739153943 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 16.524258021650642 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 16.401856705293817 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 16.276636997858684 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 16.161198440145274 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 16.03495802417878 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.908109960101898 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 15.78541848063469 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.658929843168993 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 15.532474279403687 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.41058775204331 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 15.289902574875775 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 15.169564703236455 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 15.046270779200963 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.924760224114001 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.798717074924044 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.681469362076015 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.563998041926203 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 14.441065788269043 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.324815373671681 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 14.20831222967668 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 14.09225121522561 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.971910042098806 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.857294201850891 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.741230211140198 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.625404009004917 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.50801131236984 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.387325423104421 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.269624275319718 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 13.15244695752166 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 13.037602084806597 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.920602798461914 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.80304327707612 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.688050084643894 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.573202277277852 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.457549810409548 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.341128959450671 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.222225701555292 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 12.105649145025957 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.987261354923248 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.871966718398419 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.761928937873062 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.647277776641074 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.533036708831787 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.416837543544203 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.30483474450953 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.190847158432007 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 11.07713083120493 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.960877055213565 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.845184384651905 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.72906306302436 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.6128829408575 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.496064693555919 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.38176347992637 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.266760718715084 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.151203649384634 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 10.035436195609844 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.920361845116867 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.803996272709059 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.689419491537686 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.57346055446527 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.457085932715465 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.341730558571696 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.224344094594318 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.109561214762286 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.99386115934028 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.879074494043985 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.762516490874752 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.64702386856079 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.532823994046167 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.418259898508627 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.303152039647102 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.186872996101084 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 8.072214254966148 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.9558780830325055 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.840749899546305 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.725929640289537 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.6109222013558915 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.495587569695932 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.379667955286362 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.265513602834548 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.150667902352153 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.035786639014594 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.9201994964054645 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.805342202490949 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.689853480164434 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.574320666439883 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.458069576157464 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.3425685372845875 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.226757252053038 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.111830785971921 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.995690455307832 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.882710535254255 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.769167820612589 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.653484055538051 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.538243469439054 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.422537912730299 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.307209200673289 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.192003903850432 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.076856839351165 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.961906739860583 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.846670413319068 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.73186297536646 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.616912007331848 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.5018637787481275 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.387127890998935 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.271690011755821 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.156227838702319 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.0402290676579335 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.92545964057187 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.8105200707555533 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.695444788251604 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.5804856585327687 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.4648942666895253 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.3495243752908985 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.234193003454874 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.118986765084239 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.003612923896176 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.8880706174033026 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.772540255026384 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.657073927464458 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.5415118812175277 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.4260071669210936 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.3105170991685653 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.1949266096505013 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.079438552751646 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.9639201177273944 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.8483727289282756 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.7329753025158032 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.6174134310855661 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.5019147957072538 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3863293211510839 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2707247090718101 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.1551786723889803 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.0396057448462042 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9240707953770955 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.8085369359643965 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6930505639498996 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5775623688331017 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4620418548583984 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3465144246967916 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.23101042978691333 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11550720972032404 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   23.1s finished

    1973 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  0.589 seconds)

**Estimated memory usage:**  1917 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
