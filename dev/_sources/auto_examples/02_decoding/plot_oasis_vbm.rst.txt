
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (:term:`VBM`)
to study the relationship between aging and gray matter density.

The data come from the `OASIS <https://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard :term:`VBM` pipeline (using SPM8 and
NewSegment) to create :term:`VBM` maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the :term:`ANOVA` step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the :term:`ANOVA` step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

:term:`SVM` weights are very noisy,
partly because heavy smoothing is detrimental for the prediction here.
A standard analysis using mass-univariate :term:`GLM`
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 112-123

Prediction pipeline with :term:`ANOVA` and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

In nilearn we can benefit from the built-in DecoderRegressor object to
do :term:`ANOVA` with SVR instead of manually defining the whole pipeline.
This estimator also uses Cross Validation to select best models and ensemble
them. Furthermore, you can pass ``n_jobs=<some_high_value>`` to the
DecoderRegressor class to take advantage of a multi-core system.
To save time (because these are anat images with many voxels), we include
only the 1-percent voxels most correlated with the age variable to fit. We
also want to set mask hyperparameter to be the mask we just obtained above.

.. GENERATED FROM PYTHON SOURCE LINES 123-149

.. code-block:: default


    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 150-152

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 152-165

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-183

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fcb0f2bf3a0>



.. GENERATED FROM PYTHON SOURCE LINES 184-186

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 186-231

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 127.64453887939453 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 19.55970335006714 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 17.991037130355835 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 17.411317745844524 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 17.418155670166016 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 17.153446912765503 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 16.948754390080772 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 16.783879961286274 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 16.61700439453125 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 16.763389163547092 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 16.681248426437378 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 16.536284988576718 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 16.396197080612183 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 16.28504065366892 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 16.166186673300608 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 16.048049926757812 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 15.936731576919556 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 15.829440888236553 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 15.737194299697876 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 15.630558628784984 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 15.532912731170654 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 15.605543375015259 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 15.500622272491457 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 15.399115033771682 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 15.304335435231526 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 15.20790147781372 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 15.107978307283842 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 15.01023006439209 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 14.916327408381871 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 14.816270211647296 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 14.719772418340048 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 14.62435911547753 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 14.531223356723785 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 14.541452985821348 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 14.447454438490027 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 14.352932248796735 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 14.257893429862127 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 14.164316995723826 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 14.068656657871449 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 13.97359538689638 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 13.88181209564209 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 13.788926804937967 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 13.69597063745771 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 13.602380381074061 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 13.508649067445235 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 13.474448839823406 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 13.38160721115444 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 13.289746451885142 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 13.195374846458435 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 13.100827640416671 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 13.0067617893219 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 12.914429935754514 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 12.825203638810379 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 12.734156073264357 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 12.64674621158176 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 12.55704402923584 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 12.467772551945279 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 12.42156618101555 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 12.554407859670704 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 12.463072445433017 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 12.37192702293396 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 12.28199230647478 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 12.190336496599258 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 12.098628063050526 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 12.005739003419876 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 11.909832991086521 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 11.814763676036488 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 11.720607640138313 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 11.696269217659445 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 11.650819322337275 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 11.564587082181658 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 11.476644787989871 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 11.388498094346788 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 11.301308478394601 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 11.21075067004642 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 11.121509869893393 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 11.030704460645977 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 10.940404312951223 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 10.850902991417128 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 10.788651617267464 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 10.69918692111969 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 10.608526235745277 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 10.51870451322416 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 10.427964595426996 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 10.338510570071993 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 10.251046138651231 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 10.162806289140567 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 10.071477426879708 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 9.982694799249822 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 9.892615821924101 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 9.829549153645834 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 9.740721343637823 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 9.652164241541987 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 9.563470476417132 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 9.473731051100062 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 9.384321137478478 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 9.296189069747925 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 9.206209752977509 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 9.116096603627108 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 9.024223961011327 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 8.935035228729248 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 8.865896071537886 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 8.774848077811447 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 8.686396457616565 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 8.598034858703613 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 8.506960959661575 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 8.413491982334065 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 8.320472409792036 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 8.227046869419238 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 8.133281594022698 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 8.04008343003013 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 7.94680295334206 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 7.853731785501752 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 7.77408364388795 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 7.681804431112189 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 7.589238612548164 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 7.501580986483344 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 7.409167864383796 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 7.316867452556805 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 7.225149513292713 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 7.13336165746053 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 7.041341732356174 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 6.9493670424477 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 6.857607186325197 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 6.822554765209075 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 6.733076906204223 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 6.641279353035821 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 6.548567629235936 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 6.456212282180786 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 6.364122708638509 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 6.271968933252188 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 6.180089388184875 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 6.088360208453554 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 5.996248058806685 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 5.912091899274 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 5.841656464117544 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 5.750870424158433 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 5.658933241001881 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 5.566796859105428 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 5.474795621076076 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 5.3831727504730225 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 5.291351575377985 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 5.199697739641431 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 5.108282504381833 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 5.016854458385044 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 4.925421838102669 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 4.834503297936426 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 4.750612919022437 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 4.658828026539571 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 4.567565543539573 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 4.476267019907633 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 4.385106476726911 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 4.29426067753842 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 4.203410835827098 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 4.112420527965991 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.021572474510439 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 3.93089230855306 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 3.840395196987565 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 3.7498345405240596 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 3.664188025132665 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 3.573306918144226 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 3.4826793877974804 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 3.392289308854091 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 3.3019278795441234 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.2117786058565465 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.121776400190411 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.0318058542458406 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 2.941550830167211 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 2.8515649068923223 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 2.761660599849633 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 2.671842603122487 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 2.585702601929157 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 2.4956829159758813 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.4058748807521226 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.3160948040841642 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.2264064039502824 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.136712464419278 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.04711726560431 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 1.9574868545103608 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 1.8678768839916038 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 1.7783340083228216 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 1.6889696015837443 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.5996194671798538 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.511973050122704 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.4226283197817595 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.3333322679674304 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.2440846709794897 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.154927195074724 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.06581645316266 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 0.9767472024947877 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 0.88774962174265 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.7987721915020368 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.7100304861863453 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.6211483453839554 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.5323598016168654 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.44411662908700794 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.3552483393221485 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.2664242952608215 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.17761322464605775 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.08880227654423546 seconds remaining)
    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 47.639 seconds)

**Estimated memory usage:**  2410 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
