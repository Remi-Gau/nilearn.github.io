
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f34a0164370>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 177.6742935180664 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 30.03590965270996 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 30.8211350440979 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 29.42797907193502 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 28.31630229949951 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 27.59339189529419 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 27.106651862462364 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.650120530809676 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.300325393676758 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 26.006626314587063 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 25.74749183654785 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.532707214355472 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.33489163716634 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.121362594457775 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 24.945604971476964 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 24.789252996444702 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 24.641118049621582 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 24.497678476221424 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.330186552471584 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.184867708306566 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.030202388763428 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 23.89683274995713 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 23.75238295034929 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 23.603425057038017 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 23.46427869796753 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.321710348129272 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.209615120520958 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.05845343625104 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 22.913919074194773 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 22.778215737178407 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 22.6419575214386 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 22.49985457235767 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 22.366717278957367 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.22752811691978 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.09583816808813 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 21.955388750348774 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 21.812316550148857 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 21.667318241016286 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 21.531301184704432 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 21.39382024911734 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.253649711608887 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.124914372839577 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 20.982208070300874 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 20.847687882046365 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 20.714223406531595 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 20.578246778912014 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 20.45644624336906 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.326657351027144 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.197003841400146 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.08131296294076 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 19.953858375549316 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 19.844810682184555 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 19.711435868189884 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 19.579571080657672 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.447254913824576 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.314629121260207 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.19062123979841 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.05542382859347 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 18.92261579118926 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 18.787261162774037 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 18.655700127283733 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.519965597840606 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.38890251805705 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.251014391581215 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.112942039966583 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 17.979905385237476 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 17.84857765833537 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 17.71287551566736 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.57519451309653 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.437526975852855 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.29973479679653 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.161390019134735 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.024756537543404 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 16.889043246230035 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 16.754293229128862 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.61648233731588 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.481641418055485 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.352233329376617 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.218830151435657 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.084054681319223 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 15.950588464736938 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 15.825782466817786 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 15.695044564037788 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.559177464749439 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.427818162100655 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.294954931034763 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.163471133209937 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.031924962997438 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 14.902849890969016 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 14.768901144520619 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.63474112086826 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.50206521317199 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.371030724566918 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.235118160965623 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.107651730801196 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 13.972296463815791 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 13.839709480603535 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.707079061527843 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.572203913513496 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.441536149593313 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.305690050125122 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.174492658955035 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.038576322443346 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 12.903894530916677 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 12.768636703491211 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.633494467962356 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.498629250616398 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.365015457723743 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.229244241008052 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.09423575707532 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 11.9653734293851 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 11.834462301151174 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.700007200241089 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.566732235714397 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.434075598131146 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.299757791602092 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.166581079877655 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.032507170978775 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 10.899947522050244 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.765117593172217 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.631072044372559 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.497207746032842 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.362902266080264 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.22958862296934 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.096085409964285 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 9.963081979751587 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.829613450973753 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.697291000621526 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.563501939177513 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.433200329773186 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.29972925552955 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.16696664577222 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.03462317495635 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 8.902252294067154 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.76884140897153 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.636755448800546 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.503900752348057 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.373836042237107 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.244139014810756 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.11437932878947 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.980826377868652 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.848512627554278 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.715977215431106 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.582887396112189 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.449992961353726 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.316651911571108 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.1852934229863825 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.051184555300239 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.917553579485094 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.786255982098163 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.652758280436197 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.519066161667274 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.386228084564209 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.253100800358393 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.12045812297177 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.9878874440347 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.85570013217437 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.722791618602291 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.589386601991291 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.4560312415069 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.322413384914398 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.189259345487038 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.055677202012803 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.922450760390861 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.788821575118274 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.655060421336781 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.521489077303783 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.388671005557398 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.255329449971517 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.122084393303775 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.9888728225932404 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.8556901195593047 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.722699037818022 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.589440508384925 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.4562358417730223 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.3232582637241905 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.1900437745180996 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.057531333912564 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.9243040620610956 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.7913069405369253 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.658110009299384 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.525001760345796 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.3918536285777665 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.2589755670620444 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.126305206962254 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.9933099682266648 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.8603099597397672 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7273088355752875 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.5943150215960562 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.461336024854549 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3284061456981457 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.1953988811732588 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.062470018863678 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.929579322202218 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.7967060742918979 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6638755492674998 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5310862745557512 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.39826367107139626 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2655005069694134 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13274178672675513 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   26.5s finished

    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  5.947 seconds)

**Estimated memory usage:**  1913 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
