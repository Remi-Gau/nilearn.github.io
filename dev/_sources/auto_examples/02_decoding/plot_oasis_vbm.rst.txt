
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f7ef17373a0>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 195.40786743164062 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 30.093318462371826 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 28.198958158493042 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.333201408386234 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 26.802085399627686 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 26.46531915664673 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.244245449701946 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.03816332135882 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 25.831003189086914 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 25.671497371461655 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 25.514507293701172 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.439225890419703 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.259634335835774 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.074552536010742 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 24.886720010212493 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 24.725605964660645 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 24.56746470928192 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 24.447613646002377 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.307895024617512 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.184690550753945 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.05155920982361 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 23.909711020333425 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 23.76379505070773 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 23.63472834877346 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 23.51768366495768 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.383692741394043 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.250423431396484 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.119265927208794 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 22.976901497159687 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 22.851252325649916 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 22.86717971165975 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 22.73001190154783 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 22.61530691385269 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.4904228701736 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.359852580463187 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.229598896844045 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.09688345591227 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 21.954246475889875 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 21.821740037516545 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 21.687014757058563 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.55954074859619 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.452936166670263 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.31572958401271 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.180394039597623 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.03523960980502 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 20.895235061645508 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 20.7590026544488 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.61361769412426 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.471256256103516 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.330289952609004 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.187270641326904 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.047455610013476 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 19.913014320226818 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 19.772196279381806 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.629079668610185 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.48352016102184 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.350676468440465 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.214924460963196 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.082662705717414 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 18.94371534202058 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 18.80252035458883 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.662254329587594 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.525745199572654 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.39231032038492 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.286511152982712 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.148571106103752 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.040228923161823 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 17.900409349754675 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.762674317640418 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.623200741367064 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.482089110783168 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.341164884432942 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.20545450846354 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.070999841167502 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 16.934152422724544 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.800037225087486 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.662029856129696 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.523165870022464 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.385192137498123 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.250090701670587 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.114456057548523 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 15.979920911200253 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 15.846956648477693 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.715593320777618 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.57994304384504 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.446187888874729 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.312787022701528 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.175470993436617 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.040799704464998 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 14.904217805755271 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.769847207599216 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.6339227105235 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.499289761418883 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.364127312937091 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.229785832952945 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.096147850940103 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 13.964900056521097 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.831611475993677 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.69703549754863 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.561812752425068 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.426362037658691 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.293847773334768 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.158951764013253 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.025679891549268 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 12.8898679293119 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.755176555542718 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.618592748102152 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.48537363293015 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.353270283451787 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.222839235165797 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.111664425243031 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 11.988518860963014 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.854140656335012 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.71842171027597 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.581676863787468 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.446406747983849 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.314807620541803 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.17837743066315 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.042864197391575 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.907192194161295 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.772690931955973 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.63760698728325 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.50056944909643 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.36581624620329 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.230055993603122 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.094068479537963 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.958147143560742 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.822201993521743 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.686958387494087 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.552678926970607 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.417709002128014 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.28312770464948 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.148626392537897 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.01383748269619 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.878963196455542 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.744459090409455 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.61016150081859 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.475195366100673 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.341752812482309 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.207631627432734 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.073482547487531 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.938532699084451 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.80484649161218 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.669608467942351 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.534759865866767 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.401546519378136 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.266987718947946 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.1325921006754145 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.99770220550331 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.8620093700869775 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.7267827192942296 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.592001698664482 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.457551429146214 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.323008967380898 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.187942062105451 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.05304124278407 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.918695559868445 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.784351280540418 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.649695861188671 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.514754388317372 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.379462122917175 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.244189342356617 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.109579056869318 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.975079159063795 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.840555499239666 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.705754980896459 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.571119187826134 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.436061764905553 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.3012147176833375 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.166797086331971 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.032474139157464 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.8981200867926167 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.7641297994658007 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.6301322548375654 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.4957038808143004 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.361115115029471 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.2264866720546372 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.0920281517977095 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.9571993297405457 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.8222730146440047 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.6877916653951006 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.5534239618817747 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.4188776330633477 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.2842357588596034 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.1497508961221445 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.0154397680952743 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.881150302066598 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7468291846188633 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6124349908625826 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.4779583411241966 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3444029657464278 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2098680478740114 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0754449864228566 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9409389508202903 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8064856332601961 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6720404686071934 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5376306358648806 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.40329145053921617 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2688436243269179 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13441708339518638 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   26.9s finished

    1976 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  7.807 seconds)

**Estimated memory usage:**  1858 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
