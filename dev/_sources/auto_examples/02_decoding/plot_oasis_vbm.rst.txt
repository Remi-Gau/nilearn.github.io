
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7feff44a4070>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 210.97421646118164 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 37.340540170669556 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 34.36441254615784 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 33.304552237192794 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 32.746193408966064 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 32.63114047050476 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 32.367182970047 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 32.304949862616404 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 32.29804801940918 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 32.06129124429491 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 31.717145442962646 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 31.396845557472925 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 31.149847904841103 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 31.03417706489563 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 30.914693355560303 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 30.655477444330852 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 30.47784161567688 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 30.298502767787262 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 30.054013040330673 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 29.896195537165593 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 29.737050533294678 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 29.564161834262666 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 29.36187009377913 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 29.167181968688965 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 28.98886998494466 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 28.86215591430664 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 28.701027851838333 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 28.545714448999476 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 28.42855569294521 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 28.232352881596004 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 28.022759278615318 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 27.83167586018962 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 27.66331547498703 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 27.471347657116976 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 27.277124503079584 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 27.092682940619333 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 26.910016695658364 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 26.739721323992754 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 26.63063000377856 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 26.513178501373684 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 26.343137741088867 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 26.20809920241193 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 26.04384282657078 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 25.887965191242305 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 25.724187742580067 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 25.550454404619007 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 25.365176097206447 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 25.189128429331678 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 25.006127278010048 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 24.825351238250732 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 24.662891149520874 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 24.49424975526099 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 24.308532824883095 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 24.1411910911776 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 23.981239159901936 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 23.80686703595248 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 23.629843303135466 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 23.463110534768354 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 23.315116076633846 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 23.161068459688604 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 23.016430775324505 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 22.862946310981375 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 22.704645464497226 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 22.530466870656088 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 22.354164510965347 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 22.184570569258472 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 22.011923934474137 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 21.860899459070232 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 21.706010678235224 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 21.56404202917348 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 21.39677098819188 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 21.24075409392236 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 21.075369940863713 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 20.908234592986435 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 20.76477964504345 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 20.60823996861776 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 20.44006764261346 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 20.27665469243929 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 20.102299983684834 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 19.93088167528563 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 19.769213318824768 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 19.601742647312307 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 19.435967817539122 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 19.27116599140397 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 19.09979282106672 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 18.941560969633215 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 18.789238247760505 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 18.62299982158617 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 18.45490563999523 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 18.286538142836495 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 18.12452390458849 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 17.956563952204945 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 17.785748875659447 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 17.613792155378608 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 17.447107401299984 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 17.27669153715435 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 17.10928064584732 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 16.94382334984455 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 16.784384163058533 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 16.62789622460953 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 16.47380518913269 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 16.30611472790784 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 16.135996262232464 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 15.967667044945134 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 15.801283616286058 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 15.637659424827213 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 15.470926883085719 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 15.304287992905234 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 15.136023689199376 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 14.97006074004217 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 14.802329908717763 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 14.636346973814407 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 14.47038652215685 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 14.304199054177882 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 14.137767641167892 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 13.971048023389733 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 13.804438862307318 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 13.63779062491197 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 13.473075111033554 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 13.308762265854524 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 13.148698806762695 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 12.986537158981829 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 12.82486478617934 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 12.66198223586974 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 12.4952958168522 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 12.328360748291015 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 12.164523249580746 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 12.001336583941 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 11.839487984776497 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 11.680801724278648 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 11.52376470198998 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 11.357080597913901 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 11.190393939162746 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 11.023917237618813 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.858747468065859 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.698207669787935 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 10.536281810087315 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.37093945837369 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 10.206591485203177 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 10.039882874317307 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.873987334115164 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.712041300239292 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.547968270073474 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.383750128579306 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.219722774293688 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 9.054006395668818 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.891842544895328 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.730032179631344 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.565695517771953 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.400530634310421 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.235896190007526 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 8.069842278562634 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.904606317218981 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.73993712313035 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.574887077529708 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.410095445571407 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.244805305432051 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.079547617845474 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.914019068585166 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.750893492368782 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.589910447597504 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.427002703921396 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.262240754233466 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.097647367079565 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.932672035403368 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.767967715407863 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.604367850774742 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.440180435865939 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.275053523835681 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.109900224843674 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.944395878735711 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.779074285462586 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.613914556281512 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.449112820487491 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.284455033554428 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.119163240705217 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.954128720543601 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.789065311184037 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.6240620854195584 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.4591484709158955 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.294687218136257 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.1302748595812044 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.9660104264269815 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.8026025647022688 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.6381402015686035 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.473335027694702 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.3143744494325373 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.1581307273497554 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.0002424970586246 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.8429078235828056 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.6824548997377093 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.5214580840465286 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.3580684065818787 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.1929697768058183 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.0260254034062022 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.8577770392100016 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6861371653420584 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5144801224548805 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3429652633089008 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1715037846685055 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   34.3s finished

    1989 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  15.773 seconds)

**Estimated memory usage:**  1891 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
