
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-90

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 148-150

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 150-163

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-166

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f23ef888220>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-229

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 155.2414894104004 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 26.183161735534668 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 27.13002920150757 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 25.27458945910136 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 24.222365140914917 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 23.57901692390442 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 23.177534659703575 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 22.82699520247323 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 22.548471450805664 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 22.30126921335856 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 22.271156072616577 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 22.04215882041238 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 21.83437752723694 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 21.631898916684666 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 21.4639801638467 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 21.30646800994873 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 21.142322540283203 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 20.97745131043827 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 20.82812653647529 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 20.66622799321225 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 20.614055156707764 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 20.478797129222325 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 20.329044125296853 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 20.188792052476302 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 20.05631446838379 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 19.899115324020386 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 19.75012471125676 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 19.603395612151534 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 19.46329689025879 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 19.382675121570454 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 19.239459991455078 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 19.104286601466516 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 18.980431079864502 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 18.86224458434365 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 18.73018405016731 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 18.60944049698966 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 18.48399888144599 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 18.368878203469354 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 18.289341575221012 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 18.165199402051098 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 18.047642707824707 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 17.919488162529177 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 17.7974017120543 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 17.676216025685154 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 17.54910922050476 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 17.42597007751465 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 17.3075052447941 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 17.22156409507102 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 17.10513953367869 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 16.99876117706299 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 16.892078161239624 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 16.80287922597399 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 16.69522003027109 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 16.58468548306879 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 16.467103039776838 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 16.359822251579978 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 16.279699189322336 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 16.164409520333272 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 16.050538137041286 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 15.9351972038463 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 15.824135541915895 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 15.713156754853296 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.59915558753475 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.482804169730533 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 15.370475172996521 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.279942127374504 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 15.166488582437688 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.05263951999038 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 14.934633325127994 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 14.822531254395194 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 14.702090638024467 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.586679911949265 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.474735260009766 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.35813563817168 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.267549514770508 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 14.151836236317953 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.03739743483694 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.926246002122953 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.809716976605928 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.693163084078439 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.574546456336975 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.459545415124776 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.346466570365719 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.245805616838386 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.130366393498011 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.01647100729101 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.900001420531162 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.78489796046553 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.667761412533846 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.552576469571402 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.438782903883194 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.325012175591437 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.222337805706523 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.108086539853005 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.992754469526574 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.879160140690052 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.763773540655771 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.64578354973154 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.52976207830468 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.412559538176565 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.29780912399292 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.193355506009395 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.077662603527893 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.961003310472062 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.845071059006912 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.730779818126134 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.61659203385407 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.502753106233115 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.387340739921287 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.274133789429971 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.16825632615523 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.056351365269842 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.944229773112706 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.83031976328487 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.717746015180621 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.605442233707594 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.494121181553808 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.380283700095283 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.267735747967736 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.160879762232804 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.05141766866048 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.938517006960783 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.826088440222819 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.711592356363932 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.598301749075613 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.48234052658081 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.368513008904836 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.25975701564879 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.145993769168854 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.031603558118952 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.917506878192608 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.806817897403513 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.694723627784035 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.581031482022508 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.47082533765195 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.369069514451203 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.259705375222599 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.145773402095711 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.031208629193514 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.919884304348513 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.806096383503505 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.692521213639712 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.578771315829854 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.466306946494362 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.355185508728027 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.24429701936656 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.129312818997526 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.014994115245586 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.9008673977207495 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.786359620574337 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.672975063323975 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.559983122427732 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.446790193256579 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.333981894200145 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.224212934444477 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.110776232134912 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.996972915453789 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.885380073717445 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.7723432190810575 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.6592131125852 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.54638808965683 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.433573648796319 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.323155055811376 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.210173125647328 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.096894078138398 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.9834720943913315 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.869803279279226 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.756046960453787 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.64236763545445 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.5286732552319586 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.415447754018447 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.30357963997021 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.1897190836972973 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.075901979655889 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.964567050166514 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.856846979686192 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.7422800280831074 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.6276889345740195 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.513413740008065 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.4003112569201592 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.2860543727874756 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.1718109602427615 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.057842419697688 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.943335649094295 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.8286962509155273 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.7141845290725297 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.5999982715934835 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.485874572539712 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3736271858215332 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2600253435669753 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.1452474092182359 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.0306256641268106 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9160305261611938 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.8014110283530437 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6867433724944125 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5722831946152906 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.45779842746501065 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3434982602366336 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.22897919500717012 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11447928179448573 seconds remaining)
    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 0.227 seconds)

**Estimated memory usage:**  1820 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
