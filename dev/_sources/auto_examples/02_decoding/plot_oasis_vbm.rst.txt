
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (:term:`VBM`)
to study the relationship between aging and gray matter density.

The data come from the `OASIS <https://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard :term:`VBM` pipeline (using SPM8 and
NewSegment) to create :term:`VBM` maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the :term:`ANOVA` step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the :term:`ANOVA` step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

:term:`SVM` weights are very noisy,
partly because heavy smoothing is detrimental for the prediction here.
A standard analysis using mass-univariate :term:`GLM`
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 112-123

Prediction pipeline with :term:`ANOVA` and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

In nilearn we can benefit from the built-in DecoderRegressor object to
do :term:`ANOVA` with SVR instead of manually defining the whole pipeline.
This estimator also uses Cross Validation to select best models and ensemble
them. Furthermore, you can pass ``n_jobs=<some_high_value>`` to the
DecoderRegressor class to take advantage of a multi-core system.
To save time (because these are anat images with many voxels), we include
only the 1-percent voxels most correlated with the age variable to fit. We
also want to set mask hyperparameter to be the mask we just obtained above.

.. GENERATED FROM PYTHON SOURCE LINES 123-149

.. code-block:: default


    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 150-152

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 152-165

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-183

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fd18042faf0>



.. GENERATED FROM PYTHON SOURCE LINES 184-186

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 186-231

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 223.6008644104004 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 41.61090159416199 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 38.1857385635376 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 38.07479429244995 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 36.7042396068573 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 35.904327392578125 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 35.572530031204224 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 35.33373509134565 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 35.0031795501709 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 35.20588392681545 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 34.847288608551025 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 34.546936772086404 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 34.37713781992594 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 33.95060592431289 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 33.57603069714138 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 33.41717640558879 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 33.07565522193909 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 32.7671375134412 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 32.48176701863606 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 32.18532322582446 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 31.896666526794434 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 31.79666904040745 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 31.51597926833413 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 31.260172418926075 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 31.008654753367104 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 30.757980346679688 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 30.51871292407696 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 30.377527281090064 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 30.142023529325215 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 29.907990932464596 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 29.676453510920208 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 29.45507034947795 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 29.2459117770195 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 29.11541143330661 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 28.896793463650873 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 28.68452136857169 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 28.46686760584513 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 28.254976414345407 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 28.044649713917785 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 27.897121460009846 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 27.697391510009766 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 27.501767443447577 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 27.29629231634594 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 27.09650736631349 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 26.9039202820171 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 26.707775301403473 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 26.567020810168724 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 26.37529425418123 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 26.183082302411396 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 25.991173865843795 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 25.80833601951599 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 25.619150470284854 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 25.47500489308284 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 25.292014468390988 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 25.103250309273047 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 24.916194720701736 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 24.734094347272602 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 24.561261699910748 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 24.482979848467068 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 24.298263291181144 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 24.110330422719322 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 23.924792528152466 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 23.74562331168882 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 23.55611561593555 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 23.402343332767487 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 23.22002440232497 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 23.046552166794285 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 22.864216167535353 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 22.68229011928334 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 22.496434007865794 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 22.35116962024144 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 22.172342837696345 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 21.991414388020832 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 21.812039300186996 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 21.632678167240037 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 21.452057758967083 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 21.306322700098942 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 21.124995278073595 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 20.94118366485987 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 20.76545444017724 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 20.584904551506042 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 20.40394824522513 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 20.24451053433302 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 20.06560442533838 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 19.88569268726167 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 19.708582373226392 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 19.52748331912728 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 19.351876239666996 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 19.195962168953635 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 19.017733097076416 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 18.841106255849205 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 18.667170715856027 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 18.495563538178157 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 18.319267485731395 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 18.158096313476562 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 17.979729991210135 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 17.802688479423523 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 17.632544057885397 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 17.45517541437733 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 17.278143227702436 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 17.119782209396362 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 16.942329309954502 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 16.765697315627452 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 16.59107401995983 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 16.413632759681114 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 16.237913790203276 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 16.074390231438404 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 15.90013258702287 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 15.723376636151915 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 15.5488758152778 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 15.372954758730803 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 15.196956593711098 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 15.0321090391704 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 14.85701547259778 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 14.68055630566781 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 14.504528823106185 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 14.325573723891686 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 14.144697519449087 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 13.977024130902048 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 13.797237750862827 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 13.618856112162272 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 13.441573716392202 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 13.263090708216684 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 13.084629450387101 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 12.90743766292449 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 12.737751245498657 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 12.565027460219369 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 12.389742554642083 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 12.224968627095222 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 12.04798967154451 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 11.872465170346773 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 11.70333951484156 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 11.528471209786154 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 11.353870260984378 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 11.180203765185912 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 11.00521183013916 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 10.829617444206686 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.663184447880209 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 10.489050913548123 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 10.315866612701965 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 10.143253122057233 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.970048351490751 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.797059858349009 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.624881744384766 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.459155360857645 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 9.28681127778415 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 9.11437468332787 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.942124350541302 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.782218984655433 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.611109968799873 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.444844166437784 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 8.273549515679973 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 8.103181713505794 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.931949409784056 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.760475530252828 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.589612683942241 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.422491794977432 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.251201863501482 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 7.080460491059701 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.909040239622008 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.738255143165588 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.567394814876296 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.398003389805923 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.229245071762178 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.059222948260424 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.889724355755431 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.719470090176686 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.549396329297277 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.379371824718657 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.212021120906582 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.041991346022662 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.872280394124705 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.703074039414872 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.533542682669755 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.364174878460238 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.197071892874582 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.027644981037486 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.858568955275972 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.6893971421745384 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.520008215025151 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.35114492310418 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.1821607410578436 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.014665108460646 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.8459767070624347 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.6775660722152046 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.5091899858938684 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.3409879258883897 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.173168405492038 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.006208612563762 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.8384120413865992 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.6706852787419368 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.5030880248983494 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.335559437672297 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.1681609067274499 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.000904161905505 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.8342402714949387 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6671479770115443 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5002001179051279 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3333496541687937 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.16663016266559236 seconds remaining)
    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 22.737 seconds)

**Estimated memory usage:**  1903 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
