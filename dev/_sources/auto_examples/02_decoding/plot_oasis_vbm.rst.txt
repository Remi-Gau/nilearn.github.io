
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f9800e16250>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 189.7883415222168 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 32.538554191589355 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 30.016281366348267 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 29.0388453801473 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 28.454973697662354 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 28.04476046562195 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 27.884522835413616 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 27.788605213165283 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 27.56100082397461 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 27.340574502944946 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 27.076647996902466 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 26.878768639131028 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 26.93873349825541 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 26.817602175932667 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 26.664206436702184 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 26.433425347010296 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 26.364389061927795 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 26.200970902162442 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 26.002506759431625 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 25.815053337498718 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 25.639845371246338 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 25.488911719549268 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 25.328622406179257 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 25.173675671867702 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 25.00755723317464 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 24.842726469039917 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 24.688576533244206 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 24.55854580137465 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 24.401711123330255 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 24.250952038271674 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 24.09221371014913 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 23.935926814233103 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 23.828611135482788 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 23.66982058322791 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 23.521301578072944 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 23.367820807865687 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 23.21784143977695 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 23.071998737953805 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 22.92068601909437 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 22.777170694791355 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 22.632768630981445 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 22.48078038052815 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 22.33183036531721 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 22.209195203559343 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 22.091758359562267 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 21.94679027133518 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 21.846803644429084 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 21.700178283326167 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 21.554075082143147 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 21.404637925478877 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 21.259467601776123 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 21.118129421682916 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 20.97694338285006 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 20.832276308311606 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 20.684893555111355 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 20.538725224408235 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 20.39203691482544 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 20.25120723874945 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 20.10351857645758 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 19.962634102772856 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 19.820404688517254 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 19.67500526787805 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 19.52772755776682 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 19.37931884659661 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 19.23279058933258 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 19.086538443198574 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.94365167617798 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.81039739722636 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 18.674384467742023 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 18.528730219688967 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 18.41120559828622 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 18.265712237693894 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 18.12515174018012 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.98369583691636 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.841759121095812 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 17.69558111826579 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 17.552476744902762 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 17.406132617554107 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 17.262086648207443 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 17.114445496209058 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.970924019813538 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.82679915133818 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.682464878733565 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 16.537911940769977 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 16.395074571881974 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 16.253086552900427 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 16.109240936678507 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.966321690329192 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.822107185016979 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.679796636774299 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.534100929896038 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 15.390542420712146 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 15.246991582538772 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 15.103054418358752 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.961053670720851 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.819313337928373 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.678150256474812 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.536158610865012 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.399100590725334 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.256829124508481 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.113635540008545 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.972056613110079 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.830425809411443 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.688577897340348 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.54793643951416 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.404395614351545 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.260769371716481 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.119623188660523 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.978716973905211 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.836496241595766 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.694300304759633 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.550748026048815 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.409464580672127 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.265371512522739 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.12349716404028 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.982263907142306 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.842420923298803 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.704714332890306 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.56516053312916 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.425034757421798 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.28507391611735 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.144228436730126 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.002885064140695 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.862174741620938 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.721946493271858 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.582019233703614 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.44034322859749 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.299590197135144 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.159720122814178 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.018827763638754 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.877568941849928 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.737852309496349 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.596247470740115 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.45472496255 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.314075455736758 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.172906946252892 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.031105714685777 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.889540837628997 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.748340147129003 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.606997052542598 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.465357780456543 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.323074271492924 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.181483977277514 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.039925378519339 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.8982102738486395 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.7578381752145695 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.61778644339679 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.476538990630584 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.335404035207388 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.194360326600555 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.053359826405843 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.912812176129676 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.771985455563193 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.6309474589777935 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.489678584135972 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.348480993701566 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.208323680437528 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.066806975443652 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.9252372059641 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.783611297607422 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.643252730369568 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.501854579641212 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.360276610762984 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.21853743740386 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.076910553908929 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.934973825107922 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.793868863438985 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.65240259798701 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.51057379586356 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.370020498185468 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.228128054562737 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.0866253069269725 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.9456481822701392 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.8044366340416707 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.663131971468871 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.5220115865979875 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.3807939616116607 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.2396779774272506 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.098663434553682 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.9578523049807415 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.8169902430640326 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.6760853035015293 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.53520453107226 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.3942557944626106 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.253509127575418 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.1127541000778614 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.9718112484101327 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.8310357402352726 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6902152173062588 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.5494399070739746 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.4085376262664795 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2676586817696456 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.126847356557846 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9860047145211016 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8451593635008507 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7043462594350178 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5635031875298947 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.42266552097301197 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2817801803049415 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.14088693815260078 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   28.2s finished

    2006 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  10.959 seconds)

**Estimated memory usage:**  1917 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
