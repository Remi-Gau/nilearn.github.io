
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print("")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fb562224190>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 225.83246231079102 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 44.445093870162964 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 40.756436347961426 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 39.64119243621826 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 38.74305963516235 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 38.37942051887512 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 37.86505468686422 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 37.435480151857654 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 37.1678466796875 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 37.152342822816635 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 37.16742181777954 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 37.129946188493214 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 37.02972984313965 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 36.89539381173941 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 36.73816895484924 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 36.61533315976461 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 36.50522541999817 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 36.37240585158853 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 36.24073285526699 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 36.11748273749101 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 35.95006585121155 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 35.793072518848234 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 35.56875831430609 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 35.282110566678256 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 34.987888654073075 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 34.72462821006775 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 34.52118075810946 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 34.34093952178955 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 34.09505370685033 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 33.91092654754375 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 33.752686977386475 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 33.58514117425488 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 33.37472999095917 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 33.183627836632006 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 33.02263909227708 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 32.83525024141584 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 32.647974729537964 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 32.40009311727575 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 32.16460983376754 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 31.958600967358322 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 31.74771785736084 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 31.525932434128553 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 31.29506419953846 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 31.064928332040473 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 30.837437868118286 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 30.622308810551964 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 30.45377510526906 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 30.277485517745323 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 30.093136151631672 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 29.911983597035313 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 29.718069791793823 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 29.52674251911687 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 29.33297452559838 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 29.1306092019351 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 28.94919119057832 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 28.737888769669965 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 28.51407664162772 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 28.295051026762575 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 28.075456865902602 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 27.872175826864726 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 27.652677853902183 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 27.437401963061976 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 27.253190148261282 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 27.066508073655385 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 26.883621782064438 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 26.673700112562916 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 26.473805745442707 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 26.26523929923328 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 26.05189629162059 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 25.845440705617268 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 25.630795410701207 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 25.42021161065975 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 25.229883829752602 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 25.018231065305947 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 24.812819016946328 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 24.614679018656414 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 24.406979485561973 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 24.201889552079237 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 24.004635016123455 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 23.799933083449737 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 23.627003073692322 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 23.478477398554485 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 23.273541281862954 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 23.064054647123957 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 22.857635815938313 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 22.651632897994098 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 22.44600951948831 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 22.244860224340155 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 22.037541042674672 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 21.828829315271268 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 21.632917563120525 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 21.432455075966132 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 21.23059639723405 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 21.025115020813484 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 20.819095601426792 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 20.62625997944882 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 20.433959106604256 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 20.227361597965672 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 20.023284702884908 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 19.817214768342296 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 19.620315313339233 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 19.42482875361301 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 19.228932179656685 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 19.039200442508587 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 18.846651737506573 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 18.64501454716637 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 18.441367756645636 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 18.24135442537682 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 18.061870521969265 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 17.867166204190035 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 17.668623317371715 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 17.46801697885668 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 17.2666243485042 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 17.066492525877152 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 16.865533356080977 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 16.66749400677888 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 16.474783979613207 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 16.277600190578365 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 16.08540507494393 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 15.894698712004333 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 15.706425666809082 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 15.515595333635316 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 15.323111655282194 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 15.131692907674525 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 14.941625041346397 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 14.750820779800414 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 14.554133271414136 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 14.362943694347472 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 14.159841388463974 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 13.958476983299551 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 13.759081345338087 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 13.56538683949536 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 13.36709339690931 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 13.16538891577183 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 12.96390592873986 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 12.762607459668759 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 12.56361198425293 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 12.36205182980447 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 12.161285573157711 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 11.961617866008401 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 11.764110701424734 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 11.570517933960502 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 11.377751669413607 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 11.18565737951052 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 10.993150194485983 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 10.800901100553315 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.606237943858316 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 10.409428317530626 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 10.21286456649368 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 10.016559170396537 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.820881048838297 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.621643671136818 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 9.422724799105994 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 9.223707192863515 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 9.024706509206203 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.825534036082606 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.627129566975128 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.42871805209263 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 8.230785297442086 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 8.0355702091313 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.8411378264427185 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.646430499805427 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.452012777328491 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.257797871630616 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 7.063168391948793 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.868856437278517 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.674345458846494 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.480053182133657 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.284638949802943 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 6.088736939007008 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.890540754093844 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.693921471199793 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.498243758844775 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.302846852065511 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.107521207853296 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.911912849971226 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.716819795695218 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.521094828675696 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.325693826996878 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.130153061957333 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.934274593989054 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.7380946183072927 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.542033004236745 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.3459793544206464 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.150142068448274 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.9524802452809102 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.7550296424537577 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.557789955547149 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.3614313805356937 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.164919208597254 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.968370751330727 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.7719026860142253 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.5754317939281464 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.3788893371048367 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.1822060432630717 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.9851652353237836 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.7882113359412368 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5912482375420894 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3942368728945954 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.19715879790147944 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   39.4s finished

    1967 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  2.743 seconds)

**Estimated memory usage:**  1838 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn.github.io/main?filepath=examples/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
