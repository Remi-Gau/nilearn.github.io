
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f5d48c76820>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 194.53763961791992 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 33.83324146270752 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 31.655799865722656 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 30.824429670969646 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 30.384690761566162 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 29.95365071296692 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 29.867336034774784 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 29.574550798961095 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 29.377687454223633 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 29.165781021118164 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 28.99387812614441 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 28.78282999992371 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 28.61600613594055 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 28.471870807500988 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 28.263821635927474 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 28.071405013402305 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 27.894778966903687 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 27.7228703919579 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 27.58441694577535 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 27.421774675971587 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 27.29325556755066 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 27.139996619451612 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 26.996268619190566 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 26.834562902865205 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 26.6741681098938 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 26.523484230041504 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 26.36503606576186 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 26.197215424643623 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 26.033688749585835 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 25.874213835288735 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 25.73287312189738 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 25.583400764772968 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 25.42345780134201 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 25.262676282362506 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 25.100741190068863 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 24.939950363976614 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 24.78132425414191 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 24.623725504488558 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 24.473954727775173 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 24.30968775504675 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 24.156766891479492 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 23.999696626895812 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 23.8485107421875 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 23.694501399993896 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 23.54384136199951 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 23.39520475599501 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 23.260255699572358 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 23.09963665617273 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 22.940811475118 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 22.78505565682236 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 22.629966974258423 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 22.471860703300027 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 22.31394023161668 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 22.15496616543464 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 21.995952350121957 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 21.84929520433599 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 21.69664253507342 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 21.540751745826316 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 21.386912863830037 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 21.242021520259016 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 21.123762845993042 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 20.999448858323646 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 20.86928795999096 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 20.732330526624406 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 20.601118445396423 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 20.481194202716537 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 20.347324393012308 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 20.217129746479774 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 20.088136069914874 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 19.95256133355956 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 19.824316705976216 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 19.691365312522567 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 19.55454338921441 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 19.419689955776686 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 19.272338177706743 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 19.131239652633667 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 18.983864106630023 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 18.835729456567144 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 18.688718887475822 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 18.53855499134788 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 18.38732099533081 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 18.23838501212038 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 18.087793012944662 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 17.948081507740252 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 17.80711983499073 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 17.66011758411632 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 17.51061708428139 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 17.36164038756798 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 17.212325616316363 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 17.067017065005356 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 16.9214895301395 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 16.77325456745022 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 16.621724647024404 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 16.48549197309761 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 16.336467961047557 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 16.187312552803444 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 16.039332509040833 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.887528979901186 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 15.733215268777341 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 15.584621407768942 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 15.431730270385742 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 15.279550672757743 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 15.1259039663801 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 14.976604799622471 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 14.824577038104719 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 14.672155380249023 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 14.519525055615407 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 14.363730628913808 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 14.20797277379919 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 14.052893537993825 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.900078686800871 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 13.74443159017477 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 13.588463306427002 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 13.432464496224327 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 13.283809766434787 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 13.128396604372107 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.97344895066886 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.819237258699205 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.672804323293395 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 12.51711291826072 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 12.361420154571533 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 12.209644940273822 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 12.055611954360712 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.902874923333888 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.750716209411621 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.595949029922485 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.441073205735949 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 11.286507063963281 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 11.134720265865326 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.979696802390638 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.825782849238468 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.673148366331144 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.51894322308627 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.363710086148485 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.209982630032211 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.055226688031796 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.901352265301872 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.745463493096567 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.591160877891209 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.437571335181916 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.281839268548147 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.126577125373462 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.972809694182706 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.818572696272309 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.66268547375997 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.50724565571752 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.353190748658898 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.20005151041511 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.045505774987712 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.890507781265566 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.7366437911987305 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.586181861675338 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.430870984729967 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.275421613182118 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.122236288987197 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.966730517725791 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.811160362683809 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.656771703890175 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.501404547993141 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.346101462466162 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.191452503204346 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.038150581513873 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.883008580148956 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.727898888792728 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.572606173957267 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.418224154096661 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.263561946799956 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.108492374420166 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.953706968398321 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.799040980592987 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.644525121240055 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.490666714328074 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.335989575053371 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.181255285450489 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.02644298542505 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.871598924909319 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.717206467281688 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.5622565988766945 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.4075020029303733 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.2527086947883306 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.097775300343831 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.9437908849663494 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.7895745052086127 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.6345471593200185 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.479721857153851 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.3251841648204907 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.1703837225514073 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.015406301314818 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.8605486687193524 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.7055037803750819 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.550690399973016 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.3957780493491607 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.240752786397934 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0857016410234677 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9307064346431457 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7756669032268035 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6205452558945636 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.46544384835335206 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3103022984784059 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.15517662637796834 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   31.0s finished

    1974 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  15.753 seconds)

**Estimated memory usage:**  1879 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
