
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 56-65

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 66-68

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 68-91

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 92-94

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 94-110

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 111-113

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 113-148

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 149-151

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 151-164

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 165-167

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 167-182

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fc9110cf5b0>



.. GENERATED FROM PYTHON SOURCE LINES 183-185

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 185-230

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 193.35508346557617 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 33.88106632232666 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 32.99982690811157 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 31.650777101516727 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 30.821441411972046 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 30.287153720855713 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 29.87761966387431 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 29.612723350524902 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 29.344837188720703 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 29.459222502178616 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 29.228153705596924 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 28.98711250045083 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 28.789533456166584 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 28.59211802482605 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 28.36894031933376 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 28.289560397466026 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 28.156718134880066 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 28.001918876872345 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 27.812204202016193 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 27.642217723946825 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 27.466047763824463 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 28.085136072976248 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 27.970917159860786 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 27.755818356638372 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 27.54418913523356 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 27.34410548210144 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 27.13315646465008 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 26.93288341274968 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 26.820494515555247 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 26.627698881872767 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 26.425376335779827 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 26.24013083211837 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 26.04783457517624 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 25.859421347126816 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 25.666356984306788 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 25.55107263156346 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 25.36649367544386 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 25.18403061016186 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 25.002454481626813 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 24.829021429404236 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 24.649412155151367 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 24.471977111769885 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 24.353669053032284 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 24.271204028018683 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 24.10625813224099 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 23.937865813573204 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 23.76471433432206 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 23.591346700140768 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 23.45964435736338 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 23.29052507147497 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 23.116989612579346 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 22.952345894832234 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 22.784632407701935 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 22.650409307119983 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 22.482604371176826 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 22.345763683319092 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 22.181454726627898 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 22.016740267736868 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 21.852338749786902 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 21.689653218802757 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 21.527238368988037 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 21.621902434552304 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 21.45157064160993 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 21.29020854026552 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 21.120141208171844 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 20.951938720849846 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 20.7834114594893 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 20.62207928344385 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 20.490028128904456 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 20.326999557191048 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 20.159897668021067 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 19.991940202847335 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 19.825477176242405 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 19.660248753142685 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 19.49359797787022 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 19.349790811538696 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 19.183915652726824 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 19.019928542050447 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 18.85541388316032 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 18.731071879592122 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 18.56532096862793 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 18.42011696909681 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 18.256150094474233 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 18.092118381017663 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 17.927541085651942 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 17.765961913501517 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 17.604031878848406 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 17.440619581047148 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 17.295843427831475 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 17.134189817342865 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 16.974654383129543 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 16.812963373058444 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 16.653652823489647 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 16.49902750343405 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 16.338829314455072 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 16.19455764168187 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 16.033485929171242 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.874664343509478 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 15.715232338224139 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 15.555402546217946 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 15.395453453063965 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 15.347075906130346 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 15.187024340910071 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 15.025456715556025 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 14.864180638239935 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 14.70415194829305 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 14.543467773581451 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 14.383220218052374 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 14.235538562138876 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 14.077074129647071 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.91778243671764 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 13.758312996443328 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 13.600948776517596 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 13.441847961560814 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 13.284148262258162 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 13.13656997680664 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.979894588733542 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.821433809068468 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.67323608721717 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 12.51407267265961 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 12.355065504709879 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 12.196064700765058 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 12.048168874177778 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.89019058002689 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.732203022126228 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.581426048278809 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.424798261551631 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 11.266934475560825 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 11.118078231811523 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.960978419281716 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.803261793576754 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.645680542210586 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.488268751086611 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.331025148692884 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.174037175392037 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.024100603880704 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.866543938131894 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.709839669457317 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.554099525230518 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.396998853134594 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.240907226290021 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.120296295652999 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.96954661020091 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.812601806400538 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.655020078023275 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.498025030925355 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.341322039904659 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.184370606934943 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.033222939517048 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.877526576086979 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.721157232920328 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.564404269717387 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.4079042735852685 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.251990257524977 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.096338755124575 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.945256925398304 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.7889189292223024 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.633926332376565 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.479456491108182 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.323790116879925 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.1681236028671265 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.013084955096986 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.861154129475723 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.705546159685755 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.550072216406101 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.394633018609249 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.2393038531383835 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.084007127556259 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.932221548897879 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.777759911745963 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.622888004078585 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.468025093190154 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.312921313352363 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.157820307450487 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.003143094051843 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.850528342383248 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.6962542858990752 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.5451416403560314 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.3902285875899065 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.2353703203148014 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.080731497870551 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.9316416761493156 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.780884855396145 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.6263920466105146 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.4714540813280186 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.316464153495995 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.161579506371611 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.0068136880742036 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.8531722667369435 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.6983817304883684 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.5437412387446352 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.389124564475414 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.2345227599143982 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0800421003232965 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9255976357410863 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7715532657427665 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6171818558050661 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4627971697579786 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3084801808752195 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1542104141197013 seconds remaining)
    1933 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 9.758 seconds)

**Estimated memory usage:**  1861 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
