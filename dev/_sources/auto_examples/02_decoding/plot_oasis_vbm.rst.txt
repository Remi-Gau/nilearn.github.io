
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f01182664c0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 176.9733428955078 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 27.737422227859497 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 25.047120094299316 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 25.103467702865604 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 25.197959899902344 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 24.69250988960266 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 24.22678860028585 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 23.879629441670012 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 23.474899291992188 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 23.185261991288925 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 22.894083499908447 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 22.643646825443618 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 22.43720539410909 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 22.30104714173537 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 22.098787920815607 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 21.88661019007365 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 21.689816117286682 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 21.51280647165635 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 21.345325178570217 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 21.195240886587847 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 21.04958152770996 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 20.904759588695708 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 20.834473241459243 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 20.706159633138906 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 20.564438819885254 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 20.41339612007141 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 20.271389612784752 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 20.134097947014702 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 19.996204580579487 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 19.86695021596448 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 19.731698751449585 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 19.595591575868667 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 19.459548354148865 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 19.32639666037126 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 19.19409618658178 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 19.065070050103323 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 18.958384222454495 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 18.83151937819816 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 18.70851765180889 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 18.57997520764669 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 18.451075553894043 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 18.325641335510625 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 18.203575463522046 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 18.072835534117942 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 17.947024258700285 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 17.8224433792962 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 17.69749791725822 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 17.573786760898347 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 17.443830529848732 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 17.313289014660583 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 17.192771673202515 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 17.072022288453343 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 16.94669552949759 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 16.829278235165578 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 16.706582643367625 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 16.58537780154835 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 16.46194839477539 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 16.3369740812402 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 16.213676987023188 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 16.092434260804772 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 15.968904654184978 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 15.853135452895868 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.744757567682573 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.628142576369028 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 15.509513765573502 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.392166082675642 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 15.27152131543015 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.151790455206116 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 15.03366641437306 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 14.915525432946026 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 14.805911302566528 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.689631928860301 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.571108924018011 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.45229304000123 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.334610597507373 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 14.22190268834432 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.111550318567376 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 14.000507651985465 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.889104904272617 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.771782588355148 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.657517910003662 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.538269484484639 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.421802991774024 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.306512809661497 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.191915727797008 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.075829982757568 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.955031500306239 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.83774471282959 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.722442843697287 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.609035277634524 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.501605060365465 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.415228644570151 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.300452221994815 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.18782695390845 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.07255869723381 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.956536129901284 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.84242057800293 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.730223817923635 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.620626649078059 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.508465198555378 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.392282724380493 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.282370385557117 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.16881687968385 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.054546599249239 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.939942580003006 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.824641307195028 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.7099612973771 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.594801218710213 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.479206526720965 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.362293365898482 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.24467782540755 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.127558592203501 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.011218769209725 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.895473528752284 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.780280870303773 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.66463129416756 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.547617698537893 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.431988469555847 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.318449618452687 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.203060045963577 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.087225596110025 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.970938540687246 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.854799989794122 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.738770149587616 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.624993255061488 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.510082578659057 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.396185174820916 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.282101725030133 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.168112203478813 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.053775064704954 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.938703188529381 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.823995004173454 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.709840767311327 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.596118667071924 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.481726134001319 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.368061736777976 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.25312962251551 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.1391268333379365 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.025169237800267 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.911667731168459 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.796700068882533 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.682232871968695 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.567755729379789 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.456162069227312 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.342454632123311 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.227751008395491 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.113123710841348 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.998751374329029 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.8840607179177775 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.7696160358070525 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.655292749404907 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.5409441894253355 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.426660863976729 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.313297539754631 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.199705108419641 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.08524852414285 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.97143197670961 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.858193992809126 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.745345592498778 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.632381584659313 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.5192301869392395 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.405381763943974 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.2918415040145685 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.1787714446249185 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.065128820698436 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.95144001642863 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.838175009532147 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.725133757391376 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.6120241255987255 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.4990026414747066 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.385756478590124 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.272321263251946 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.1591480110966885 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.046086891538146 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.9338059123905227 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.820740018572126 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.70756027915261 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.5946126549930897 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.4817164131764615 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.368693796616027 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.255571100446913 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.142590435828952 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.0295634950910295 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.9167576187946758 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.8039153555165166 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.6910393366942535 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.5783056084827711 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.4655436781000963 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3524979073950585 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2395816984630765 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.1269613818118447 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.014485203158793 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9017613232135773 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7889902974657443 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6762252050576751 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5635379400008764 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.45086908340454096 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.33818457453384015 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.22544868305476026 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11272402264964042 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   22.5s finished

    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  0.293 seconds)

**Estimated memory usage:**  1951 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
