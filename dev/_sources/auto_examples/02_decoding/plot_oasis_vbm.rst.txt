
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-60

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 61-63

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 63-86

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 87-89

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 89-105

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 106-108

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 108-143

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 144-146

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 146-159

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 160-162

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 162-177

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fcf1347b880>



.. GENERATED FROM PYTHON SOURCE LINES 178-180

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 180-225

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 274.0621566772461 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 53.03639340400696 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 49.37820625305176 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 48.43519115447998 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 46.975934982299805 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 46.111154079437256 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 45.22762433687846 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 44.883025816508706 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 44.64454650878906 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 44.22979007826911 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 44.246089458465576 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 43.937316005880184 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 43.52981217702229 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 43.1437666782966 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 42.80658572060722 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 42.467172702153526 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 42.1454815864563 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 42.010842183057 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 41.70420866542392 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 41.41232451639678 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 41.09294629096985 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 40.874453510556904 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 40.56636899167842 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 40.22761416435242 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 39.93045059839884 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 39.73376655578613 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 39.50281350429242 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 39.3101043259656 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 39.0743909903935 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 38.83896604077569 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 38.58962678909302 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 38.33582547403151 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 38.10577994585037 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 37.85175768534342 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 37.604579140158265 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 37.37208080291748 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 37.12535071372986 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 36.87529928619797 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 36.633604175166084 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 36.44027747863379 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 36.206048011779785 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 35.952917418828825 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 35.73298914091928 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 35.50619283942289 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 35.346271536566995 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 35.158347845077515 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 34.91581568510636 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 34.6821020562598 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 34.45979793866475 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 34.343399894480804 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 34.20693254470825 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 33.96305418949501 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 33.69619010044978 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 33.49162706339134 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 33.30775555857905 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 33.0686117735776 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 32.84965263094221 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 32.615447889294536 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 32.41625289259285 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 32.21632550530514 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 31.96798356374105 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 31.756995486431435 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 31.51236965579371 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 31.275712066226532 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 31.045338839292526 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 30.827082285514248 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 30.628974762829866 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 30.402857264476037 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 30.163867655922385 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 29.935615225114685 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 29.738577808652607 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 29.52207867864152 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 29.30367957221137 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 29.07822503129097 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 28.84439646875536 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 28.651507695515953 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 28.421185794629547 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 28.183157416133138 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 27.946862587561974 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 27.70905964585799 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 27.467294096946716 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 27.24296941286252 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 27.031159988263756 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 26.79008173942566 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 26.552551258177985 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 26.319512830061072 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 26.1076058232507 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 25.872166485622014 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 25.6400673606179 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 25.417999160423705 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 25.18526111708747 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 24.98639560531784 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 24.754432688588683 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 24.514611169856085 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 24.272966278360244 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 24.029050337640864 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 23.793269435564675 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 23.56129838510887 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 23.327958131323058 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 23.092838239188143 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 22.86215090751648 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 22.626524292596496 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 22.389104838464775 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 22.15588145811581 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 21.93749603858361 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 21.712886821656 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 21.483854766161937 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 21.254103484554825 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 21.022099088739466 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 20.788385181252014 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 20.55731190334667 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 20.328142002896147 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 20.098234925951274 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 19.864839437788564 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 19.630128207959626 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 19.397719538730122 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 19.165821124767437 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 18.93744864830604 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 18.70455246860698 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 18.471792739980362 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 18.239946047465004 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 18.017234786482884 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 17.7844437184881 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 17.557924423760515 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 17.32769025525739 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 17.102478504180908 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 16.87364453361148 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 16.64402033400348 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 16.414359837770462 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 16.183530262274335 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 15.95403478695796 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 15.723000881326108 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 15.494009046843557 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 15.275559513192428 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 15.046426225064405 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 14.820802741580538 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 14.592813828412224 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 14.36395902355222 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 14.132654666900635 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 13.906017646515112 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 13.676418440682546 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 13.4455679291529 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 13.215197882182162 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 12.984844282790498 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 12.755555351575216 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 12.528335447969107 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 12.299277374189193 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 12.067311565892226 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 11.839679080086785 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 11.608939978900372 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 11.383902072906494 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 11.157366447890832 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 10.931720156418649 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 10.701966195324667 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 10.472834562326407 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 10.24897183910493 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 10.018672484617968 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 9.788941120645802 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 9.560961991925781 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 9.334174687007689 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 9.10715115070343 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 8.880016929614618 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 8.650858072587 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 8.422237134418605 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 8.19371703194409 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 7.963919733509873 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 7.734928335051938 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 7.505889608474549 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 7.278181530180431 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 7.049608508510702 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 6.821684612947352 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 6.593206669154919 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 6.365663866664089 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 6.138533071286417 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.9116155580542555 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.683060101100376 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 5.4549711617556484 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 5.229872558076503 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 5.0024092947499135 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.7747140530101415 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.547045946121216 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 4.320430838600706 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 4.092794030577272 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.864999243470489 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.6368091417395547 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.4092201155585213 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 3.181961528716549 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.954591117440698 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.7273360363980554 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.4998350698481158 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.272810697555542 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 2.045734218277856 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.8182425995667775 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.5909163939520483 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.3634478652600162 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.136197322454208 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.9091343733729148 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.6819150423640528 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.45476897075922806 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.22739246262976873 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   45.5s finished

    1934 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  35.419 seconds)

**Estimated memory usage:**  1923 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
