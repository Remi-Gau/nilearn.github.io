
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f1354e62ee0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 225.982666015625 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 36.617616176605225 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 33.98810291290283 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 32.91775131225586 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 32.39942145347595 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 32.1154088973999 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 32.157894929250084 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 31.913179976599558 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 31.672250747680664 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 31.40577247407701 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 31.12416100502014 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 30.885922193527225 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 30.688174168268837 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 30.475254884132973 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 30.262140921183995 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 30.220042943954468 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 29.996148824691772 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 29.778282291748948 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 29.620751751793755 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 29.537530986886278 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 29.375555276870728 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 29.191051698866346 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 29.021414886821404 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 28.867042095764827 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 28.68670399983724 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 28.491551637649536 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 28.310896506676308 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 28.14247269983645 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 27.980124473571777 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 27.806559636675075 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 27.659006992975872 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 27.500925756269883 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 27.35025465488434 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 27.186737551833644 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 27.013951694264133 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 26.833527292524067 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 26.646988815731472 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 26.485841738211143 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 26.31685728775828 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 26.145488775693455 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 25.964799880981445 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 25.796451138287054 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 25.61928425516401 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 25.45196055257043 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 25.310184066945855 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 25.150637918048435 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 24.976568273876026 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 24.80675627322907 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 24.64003535111745 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 24.48160438148343 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 24.307462692260742 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 24.143128292233335 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 23.982906616651096 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 23.81141696785981 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 23.648803755089087 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 23.494484359567814 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 23.338253157479425 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 23.17991140850803 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 23.014115547311714 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 22.84992015159736 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 22.681796948115032 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 22.52079511470482 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 22.35617067736964 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 22.193142652511593 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 22.02703246474266 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 21.86469807991615 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 21.697254614396527 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 21.53174029535322 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 21.377325843362247 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 21.213850442913994 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 21.052458899361746 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 20.88614958104953 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 20.7185427347819 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 20.550455214226083 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 20.388984995919305 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 20.223981936772667 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 20.058098893416556 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 19.89678454399109 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 19.730264095159676 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 19.566281505777866 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 19.405808329582214 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 19.252455882084224 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 19.093774847868012 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 18.931010984512696 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 18.767471983319236 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 18.602534097783707 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 18.445042515909947 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 18.284460407564012 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 18.121013728055086 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 17.957396651921645 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 17.79475005467733 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 17.628625539632942 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 17.46404752524003 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 17.301341236278578 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 17.147816678310964 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 16.98753359443263 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 16.82348346710205 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 16.658615006613978 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 16.493804046085902 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 16.33112676215894 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 16.169588088989258 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 16.005274404393564 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 15.84094071855732 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 15.676096724075022 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 15.513561762296238 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 15.35200792267209 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 15.18918940706073 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 15.027957983106097 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 14.864653799268934 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 14.701793355679293 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 14.539341948249124 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 14.38000883282842 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 14.217478479657855 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 14.055705823729523 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 13.892902424460964 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 13.731081361355988 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 13.567576942772702 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 13.405463182009184 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 13.245619357642482 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 13.08769385954913 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 12.927335421244303 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 12.765231495061197 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 12.602850519242836 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 12.443177201883579 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 12.281758069992065 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 12.12025065422058 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.957962800586035 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 11.79476848361999 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 11.632410049438477 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 11.469766605732053 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 11.313027620315552 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 11.151258590567203 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.988484288706923 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.826307133624429 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.663598811448509 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.500620797828391 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 10.338772717644186 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.17647653252539 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 10.013917525609335 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.851497662153175 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.689155544553484 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.527750221550042 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.367686775368703 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.20444780963284 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.043979432847765 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.883117766215882 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.721269307071214 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.55943758309293 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.397595044728872 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.235615688682403 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.073402404785156 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.911977831101575 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.7511445095664575 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.588392330930124 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.426541641161039 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.264180437211068 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.105429686032808 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.944299787472767 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.78175862227814 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.6198099259310546 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.458058774471283 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.297041753804462 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.136006455362579 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.974875262909872 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.8129527219911905 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.651745196544763 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.491589462900736 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.329814899467423 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.168214570908319 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.006557631069386 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.844542180790621 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.682860445557979 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.520977430565413 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.359469562596669 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.197700133268861 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.036202124186924 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.874368700114163 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.7126930056318725 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.551018251461929 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.3895052225230127 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.2281552685631643 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.0666838798733704 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.905175662302709 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.7436286660491445 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.5824749366096826 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.420858976003286 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.259414267796342 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.0981906442081226 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.936632825973186 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.7751491763604381 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.6136598587036133 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.452237453760277 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.291032612323761 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.1298307544826842 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9683362896909419 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.8068884825095152 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6454695584822674 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4840556558618691 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.32270838756753945 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.16134933131424026 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   32.3s finished

    1987 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  13.892 seconds)

**Estimated memory usage:**  1885 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
