
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f08e52dadf0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 288.78211975097656 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 71.85428953170776 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 68.64899826049805 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 67.83379141489665 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 66.25660991668701 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 64.81522679328918 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 62.5946695804596 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 61.82780633653913 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 60.768436431884766 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 60.35744418038262 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 59.92055583000183 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 59.240966580130845 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 57.23552338282267 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 55.269382623525765 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 53.68559340068273 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 52.07412242889404 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 50.60153377056122 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 49.28198689572952 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 48.13036171595255 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 47.144379778912196 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 46.181440114974976 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 45.27122142201378 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 44.433711051940925 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 43.681445546772174 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 42.94977807998657 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 42.3484525680542 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 41.70901999106774 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 41.12481517261929 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 40.53606973375593 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 40.00652518765679 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 39.45347412427267 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 38.94337500295331 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 38.453626692295074 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 38.081602826262966 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 37.62520832173965 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 37.184385129383635 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 36.76182656817966 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 36.39024510899105 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 36.01507740271719 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 35.68654981026283 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 35.321664810180664 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 34.9388589742707 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 34.615601437432424 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 34.24898769134699 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 33.90856543454257 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 33.56908271047804 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 33.24540028364762 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 32.95507474148527 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 32.659496466318764 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 32.35436268242038 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 32.044493436813354 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 31.757061967662736 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 31.46215655253484 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 31.16622667942407 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 30.868407726287842 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 30.573242512616243 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 30.293177604675297 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 30.016961863166404 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 29.756922812297425 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 29.49805158679768 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 29.220737218856815 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 28.98728952251497 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 28.724246586522746 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 28.45327187719799 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 28.194550931453705 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 27.942151087981006 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 27.693682554996375 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 27.435939529048863 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 27.184917842640598 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 26.93720976166103 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 26.687801497323175 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 26.452671359962142 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 26.204650031195744 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 25.95980425403543 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 25.718572932320672 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 25.478523174921673 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 25.27771230747825 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 25.03641973842274 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 24.79486162845905 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 24.561780232417433 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 24.32940709590912 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 24.094564967685276 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 23.864645126389295 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 23.629624567836164 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 23.39988208952404 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 23.171707209418802 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 22.949019820191136 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 22.725780380183256 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 22.49455690383911 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 22.276083188110523 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 22.05940373738607 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 21.845110861809697 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 21.621918004492056 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 21.39806518503415 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 21.18166080941545 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 20.96133888395209 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 20.744513591130573 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 20.534914636120355 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 20.31588674564751 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 20.09553071224328 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 19.881713390350342 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 19.683026776455417 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 19.47213272487416 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 19.260176024390656 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 19.056497647212105 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 18.85267018136524 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 18.646388868115984 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 18.441230936585185 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 18.2322234665906 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 18.01908302744594 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 17.804991115223277 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 17.594133325525235 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 17.38846755027771 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 17.177888296346747 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 16.96647345810606 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 16.7549352231233 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 16.54895146139737 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 16.34028297611791 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 16.150677640559312 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 15.94450281648075 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 15.73723808924357 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 15.532334572027539 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 15.332295961067326 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 15.128465739692128 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 14.923064070363198 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 14.717463970184326 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 14.516066452813527 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 14.315826134418877 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 14.114493146538734 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 13.913347684135733 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 13.710310073999258 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 13.50569688636838 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 13.306505333293568 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 13.109260446146916 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 12.908664368871433 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 12.706569442042598 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 12.506659451652975 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 12.30560999195071 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 12.103765142136726 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 11.904158981583958 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 11.703363418579102 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 11.503408519934254 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 11.305048526172907 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 11.104049040721012 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 10.906460126241049 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 10.708427527855182 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.508292988555072 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 10.308016574301687 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 10.108431397257625 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 9.908476035866961 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.709855715433756 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.51564693924607 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 9.317946233247456 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 9.12102880353242 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 8.924763057139012 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.734675468937043 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.53651038194314 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.339109051759076 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 8.141458140143865 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.946364788139391 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.750147879123688 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.559004648872044 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.363919452384666 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.168802106307328 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.973115252285469 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.776535222024629 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.582695915038327 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.387319367802785 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.19157296135312 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.995798302825386 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.801793210646686 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.607592545057598 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.415344083031943 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.220091544134768 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.025435562791496 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.830649954932077 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.635806029493158 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.441876613487631 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.247576226009412 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.053045220881201 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.8586941295199924 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.6648064608073363 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.4714174558828166 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.277278509296355 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.083593700243079 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.889702925810943 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.6962337570805706 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.502847978775514 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.3105542964123664 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.1181300594693138 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.9264724380091616 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.7332443304710987 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.5405072271823883 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.3474743662720516 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.1546738295211005 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.9619279457972599 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.7693957066049381 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5768940969167022 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.38457400148565124 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.19228434562683105 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   38.4s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  26.584 seconds)

**Estimated memory usage:**  1887 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
