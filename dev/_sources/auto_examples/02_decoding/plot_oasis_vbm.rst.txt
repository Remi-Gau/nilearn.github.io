
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (:term:`VBM`)
to study the relationship between aging and gray matter density.

The data come from the `OASIS <https://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard :term:`VBM` pipeline (using SPM8 and
NewSegment) to create :term:`VBM` maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the :term:`ANOVA` step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the :term:`ANOVA` step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

:term:`SVM` weights are very noisy,
partly because heavy smoothing is detrimental for the prediction here.
A standard analysis using mass-univariate :term:`GLM`
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 112-123

Prediction pipeline with :term:`ANOVA` and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

In nilearn we can benefit from the built-in DecoderRegressor object to
do :term:`ANOVA` with SVR instead of manually defining the whole pipeline.
This estimator also uses Cross Validation to select best models and ensemble
them. Furthermore, you can pass ``n_jobs=<some_high_value>`` to the
DecoderRegressor class to take advantage of a multi-core system.
To save time (because these are anat images with many voxels), we include
only the 1-percent voxels most correlated with the age variable to fit. We
also want to set mask hyperparameter to be the mask we just obtained above.

.. GENERATED FROM PYTHON SOURCE LINES 123-149

.. code-block:: default


    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 150-152

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 152-165

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-183

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fe00d120a60>



.. GENERATED FROM PYTHON SOURCE LINES 184-186

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 186-231

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 146.55828475952148 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 25.037120580673218 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 23.056594848632812 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 22.93114511171977 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 22.416786432266235 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 21.995409965515137 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 21.751941521962486 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 21.513595172337123 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 21.315507888793945 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 21.148901065190632 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 21.002501964569092 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 20.828351757743143 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 20.65400926272074 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 20.639302070324238 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 20.486138207571848 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 20.352035999298096 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 20.206982970237732 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 20.076127809636734 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 19.945469299952187 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 19.818442796405993 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 19.699971199035645 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 19.58847923505874 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 19.56659390709617 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 19.452292255733326 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 19.340168635050453 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 19.233492612838745 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 19.111231161997868 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 18.994461050739996 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 18.870873417173115 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 18.762013139395876 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 18.653114636739097 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 18.592624695070327 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 18.485037982463837 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 18.373001250353727 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 18.259851048974433 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 18.135448592049734 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 18.016209602355957 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 17.897419504217197 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 17.794139611093623 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 17.685938107661713 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 17.6175594329834 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 17.508607515474644 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 17.390884444827126 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 17.269044255101402 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 17.148584734309804 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 17.029925452338325 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 16.912422553352688 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 16.8005531544381 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 16.686794598897297 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 16.579360358569087 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 16.498655319213867 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 16.40600864559996 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 16.29395703169016 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 16.185517248117698 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 16.072334183586968 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 15.955876892263237 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 15.840653147016255 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 15.731824870695146 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 15.62301808390124 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 15.53445156145904 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 15.418744643529257 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 15.30624475244616 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.190119266510008 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.078548090798513 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 14.96340149641037 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 14.84813139988826 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 14.732588507912375 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 14.616251500684823 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 14.520710454267613 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 14.407739304114079 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 14.326505184173584 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.212991952896118 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.099408891465927 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 13.988454475794754 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 13.8761032336467 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 13.7620743115743 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 13.648461718308297 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.549544529481368 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.474978165748793 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.35929804512217 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.241923213005066 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.126968245447419 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.013104054985977 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 12.90293000979596 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 12.79116071973528 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 12.678745690514061 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.577454650124837 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.464920172746154 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.350520264018666 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.237985972608072 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.126828485065037 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.015182282898452 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 11.907544799472976 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 11.79859624370452 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.692008703312975 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.594232672139219 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.485444207986195 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.374562634635218 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.263456733859316 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.15348592430654 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.045029640197754 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 10.936217534660113 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 10.826570408017028 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.734893398377503 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.638788883502666 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.53177919841948 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.42169894812242 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.309828740414059 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.199578903339527 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.088886595647269 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 9.979019945318049 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 9.87163470457266 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.76285513809749 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.658569067980336 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.546638534780135 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.435535265051799 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.325173090244162 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.216110207076765 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.103845386181847 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 8.992385663906065 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 8.879846413930256 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.768206432831189 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.661841462870115 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.54895111991138 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.437687004766158 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.325798654556275 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.213429439635505 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.100271803187573 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 7.98817178606987 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 7.8757965010265965 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.764014996015108 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.657864830876124 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.545526345570882 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.432786461105921 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.320422460783773 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.207828645352964 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.09506820229923 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 6.982572472008475 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.87061225504115 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.7582232008735055 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.645992721830095 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.537501932035947 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.425541632611987 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.313775414353484 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.202767226431105 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.090661328414391 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 5.978752622865651 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.866912472004794 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.755214504293494 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.643955789156408 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.535771131515503 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.424558069532281 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.312459368454783 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.200938913557265 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.089346894970188 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.977648750428231 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.866811244915693 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.757884191100005 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.6482968239844595 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.541493237393457 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.4328533411026 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.32212531640663 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.210718154907227 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.099207581186587 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.9890270407606914 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.879039656032216 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.768188295594181 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.6572115863868575 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.5477032434372675 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.4364288022532263 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.3256206372204953 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.2144235992989345 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.103387272635172 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.9922048163551818 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.8810731542521513 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.770092010498047 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.6591352549466216 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.549373132360857 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.4382576192362926 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.327246133175642 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.2163500785827637 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.105479233831332 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.9943741861280504 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.8832827799958611 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.7723525710727857 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.6614459591942865 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.5512528086221347 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.4405162678682868 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3296074106338176 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2187416515653096 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.1078943955270868 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.9971030395068423 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.8862219850222269 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7754166645089579 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6646967130837982 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5541158945132524 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.44327073194542704 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.33241878548249376 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.22158592397516425 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11078447193356615 seconds remaining)
    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 57.319 seconds)

**Estimated memory usage:**  1844 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
