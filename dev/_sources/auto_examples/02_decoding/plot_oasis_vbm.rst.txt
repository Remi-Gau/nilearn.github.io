
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f6d0695a160>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 242.78879165649414 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 46.859869718551636 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 43.19726800918579 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 41.208827416102096 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 40.371578216552734 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 39.87488865852356 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 39.871310551961265 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 39.467703444617136 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 39.21866798400879 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 39.00790291362338 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 38.46447420120239 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 38.04224525798451 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 37.80536039670308 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 37.54155026949369 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 37.15317964553833 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 36.86262591679891 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 36.770586371421814 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 36.64013347906225 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 36.36469708548652 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 36.14752911266528 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 35.877352237701416 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 35.74809713590713 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 35.50001371990551 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 35.4268275136533 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 35.19925832748413 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 34.957592487335205 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 34.723660248976486 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 34.49706636534797 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 34.47682057108198 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 34.4392201324989 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 34.42520833015442 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 34.223015539107784 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 33.97314029932022 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 33.75326068473585 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 33.474913120269775 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 33.264862060546875 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 33.003106355667114 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 32.747551898698546 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 32.50246144595899 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 32.25334270183857 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 32.00192356109619 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 31.79237039496259 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 31.57352632567996 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 31.3542224030162 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 31.150454131039705 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 30.905648443433975 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 30.71757649338764 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 30.539905451713725 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 30.329601208368935 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 30.11237879675262 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 29.902540683746338 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 29.717764709510053 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 29.514718202444225 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 29.308121640727204 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 29.099576870600384 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 28.933104450052433 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 28.73620217187064 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 28.570337985691268 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 28.379520144955862 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 28.17174905437534 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 27.96670651435852 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 27.776367898847237 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 27.596136908377368 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 27.40147275394863 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 27.183896869421005 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 26.9667483659891 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 26.767233942494247 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 26.555928952658356 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 26.352269032422235 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 26.13403254315473 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 25.94250624520438 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 25.785189991265955 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 25.579258812798393 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 25.382230944829445 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 25.19063816843806 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 24.995150963465374 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 24.789556239780627 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 24.58719976846274 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 24.382952965222874 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 24.17860372458832 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 23.9880952835083 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 23.78385090533598 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 23.56465293139946 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 23.363977371928204 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 23.163524888810656 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 22.953398199642407 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 22.754697794137996 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 22.5444505707971 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 22.34373448111794 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 22.14353578010302 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 21.926775428983902 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 21.757719904511838 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 21.57797726340916 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 21.378382926346156 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 21.179244878444266 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 20.977008029034266 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 20.770319283008575 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 20.575047288973305 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 20.361699444907053 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 20.16053602671382 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 19.956823110580444 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 19.753661120291984 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 19.55862155615115 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 19.351637020851804 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 19.142870609576885 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 18.941906588418142 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 18.74869095604375 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 18.555530929119787 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 18.359332932366264 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 18.165001379240543 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 17.956957080147482 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 17.757049401601154 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 17.55418430055891 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 17.349722328439224 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 17.145214720776206 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 16.944147358769953 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 16.748657300554473 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 16.556064324501236 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 16.359540207911348 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 16.15854006655076 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 15.959977467854817 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 15.766307830810549 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 15.568258477039025 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 15.365180197770032 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 15.161785141114265 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 14.960703706741333 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 14.753167171326895 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 14.551553718687043 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 14.358633577823639 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 14.161979529284691 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 13.970195861963125 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 13.774905648850302 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 13.57379505851052 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 13.36983999453093 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 13.1700859639182 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 12.970013247595892 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 12.774320265826058 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 12.57314230577789 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 12.372451111890268 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 12.173092768346663 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 11.97149338041033 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 11.7675631164659 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 11.567760286196856 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 11.366991049759871 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 11.166645394431221 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 10.967871106904129 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.765640346971276 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 10.563374955637926 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 10.361566640235283 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 10.158300929421546 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.95839238166809 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.756034551077331 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 9.55956617154573 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 9.362441337186528 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 9.162821562259229 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.962305861134684 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.760833165584467 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.562063842822033 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 8.362030125871488 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 8.161949648047393 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.961270272731781 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.761824382758289 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.562980127923282 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.362574357927943 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 7.1631027896229815 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.964703848867706 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.765319206628455 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.569132091042524 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.370261782691592 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 6.169552975152371 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.972316531574025 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.773634900823671 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.574097367220147 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.375309435618406 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.178695500582115 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.979597432272775 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.780668171969327 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.5813710770364535 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.382438233729159 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.182259146727663 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.9842793411678734 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.7858767878284767 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.5875221372960686 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.3904172514305744 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.1905032240826148 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.9910688335831104 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.7912926391888693 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.5924111980805424 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.392696426269856 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.1928478914593894 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.9929692117791427 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.7931758670906746 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.5950915912787118 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.3955800817420445 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.196096117963496 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.9966266338641827 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.7973956915797019 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5982402871707975 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3987939646749786 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.19936933589341055 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   39.9s finished

    1964 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  34.709 seconds)

**Estimated memory usage:**  1965 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
