
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f74427c3820>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 176.02205276489258 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 31.0875346660614 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 28.65837550163269 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.70509767532349 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 27.23598551750183 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 26.842607975006104 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.589710632960003 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.313535520008635 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.201305389404297 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 25.98753073480394 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 25.78476881980896 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.602543744173918 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.44178255399068 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.268370665036716 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.086792673383442 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 24.920554955800377 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 24.75004756450653 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 24.59785946677713 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.58248315917121 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.492020293285975 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.402510166168213 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.2534472374689 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.11405933987011 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 23.972604274749756 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 23.8153387705485 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.743996381759644 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.590838395632233 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.43857275115119 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.283695493425643 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.125337756913282 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 22.975526253382366 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 22.831212966672833 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 22.68720442056656 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.540111910213124 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.39290327184341 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.24107916014535 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.09674225913154 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 21.947486548810392 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 21.804429455807337 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 21.66020305340107 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.51952075958252 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.375299447920263 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.235493989217847 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.096365928649902 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 20.95323261347684 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 20.807831022474502 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 20.666319930035137 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.529087979742823 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.3902086019516 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.252192317223063 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.109352111816406 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 19.97118618441563 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 19.830877450796276 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 19.709795142119784 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.572353707419502 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.437311085787684 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.298547812870574 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.160152380926565 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.02192137981283 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 18.883751695438967 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 18.745519161224365 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.616558364180268 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.4815055939459 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.34868920038617 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.217052400112152 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.084271871126617 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 17.953796755183827 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 17.820892380244697 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.68702714583453 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.55573600962542 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.427634137017385 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.296289719326396 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.162609100341797 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.028983566858997 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 16.894653313868755 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.759462753931682 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.62844409440693 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.49501797440764 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.360729914445145 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.225484995902338 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.090978503227234 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 15.9574633969201 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 15.823781594997499 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.689015796385615 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.554226398468018 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.4197635790881 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.282829600711201 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.147893631595306 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.011485403234309 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 14.874563037679435 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.73758363723755 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.601377636521727 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.46616788532423 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.331417819505099 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.196678222493922 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.060039407328556 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 13.924880325794218 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.788314499805884 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.658485154716336 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.522476039751611 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.390122413635254 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.253811666280916 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.11833579867494 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 12.982619056423891 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 12.848267115079441 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.712667907987322 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.577734749272185 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.443222275404173 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.308104691682038 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.17244080884741 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.03908267888156 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 11.905247628151834 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.770151002066475 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.634620512481284 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.499283167353848 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.365173495334126 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.231075615718447 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.096194277461779 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 10.96118128905862 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.828168528420585 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.694397608439127 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.559726784051943 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.425244788654515 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.290126455508595 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.155712596831783 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.021584177017212 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.886871485483079 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.752005580842026 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.61823308467865 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.484470847965211 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.350648953364445 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.21615453166816 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.08162912455472 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 8.947334051132202 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.813551607416636 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.679121944639418 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.54467133914723 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.410673446028772 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.27743707532468 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.143078114488999 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.009178808757236 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.8750705499175595 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.741263000058456 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.606781884506866 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.475492821799384 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.341875306491194 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.207368164846342 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.0736568493097005 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.9396124723795305 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.806518433078024 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.673430522282918 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.539620958416667 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.405869609431217 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.272474310756509 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.138762542179652 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.005270511873307 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.871633058939224 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.738796294874446 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.605130105078974 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.471331767316134 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.3381489515304565 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.204601061270104 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.0709068480833075 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.937434083844987 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.804010362159915 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.670490590008822 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.537009971687593 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.403413167256795 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.270030384971982 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.136624935816026 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.003226911320406 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.8697372235749894 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.73637448355209 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.603117653400223 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.4700028841522923 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.3368802751813615 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.2038976929404517 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.070462346750464 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.936961457970437 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.803565436901327 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.670052925745646 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.536488695039275 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.4031197553152563 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.26969293557881 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.1361340025196904 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.0026576454575 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.8691231845527567 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7356656592159985 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6021091633654654 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.4688683527487294 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3353051260897988 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.201748442275362 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0681646068890889 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9346077306282952 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8010584054533969 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6675033691601875 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5339571310549366 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.40045723697255714 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.26696228258537524 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13347054126873686 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   26.7s finished

    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  5.981 seconds)

**Estimated memory usage:**  1880 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
