
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f37ff0f9940>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 238.1753921508789 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 44.383652210235596 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 40.87648344039917 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 39.59989150365194 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 38.92750310897827 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 38.36582636833191 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 38.213017543156944 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 38.03292955671038 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 37.922183990478516 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 37.64655099974738 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 37.23658061027527 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 37.04265052622015 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 36.94932540257771 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 36.91400603147653 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 36.58506488800049 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 36.26785182952881 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 36.03627932071686 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 35.92068028450012 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 35.68031318982442 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 35.44136093792163 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 35.263609170913696 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 35.05107319922674 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 34.82109019973062 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 34.585049504819125 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 34.36665312449137 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 34.25865960121155 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 34.033711635149444 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 33.86095805521364 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 33.67538666725159 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 33.47376140232743 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 33.248638788859054 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 33.03074166851659 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 32.87789994478226 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 32.65057615077857 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 32.44606382706586 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 32.27522155216762 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 32.08909289042155 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 31.893938850712132 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 31.66926963705766 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 31.48728446471386 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 31.295827865600586 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 31.14028686430396 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 30.96922739346822 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 30.829092846360314 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 30.591782049699262 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 30.40646192762587 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 31.465611333432406 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 31.246810334794063 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 30.979849537213642 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 30.76794017577658 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 30.547173500061035 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 30.29648871047824 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 30.046733287664562 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 29.80366066716752 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 29.56418118653474 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 29.335182991894808 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 29.113363674708776 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 28.894845109236865 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 28.695771965487246 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 28.476645166591062 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 28.279018402099613 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 28.0654785046812 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 27.840230849481397 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 27.630730034813045 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 27.42849937081337 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 27.21018582123977 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 26.993881919167258 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 26.761601191848072 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 26.539534554762 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 26.31424463659093 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 26.101786545344762 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 25.87827972962823 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 25.685677422417534 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 25.460488884416346 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 25.24797295235299 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 25.02843777338664 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 24.81198473980552 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 24.591286293871992 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 24.375281437849388 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 24.15689785571038 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 23.949593782424927 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 23.763454375443636 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 23.55808618592053 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 23.346755754516785 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 23.183287472951978 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 22.982428845237283 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 22.787767293841338 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 22.591795724013757 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 22.380405729467217 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 22.165687724445643 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 21.966650088628136 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 21.753324568926633 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 21.551636384881064 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 21.37293404148471 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 21.168768405914307 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 20.969672554417663 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 20.762571454048157 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 20.55715401393851 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 20.352598297352696 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 20.153927571845774 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 19.963002920150757 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 19.756833796453947 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 19.558991044175393 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 19.362640568353598 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 19.15555946643536 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 18.965515840621222 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 18.761104516263277 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 18.561419395642858 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 18.353116123764604 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 18.148803555637326 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 17.951319174333054 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 17.748648297679317 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 17.54671287536621 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 17.359173894983478 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 17.165664221111097 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 16.964742297711577 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 16.763005379972785 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 16.563083577359844 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 16.363972663879395 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 16.177302150165335 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 15.98724619547526 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 15.793637358452663 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 15.598382762221041 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 15.402404868505833 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 15.203639130438528 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 15.003309774398803 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 14.817515861420405 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 14.616093376490074 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 14.415021389722824 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 14.219542566195939 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 14.014173966187697 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 13.817796237596118 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 13.619989648009792 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 13.41888944009193 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 13.230844739657728 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 13.030122324272437 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 12.830617231481215 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 12.627368693804218 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 12.425414524216583 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 12.224624482847803 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 12.023228236607142 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 11.837413341441053 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 11.63942562694281 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 11.439788883382624 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 11.244414197074043 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 11.046118859587043 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.847129972013708 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 10.649391613849978 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 10.44634155969362 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 10.24540935266738 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 10.042415777842203 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.842072216880242 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 9.642366660268683 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 9.43968570466135 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 9.23720696684602 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 9.040348037596672 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.83704557785621 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.636488130897472 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 8.433123820944676 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 8.23098884888415 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 8.02779507637024 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.825121139147267 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.622116427362701 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.418334979952479 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 7.215666288282813 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 7.013318719285907 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.812427937266338 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.612686843929176 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.413500604175385 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 6.21479296402113 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 6.016066579257741 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.81630055527938 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.6173283222109776 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.4170524343589825 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.217038086090965 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.016261645725795 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.815884893590753 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.615759833384368 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.415050495876355 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.213835685612769 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.0122533904181585 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.8114344573152654 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.6103202301067308 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.4092107744164806 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.208025600599206 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.00698928575258 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.806828098912393 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.606108906434819 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.405250640625649 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.2042667108868796 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.0037576273867956 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.8037121233515714 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.6032723387082417 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.402806453754247 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.2021001663404642 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.0017396975786257 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.8012966963709617 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.6010996508719353 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.40066716887734155 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.20039056533545105 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   40.1s finished

    1958 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  35.551 seconds)

**Estimated memory usage:**  1950 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
