
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (:term:`VBM`)
to study the relationship between aging and gray matter density.

The data come from the `OASIS <https://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard :term:`VBM` pipeline (using SPM8 and
NewSegment) to create :term:`VBM` maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the :term:`ANOVA` step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the :term:`ANOVA` step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

:term:`SVM` weights are very noisy,
partly because heavy smoothing is detrimental for the prediction here.
A standard analysis using mass-univariate :term:`GLM`
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 112-123

Prediction pipeline with :term:`ANOVA` and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

In nilearn we can benefit from the built-in DecoderRegressor object to
do :term:`ANOVA` with SVR instead of manually defining the whole pipeline.
This estimator also uses Cross Validation to select best models and ensemble
them. Furthermore, you can pass ``n_jobs=<some_high_value>`` to the
DecoderRegressor class to take advantage of a multi-core system.
To save time (because these are anat images with many voxels), we include
only the 1-percent voxels most correlated with the age variable to fit. We
also want to set mask hyperparameter to be the mask we just obtained above.

.. GENERATED FROM PYTHON SOURCE LINES 123-149

.. code-block:: default


    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 150-152

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 152-165

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-183

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fb7cad75d60>



.. GENERATED FROM PYTHON SOURCE LINES 184-186

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 186-231

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 137.80593872070312 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 21.318880081176758 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 21.158028602600098 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 19.826232433319092 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 19.151875257492065 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 18.724761486053467 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 18.36591402689616 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 18.083291496549336 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 17.94181251525879 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 17.745025422837998 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 17.57750415802002 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 17.517646356062457 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 17.38870596885681 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 17.501676907906166 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 17.33451625279018 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 17.190547227859497 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 17.055572509765625 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 16.9194256698384 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 16.78763222694397 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 16.66256951030932 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 16.537410736083984 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 16.796571016311646 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 17.164732586253773 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 17.19316005706787 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 17.042524178822834 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 16.89496612548828 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 16.769854325514572 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 16.861667023764717 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 16.740411383765085 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 16.59410493949364 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 16.457462072372437 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 16.325955314020955 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 16.194910883903503 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 16.070195429252855 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 16.052821958766266 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 15.925239392689297 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 15.797158824072943 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 15.669353420669967 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 15.54413904641804 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 15.436245129658626 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 15.312376976013184 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 15.191840102032916 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 15.073532513209752 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 14.957800260809964 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 14.842746474526145 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 14.79311309920417 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 14.687310021856558 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 14.578587876989486 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 14.46787941455841 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 14.360777256440144 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 14.295207738876343 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 14.181349413067686 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 14.071405667525072 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 13.959918346045152 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 13.852098111753111 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 13.743605158545753 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 13.636537619999478 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 13.580218988552428 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 13.487802291738575 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 13.380764662209202 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 13.275847911834717 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 13.170834275542713 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 13.06548149354996 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 12.9619534621163 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 12.857638090848923 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 12.75762462615967 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 12.65429654265895 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 12.550692522703711 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 12.486696565852446 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 12.381918855335401 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 12.280789647783552 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 12.180857480411799 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 12.079364352756075 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 11.975458618712752 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 11.87287823573963 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 11.782192786534628 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 11.680806536423532 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 11.579728454738468 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 11.477870983955187 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 11.40454688253282 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 11.305672645568848 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 11.207166892510873 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 11.129818404593118 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 11.02950357241803 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 10.9293665318262 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 10.832202574786018 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 10.732728947040647 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 10.6329975895498 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 10.533281499689275 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 10.4336413131671 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 10.359680069817438 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 10.259335245404925 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 10.159926279731419 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 10.062198426133843 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 9.962881793367101 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 9.864436739369443 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 9.765893161296844 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 9.668898432525163 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 9.57012440720383 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 9.472030268775091 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 9.37418270111084 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 9.294516535088567 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 9.196312506993612 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 9.101168699634886 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 9.008053119365986 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 8.909922713325138 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 8.812860272965342 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 8.715878709454403 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 8.619260876267045 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 8.522283145047108 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 8.425102927468041 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 8.32859849715018 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 8.247227719851903 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 8.151822870811529 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 8.05519626015111 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 7.959852177163828 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 7.8635206386960785 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 7.767351368553618 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 7.67174310199285 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 7.575861009229131 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 7.479849497477213 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 7.384111012309051 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 7.288886371206065 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 7.193774597431585 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 7.109916279392857 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 7.014268255233764 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 6.918688668145074 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 6.826040658425158 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 6.730476871132851 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 6.634745498036229 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 6.5403909133030815 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 6.444795506601115 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 6.349699468323679 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 6.254686124342725 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 6.159669431287851 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 6.073549562030368 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 5.979122498456169 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 5.88456595727127 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 5.789600721303968 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 5.694978856354308 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 5.602186713899885 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 5.508621075474624 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 5.413924150063958 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 5.319411132719133 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 5.224957611825731 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 5.130554898031827 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 5.042289782876837 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 4.947930553332478 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 4.85309624671936 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 4.758743945384186 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 4.6644478638966875 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 4.57129683399832 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 4.47725991198891 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 4.383288476981369 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 4.289106276128199 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.194734365709366 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.100669628534561 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.011503344128846 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 3.917436397528346 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 3.823291078303595 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 3.7292187809944153 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 3.6352874758821097 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 3.5417489004723817 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 3.4479358898350063 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.354064010992283 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.2611679163846103 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.1678644605429773 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.074054979278656 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 2.9836824053809754 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 2.8903939075018528 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 2.796658389708575 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 2.7029727035098605 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 2.6094029559645544 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.515778931579149 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.4222092436647964 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.3286297661917548 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.2354041988199405 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.1420116532320357 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.048509260241905 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 1.9551405933316193 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 1.863828182220459 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 1.7702632371891927 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.6874715626894772 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.5934354516326406 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.499433994293213 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.405548334121704 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.311662914932415 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.2179950456568265 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.1240599104698668 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.0302256301597312 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 0.9373710280970523 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.8434623099122373 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.7496185799439747 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.6558219842960179 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.5620703820100765 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.4683237442603478 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.3746078014373779 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.28090548273270505 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.18723870768691556 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.09360767968335942 seconds remaining)
    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 44.719 seconds)

**Estimated memory usage:**  1842 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
