
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fa4bb162d30>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 186.65552139282227 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 32.54500675201416 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 30.362709045410156 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 29.61408376693726 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 29.116647720336914 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 28.763344287872314 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 28.50893338521322 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 28.38569964681353 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 28.249889373779297 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 28.038828108045788 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 27.837276935577393 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 27.674154606732458 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 27.480893850326538 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 27.380797587908233 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 27.75414838109698 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 27.641566276550293 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 27.48302161693573 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 27.3299434746013 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 27.148113383187187 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 26.992412905944022 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 26.845433950424194 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 26.696918680554344 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 26.52207038619302 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 26.366668504217397 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 26.217758019765217 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 26.053001165390015 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 25.898794412612915 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 25.740402221679688 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 25.59999111720494 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 25.43911528587341 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 25.28389326731364 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 25.128088904965306 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 24.974125921726227 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 24.82575466416099 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 24.682877456440647 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 24.51026099068778 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 24.35044815805223 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 24.194906022097612 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 24.066242807789855 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 23.903319334372497 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 23.742213249206543 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 23.593997431964407 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 23.43791971887861 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 23.281888972881227 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 23.131695660677824 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 22.978005515204536 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 22.815256180970568 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 22.662555197451976 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 22.50133204460144 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 22.360709448249974 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 22.206268072128296 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 22.05019411386228 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 21.89792092029865 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 21.73936592857793 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 21.596376613334375 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 21.44986163486134 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 21.299717903137207 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 21.146364776711714 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 21.000358474665674 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 20.84992969642251 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 20.703544060389202 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 20.55202488430211 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 20.399960217937345 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 20.247060537338257 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 20.099650740623474 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 19.952853166140045 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 19.803033019557144 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 19.649082699818397 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 19.500714035595163 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 19.347783676092174 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 19.19566982133048 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 19.047401451728714 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 18.897543589274086 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 18.747077830850262 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 18.598181730992085 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 18.458269834518433 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 18.31330653240806 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 18.165135207114282 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 18.01994047409449 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 17.872141361236572 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 17.722074151039124 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 17.573689175240787 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 17.42487010723207 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 17.275527640997645 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 17.12716235433306 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 16.97658730955685 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 16.82984226248985 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 16.682137461914415 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 16.538288766687565 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 16.393173574061876 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 16.252964364157783 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 16.107740331482102 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 15.96232665103415 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 15.817515032265778 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 15.674552881971318 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 15.530551860207007 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 15.385634720325468 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.235705461698709 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 15.087406761792241 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.942136280464402 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.792716264724731 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.643544081414099 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 14.495807540182975 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 14.346470453206775 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 14.194767731886644 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 14.051173028491792 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.901568966091805 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.749751688163972 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.59672278828091 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.44727801839146 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.298612919720737 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 13.14885187578631 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 13.00070788179125 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.852055891425207 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.702074117827834 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.55464069739632 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.404344377846554 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.253726596506233 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.108260732586102 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.961829602217474 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.81516695022583 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.668244149074082 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.521979429682748 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.375091913269786 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.227500354090045 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.078519725799561 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.930170320329212 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.780313497453223 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.633364170789719 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.48745460842931 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.341397853998037 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.192882699820832 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.045007597316395 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.897347728112587 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.749194408530618 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.601071834564209 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.453979828778435 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.306847734172848 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.159173329671225 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.011349130877488 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.862717185701642 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.715325690330342 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.567850143137113 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.421060101969259 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.272913813591003 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.125097019919034 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.977375523684776 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.828719945180984 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.679973724726085 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.531314942660748 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.383686065673828 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.234951442440614 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.0871612398247965 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.93906985544691 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.790823159279761 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.642581439787342 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.494860960887029 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.346205158598104 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.1989076590236225 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.051479132670276 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.903462707996368 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.755274467586731 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.607293214327023 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.459639675046769 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.311613995854447 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.164010250207149 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.016538209225758 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.873900429217401 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.726098560151599 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.578669542391625 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.4309015414294075 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.28398693235297 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.136576342028241 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.98947366951518 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.8419244673060278 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.6939918654305592 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.545960556377064 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.3986974691940564 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.2506888555676747 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.1026129296372056 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.9545601209004717 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.806637623033471 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.6587428810832265 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.511014079787041 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.3629966818768047 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.215165035144703 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.0673556814911547 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.9195287074634735 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.7718599096257635 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.6240146336732086 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.4763312716233101 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.328554544149269 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.1808221836884816 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0332754461258804 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8857509450814159 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7381969965421237 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5906111756149602 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4429699539533121 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.29532945276510836 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.147667780593412 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   29.5s finished

    1952 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  11.539 seconds)

**Estimated memory usage:**  1950 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
