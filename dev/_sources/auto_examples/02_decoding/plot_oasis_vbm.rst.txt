
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-90

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 148-150

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 150-163

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-166

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7ff6a4260d00>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-229

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 187.88814544677734 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 32.87124061584473 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 30.23633623123169 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 29.177245775858562 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 28.734150648117065 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 28.40764617919922 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 28.09401901563009 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 27.849417039326262 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 27.630958557128906 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 27.62140197224087 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 27.402623414993286 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 27.32685633139177 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 27.149818499883015 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 26.966280442017776 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 26.82161521911621 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 26.652015924453735 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 26.466387271881104 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 26.285401246126963 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 26.111206584506565 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 25.974974368747915 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 25.802206993103027 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 25.644373598552885 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 25.483644485473636 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 25.32648219232974 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 25.172300497690834 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 25.01329779624939 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 24.862894204946667 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 24.70264549608584 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 24.543550457273213 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 24.399454519666474 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 24.25659998257955 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 24.10819257459333 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 23.978281617164612 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 23.847660122495707 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 23.723625169080847 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 23.589834758213588 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 23.44197286499871 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 23.288234478718525 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 23.129160065399976 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 22.9793996994312 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 22.833581924438477 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 22.68506125705998 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 22.53556749934242 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 22.39159560758014 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 22.245627880096436 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 22.09698804219564 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 21.949544284654703 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 21.798513772639822 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 21.65741991996765 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 21.505107003815322 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 21.3582444190979 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 21.224361213983272 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 21.089125559880184 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 20.94288830037387 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 20.789744403627182 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 20.641298987648703 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 20.49090896333967 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 20.34588109401234 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 20.20259768387367 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 20.052639399544667 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 19.911166667938232 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 19.768251962349066 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 19.6289386903086 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 19.487690123300702 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 19.34727641940117 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 19.208299508461586 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 19.062607967492305 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.916950884150037 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 18.77145291777218 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 18.62513104037962 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 18.48120515687125 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 18.33169121473608 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 18.190594567192925 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 18.04354363271635 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.90012746888238 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 17.755611340204876 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 17.616260867369803 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 17.471304128696392 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 17.326859070704533 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 17.187039284766474 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 17.042627334594727 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.924471036887464 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.784321825678756 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 16.64198674351336 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 16.50051420075553 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 16.358736374798944 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 16.215981062068494 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 16.075518802664746 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.936113921078768 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.794717820842614 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.652469846937393 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 15.507151179261259 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 15.365815774254179 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 15.224392229510894 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 15.087669047903507 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.94349859890185 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.798774580160776 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.653893768172903 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.50988887280834 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.36637735607648 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.222597360610962 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.07821273095537 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.936036619485593 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.79310744480022 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.652429580688477 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.510145641508556 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.367890533411279 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.22467334025374 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.080884668562147 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.938357795050385 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.794532017274337 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.650899079468873 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.507396561758858 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.363087384046706 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.219138061791135 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.07577457635299 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.932993929961633 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.79030977558886 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.64682505090358 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.503303311452145 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.36016543706258 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.216127805473391 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.079306164725883 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.936447217212459 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.79518969597355 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.654042625427246 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.512213987017436 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.36937958987679 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.226873114705086 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.083856580793395 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.943273305892944 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.803027815491188 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.66411185987068 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.521549556488381 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.379214254777823 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.235660879700271 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.094797470990349 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.954144876368725 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.811850053676661 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.669700397861947 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.527343477521624 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.38455261744506 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.242655602978989 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.100639071497884 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.95762566725413 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.815133218107552 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.67277934126658 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.531481379554386 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.389168958406191 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.246955298737392 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.1046840349833165 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.96221372149638 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.821045072455155 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.678055669747147 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.5361951264468106 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.393874491414716 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.251256991655398 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.109107375904253 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.966359874870203 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.824083356737341 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.68190324306488 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.540459144189492 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.398192988501655 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.255485344518181 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.113462756319744 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.972051483212096 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.830211883567902 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.688359351929076 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.546457835606166 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.4051812950676 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.263005775563857 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.120712860285887 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.978553855141928 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.837215411180706 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.6953363802241186 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.552933897290911 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.4109873771667476 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.2687625171101025 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.1261861351098905 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.98541899233557 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.8430581622653537 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.7007063238660276 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.55824056824485 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.4160156666906807 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.2738241527391514 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.1314255418004215 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.9890915834775535 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.847236106739962 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.7052565432609395 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.5630880512257732 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.4209318913911517 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2788590473654382 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.1366849144299824 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9945558883983235 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8525366807721325 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7104858924181033 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.568377416961047 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4262297419727151 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2841929305683483 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.14207523552017595 seconds remaining)
    1978 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  13.582 seconds)

**Estimated memory usage:**  1898 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
