
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f292b330af0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 205.7504653930664 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 36.96923327445984 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 34.17853546142578 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 33.08633677164714 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 32.632686138153076 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 32.20141839981079 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 31.761165777842205 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 31.31404117175511 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 30.931434631347656 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 30.521496348910862 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 30.26639175415039 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 29.966925404288556 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 29.65237776438395 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 29.32117379628695 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 29.056966270719258 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 28.79301150639852 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 28.571239233016968 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 28.352313658770395 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 28.11748025152418 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 27.909419009560036 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 27.766311407089233 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 27.585889203207834 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 27.40004786578092 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 27.22171935827836 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 27.033244609832764 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 26.853623628616333 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 26.66784981580881 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 26.473441132792722 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 26.293174164635797 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 26.106967350532265 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 25.92318312327067 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 25.766550763960804 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 25.598903238773346 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 25.42530494025259 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 25.259427112691544 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 25.100300891058787 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 24.941383838653564 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 24.77395637615307 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 24.609320000598306 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 24.457790405322346 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 24.29444980621338 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 24.15548414137305 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 23.99493814650036 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 23.857695851215095 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 23.717240745371036 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 23.575207869211834 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 23.437448543051016 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 23.29716137622265 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 23.15802498658498 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 23.01533920424325 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 22.900952339172363 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 22.76675962934307 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 22.622492790222168 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 22.48903790959772 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 22.349939107894897 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 22.204757993871514 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 22.058565412248885 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 21.9180708517108 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 21.781335723811182 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 21.629065663127573 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 21.491863171259563 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 21.34295771551914 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 21.197901225859116 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 21.059716273867892 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 20.907419502735138 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 20.755913477677566 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 20.601429816448327 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 20.454400436202093 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 20.291593088823205 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 20.15078073999156 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 19.990887778145925 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 19.82566505418697 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 19.657465193006725 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 19.506742539471144 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 19.345561671901393 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 19.196393489837646 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 19.04418302837171 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 18.889806413031245 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 18.738072554270428 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 18.584022286572033 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 18.429764986038208 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 18.273521223185977 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 18.11726754467662 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 17.964682041880597 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 17.814019487017678 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 17.666184733895694 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 17.539153259853983 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 17.387082883681376 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 17.2456262328408 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 17.148502333780353 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 16.9961154460907 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 16.842608685021872 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 16.689832417861275 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 16.538226337843046 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 16.388364771579173 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 16.23439245474966 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 16.079877078533173 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.929828734741998 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 15.779813858927513 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 15.629510448436543 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 15.477452278137207 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 15.323912051644655 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 15.168180909811282 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 15.013297960596178 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 14.857824105482836 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 14.703678891772316 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 14.552951155968433 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 14.39903987679526 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 14.245821988141095 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 14.087890725617015 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.928184921091255 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 13.77200629689672 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 13.616243617875234 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 13.460675834554486 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 13.30178655657852 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 13.145816367605457 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.989232770327865 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.83512592723227 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.680937589225124 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 12.526185131874405 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 12.371495246887207 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 12.217378681356257 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 12.064670504116622 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.907619705045125 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.75443822337735 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.59839162826538 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.444466677923051 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 11.29183203592075 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 11.13706585764885 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.978454386541085 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.820944107495821 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.664932846113015 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.507927468328765 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.351612809905433 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.194929037521135 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.039374307349876 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.883005478802849 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.726707326234692 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.571894638780234 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.415812849140853 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.260320901870728 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.105872345308885 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.950339814306984 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.795390202448917 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.64053738117218 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.485184579059995 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.332771363323682 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.17980602160603 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.026606720847052 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.8724865673372415 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.718743006388346 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.5639264473062475 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.410572403355649 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.255999764585807 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.1022503190226365 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.947108514847295 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.7915153075487185 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.635666364317487 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.478249727925167 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.321366737473686 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.164319336414337 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.008243011391682 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.851743012298772 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.695888200420543 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.539796608250316 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.384140354214293 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.228196069418666 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.07516478921125 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.920276323954264 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.76514688328173 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.610090942943797 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.455432950404652 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.300551553105199 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.1458911316932285 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.990967988967896 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.83668395451137 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.682252894748341 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.527747388613426 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.373178535632873 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.2186480327691447 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.0643670823838973 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.910401302147965 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.7565656022711114 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.6024751415669596 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.4488379022349482 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.295117268691192 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.141576841313352 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.9880960778119092 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.8347554511212287 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.681611035866712 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.5281361529701634 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.37534987364764 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.222352107365926 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0692917954736423 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9163267858249625 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.763362963994344 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6105297779550357 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.45783998276376486 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.30520749332928904 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1525810699367044 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   30.5s finished

    1960 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  19.138 seconds)

**Estimated memory usage:**  1934 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
