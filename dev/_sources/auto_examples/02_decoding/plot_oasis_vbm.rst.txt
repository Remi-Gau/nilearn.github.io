
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f2d62a4d310>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 143.91183853149414 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 23.732185125350952 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 22.054982900619507 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 21.45383048057556 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 21.1237895488739 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 20.847754955291748 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 20.595110336939495 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 20.41087055206299 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 20.228445053100586 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 20.08656144142151 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 19.950701236724854 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 19.828572685068306 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 19.719751199086506 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 19.6007799918835 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 19.48696906226022 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 19.400670925776165 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 19.310662150382996 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 19.214895697201 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 19.133107397291393 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 19.05606798121804 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 18.9596107006073 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 18.845593861171178 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 18.747876015576452 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 18.64141205082769 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 18.52733612060547 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 18.408004760742188 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 18.293656055743877 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 18.177224459471525 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 18.071221896580287 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 17.963965539274543 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 17.859451055526733 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 17.75796838729612 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 17.649819016456604 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 17.54706499070832 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 17.43920842339011 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 17.325967516217915 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 17.217986186345417 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 17.118846268267244 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 17.016067028045654 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 16.915207679455097 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 16.81906509399414 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 16.7187162201579 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 16.613574652444747 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 16.506112741869547 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 16.40304591438987 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 16.293589618470936 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 16.187353061593097 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 16.07769417255483 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 15.972075978914896 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 15.864813575939257 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 15.761371850967407 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 15.66280472979826 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 15.553254732718836 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 15.445123605008396 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 15.336464387399179 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 15.228063843467018 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 15.132264886583602 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 15.024733832007959 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 14.915418994837793 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 14.817941823248136 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 14.710485776265463 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 14.603987986924219 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 14.497443737522246 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 14.38816369904412 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 14.28039726614952 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 14.175518054228563 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 14.071256760394935 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 13.966503303442428 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 13.859459638595581 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 13.754247026167054 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 13.656585693359375 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 13.551282315187052 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 13.446783277723524 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 13.34004908718475 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 13.237817055470234 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 13.13301682472229 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 13.028923662085282 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 12.92850501815994 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 12.824492534001669 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 12.747045378141765 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 12.650265455245972 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 12.556814638184914 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 12.455165706029751 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 12.349443653979934 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 12.245317776997885 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 12.1418018060572 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.037366473397542 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 11.93005238730332 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 11.823046727613969 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 11.717213526200712 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 11.609930064943102 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 11.504520308840405 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 11.398807650027068 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 11.29243258507021 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.185417337620512 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.077500042162445 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 10.971016466617584 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 10.8647326513664 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 10.758435852673589 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 10.650626266845547 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 10.54542875289917 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 10.438947753150865 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 10.331656890756944 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.225179044945726 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.118911963242752 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.015086718967982 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 9.910041989020582 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 9.806449814377544 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 9.70039963722229 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 9.594144269960736 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 9.487465251575818 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 9.381621158874786 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.275564755712237 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.172313595240094 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.065855038793464 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 8.959857888843702 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 8.853751166113492 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 8.747132749639006 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 8.640881962695365 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 8.534651485811763 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 8.429224967956543 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.323236829978375 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.21695550152513 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.110514036039026 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.004178977781727 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 7.89840760231018 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 7.793051538013277 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 7.68797664004048 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 7.583134889602661 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 7.477306707884914 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.371693446086003 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.266015496872764 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.160459092169097 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.054285192848148 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 6.948831871374329 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 6.844272189670138 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 6.738695369047277 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 6.634258522604504 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.529417811960414 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.425517066777181 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.321154015404837 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.215821132592276 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.111197810777476 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.006320344818222 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 5.900678091579014 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 5.795178824457628 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 5.689669367385237 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.583805458886283 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.47872848768492 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.37299901047009 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.267827113469441 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.162883299076005 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.057655234085886 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 4.952018359128167 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 4.8472469565156215 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.742327928543091 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.636598764321743 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.530776818087147 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.424929845182201 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.3191320386322785 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.213767766952515 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.108824060570379 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.003500991397433 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 3.8983411218491066 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.793348614762469 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.6887994824033794 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.5830914801861864 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.477577682026846 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.3718503770374113 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.266159084421643 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.161616872338688 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.056162803493745 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 2.950682074524636 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.8451198787358454 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.7396215542979627 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.634155035018921 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.5287281383167612 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.423110692514538 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.3176733349146468 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.2121276922066118 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.1067221959431963 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.0013587395789214 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.895984675858047 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.7914286988680481 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.686384221781855 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.5812727502874426 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.4760804483967442 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.3710840207370207 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.2657453455823533 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.160380239839907 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.054969072341919 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.9495298862457275 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.8443236947059631 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7389469109668633 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6333688067406723 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5277641125214405 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4221878635640047 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3166184013870162 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.21107880033627907 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.10553236462962089 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   21.1s finished

    1984 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  56.890 seconds)

**Estimated memory usage:**  1865 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
