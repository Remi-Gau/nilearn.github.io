
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (:term:`VBM`)
to study the relationship between aging and gray matter density.

The data come from the `OASIS <https://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard :term:`VBM` pipeline (using SPM8 and
NewSegment) to create :term:`VBM` maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the :term:`ANOVA` step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the :term:`ANOVA` step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

:term:`SVM` weights are very noisy,
partly because heavy smoothing is detrimental for the prediction here.
A standard analysis using mass-univariate :term:`GLM`
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 112-123

Prediction pipeline with :term:`ANOVA` and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

In nilearn we can benefit from the built-in DecoderRegressor object to
do :term:`ANOVA` with SVR instead of manually defining the whole pipeline.
This estimator also uses Cross Validation to select best models and ensemble
them. Furthermore, you can pass ``n_jobs=<some_high_value>`` to the
DecoderRegressor class to take advantage of a multi-core system.
To save time (because these are anat images with many voxels), we include
only the 1-percent voxels most correlated with the age variable to fit. We
also want to set mask hyperparameter to be the mask we just obtained above.

.. GENERATED FROM PYTHON SOURCE LINES 123-149

.. code-block:: default


    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 150-152

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 152-165

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-183

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f7cfbb5fe50>



.. GENERATED FROM PYTHON SOURCE LINES 184-186

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 186-231

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 209.65337753295898 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 37.15645241737366 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 35.30647301673889 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 34.079923232396446 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 33.429234743118286 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 33.41984295845032 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 33.093720595041916 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 32.74228753362383 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 32.4323673248291 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 32.15820105870564 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 31.864803791046143 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 31.865337740291253 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 31.660079558690388 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 33.24144845742446 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 32.83908176422119 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 32.490873177846275 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 32.17263340950012 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 32.0078316155602 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 31.720101647906834 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 31.450796215157762 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 31.185447692871094 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 30.922633409500122 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 30.662253466519445 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 30.514546394348145 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 30.266618569691975 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 30.0174777507782 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 29.780973782906166 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 29.54849421536481 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 29.319838115147185 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 29.17521261346751 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 28.962321519851685 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 28.744241429913426 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 28.534249126911163 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 28.32406795386112 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 28.124291027293488 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 28.005007573536464 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 27.814607991112602 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 27.620343620712692 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 27.41700873876873 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 27.218351602554325 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 27.01474666595459 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 26.81818282894972 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 26.669253179005214 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 26.477569574533504 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 26.27975756471807 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 26.090924448437164 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 25.904086745303612 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 25.714517020164653 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 25.57888094584147 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 25.394184243922332 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 25.454864501953125 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 25.280010471157 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 25.105689929081844 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 24.96305569612755 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 24.789063904020523 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 24.611762675372034 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 24.440664359501433 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 24.267532955136215 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 24.093378469861786 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 23.95276180768417 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 23.775134722391766 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 23.604430730225612 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 23.428115983163156 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 23.28348296786111 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 23.114079654216766 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 22.971282610526455 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 22.80309707468206 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 22.63153628093093 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 22.46297806852004 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 22.293345900549404 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 22.122049161366053 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 21.972736419086726 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 21.802987416585285 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 21.63032162026183 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 21.45703645010252 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 21.280926068623863 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 21.103743440226506 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 20.995876690009972 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 20.8177959552178 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 20.641756549666198 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 20.469088912010193 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 20.298505986178363 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 20.130425854427056 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 19.97362058133964 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 19.801632563273113 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 19.6871417129741 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 19.58129884475885 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 19.411120776472423 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 19.258013595234264 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 19.08454040195165 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 18.91225780381097 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 18.739162720166718 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 18.565943956375122 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 18.389392252891295 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 18.236517551097464 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 18.061248176976257 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 17.886523981889088 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 17.7139189906956 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 17.541655671839813 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 17.368610637356536 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 17.210784196853638 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 17.042133999342965 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 16.906505467844944 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 16.739902012556502 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 16.565970787635216 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 16.392317885444278 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 16.22947230878866 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 16.054433991975873 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 15.876681592729357 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 15.700244662958548 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 15.524517904628407 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 15.34858402690372 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 15.18497015748705 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 15.012558447576202 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 14.838934760344657 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 14.66512507977693 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 14.489976512974707 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 14.31646988942073 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 14.15398438098067 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 13.980715615408762 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 13.829333146413166 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 13.68309937035742 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 13.504960556499295 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 13.334442132856786 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 13.155234567580685 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 12.97809748649597 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 12.800763368606567 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 12.624883317571925 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 12.454483643174171 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 12.281966835953469 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 12.104531563245333 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 11.927830887204818 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 11.750489104877818 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 11.573579314956092 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 11.397752438018571 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 11.22824626498752 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 11.053135815788718 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.878531828413914 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 10.703437311061915 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 10.530503634926227 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 10.359048741204397 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 10.191654384558928 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 10.018954827751912 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.84571258171455 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.671808944808113 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 9.497414366952304 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 9.32403459940871 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 9.154791166993226 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.981286396851411 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.807103961906178 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.632922490437824 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 8.459046581723042 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 8.286000327060096 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 8.115631779814079 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.941222296132669 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.76812251921623 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.615866502126058 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.445906390050414 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 7.275685696662226 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.102647277544129 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.929456353187561 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.756136538819497 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.590711673100789 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.417734984239917 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.248633849911574 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.07626248850967 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.9035339958696476 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.732048929808383 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.55986890338716 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.386600564922807 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.215097455417409 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.04209932528044 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.868649327477744 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.69471172928121 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.521183929224124 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.34944782938276 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.175794666463678 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.001678616313611 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.827549251277795 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.6537898718977773 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.479580720265706 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.3065776021441042 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.132687327625987 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.958642585681436 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.784462493398915 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.610427959545239 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.4363659863830893 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.2634001759921802 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.089285368615008 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.9151414525571953 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.7437081336975098 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.5715615574602058 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.397412618001302 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.2227632567054867 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.048086766115169 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.873402075889783 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6987607625066017 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5240494999183616 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.34945854273709387 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.17472624778747559 seconds remaining)
    1991 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 19.818 seconds)

**Estimated memory usage:**  1922 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
