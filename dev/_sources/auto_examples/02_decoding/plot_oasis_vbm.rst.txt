
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-142

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 143-145

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 145-158

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 159-161

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 161-176

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7efd9c0c7d00>



.. GENERATED FROM PYTHON SOURCE LINES 177-179

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 179-223

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 169.93999481201172 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 29.42970108985901 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 27.582530736923218 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 26.75877714157105 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 26.172912120819092 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 25.79368257522583 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 25.495884021123253 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 25.260868413107737 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 25.028303146362305 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 24.976127836439343 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 24.862443208694458 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 24.655355085026137 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 24.460598866144814 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 24.304746737846962 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 24.093106576374602 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 23.908750931421917 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 23.753702640533447 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 23.592405122869156 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 23.423118803236218 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 23.264888537557503 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 23.128235578536987 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 23.009634335835774 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 22.862729094245218 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 22.71852222732876 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 22.578006267547607 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 22.440398454666138 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 22.287852452351498 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 22.157709660353483 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 22.018764325550627 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 21.880915304710122 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 21.747533480326336 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 21.64596303047672 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 21.543467044830322 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 21.404690258430712 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 21.358051005531763 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 21.240492275782994 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 21.149223883946735 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 21.023415230415964 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 20.89682176238612 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 20.759913071607933 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 20.6151762008667 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 20.468990058433718 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 20.34957760856265 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 20.21733254610106 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 20.086663419550113 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 19.962928321626453 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 19.835228463877804 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 19.708245870914865 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 19.578346649805702 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 19.463016505144083 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 19.329267740249634 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 19.19507207589991 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 19.06955390710097 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 18.956423332106393 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 18.842529738390887 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 18.705132701180197 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 18.568217550005233 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 18.436289557239466 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 18.301286195886544 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 18.17146687588449 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 18.037298679351807 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 17.90218533062544 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 17.768625197872037 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 17.63558200805906 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 17.506420105695724 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 17.375269449674168 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 17.25127569111911 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 17.127461508138854 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 16.99661960321314 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 16.87228510690772 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 16.7830091885158 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 16.666703637217132 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 16.541441599527992 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 16.417609590373626 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 16.287413429569554 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.156983375549316 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.029366204613133 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 15.897743150785372 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 15.774718376306387 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 15.644156253790554 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 15.517723202705383 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 15.384678566897358 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 15.251723027810817 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.120021851666003 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 14.990535100301107 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 14.859823942184448 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 14.728699623152266 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 14.594221438484631 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 14.460726954720236 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 14.330019259720705 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.201691150665285 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.072380678994314 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 13.944605391958486 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 13.814628231909968 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 13.685503685728031 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 13.55653234532005 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 13.427419960498808 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.295979054932742 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.165529075933962 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.036386227366899 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 12.910887002944946 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 12.783793107117756 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 12.653018890642652 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 12.526235545723184 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 12.395826926598183 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.263762292407808 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.13059181087422 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.000220024697134 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 11.871484676996866 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 11.742846469266699 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 11.613969326019287 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 11.48552716100538 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.360099128314427 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.229169050149158 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.098032880247684 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 10.968603071959121 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 10.83773320296715 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 10.70563588386927 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 10.575397737955644 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.44375191616411 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.314001560211182 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.185338717846832 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.058657732166228 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 9.93056110637944 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 9.8032889750696 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 9.674540662765503 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.549711295536586 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.41950907481937 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.28998675942421 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.16085878638334 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.030397965357853 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 8.900874885893959 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 8.770083795894276 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 8.640109931615958 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.50986435520115 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.380096320752743 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.2501501195571 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.120076750316759 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.992482389228932 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.865042168459446 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.735933542251587 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.606354652567113 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.477546060588998 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.347282766462206 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.217879745695326 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.087607030210823 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.95822545600264 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.829134039327401 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.698643040012669 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.5708549358700745 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.441872040430704 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.314732014738171 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.185833680002313 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.056742397009158 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.928227502030212 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.800656241755332 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.671896922282683 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.543248296543291 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.413713989378531 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.284060140825668 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.154480576515198 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.025685298516884 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.896964034916442 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.7678783846779105 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.638876304393861 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.509869727221402 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.380323740373175 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.251033273285734 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.121866135370164 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.9925439385972785 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.863528588238885 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.734954497967547 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.6066582923711734 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.4788101587681415 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.349907505101171 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.221151488167899 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.0918362682515923 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.962526716081436 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.8331785496701016 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.7042272517135024 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.5748162534501815 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.4455876047439995 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.3165491780081946 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.187753174474331 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.0587718797766645 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.930278288351523 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.8016749017982074 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.6728528910142215 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.5441513061523435 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.416010094698144 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.2873325975317704 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.158539554835614 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0297432939211526 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9009513694387643 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.7721304475646659 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6434028148651123 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5147219774674395 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3860516197185226 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2573628690507677 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.12867371041571077 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   25.7s finished

    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  5.197 seconds)

**Estimated memory usage:**  1891 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
