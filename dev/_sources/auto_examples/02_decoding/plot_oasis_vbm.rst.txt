
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f3e3169db20>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 204.55360412597656 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 35.94659733772278 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 33.774657011032104 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 32.63152551651001 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 31.615034341812134 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 31.573772192001343 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 31.269918203353885 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 30.7875794342586 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 30.282777786254883 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 29.910265763600666 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 29.55014729499817 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 29.3413952480663 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 29.063904364903767 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 28.7746871984922 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 28.509155579975676 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 28.249019781748455 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 28.03795099258423 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 27.841247909209308 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 27.652607758839924 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 27.501718157216125 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 27.36153817176819 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 27.18550648008074 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 27.008627869866114 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 26.856130817662116 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 26.69029188156128 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 26.52648162841797 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 26.37754693398109 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 26.2442684173584 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 26.072827952248712 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 25.89344442301783 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 25.732752879460655 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 25.56717058920091 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 25.402976274490356 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 25.242913116108287 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 25.08897736493279 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 24.935564620154246 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 24.77376045121087 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 24.601735785200788 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 24.436181658192687 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 24.270689181792434 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 24.11191463470459 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 23.964177236324403 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 23.811220895676385 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 23.659576737603476 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 23.517293800007213 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 23.363398101594715 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 23.211404447970185 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 23.071951374094535 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 22.92234738667806 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 22.772827002466943 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 22.627683877944946 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 22.502892980388566 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 22.34819271014287 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 22.20525143731315 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 22.052717632717556 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 21.905145103281193 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 21.754781791142058 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 21.598548608913756 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 21.43638441480439 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 21.28263828714015 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 21.12702282269796 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 20.975637365560065 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 20.828176144630678 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 20.6711344529712 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 20.508639007806778 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 20.355218190413257 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 20.20513748400139 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 20.059151692176933 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 19.909953243592206 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 19.760750089866526 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 19.608098336628505 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 19.450883307927093 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 19.297186109754772 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 19.14851643941174 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 18.997534816329544 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 18.843775987625122 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 18.697042891853734 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 18.540179218564713 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 18.382016652669662 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 18.229456699347192 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 18.0760281085968 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 17.921441761063942 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 17.769220770859135 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 17.6195815586182 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 17.468850203922816 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 17.314243597142838 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 17.157989002937494 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 17.007468516799225 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 16.853116338903252 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 16.699771208709546 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 16.54958150121901 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 16.396921199756665 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 16.24958060098731 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 16.098693565655783 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 15.95165795975543 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 15.801346741224592 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 15.655322035153706 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.505009909266048 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 15.354154061297981 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 15.205090710611053 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 15.057859897613525 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.909070621622671 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 14.75886056469936 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 14.608126850961481 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 14.455273114717924 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 14.30056915964399 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 14.14581056810775 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.991211971389912 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.839808331595528 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.68671926008452 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.535473628477618 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 13.380270775373992 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 13.22398030757904 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 13.06946321504306 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.919493474458394 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.768622481304666 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.617803696928354 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.46431466860649 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.312283600791027 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 12.161463416924997 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 12.011777559916178 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.861563237245418 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.712092211989107 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.564603330643196 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.415675186341808 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.2674569606781 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.120087423021833 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.972270267216238 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.822230577468872 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.676125979238702 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.525493034949669 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.373293996767233 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.222585042317709 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.069972144033676 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.919157021081269 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.767287651697794 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.616805020500632 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.4668056895263 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.315931859223738 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.165180163417789 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.01539863858904 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.866924569961872 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.717432666832293 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.568710498876504 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.419977611965603 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.27133090742703 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.122287913544536 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.9730354896208055 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.823276990168804 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.673318821311797 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.5233391125996905 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.373254648107566 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.221384776265997 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.071183644089045 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.92083512033735 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.769467715294131 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.619286054219955 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.467666858320783 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.3169794324078135 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.168028939445064 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.017874002456665 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.867652921202761 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.716776306246533 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.566366143021846 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.414708637609714 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.26487279660774 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.114223086690328 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.964671718860101 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.814468792506626 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.664541355956941 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.513850969426772 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.363493018680148 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.213708040326141 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.063409948624628 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.9134963079430594 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.762928077152797 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.6126759702509097 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.4623200004383667 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.3121562486284235 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.1613043420141635 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.0108684963650174 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.860250467753542 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.7095903014088725 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.5588618432237804 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.4079159446384595 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.257276721902796 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.1066360140359532 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.9559620790940555 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.8054040188485 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.654806409563337 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.5044792325873124 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.3540460901110585 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.2037669519583383 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0534313132725848 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9030001409275016 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7526146815373347 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6021739268789486 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4516339229448193 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3010808602728025 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.15055509308474746 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   30.1s finished

    1973 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  18.432 seconds)

**Estimated memory usage:**  1923 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
