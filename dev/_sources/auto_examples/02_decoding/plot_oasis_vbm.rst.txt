
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (:term:`VBM`)
to study the relationship between aging and gray matter density.

The data come from the `OASIS <https://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard :term:`VBM` pipeline (using SPM8 and
NewSegment) to create :term:`VBM` maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the :term:`ANOVA` step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the :term:`ANOVA` step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

:term:`SVM` weights are very noisy,
partly because heavy smoothing is detrimental for the prediction here.
A standard analysis using mass-univariate :term:`GLM`
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 112-123

Prediction pipeline with :term:`ANOVA` and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

In nilearn we can benefit from the built-in DecoderRegressor object to
do :term:`ANOVA` with SVR instead of manually defining the whole pipeline.
This estimator also uses Cross Validation to select best models and ensemble
them. Furthermore, you can pass ``n_jobs=<some_high_value>`` to the
DecoderRegressor class to take advantage of a multi-core system.
To save time (because these are anat images with many voxels), we include
only the 1-percent voxels most correlated with the age variable to fit. We
also want to set mask hyperparameter to be the mask we just obtained above.

.. GENERATED FROM PYTHON SOURCE LINES 123-149

.. code-block:: default


    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 150-152

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 152-165

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-183

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f43b31fa9d0>



.. GENERATED FROM PYTHON SOURCE LINES 184-186

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 186-231

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 163.36917877197266 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 29.95520520210266 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 26.911768198013306 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 26.018006245295208 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 25.526390314102173 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 25.068431854248047 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 24.692920684814457 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 24.422275236674718 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 24.220870971679688 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 24.17611209551493 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 23.939959049224854 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 23.71062430468473 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 23.54166269302368 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 23.405468207139236 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 23.236347811562677 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 23.197439114252727 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 23.033378839492798 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 22.985862788032083 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 22.825121508704292 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 22.65831924739637 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 22.510342597961426 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 22.360719487780617 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 22.217276052995164 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 22.07988076624663 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 22.002821922302246 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 21.921292781829834 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 21.778396368026733 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 21.63008553010446 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 21.485149247305735 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 21.351083722607843 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 21.203726927439373 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 21.060036405440297 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 20.912810504436493 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 20.826617645494867 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 20.685839078005625 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 20.542541946683613 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 20.414725833468967 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 20.27997029794229 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 20.144988976026838 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 20.011328061421715 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 19.879262924194336 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 19.74773451177085 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 19.64000410125369 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 19.50244420628215 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 19.372487848455254 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 19.239842043982613 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 19.107283913570903 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 18.971156571773772 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 18.841444849967957 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 18.71007627370406 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 18.6028733253479 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 18.47779816272212 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 18.351458366100605 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 18.216294198665977 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 18.08862108654446 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 17.959185123443604 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 17.83744219371251 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 17.706733657602676 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 17.602957659754257 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 17.471137749946724 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 17.340415239334106 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 17.212397966228547 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 17.083350973744544 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 16.954264027731757 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 16.824040561914444 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 16.693570100344147 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 16.58234852733034 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 16.45290167651959 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 16.323138503467334 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 16.19452989619711 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 16.06890538760594 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 15.939125050961133 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 15.81406275431315 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 15.690519865245037 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 15.566625227799285 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 15.459111531575521 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 15.332965110477648 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 15.207899576657779 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 15.079126908228947 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 14.951538556738745 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 14.827505350112915 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 14.698749056568854 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 14.572138292033497 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 14.460730196481727 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 14.333841391972133 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 14.207020689459409 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 14.084180648936782 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 13.958126520288403 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 13.831540021029385 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 13.706272401166766 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 13.58019248644511 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 13.468667585771161 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 13.344598780507628 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 13.21867565185793 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 13.09154009311757 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 12.964739498339203 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 12.838457107543945 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 12.712420262012285 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 12.587470220059766 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 12.473061482111612 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 12.34680962562561 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 12.222760386986307 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 12.096842288970947 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.97148471665614 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 11.846736761239859 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 11.728744858787174 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 11.603444382829487 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 11.47997247392886 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 11.364240416774043 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 11.242049739995133 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 11.140305844220249 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 11.015339088869524 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.889536840575081 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 10.763715651183002 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 10.638621924216288 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 10.513215417447297 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 10.393975693604041 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 10.269838734569714 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 10.144184702533787 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.019375889241195 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.895250002543131 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.770013176705227 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 9.645197364150501 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 9.521450474979432 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 9.403106204925045 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 9.278252506256104 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.160822883484856 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.045813106176421 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.92115069925785 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.79626616027004 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 8.671421766281128 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 8.546515981659635 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 8.42591076186209 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 8.301673489405697 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.177696441536519 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.052894477491025 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.927939022288603 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.803174342552241 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.678630701009778 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.554182827901497 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.434048925127302 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.309334168197415 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.184682130813599 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.060335934578956 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.9360287057028875 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.811793154683606 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.687122024901925 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.562912063533757 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.441914036467269 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.31736795694236 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.19245457649231 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.068026717924914 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.944142893741005 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.819513168210298 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.696174993143453 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.571593861426077 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.449658436652942 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.325149492093712 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.200798589972001 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.076509972038509 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.952198028564453 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.828157062115877 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.703780106556268 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.5796248664153865 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.455577960828456 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.333433172919533 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.209484809852508 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.085291005894096 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.9614288239252 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.837310702137693 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.7130713462829594 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.5888213037747385 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.464783169502436 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.3420337224971353 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.217940873113172 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.0937592302049906 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.9697153243151577 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.845784039147156 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.721789234139946 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.5979375999067083 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.4741101529863143 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.3510969897001486 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.227254419536381 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.103437578743273 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.979709832564644 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.8558690741255477 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.7323741784659765 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.6084512529526165 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.4847750055029036 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.3614697065302934 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.237571214374743 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.1137346659655347 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9899305999279022 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.8662283889987925 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.7424916729484637 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6187016536027957 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4949498419858971 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3713518145120689 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.24759732834016435 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.12379247219718281 seconds remaining)
    1974 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 1.791 seconds)

**Estimated memory usage:**  1873 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
