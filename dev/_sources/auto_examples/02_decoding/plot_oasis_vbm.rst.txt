
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (:term:`VBM`)
to study the relationship between aging and gray matter density.

The data come from the `OASIS <https://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard :term:`VBM` pipeline (using SPM8 and
NewSegment) to create :term:`VBM` maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the :term:`ANOVA` step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the :term:`ANOVA` step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

:term:`SVM` weights are very noisy,
partly because heavy smoothing is detrimental for the prediction here.
A standard analysis using mass-univariate :term:`GLM`
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 112-123

Prediction pipeline with :term:`ANOVA` and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

In nilearn we can benefit from the built-in DecoderRegressor object to
do :term:`ANOVA` with SVR instead of manually defining the whole pipeline.
This estimator also uses Cross Validation to select best models and ensemble
them. Furthermore, you can pass ``n_jobs=<some_high_value>`` to the
DecoderRegressor class to take advantage of a multi-core system.
To save time (because these are anat images with many voxels), we include
only the 1-percent voxels most correlated with the age variable to fit. We
also want to set mask hyperparameter to be the mask we just obtained above.

.. GENERATED FROM PYTHON SOURCE LINES 123-149

.. code-block:: default


    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 150-152

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 152-165

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-183

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f8928e890d0>



.. GENERATED FROM PYTHON SOURCE LINES 184-186

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 186-231

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 278.6707878112793 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 49.378408432006836 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 46.8305926322937 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 45.94017958641052 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 45.76771807670593 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 44.67011833190918 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 43.84019009272258 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 43.18425195557731 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 42.82660675048828 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 43.04030344221327 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 42.606595277786255 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 42.12467135082592 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 41.783856232961014 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 41.800943209574775 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 41.50661546843393 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 41.25426228841146 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 40.95702874660492 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 40.65966409795425 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 40.584847079383 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 40.282499953320155 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 39.984174728393555 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 39.69791976610819 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 39.41164229132913 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 39.26138625974241 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 38.95531384150187 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 38.68610405921936 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 38.40540564977206 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 38.270095851686264 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 38.14204491887774 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 37.85062714280753 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 37.58893950780233 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 37.32727090004951 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 37.14509582519531 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 36.89987286654386 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 36.632672534269446 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 36.386734996523174 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 36.152018308639526 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 36.128515353073944 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 35.87215812582719 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 35.59429199878986 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 35.37578773498535 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 35.132963715530025 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 35.067719300587974 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 34.79824938885001 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 34.62616617029364 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 34.3851179016961 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 34.20373025147811 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 33.959654422516515 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 33.70294018586476 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 33.4596334866115 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 33.216947078704834 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 33.050198428771075 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 32.85233407754165 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 32.66705189560944 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 32.51908614017346 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 32.342432347210966 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 32.09848206383842 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 31.857111989406114 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 31.613362419194186 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 31.372738874564735 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 31.167400598526005 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 30.929626926046904 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 30.701522665639075 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 30.482607156511335 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 30.26090943813324 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 30.069849124321575 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 29.838017514257718 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 29.623089950476118 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 29.3851619608262 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 29.1878237793411 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 28.956213235855103 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 28.726904909375687 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 28.501352098253037 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 28.271218649328574 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 28.070405302820976 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 27.828638950983684 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 27.600426084116886 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 27.370816719996466 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 27.169015132463894 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 26.945687535442882 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 26.70999312400818 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 26.481353368288207 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 26.247640208500187 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 26.03607858232705 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 25.802400123505365 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 25.565713419633756 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 25.32294980315275 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 25.095389985490122 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 24.881730122999713 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 24.66700373338849 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 24.425723128848606 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 24.185583510241663 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 23.94510937773663 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 23.726056803939166 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 23.49130399176415 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 23.260678278772456 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 23.030833423137665 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 22.819661654147904 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 22.58817300504568 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 22.36537770791487 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 22.12836241722107 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 21.900458895333923 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 21.683475026897355 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 21.453086695624787 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 21.226745752187878 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 21.029465539114817 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 20.795209907135874 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 20.580746271899926 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 20.352793128402144 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 20.119156524675702 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 19.885225621136755 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 19.65417798360189 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 19.44345097882407 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 19.212960359269537 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 18.98554978454322 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 18.755814541941103 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 18.542105592530348 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 18.318912106701454 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 18.096450922852856 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 17.87113910562852 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 17.647168000539143 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 17.439998333119163 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 17.21919734751592 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 16.997031822437194 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 16.776665310705862 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 16.554439115524293 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 16.3433009102231 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 16.124057707824107 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 15.898903772234917 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 15.671293020248413 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 15.459144133787888 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 15.236585598865538 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 15.012200304956147 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 14.793512684958323 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 14.569477750294244 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 14.361018269150344 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 14.139197181252872 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 13.911129827917057 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 13.686286957367606 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 13.463968939060788 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 13.248036452702113 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 13.024235561384376 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 12.801205933933527 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 12.583730280816138 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 12.380197127660116 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 12.160623616185681 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 11.938477463918188 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 11.714880208579862 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 11.490792622437349 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 11.274201301920334 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 11.051153659820557 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 10.827559431657097 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 10.605091245550858 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 10.382512519562168 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 10.163759949919465 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 9.941755010235696 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 9.717567511093922 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 9.493186428288745 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 9.273883608323109 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 9.049966285813529 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 8.827001810073853 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 8.605686380256037 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 8.383615005163499 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 8.1668815919958 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 7.944919301242363 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 7.722215724713875 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 7.500905918787761 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 7.2784879022015785 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 7.058287575131371 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 6.834983094909487 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 6.612394052393297 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 6.390076428128961 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 6.168343898861908 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.954019317737204 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.733585702961889 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.51209442956107 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 5.294837106357921 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 5.075346542617022 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.852912624230545 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.631418152228414 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.410181522369385 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 4.189972046330489 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.97034563599052 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.74833132269604 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.526527819426163 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.3064232710245496 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 3.085727899305282 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.8661968351047946 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.6450712934453433 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.424374874306734 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.204069263056705 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.9843683430037573 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.7633445660273233 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.542334592404143 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.3216944134112487 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.1011082025674672 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.8810495892349554 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.6605850669938296 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.44030185901757446 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.22011756178122668 seconds remaining)
    1987 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 36.338 seconds)

**Estimated memory usage:**  1900 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
