
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fbb31dbb340>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 153.17916870117188 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 25.69741678237915 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 24.239835262298584 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 23.46674211819967 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 23.03231453895569 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 22.73473834991455 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 22.46228281656901 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 22.194837502070836 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 22.01004981994629 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 21.802461703618366 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 21.660119771957397 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 21.540124784816395 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 21.400105396906532 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 21.268533651645367 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 21.14953637123108 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 21.030105511347454 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 20.90121018886566 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 20.781878429300647 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 20.66753930515713 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 20.541511347419338 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 20.408891916275024 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 20.28154641106015 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 20.15546484427019 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 20.04592273546302 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 19.918458143870033 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 19.786280632019043 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 19.681307755983795 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 19.562072815718473 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 19.43983592305865 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 19.314549158359394 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 19.202938715616863 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 19.094379786522158 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 18.983892023563385 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 18.871981382369995 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 18.75498749228085 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 18.63891557284764 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 18.532658550474377 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 18.423933377137054 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 18.33205849245975 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 18.225605212725128 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 18.116217613220215 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 18.000972137218568 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 17.886685314632597 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 17.77493042724077 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 17.656502333554354 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 17.542743391460842 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 17.43028269643369 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 17.317573527072337 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 17.2058154741923 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 17.091711146490915 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 16.986291646957397 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 16.871646044301052 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 16.757141443399284 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 16.640587617766183 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 16.52637909076832 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 16.41121693090959 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 16.304908275604248 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 16.191194132754674 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 16.073684749932124 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 15.95666708380489 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 15.840290228525799 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 15.723873529277865 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.616486326340704 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.52856033188956 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 15.417137682437897 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.30676240187425 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 15.19503952517654 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.08542589998957 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 14.973306403440587 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 14.861043601796247 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 14.755233219691686 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.645941952584495 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.535210927327473 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.422188089318473 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.313077475573564 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 14.200768073399862 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.088315035167494 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.997548063080032 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.886954325896044 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.77473464495019 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.66403603553772 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.550954486116952 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.437808147290857 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.325807729399347 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.211659874234881 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.097305480171654 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.983306624168572 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.872270142895053 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.757740410891445 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.644643955016404 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.542717297871908 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.428777621342585 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.314615405124167 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.200890123203237 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.086438067415926 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.972533351496647 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.858212232589722 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.744935301161304 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.632316745057398 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.518618318769667 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.404337644577026 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.289412389887442 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.180676460266113 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.0678280048 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.953387407156137 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.839315766379947 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.726261746208623 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.613012445307223 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.50171559828299 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.390314961792132 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.27714152769609 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.165556731524768 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.051885059901647 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.940186285339625 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.825548841242204 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.709413113801375 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.592506162051498 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.4763472182119 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.361310886124434 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.24741089043497 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.13523530960083 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.019094360761407 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.903075519155284 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.78682453457902 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.670443004177462 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.555618906021119 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.439928130498009 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.324052461488979 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.208870247006416 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.094928318215894 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.981116606638981 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.8657045200580855 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.749587832075177 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.634266727849058 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.518798917087156 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.402926895353529 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.287416570326861 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.171675976175461 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.0570212378018145 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.941278992796973 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.825797285352434 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.71082008984072 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.595718454307234 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.480506828614882 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.365818725691901 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.251073376885776 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.136628062757727 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.022710182228867 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.908429197362952 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.793955050858876 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.679452498753865 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.565232592702701 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.4509376224718595 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.336967656814974 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.22252404844606 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.1092604206454375 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.998688300450643 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.885974689653724 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.773017614702635 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.660769084714493 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.548967361450195 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.43609915460859 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.323272722738761 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.21057756108009 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.098670721054077 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.9860135208476675 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.873083421982914 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.759874580862993 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.6465400968279154 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.53219888196189 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.4179675579071045 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.3037672516895316 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.1896445640297824 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.075870425714923 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.9621058798384396 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.8484535557883124 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.7346337166699493 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.6208111956968145 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.5075547829102933 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.393778486624776 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.2798171308305526 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.1658894857648985 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.051903289753002 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.9380549707047927 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.8241446329199749 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.7102027583766628 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.5962653954823813 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.482422789150381 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3683369108971128 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2542551282852414 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.140176308782477 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.0261291471451366 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.912056823571523 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7980433090980806 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6840672837090247 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.570021390914917 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4559637673047124 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.34199228020488914 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.22798194788923168 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11400937794440955 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   22.8s finished

    1941 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  59.448 seconds)

**Estimated memory usage:**  1857 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
