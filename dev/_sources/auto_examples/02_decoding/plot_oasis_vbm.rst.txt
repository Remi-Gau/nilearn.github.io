
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-142

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 143-145

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 145-158

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 159-161

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 161-176

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f8609bb6fd0>



.. GENERATED FROM PYTHON SOURCE LINES 177-179

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 179-223

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 265.0594711303711 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 51.10290265083313 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 48.29556369781494 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 46.883666356404625 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 46.088765144348145 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 45.12403464317322 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 44.89201108614604 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 44.953789983476916 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 44.48602294921875 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 44.13456516795688 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 43.84323167800903 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 43.562829494476325 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 43.0963655312856 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 42.65465318239652 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 42.21693788255964 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 41.84185274442037 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 41.502819657325745 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 41.189647562363575 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 40.868077490064834 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 40.60335499361942 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 40.38692235946655 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 40.1630779334477 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 39.92632300203497 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 39.64794640955718 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 39.34893528620402 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 39.1176393032074 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 38.86828064918518 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 38.680844448230886 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 38.512197732925415 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 38.3254816532135 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 38.11111052831014 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 37.92940690440516 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 37.720700204372406 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 37.522769740133576 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 37.30265066202949 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 37.09423123087202 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 36.85104881392585 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 36.85471490911535 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 36.66815317304511 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 36.42970673243205 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 36.26315116882324 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 36.05917786970371 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 35.819552421569824 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 35.639880651651424 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 35.444484667344526 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 35.19738615883721 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 34.928007944770485 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 34.68150676564967 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 34.436242183049515 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 34.20209002008244 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 33.98324418067932 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 33.76584518657011 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 33.54378126217769 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 33.30686441457497 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 33.12644133744416 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 32.894308220256455 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 32.68835040501186 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 32.47196538824784 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 32.230422143278446 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 31.99723598108453 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 31.74556581179301 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 31.495196193945215 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 31.249444230910267 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 31.02801295689174 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 30.783176720142365 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 30.548499639217674 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 30.2991426858035 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 30.0579388675405 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 29.826636524761422 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 29.596972544987995 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 29.35260834012713 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 29.11462063520727 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 28.878284454345703 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 28.661504572384978 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 28.436422096716388 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 28.204743067423504 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 27.970577829762508 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 27.73981968148962 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 27.526197971441807 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 27.276909088786642 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 27.030071139335632 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 26.782487566088456 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 26.546775364294284 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 26.313940415899438 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 26.101207472029188 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 25.865760410533234 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 25.634795665740967 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 25.417889416902916 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 25.181913289156828 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 24.948175264208505 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 24.731443617078995 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 24.50214534015446 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 24.275630950927738 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 24.051357753815193 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 23.83772230655589 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 23.610488477506138 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 23.406837781270344 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 23.186664932781888 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 22.959242543395685 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 22.734624910836267 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 22.506555557250977 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 22.282734590001624 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 22.05269160457686 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 21.81653359792765 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 21.583664087148815 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 21.3624168691181 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 21.1324550025868 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 20.906468032676482 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 20.674850622812908 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 20.45467362928828 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 20.229409217834473 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 19.99997343888154 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 19.76683270931244 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 19.53260044503001 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 19.301782942654793 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 19.077519862548165 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 18.85086018463661 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 18.630580565868282 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 18.407426817942476 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 18.19013704572405 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 17.96585734685262 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 17.73881730560429 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 17.512916025568227 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 17.29449366554012 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 17.068983177984915 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 16.85080347061157 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 16.62382070980375 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 16.40112536160026 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 16.17731747031212 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 15.952722386796344 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 15.730228442412155 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 15.505893568956214 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 15.28292289647189 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 15.056533619873507 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 14.828684262375333 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 14.608835379282633 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 14.385900273042566 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 14.160154414002912 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 13.936269901800847 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 13.713946747265274 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 13.490246772766113 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 13.265348311011673 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 13.039902065841245 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 12.814503097867632 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 12.593262751897177 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 12.367641605179884 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 12.139936963172808 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 11.913891091638682 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 11.688649241988724 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 11.46464394082959 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 11.240376551946003 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 11.015842041432462 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 10.789077307048597 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 10.567980107139139 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 10.346667264963125 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 10.12017797654675 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 9.89447885293227 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 9.672929239880506 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 9.450504849228677 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 9.22540855257766 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 9.003377318382263 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 8.778494991871142 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 8.556791864795448 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 8.331560632202523 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 8.106145341221879 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 7.879233519236247 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 7.653704723679875 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 7.4310802271266185 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 7.209019570123581 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 6.984417126728938 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 6.759683342540966 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 6.53388356047067 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 6.3085246696028605 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 6.084591237106764 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.858244243709521 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.632426295961652 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 5.406600301915948 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 5.180823990180667 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.9555817802300615 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.730411484254805 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.504908031887478 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 4.279372045348362 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 4.054039116744157 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.829364935557048 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.60374116897583 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.378412659103806 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 3.153070052464803 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.928297162693452 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.7030498322020184 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.47934570262041 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.2545622524462248 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 2.0288907657743125 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.8034463624159494 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.5780218598756146 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.3525638187054507 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.1271811448610745 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.9016293895487882 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.6761015381304746 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.45074541400177315 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.22539596941003848 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   45.1s finished

    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  31.984 seconds)

**Estimated memory usage:**  1908 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
