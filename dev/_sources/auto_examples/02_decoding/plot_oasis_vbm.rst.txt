
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f3fd60bf250>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 149.37162399291992 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 25.06463885307312 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 23.39358115196228 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 22.684811194737755 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 22.282460927963257 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 21.96375846862793 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 21.785529057184856 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 21.690278802599227 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 21.50606346130371 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 21.386224614249336 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 21.212361097335815 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 21.039680177515205 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 20.878675540288288 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 20.747353773850662 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 20.598355395453318 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 20.446637630462646 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 20.295395493507385 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 20.16905072156121 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 20.038273122575546 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 19.91863674866526 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 19.824176788330078 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 19.715591442017327 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 19.59073755957864 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 19.482113040011864 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 19.37039852142334 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 19.26364517211914 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 19.190574095799374 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 19.072399969454164 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 18.96163582801819 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 18.882457716711635 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 18.772039810816448 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 18.69541667353722 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 18.59780842065811 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 18.477340633218937 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 18.36425994424259 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 18.254458257130214 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 18.14409261279636 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 18.02455465858047 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 17.90767734929135 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 17.795898474179783 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 17.68341636657715 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 17.557274702118665 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 17.437364907491773 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 17.321444306262702 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 17.200525175441395 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 17.07779187626309 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 16.957439329313196 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 16.846569040988353 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 16.725601951281227 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 16.605025544458506 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 16.493149280548096 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 16.389321944292853 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 16.276508808135986 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 16.169339836768383 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 16.059702343410915 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 15.948287053541703 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 15.837213175637382 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 15.7240311346556 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 15.61702041790403 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 15.514363967766196 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 15.402916510899862 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 15.290147859542097 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.176171571977676 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.060612284947954 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 14.949573278427124 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 14.841378670472366 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 14.73055593172709 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 14.62675686736605 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 14.517467526828542 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 14.406992431999981 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 14.296802793230329 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.190707283960261 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.080067952473957 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 13.96888169523788 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 13.860692333530734 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 13.746442794799805 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 13.632429135473151 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.516961630288657 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.406354690209414 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.3014061118983 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.19057035446167 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.083608412448271 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 12.97130195105948 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 12.858371318104755 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 12.74661720366705 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 12.635786954094383 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.526776485664898 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.415342917387514 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.3057993108576 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.193817082415805 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.083670616149904 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 11.974711839969341 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 11.865407902261486 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 11.756130931197957 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.644583220177507 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.532155852568778 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.420933723449707 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.313223521734022 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.205975775816004 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.09593309055675 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 10.985604286193848 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 10.87565508219275 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 10.767842657425824 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.658694612169729 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.548093135540302 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.437942947660174 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.32989911313327 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.221558729064798 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.11260633998447 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.003943812956503 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 9.894452333450317 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 9.785462551288777 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.674385513578143 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.566239249389783 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.456131370444046 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.346355085787565 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.237203787113058 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.12828286488851 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.018868911064278 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 8.90881315199267 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 8.798822085062662 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.688120036085776 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.58305721595639 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.472461328273866 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.361775659745739 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.252362060546874 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.141661878616091 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.030828308871412 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 7.921614915132523 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 7.811921262001806 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.701880858494685 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.591340226981476 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.483144839604695 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.374892078844229 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.2649523820450055 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.157897905067161 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.046577004825368 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 6.936282540759901 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.826477524163066 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.716650563178303 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.607465880257743 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.497074247252011 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.3866110385303765 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.27735658792349 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.168082409434849 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.057890620724908 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 5.947841317686316 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.838345668753799 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.728526050980027 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.619163124353293 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.509051561355591 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.398614618162446 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.288184416921515 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.178050923191645 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.067937745676412 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.957717687852921 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.847289922909859 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.736609922093191 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.6261754307565806 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.515794644565702 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.4056782722473145 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.295903694555626 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.185512098265282 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.075132334890541 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.9651284799343203 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.8554269256013813 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.7445294770849755 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.634561047582569 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.5241011210850304 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.4135637904059957 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.3031004737405216 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.1927544457173487 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.082902980405231 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.972344810563016 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.861755439604836 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.751429012843541 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.6410549228841607 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.5307375361016913 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.4206808952803023 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.3105519004374244 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.200279129876031 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.0902378941109165 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.9799219487787603 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.8699005210334487 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.7599896762682044 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.6499212754739299 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.5400485633521952 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.430086862594686 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3203907165121525 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2104914238843967 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.101455199091058 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.9912051343168888 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.8809854984283447 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.77082509203896 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.660685536787682 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5505061088464199 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4403321888982033 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3302479371201569 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.22013675805294156 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1100517972629873 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   22.0s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  58.361 seconds)

**Estimated memory usage:**  1848 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
