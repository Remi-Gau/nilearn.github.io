
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-142

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 143-145

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 145-158

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 159-161

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 161-176

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f0bf55c8520>



.. GENERATED FROM PYTHON SOURCE LINES 177-179

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 179-223

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 300.55999755859375 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 50.91867256164551 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 47.44808220863342 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 46.66330599784851 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 45.889695167541504 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 45.24450373649597 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 45.484005848566696 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 45.08035693849836 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 45.14990043640137 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 44.85856795310974 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 44.33011555671692 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 44.06986531344327 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 43.83498001098633 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 43.7162802035992 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 43.69289783069066 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 43.494214375813804 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 43.20106887817383 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 43.07043696852292 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 42.748631954193115 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 42.40074101247286 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 42.005378007888794 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 41.78260019847325 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 41.47572010213679 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 41.15044203011886 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 40.80836741129557 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 40.53484630584717 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 40.26011274411128 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 40.01601379005997 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 39.74705539430891 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 39.551996420169694 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 39.3007284005483 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 39.00602111508769 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 38.74545747041702 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 38.49212650096778 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 38.27585168445812 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 38.011064120701384 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 37.72791232003106 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 37.49180862710283 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 37.24323019228484 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 37.01032908146198 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 36.7619104385376 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 36.552834156082895 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 36.30395359084719 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 36.05920206114303 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 35.823861382224344 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 35.5888270272149 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 35.3450446854467 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 35.14012268756298 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 34.91722881793976 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 34.83740843558798 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 34.65528988838196 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 34.40554223808588 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 34.20446859873258 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 33.98894293353243 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 33.75826347315753 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 33.53299927711487 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 33.29004560198103 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 33.05990976199769 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 32.87787296032083 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 32.623863495002354 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 32.431529442469284 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 32.174436287801775 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 31.926300910211374 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 31.68174492745172 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 31.442753940820694 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 31.212342408987194 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 30.954525795849886 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 30.710205853875003 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 30.478203450932224 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 30.252914563469265 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 30.004726852689473 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 29.76491070129502 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 29.547392103407116 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 29.311503142526707 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 29.067835034550846 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 28.8329025109609 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 28.589124717210467 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 28.350737711051842 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 28.117041318844525 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 27.906630890278876 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 27.67021644115448 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 27.433015361244298 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 27.191386176318655 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 26.945036302129907 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 26.702512672969274 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 26.46234519341413 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 26.23213001739147 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 25.99631013541386 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 25.76313729719682 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 25.529694356275407 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 25.30588926209344 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 25.06248280242249 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 24.825566271077033 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 24.60645466978832 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 24.40097755066892 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 24.167974798302904 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 23.93214068810145 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 23.699231894974854 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 23.46511780485815 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 23.24097377603704 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 23.006515502929688 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 22.771118961938537 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 22.535317411609725 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 22.31299753096497 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 22.07996573814979 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 21.84780866759164 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 21.611693314786226 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 21.376715423904848 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 21.146528482437134 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 20.913609244407862 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 20.672638307918202 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 20.43645157255568 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 20.201665009771073 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 19.965565529544797 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 19.732886690842477 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 19.5016030124996 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 19.268587564599926 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 19.042293124728733 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 18.81328805422379 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 18.580289131453057 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 18.351107915242512 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 18.12143349450482 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 17.88992467473765 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 17.67489336758125 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 17.44613595931761 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 17.21857695579529 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 16.994324301916457 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 16.759735691265796 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 16.52329185605049 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 16.290697814882265 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 16.05793595314026 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 15.82646298954505 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 15.602856701070612 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 15.370526530688867 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 15.13829574300282 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 14.907255234541715 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 14.67647429073558 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 14.441969455593693 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 14.209095032318778 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 13.98575785177217 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 13.755252804074967 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 13.525188522135958 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 13.298632158360011 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 13.069066531174666 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 12.840729567739698 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 12.609473401102527 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 12.377621010558245 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 12.147700737933723 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 11.918008501465257 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 11.687054646895236 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 11.455120007197062 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 11.223012794721996 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 10.99238378123233 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 10.76347867647807 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 10.535651008804123 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 10.307189964479017 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 10.07795161467332 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 9.848833559425014 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 9.619133224970177 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 9.391581076496053 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 9.160831034183502 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 8.931310588528651 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 8.70064041055279 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 8.47072430476089 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 8.241611759837081 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 8.013961083961256 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 7.783993890486568 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 7.556500800355466 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 7.3263795489356625 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 7.0969558001975335 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 6.869920912910911 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 6.641153067873235 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 6.4119028157966085 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 6.183736138261123 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.955684094593443 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.727094445909772 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 5.496645569801331 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 5.267280531468364 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 5.03895030664594 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.8095870177839055 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.580491489834255 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 4.351490874316811 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 4.122446104720399 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.8938667526662027 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.6647156839785366 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.435357763960555 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 3.2062606657705 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.977464581555861 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.747921324790792 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.5200583884324974 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.290602282473915 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 2.062042588338802 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.833370010058085 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.6041918072675792 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.3748780796208333 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.145666813239073 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.9163583492746158 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.6872981151348443 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.4582067884580054 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.2291008287937797 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   45.8s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  38.800 seconds)

**Estimated memory usage:**  1898 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
