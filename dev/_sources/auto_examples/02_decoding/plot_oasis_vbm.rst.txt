
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f2b89c4e850>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 175.7502555847168 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 32.14195895195007 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 29.61622667312622 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 28.646956205368046 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 27.901982069015503 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 27.668866395950317 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 27.28649973869324 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.94287317139762 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.61910629272461 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 26.376692983839245 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 26.165624618530273 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.97723507881165 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.796916484832764 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.625425540483917 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.49911093711853 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 25.368221918741863 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 25.243574023246765 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 25.096924234839047 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 25.131779962115818 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 25.016520211571144 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.972825050354004 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.845532678422472 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.689295942133125 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 24.552341751430347 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 24.374553203582764 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 24.207818746566772 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 24.027461473758404 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.881177328251027 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.721171719687327 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.563191767396596 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 23.391650199890137 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 23.246133304411362 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 23.098924040794373 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.962567083763354 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.81986633469077 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.670631408691406 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.518428617053562 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 22.36471248317409 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 22.21931015817743 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 22.081324259440105 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.93155574798584 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.789516047733585 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.64856586002168 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.506428646486857 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.37104944749312 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 21.236635737948948 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 21.090023901151575 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.938231914601428 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.79870088895162 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.673728962333836 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.53947401046753 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.402500774346144 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 20.26571503052345 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 20.133165350500143 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.99579882621765 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.852464892647482 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.71794353212629 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.577007799817803 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.438209015747596 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 19.29711625535609 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 19.159112850824993 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 19.01690426419993 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.910427847216205 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.799850361687795 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.66325181722641 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.522926935782802 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.383943897305112 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.24935203523778 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 18.113372830783618 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.97467513706373 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.833011865615845 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.69152983477418 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.552785237630207 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.409632836302666 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.264639545131374 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 17.125335534413658 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.982024882969103 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.83656390301593 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.695927778879803 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.551999837537355 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.40980339050293 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.268065373102825 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.128327625553784 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.98569833514202 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.844346625464302 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.703170019037584 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.561488711556722 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.425323985088832 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.286054134368896 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.148659933818859 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.008181916342842 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.867534611251328 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.728587845097419 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.593953178774926 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.453616756073972 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.315161454050166 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.17627680301666 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.037685153410607 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.898071945930015 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.759784002496737 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.62068247795105 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.482266083802326 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.343320332321467 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.205059697327105 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.067678965055027 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.930231412251791 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.795263717759331 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.65975935882497 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.52242617253904 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.384202416883696 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.247163967652755 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.109345687402262 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.971943174089704 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.837175531724913 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.699923778835096 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.561244912769483 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.423251415121145 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.286522567781628 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.147955967208087 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.011306568354119 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.872623761494953 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.73477772444733 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.597330863358545 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.45948023718547 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.321893045979161 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.184279537200927 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.047084539655655 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.910558895801934 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.773062258958817 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.63597472139107 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.498938267047588 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.362088672987378 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.225821299986405 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.089381262772067 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.953885679814352 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.817389753129747 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.681324678308824 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.544867190131306 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.41164145262345 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.277127849112311 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.141908305031912 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.006337766106247 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.870967277338807 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.735434703893595 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.600133432282342 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.465133913632097 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.329807052873585 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.194220664549848 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.0583623808783456 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.923383799175288 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.787491639455159 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.652115177634536 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.516259620064183 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.381000010795843 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.246009402460866 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.111158586317494 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.9757710970365086 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.839762551010034 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.703717162337484 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.567426894445839 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.431586265563965 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.295563856267041 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.159593205393096 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.023653732487029 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.887967324838406 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.751596291859944 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.6156648842685195 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.481142496634386 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.3454316002982 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.209849215118137 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.074219451231115 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.9395005605374163 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.8050209533336554 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.6690317895371103 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.533147450151115 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.397392817905971 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.2614794210954146 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.125440977387509 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.989573671576682 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.853615213372854 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.717888116836548 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.5820794434837215 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.446832523241148 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.310954186434303 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.1750463195469067 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.0390301395106962 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.9038478584699734 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.767850326344291 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6318161538306701 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.495809174088574 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3599035865382143 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2239600201551828 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0879316329956055 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9519220065576424 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.815932966999172 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.679919346784934 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5438957895551408 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4078865365933646 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.27192221265850647 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13594266278060838 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   27.2s finished

    1985 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  7.582 seconds)

**Estimated memory usage:**  1931 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
