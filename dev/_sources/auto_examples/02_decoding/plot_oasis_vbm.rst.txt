
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (:term:`VBM`)
to study the relationship between aging and gray matter density.

The data come from the `OASIS <https://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard :term:`VBM` pipeline (using SPM8 and
NewSegment) to create :term:`VBM` maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the :term:`ANOVA` step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the :term:`ANOVA` step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

:term:`SVM` weights are very noisy,
partly because heavy smoothing is detrimental for the prediction here.
A standard analysis using mass-univariate :term:`GLM`
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 112-123

Prediction pipeline with :term:`ANOVA` and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

In nilearn we can benefit from the built-in DecoderRegressor object to
do :term:`ANOVA` with SVR instead of manually defining the whole pipeline.
This estimator also uses Cross Validation to select best models and ensemble
them. Furthermore, you can pass ``n_jobs=<some_high_value>`` to the
DecoderRegressor class to take advantage of a multi-core system.
To save time (because these are anat images with many voxels), we include
only the 1-percent voxels most correlated with the age variable to fit. We
also want to set mask hyperparameter to be the mask we just obtained above.

.. GENERATED FROM PYTHON SOURCE LINES 123-149

.. code-block:: default


    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 150-152

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 152-165

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-183

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7effd19da4c0>



.. GENERATED FROM PYTHON SOURCE LINES 184-186

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 186-231

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 266.1275863647461 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 47.46925711631775 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 46.541969776153564 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 44.89322129885356 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 43.76554608345032 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 42.77921104431152 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 42.15801501274109 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 42.18308196749006 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 42.088279724121094 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 41.625070015589394 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 41.1312575340271 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 40.83828312700445 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 40.84603476524353 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 40.47389228527363 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 40.14245459011623 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 39.89959645271301 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 39.933685183525085 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 39.63862849684323 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 39.30754277441237 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 39.034422723870534 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 38.69707703590393 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 38.64102976662772 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 38.37396485155279 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 38.10535887013311 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 37.89202086130778 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 37.60439705848694 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 37.5080775481004 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 37.26593509426824 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 36.99880790710449 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 36.73672216514061 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 36.50242614746094 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 36.40832088070531 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 36.14795225858688 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 35.94919700333566 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 35.74432447377374 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 35.52597151483808 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 35.44830224249098 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 35.192217137362505 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 34.956809407786324 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 34.730630538402465 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 34.47278022766113 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 34.321369310704675 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 34.07504844665527 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 33.822707464528634 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 33.571057384664364 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 33.337566958533394 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 33.17113246088443 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 32.92460859075506 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 32.6860955953598 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 32.43573422334632 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 32.22018313407898 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 32.109937359304986 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 31.898093425310577 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 31.667087640402453 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 31.441429535547893 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 31.203769228675146 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 31.078549861907963 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 30.883466206098856 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 30.715937055390455 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 30.564873460995948 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 30.403847853342693 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 30.186941854289323 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 29.973078673885713 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 29.75446290061587 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 29.56264168024063 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 29.387366900077236 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 29.17188290393714 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 29.017834207904873 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 28.780572358299704 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 28.58188824377198 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 28.343262808663507 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 28.107439716097335 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 27.87652164035373 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 27.65515430659464 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 27.501432451041968 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 27.283274730046593 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 27.07551080302188 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 27.04188646279372 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 26.853270549040573 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 26.613353665870957 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 26.38559353351593 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 26.162923924716903 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 25.92569847804744 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 25.736065114837096 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 25.56120236714681 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 25.420260850120993 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 25.25972314213597 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 25.10798984286429 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 24.877796910025857 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 24.6362582726425 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 24.399756140179107 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 24.195906023402788 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 24.03231690240943 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 23.823551080560172 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 23.60588837684469 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 23.370544119885096 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 23.15804225206375 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 22.9322142478117 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 22.707115742625025 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 22.49983370183694 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 22.27863121032715 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 22.085463821297825 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 21.879421421125823 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 21.64330457020732 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 21.404310299799995 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 21.172984373001825 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 20.96764048090521 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 20.74947251337711 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 20.518547137578327 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 20.29417868929172 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 20.117740761150014 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 19.89426198521176 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 19.66265537057604 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 19.435581555408714 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 19.215731800648204 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 18.999854585398797 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 18.764588528666003 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 18.532334366415302 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 18.299626002877446 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 18.065901451751966 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 17.84898042678833 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 17.61253160090486 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 17.377824478462095 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 17.143467218895267 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 16.911625469884566 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 16.712330102920532 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 16.496445572565474 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 16.264540845014917 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 16.03594681620598 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 15.816003104513005 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 15.586736789116491 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 15.362361884299125 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 15.14535363515218 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 14.928751710662269 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 14.710767703269845 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 14.482982326436925 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 14.254586388083066 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 14.027354275223113 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 13.799931139185809 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 13.585971082714822 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 13.356166975838796 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 13.133835077285767 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 12.908943894883278 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 12.680012911349744 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 12.463341275850931 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 12.236428005941983 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 12.011007599634667 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 11.79240251398411 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 11.579018058003607 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 11.351123211367819 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 11.124785025914509 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 10.903369253044886 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 10.684656143188477 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 10.471859892988517 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 10.250908746347799 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 10.033421354909098 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 9.807361315458248 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 9.581480038393835 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 9.365656994566132 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 9.139120863668573 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 8.913536965847015 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 8.687310423169817 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 8.467408733603394 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 8.240483591161622 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 8.014494285350892 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 7.7884556596929375 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 7.562338360820908 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 7.342585185330785 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 7.117441813151041 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 6.8937895481403055 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 6.6696795155020325 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 6.445006875266805 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 6.225684997647308 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 6.002746863172233 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.779682236156245 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.554809979030064 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 5.331169139255176 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 5.111062212852435 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.887879130545627 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.664577759843965 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.441797574361165 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 4.2187709597592855 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.9982576108240817 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.775725048096454 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.5529439967611562 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.330404133410067 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 3.1098537188704296 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.8890691390012035 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.667564868927002 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.444890883864549 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.222266724235133 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 2.0009839959169557 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.7790144383907318 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.5561732912310664 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.3333596814539015 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.1107495931478646 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.8892268939894072 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.6669908465467734 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.44458358938043774 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.2222398333813078 seconds remaining)
    1981 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 35.437 seconds)

**Estimated memory usage:**  1903 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
