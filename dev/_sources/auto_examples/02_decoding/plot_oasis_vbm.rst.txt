
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-60

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 61-63

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 63-86

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 87-89

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 89-105

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 106-108

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 108-143

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 144-146

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 146-159

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 160-162

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 162-177

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f764762a190>



.. GENERATED FROM PYTHON SOURCE LINES 178-180

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 180-225

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 180.816650390625 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 27.60153889656067 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 25.563162088394165 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 25.018877506256107 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 24.646930932998657 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 24.227240324020386 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 24.014185746510826 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 23.690626995904108 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 23.400409698486328 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 23.119323041703964 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 22.861273050308228 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 22.669880585236985 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 22.56522274017334 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 22.4145484154041 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 22.25926923751831 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 22.120564858118694 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 21.944275617599487 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 21.812764279982623 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 21.64235430293613 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 21.480380510029043 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 21.307498455047607 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 21.1511903830937 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 21.00371993671764 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 20.917066501534503 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 20.773913224538166 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 20.64390540122986 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 20.50826800786532 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 20.365835578353316 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 20.24191277367728 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 20.129904146852162 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 20.005475918451946 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 19.91089916229248 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 19.81545728445053 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 19.709946870803833 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 19.591716037077063 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 19.470454624720983 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 19.347486707899304 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 19.22656548345411 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 19.10143563621923 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 19.006661311174053 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 18.887582778930664 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 18.77979598394254 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 18.655288821174985 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 18.540415131768516 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 18.4168550751426 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 18.30368789037069 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 18.20050704997519 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 18.085499190269633 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 17.97019672393799 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 17.849594563853984 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 17.727684259414673 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 17.59837640500536 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 17.47017209346478 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 17.343902956764655 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 17.21756430025454 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 17.09199057925831 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 16.967294352395196 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 16.84585360476845 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 16.7273340307433 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 16.6080424219875 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 16.482814391454063 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 16.35828745169718 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 16.241171952216856 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 16.119480170900857 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 15.998286098241806 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.878164529800417 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 15.756156408425532 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.636870804117686 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 15.522581577301025 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 15.409985100013623 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 15.292199509484428 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 15.172987108499232 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 15.05552503797743 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.935949936305008 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.822022025649611 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 14.702095190684002 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.581982436933016 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 14.461265867406672 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 14.339919383709248 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 14.218042325369918 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 14.098632216453552 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.97946865764665 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.85734084175854 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.736137752073358 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.618003152665638 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.501615902956795 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 13.388271148814711 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 13.27358959735125 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 13.15443567796187 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 13.038335540321436 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.926187806659275 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.81317343554654 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.705427066139555 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.590924011763708 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.476886495630792 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 12.360266296487106 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 12.243178884188334 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 12.124392074407991 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 12.00950863896584 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.890128824445936 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.771477699279785 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.650988569354066 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.530676224652458 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.41435050038458 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 11.29857686849741 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 11.178014959607806 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 11.057059985286784 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.936060814099891 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.817037167372527 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.69706842439984 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.57679733363065 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.456285929894662 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.335674268858773 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 10.218014248704488 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 10.097460989366498 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.978287831596706 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.859910364808707 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.741958986999643 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.622863729121322 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.503354811868748 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.384572664896647 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.264942117959015 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 9.144451794077138 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 9.02454376996048 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.913211953255438 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.794500017166138 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.678791746260629 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.560346995751688 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.442049160599709 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.324221490889556 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 8.207511204939621 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 8.092325590949022 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.977248032887776 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.860471813302292 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.744408810316626 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.628194076043588 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.511045119341682 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.3936509581377905 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.27687406539917 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.159153782206474 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.041452203478132 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.925899574942623 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.808565932260433 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.69024358929454 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.572178032663134 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.45434990422479 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.336174360693318 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.218473651782185 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.101190083735698 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.984587669372559 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.866851886113484 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.749613862953439 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.632327757383647 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.514195485831865 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.395944759443209 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.278064466291859 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.160841978513277 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.043119614291343 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.925934809672681 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.808828110964793 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.691516041755676 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.573698591741716 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.4556917496669435 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.337692380682823 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.219672313550624 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.101722565564242 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.984016128333218 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.8668363693945422 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.7494417372204007 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.632681998980821 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.5154475324294148 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.398444656740155 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.281421589296918 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.1639771778459496 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.0471811321960103 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.9298063346317833 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.8128044713627207 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.697133528984199 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.5798484636156744 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.4625900484330163 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.3452751901414657 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.2282039447383983 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.1111066341400146 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.9939564303622221 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.8770898114080015 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.7602935288403487 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.6429520268594067 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.5255521644245496 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.4082579359095146 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2909227868236561 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.1736542425657572 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.0562238468549638 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9388416707515717 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.8214647881107626 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.7041367845436962 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5867555447113819 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.46936382566179546 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.35214671870778663 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.23474311587786437 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11736662303982069 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   23.5s finished

    1971 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  1.259 seconds)

**Estimated memory usage:**  1933 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
