
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f1430fa1f40>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 171.5373992919922 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 30.084778308868408 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 27.979092121124268 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.343064785003666 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 26.920592784881592 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 26.550277948379517 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.3777707417806 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.128694125584197 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 25.93242073059082 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 25.74550665749444 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 25.665499687194824 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.46312056888234 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.336830218633015 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.19422358732957 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.039621353149414 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 24.880772988001507 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 24.722289443016052 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 24.585101366043094 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.434236182106865 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.277103198202035 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.12278151512146 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 23.968532017299108 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 23.822227087887853 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 23.67149013021718 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 23.534748077392578 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.411325216293335 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.28091318790729 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.14769081716184 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.00767506871905 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 22.85481474317353 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 22.722472667694092 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 22.594530813155632 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 22.46537607908249 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.353750561222885 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.214591573266425 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.077992882047383 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 21.946275366677177 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 21.80920528721165 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 21.67287066108302 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 21.534104090470535 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.395742416381836 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.26337952730132 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.12977723848252 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 20.99476057984108 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 20.859001701528374 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 20.718435525894165 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 20.58137879164323 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.44917002130062 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.313289999961853 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.181319903354257 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.04476022720337 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 19.90481691266976 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 19.765362299405613 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 19.624528466530567 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.48762768286246 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.373535698110405 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.23883662905012 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.104353298220715 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 18.96678954979469 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 18.832992844662424 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 18.702972571055096 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.570113213335883 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.43627893540167 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.30494727785625 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.17305886745453 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.03640855275668 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 17.901697650100246 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 17.76792303128029 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.63226300127366 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.494033962056257 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.360893862588064 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.22271184518304 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.086713155110676 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 16.95198283456776 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 16.816341973639823 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.682380040486656 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.545664774744132 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.409771073948253 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.271668299650536 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.13714094101628 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.00512170791626 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 15.874777081571981 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 15.742959848264368 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.608295472271472 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.471651168096633 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.33655985663919 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.202331809110419 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.072100633862377 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 14.93898192319003 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 14.806541341074396 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.670769585503473 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.53427473267356 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.403265652449235 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.267648255953226 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.135430904144936 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.00424162965072 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 13.87167195479075 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.739433438507552 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.60712555963166 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.476132939560243 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.34831976890564 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.215038226382568 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.08408153290842 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 12.95145786850198 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 12.817879750178411 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.683644930521647 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.55192702671267 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.418986021915329 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.28361846782543 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.150137227609617 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.015441591089424 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 11.88037751601623 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.745677420071193 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.612874199858808 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.481275441353782 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.346967603849327 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.212257163277988 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.07888657007462 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 10.945926734956645 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.81300332766621 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.679194609324137 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.546085836473576 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.411513297284236 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.277401664392734 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.143139054698329 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.00903673171997 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.874239675582402 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.739214328330332 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.605030581355095 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.47106645643249 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.33821414067195 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.203971460575366 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.071164962017175 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 8.938329734300313 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.804427879959789 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.6712284706257 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.538429821238799 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.404237381733246 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.270566574041395 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.136663683884436 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.002822331019809 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.869373238678519 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.736240511209193 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.60308287693904 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.469428579012553 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.338343110577813 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.205176925005977 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.07233976344673 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.9389650241748715 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.8050510691316335 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.672414938608805 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.5390811645432025 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.405529373570492 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.272304248186498 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.138240102049592 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.006518033242995 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.874346311275776 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.740547166508474 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.606777022156534 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.473465519131355 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.340614974498749 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.2071994520862654 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.074062156088558 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.940291975173482 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.806937659659037 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.672703540686405 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.5387758605451465 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.405125429530344 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.271417844863165 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.137602250251544 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.003940231659834 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.870217008200305 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.7365525156952617 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.602710280115205 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.469501344636939 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.3361637592315674 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.202440977096557 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.0693861616533353 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.936088513792231 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.8025836584954287 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.6691391732957626 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.5354465555749544 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.401948307896708 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.2687643290868875 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.1351941357488218 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.0018271175590723 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.868389016838484 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7348486828931513 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6013162338987308 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.4678031452118403 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.33451593549628 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2011564127437733 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0677277445793152 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9342240150728374 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.800880306774808 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6673944546626164 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.533924253619447 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4004278316110524 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.26694552344505235 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1334737197837638 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   26.7s finished

    1982 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  7.089 seconds)

**Estimated memory usage:**  1902 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
