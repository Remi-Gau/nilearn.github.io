
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fd7acf9d970>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 163.1641387939453 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 28.083250999450684 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 26.194672107696533 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 25.557464838027958 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 25.08975648880005 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 24.71923327445984 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 24.475661675135296 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 24.394955601011006 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 24.246665954589844 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 24.14262146419949 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 23.974549770355225 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 23.828479593450375 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 23.706206798553467 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 23.548974697406475 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 23.38176420756749 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 23.314391454060875 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 23.16070592403412 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 23.037621512132535 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 22.89385954538981 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 22.76719164848328 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 22.62525486946106 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 22.492007936750138 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 22.347512115131728 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 22.218091560446698 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 22.11298179626465 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 21.978869199752808 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 21.843419056672317 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 21.70666331715054 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 21.58500225203378 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 21.44193521039239 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 21.31019957860311 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 21.18087433230492 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 21.04781860113144 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 20.913569544300888 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 20.779475913328284 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 20.653081348964147 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 20.51799824502733 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 20.394435315518766 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 20.2668186363421 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 20.14428226153056 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 20.019478797912598 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 19.883534972260637 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 19.749855597813923 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 19.619650746500767 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 19.491455685008656 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 19.358436822891235 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 19.231904371925022 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 19.10829460874517 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 18.975908199946083 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 18.8519430647091 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 18.730871200561523 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 18.601772635590795 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 18.469518368060772 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 18.342208736347704 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 18.21595926638003 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 18.09218738295815 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 17.969250542776926 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 17.83888204474198 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 17.71182740967849 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 17.586438999337663 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 17.458505392074585 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 17.334397300345 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 17.210197887113015 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 17.094986014895966 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 16.96702840924263 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 16.841876121667717 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 16.715202721682463 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 16.590460595799915 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 16.46226967082304 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 16.33426695284636 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 16.207568202699935 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 16.08602565443012 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 15.963544633653427 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 15.83630696714741 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 15.711373696456084 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 15.58741291364034 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 15.460646165044684 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 15.338444830535295 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 15.210220825977814 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 15.085233416738388 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 14.957417964935303 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 14.832590447531807 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 14.707587538695917 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 14.58099248610347 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 14.455657981690907 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 14.329134941101074 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 14.20550869786462 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 14.079594620342913 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 13.953057549216531 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 13.826545948392889 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 13.700803730222916 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 13.575276534635941 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 13.449403648791106 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 13.323346689183225 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 13.198405920191014 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 13.074226404491226 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 12.949313282966614 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 12.82296550150999 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 12.696947277808677 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 12.572094416377519 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 12.448510885238647 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 12.321830097991642 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 12.196744016572541 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 12.075367841905761 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 11.950153937706581 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 11.82578011921474 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 11.700973065394276 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 11.576248155576046 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 11.451213792518333 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 11.326155332250332 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 11.20032431862571 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 11.074597199757894 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.954481141907827 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 10.829932970283306 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 10.70453850009985 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 10.580097820447838 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 10.454691138760797 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 10.329422298659626 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 10.204340053816974 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.078811278864116 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.95406134923299 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.828615610264551 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 9.703995548310827 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 9.57807815365675 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 9.453958726698353 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 9.329014492034911 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.203994682856969 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.078549843134843 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.954108610749245 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.830023968866628 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 8.708183160194983 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 8.583050125427828 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 8.458395011497267 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 8.333925446173303 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.209872978836742 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.085397861621997 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.96129249123966 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.837610570183635 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.712571669315946 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.586719432323099 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.461835180010114 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.337890658818238 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.214192649008523 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.090723049390566 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.96617857615153 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.841499123080023 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.717407059996095 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.59252904548126 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.46824454616856 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.343410749563435 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.2191297213236485 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.09499559970881 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.97113235373246 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.846180912715937 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.7220862004664035 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.597936753303775 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.473478207221398 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.349065642447988 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.22422041772287 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.099344565433526 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.976055026054382 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.851450982301132 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.727062051678881 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.602469109318739 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.477946484961161 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.3532212214036425 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.228581138404019 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.104077788884054 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.980059987022763 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.8555604649718695 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.7309030084049004 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.606783710725126 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.482236568317857 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.357509293308148 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.2330952540211295 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.108651638031006 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.9843512773513794 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.8597882319304904 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.7352487639095004 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.61064351870361 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.4863842593299017 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.3621877161837412 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.238018295267126 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.113691895385909 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.9893205684164295 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.8649270727827743 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.7405182161638815 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.616177713169771 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.4920787709824581 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.3677994523729595 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.2434041123641164 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.1190874451742123 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9947561522324879 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.8704568697380896 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.7461368300251126 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.621813205572275 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.49748241658113435 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3730953102789555 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.24871706721758605 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.12435361248763961 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   24.9s finished

    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  4.067 seconds)

**Estimated memory usage:**  1890 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
