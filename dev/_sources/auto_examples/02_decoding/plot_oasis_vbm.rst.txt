
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7ff8f8360100>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 219.88630294799805 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 36.937302589416504 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 33.963531732559204 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 33.16507156689962 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 32.83956003189087 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 32.39563250541687 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 32.24496658643087 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 32.21986852373396 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 31.93300437927246 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 31.749341117011173 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 31.46598219871521 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 31.249352346767083 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 31.145832538604736 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 30.993186969023487 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 30.709194660186768 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 30.370193481445312 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 30.083601713180542 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 29.856586386175717 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 29.618897941377426 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 29.37933837740045 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 29.157998085021973 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 28.90958314850217 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 28.66277285055681 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 28.43221421863722 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 28.239487012227375 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 28.04410982131958 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 27.846451465900127 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 27.659293872338754 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 27.47421761921474 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 27.268728782390724 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 27.080703020095825 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 26.88559582925612 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 26.700740039348602 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 26.51542936671864 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 26.31754046327928 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 26.11935578073774 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 25.933020777172512 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 25.75251358908576 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 25.57611868256017 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 25.400380104016037 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 25.224862098693848 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 25.040812533076217 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 24.852334646951583 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 24.679194073344384 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 24.496777621182527 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 24.322305785285103 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 24.15433824580649 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 23.98856930022544 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 23.80982482433319 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 23.641829977230152 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 23.48235297203064 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 23.318534565906898 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 23.157771825790405 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 22.989763309370797 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 22.81887071220963 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 22.650912284851074 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 22.488583905356272 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 22.320798852987455 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 22.15571324578647 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 21.99108335931422 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 21.828450202941895 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 21.660091333701963 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 21.503139380485777 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 21.34397448055328 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 21.184371948242188 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 21.022696054898777 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 20.863605520941995 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 20.711972887836286 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 20.54989987261155 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 20.391594489415485 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 20.230601685387747 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 20.073664950652862 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 19.914066738552517 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 19.757203451574664 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 19.60520582585721 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 19.444622596104942 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 19.28812569066098 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 19.130857712262635 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 18.968369031563782 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 18.81376306014725 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 18.659181475639343 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 18.49926276265839 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 18.343330330964996 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 18.18634323326938 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 18.03026773816063 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 17.867814807330863 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 17.705879022908764 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 17.546752197989104 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 17.38478101383556 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 17.227215078439606 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 17.07018099890815 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 16.91369140803159 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 16.760195203449417 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 16.59794956125239 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 16.440749822778905 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 16.28293565699929 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 16.122531592845917 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.963958818887926 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 15.804657887439339 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 15.646914407460375 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 15.488762378692627 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 15.330875767339574 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 15.175458197500191 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 15.02139294494703 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 14.865531701308031 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 14.708821035566784 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 14.549161524142859 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 14.394316421490963 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 14.238805991631967 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 14.083498362007491 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.928681958805432 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 13.772543660155288 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 13.615682005882263 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 13.458865553931853 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 13.302894312038756 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 13.1474901282269 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.993340237387295 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.838961560502012 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.683599912514122 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 12.526162898841024 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 12.371020793914795 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 12.215957801204084 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 12.061658456677296 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.907174182132007 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.75193549740699 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.596276330947875 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.43924631769695 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 11.284436195854127 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 11.12852892279625 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.973424360733624 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.820004756634052 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.666225810087363 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.509216850454157 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.353265583067012 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.199167087896546 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.04492770300971 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.890389049754424 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.73569630532369 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.581453098767046 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.427944980936942 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.27287220954895 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.117997538113425 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.964423817648015 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.809459507882178 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.65474424097273 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.499671302992722 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.346249838397927 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.191414635197646 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.036181733414933 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.882204007782392 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.728454748789469 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.574065473695464 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.418909725389982 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.264324261472116 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.109247997209623 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.955438313945647 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.801340726705698 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.646394003728393 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.491948179051845 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.3364012436296955 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.181467711925507 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.026808935662975 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.872619943854249 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.717507284843117 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.563178039178616 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.407870567206181 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.253467149045094 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.09848032311765 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.944109417143322 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.789861432194004 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.635212323244881 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.480005678377653 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.324834873509962 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.169875289663414 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.015242993146524 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.8610168865748813 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.7064681053161617 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.5518588359746555 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.3968901500273287 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.242070328589924 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.08774365319146 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.9332101661197387 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.779078308042589 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.6246855962471884 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.47000093045442 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.315890286419843 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.1613954036466536 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.0069477099148347 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.8525719389002373 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.6981882544421645 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.5436898281699731 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.389235391666752 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.2348340650399525 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0804619356758236 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.926087327839173 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7718201111524533 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6174986605741539 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4631226038569726 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3087448014153375 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.15442777159226 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   30.9s finished

    1984 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  19.211 seconds)

**Estimated memory usage:**  1875 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
