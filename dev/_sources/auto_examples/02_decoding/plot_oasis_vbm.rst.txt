
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print("")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f8063d28190>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 193.3908462524414 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 42.311716079711914 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 40.013400077819824 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 38.997849782307945 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 38.41240954399109 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 37.883280515670776 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 37.4806288878123 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 37.191325698580066 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 36.900455474853516 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 36.637657748328316 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 36.35601210594177 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 36.123678315769546 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 35.88673996925354 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 35.6690038901109 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 35.455886363983154 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 35.28307684262594 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 35.10687029361725 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 34.8932438177221 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 34.743413315878975 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 34.5264398424249 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 34.29373097419739 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 34.076722406205675 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 33.87590941515836 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 33.70319425541422 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 33.5173856417338 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 33.335721254348755 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 33.141486167907715 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 32.92588198626483 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 32.71973780223302 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 32.51713280020089 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 32.32268826166789 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 32.13811970526172 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 31.930818021297455 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 31.731851946223866 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 31.52407374101527 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 31.330438818250386 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 31.133073382907444 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 30.947191947215313 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 30.771363634812207 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 30.585414776435268 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 30.41134262084961 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 30.228256981547286 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 30.04643374397641 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 29.85844490139983 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 29.659012165936556 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 29.473219818539093 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 29.28417622524759 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 29.08403572630375 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 28.88593010107676 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 28.69395260908166 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 28.494441032409668 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 28.312911075704235 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 28.131373937313374 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 27.94284374309036 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 27.762687780238963 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 27.573648994619194 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 27.38825879778181 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 27.207437854064136 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 27.02208693274136 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 26.83524347159822 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 26.64603543281555 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 26.456971938492824 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 26.274823827128255 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 26.09128531198653 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 25.904009521007538 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 25.70940371660086 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 25.51843152624188 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 25.328340153195963 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 25.14735186801237 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 24.968527292859726 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 24.782692125865392 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 24.59217744142237 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 24.40538787841797 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 24.220996141433716 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 24.03337992204202 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 23.837385177612305 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 23.641932951776603 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 23.44980815788368 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 23.25924387956277 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 23.073650474789776 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 22.89060151576996 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 22.727794658990554 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 22.53292492540871 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 22.34107473384903 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 22.145542076655797 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 21.953831644619214 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 21.75540575315786 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 21.56012511253357 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 21.365411324934527 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 21.170270092031927 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 20.97993161943224 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 20.786272777305854 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 20.592353893362958 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 20.399578430319348 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 20.202491998672485 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 20.01027221428721 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 19.823170244693756 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 19.639219232441224 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 19.451933588300435 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 19.26017278613466 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 19.068060159683228 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 18.876001582287326 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 18.684381737428552 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 18.49117967920396 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 18.299422337458687 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 18.10741072609311 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 17.914157957400917 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 17.720928662291197 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 17.52897263456274 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 17.340793565872612 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 17.147969874468718 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 16.953706049704337 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 16.760473881449016 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 16.56592239953775 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 16.37258361515246 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 16.182148187056832 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 15.993272337420233 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 15.800704191892576 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 15.611801802101782 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 15.421419424169205 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 15.23459227879842 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 15.04731756793566 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 14.86029242687538 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 14.67331833761882 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 14.483419710589994 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 14.292618370056152 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 14.10330373521835 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 13.913234216960396 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 13.723189696669579 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 13.530923477438993 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 13.340288253930899 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 13.150234768408856 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 12.959889989910703 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 12.767282570215096 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 12.574676406917288 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 12.383046521080864 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 12.192026474896599 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 11.999831210087686 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 11.810653496479642 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 11.618181743210169 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 11.426876715251376 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 11.23397971045041 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 11.044012909204188 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 10.8540551262302 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 10.663226458761427 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 10.472901648488538 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.280946365774494 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 10.090391301784386 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 9.899819296759528 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 9.707844924606732 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.516181389490763 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.32577937644049 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 9.136591334091989 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 8.945935325684891 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 8.75643919969534 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.567353179377895 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.377211845838106 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.187519469838234 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 7.996804177006588 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.806644528167053 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.618736982345581 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.429367523015657 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.239529235863391 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.049179976703199 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.859135552150447 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.669367306160204 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.47878847926496 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.288615249588104 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.097375233968099 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.9062829567835875 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.715279452940997 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.524741471162316 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.334610135056252 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.143860422806933 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.95365919463936 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.763242380959647 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.573185324668884 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.382285353827611 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.1919917765628085 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.0023980140686035 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.812073998981052 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.6219781327642786 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.4316901322249524 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.2412564090040865 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.0510067317796787 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.8607939900578683 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.670225456196775 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.4796053164783007 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.288961182249353 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.098152710647179 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.9074732253425999 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.7166225660533805 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.5258371333281198 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.3349106175911858 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.1439839122221642 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.9532702213678604 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.7625355039324079 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5719137240182325 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.38124740725815903 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1906010864967078 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   38.1s finished

    1963 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  59.735 seconds)

**Estimated memory usage:**  1860 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/nilearn/nilearn.github.io/main?filepath=examples/auto_examples/02_decoding/plot_oasis_vbm.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
