
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-90

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 148-150

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 150-163

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-166

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f99211ed5e0>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-229

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 209.34104919433594 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 35.36434864997864 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 32.244328022003174 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 31.227857430775963 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 30.599835872650146 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 30.33323621749878 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 30.504504760106407 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 30.772368260792327 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 30.806974411010742 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 30.666124873691135 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 30.415218830108643 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 30.103304906324908 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 29.816895723342896 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 29.515749857975887 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 29.241527387074065 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 29.058350086212158 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 28.829789519309998 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 28.618840161491846 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 28.38230996661716 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 28.171096613532622 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 27.96073293685913 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 27.750065303984144 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 27.56256227059798 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 27.40082387302233 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 27.22085873285929 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 27.03592085838318 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 26.851190438637367 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 26.69070280039752 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 26.515444823673796 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 26.33509562755453 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 26.177618821461998 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 25.980884744275 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 25.803133964538574 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 25.636233907757383 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 25.443799986558805 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 25.25356027058193 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 25.067028337054783 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 24.88892660269866 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 24.728776329442077 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 24.550515731175743 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 24.371617317199707 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 24.197713346016116 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 24.025761286417644 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 23.859067767165428 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 23.703433578664605 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 23.547687159644234 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 23.389205507610157 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 23.223251429009945 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 23.091489791870117 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 22.96738339443596 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 22.840832233428955 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 22.712614919625075 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 22.58493361106286 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 22.44841782102045 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 22.305504631113124 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 22.164080229672518 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 22.028942176273894 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 21.870123524414865 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 21.70755071475588 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 21.544026568784552 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 21.407034794489544 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 21.24275429913255 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 21.081855643180106 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 20.920229790702695 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 20.76049506664276 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 20.598353587664093 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 20.437004616766263 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 20.28470400198182 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 20.128553488675287 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 19.9665880445121 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 19.806638377053396 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 19.6487011137143 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 19.49562284681532 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 19.34488218124599 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 19.18722017391308 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 19.038419326146446 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 18.880442569130345 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 18.752470976346498 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 18.601614310191227 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 18.444820986518376 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 18.289207220077515 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 18.12986003322366 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 17.978811455935965 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 17.825460244374103 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 17.668731371561687 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 17.510078444200406 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 17.352130884347957 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 17.194024628606336 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 17.039747324856844 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 16.888881795861746 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 16.740499522950916 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 16.584590977364844 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 16.43153932820196 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 16.279507995933617 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 16.124611839335014 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 15.97184639228018 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 15.82295533021291 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.67577020409181 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 15.52291488647461 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 15.369088582318238 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 15.21634030342102 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 15.062697228818836 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 14.909493250005386 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 14.756776342114199 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 14.604505172142616 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 14.454804783775693 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 14.30191320743201 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 14.15048487832613 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.998284145637795 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.845665616726656 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.696611772884022 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 13.544348366625675 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 13.397838933127266 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 13.248305246893283 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 13.09282258100677 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.938847355220627 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.784377706461939 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.629105671858177 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.474706694231196 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 12.32171100728652 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 12.17016331354777 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 12.015345805932668 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.862006812799173 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.708671858640221 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.555287022744455 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.400020456314087 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.248343448790294 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 11.09692759213485 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.943712517619133 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.790597120920816 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.638117570143478 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.485657036759472 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.355417316610163 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.262094022636127 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.165149717188593 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.069175667232937 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.97561757704791 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.880949427611636 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.776285223338915 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.667771926029122 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.547702993665423 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.447391077136317 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.342326980241587 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.232160003035219 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.085723453097874 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.961136447972263 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.795817757306033 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.628763388614265 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.462295132714349 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.296690214400323 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.130119800567627 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.9630970923316395 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.796681981337698 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.630371565912284 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.464431440675413 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.300072754583051 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.134247804299379 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.969156836248507 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.8034523468983314 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.638812778880761 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.473714709281921 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.309069916328288 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.145311705860091 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.981312080395002 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.816748165502781 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.65347365177039 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.490002350634839 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.326239143303055 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.1624811717442105 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.9989156243363775 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.8364094285403985 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.674008204923038 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.5114412806754896 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.348480604976588 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.185955280545114 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.023411342075892 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.8609751462936397 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.6994459561708957 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.537522682982884 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.37540184985326 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.2132714324527316 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.052132719788103 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.890835004848438 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.729023318473107 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.5675937403803286 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.4065929490166744 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.2454159105977705 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.084362112902065 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.9233648168279769 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.7627215978329773 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.6019184714869448 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.441328238442306 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.2810361584027607 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.1206503680332953 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9604114625871797 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.8001295847770495 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6399437943283391 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.47983707389250624 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.319807221191098 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.159872408488288 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   32.0s finished

    1993 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  17.712 seconds)

**Estimated memory usage:**  1881 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
