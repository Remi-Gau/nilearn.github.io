
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-142

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 143-145

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 145-158

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 159-161

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 161-176

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f2c1e7b64f0>



.. GENERATED FROM PYTHON SOURCE LINES 177-179

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 179-223

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 148.9400863647461 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 25.88425636291504 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 23.584296941757202 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 22.87998080253601 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 22.431973695755005 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 22.045713901519775 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 21.795789559682213 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 21.65375620978219 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 21.45029067993164 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 21.1978948381212 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 21.016273021697998 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 20.817197084426883 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 20.686643918355305 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 20.576770910849937 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 20.43493141446795 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 20.279376347859703 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 20.201266288757324 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 20.085149077808158 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 19.991954379611546 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 19.865623486669442 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 19.748379707336426 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 19.847233499799454 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 19.730585943568837 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 19.62737858813742 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 19.500138759613037 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 19.380199909210205 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 19.270347833633423 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 19.132109500743724 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 19.0001643044608 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 18.86191969082273 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 18.747921069463096 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 18.635758722982096 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 18.541962683200836 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 18.418452913110904 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 18.31480205760283 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 18.202190126691548 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 18.071275260713364 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 17.952265662115973 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 17.823730531491734 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 17.71440333586473 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 17.58723258972168 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 17.465539699647483 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 17.350664399919054 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 17.232690223427706 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 17.114394794810902 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 17.017854346169365 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 16.904150175011676 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 16.78521685397371 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 16.674959341684975 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 16.56340006906159 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 16.447410106658936 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 16.330971427992278 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 16.218094954123863 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 16.117028420826173 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 16.006338040033977 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 15.892717491496692 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 15.78245748792376 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 15.66915378235934 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 15.56525603656111 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 15.480918451891107 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 15.373518308003744 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 15.267963495410857 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.162448883056639 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.051431811045086 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 14.953218042850494 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 14.957916113046501 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 15.088580745639224 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.138702880090742 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 15.208379997926599 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 15.256721057753632 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 15.327342305864606 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 15.36668750937556 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 15.40557395087348 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 15.44124689167493 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 15.453411823994404 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 15.482876300811768 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 15.482270604685732 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 15.485021603571903 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 15.379280451016548 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 15.225697119024735 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 15.073349475860596 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 14.924982023827825 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 14.77414050916346 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 14.631454157542032 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 14.493888230550857 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 14.348119581446928 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 14.20414844779081 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 14.06373858177799 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 13.926206588745117 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 13.784669356399707 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 13.645256095462376 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 13.506401903026706 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 13.368335630582727 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 13.231249178609541 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 13.092461459180141 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 12.953695573304831 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 12.815766870975494 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 12.679893478904804 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 12.542159528148417 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 12.404311319794317 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 12.263480424880981 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 12.125417699908265 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.989790865019256 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.851459672150103 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 11.712630712068998 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 11.576605092911493 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 11.440275826544132 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 11.305638346716622 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 11.17298936843872 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 11.040001013957033 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.908073555339467 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.777661465309762 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.650094560214452 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 10.51704499995814 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 10.387900477961491 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 10.255206927009251 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 10.123691377968624 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.9937940703498 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.867122819868186 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.737229283116445 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.609059174855549 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.483813855273665 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 9.35704426687272 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 9.232543268824012 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 9.107489655094762 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.98297348022461 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.858212119057065 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.732587281174547 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.605898469686508 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.47924068731855 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 8.353551827944242 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 8.227340490763424 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 8.10407813390096 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.98161764790241 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.858785323242643 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.734845973827221 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.610955182243796 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.48656795668776 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.363263755604841 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.240081848858072 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.117173876081194 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.9939752013970775 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.870982395091527 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.748541043354915 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.6276760763592195 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.505249319405391 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.383339852502901 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.262272301174345 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.14215104644363 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.020924043335371 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.89978011449178 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.77862671984742 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.65690853721217 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.535540974997228 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.414988898611687 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.294262724538004 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.173264919183193 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.052802464005294 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.932592319536812 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.812800945725831 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.692989468574524 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.573377655159613 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.453610040523388 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.334192306717481 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.21518577598944 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.095361059362238 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.9756293526615005 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.8563026867940753 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.7376673562186102 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.619358999489327 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.500928219626932 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.3824057955490914 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.264600559722546 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.1464766105475452 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.0290621176533317 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.9112847191946845 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.7933536117727105 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.6755085813123625 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.557989940214693 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.4411329317359285 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.3241292105780706 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.206932862160614 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.090052625635168 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.9732322510474367 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.8565696840700896 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.7399002925769704 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.623245516131001 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.5065954330770728 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3901957501756383 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2738328005270982 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.1575350886897036 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.0413414345985932 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9252500037352244 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.8092488773128529 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6933481693267822 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5775892612261649 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4618546086914685 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.346245321525535 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.23072232862915656 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11530651399238626 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   23.0s finished

    1978 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  0.054 seconds)

**Estimated memory usage:**  1858 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
