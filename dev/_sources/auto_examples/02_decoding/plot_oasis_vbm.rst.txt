
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f43897eb640>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 214.42890167236328 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 37.76266098022461 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 34.96410512924194 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 34.170948108037315 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 33.872761249542236 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 33.53426814079285 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 33.25647020339966 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 33.116788727896555 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 32.92898941040039 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 32.67410047849019 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 32.45970439910889 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 32.22913247888739 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 31.99191689491272 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 31.799342668973484 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 31.643093041011266 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 31.461793740590416 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 31.273324012756348 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 31.09787695548114 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 30.9545574982961 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 30.75128053364001 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 30.560720443725586 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 30.367156641823904 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 30.183840318159625 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 29.97495404533718 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 29.77602195739746 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 29.571956872940063 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 29.39010847531832 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 29.20649728068599 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 29.032511200223652 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 28.845596206599268 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 28.6574231783549 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 28.469716595065208 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 28.282721757888794 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 28.101610472708035 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 27.922179292230048 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 27.75270816258022 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 27.578001287248398 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 27.389583909833753 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 27.214896440505985 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 27.040095751102157 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 26.882609367370605 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 26.727500020003898 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 26.554328770864576 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 26.388717124628464 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 26.25650160962885 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 26.085137314266632 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 25.90900914565377 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 25.73144671257506 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 25.557267785072327 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 25.39648758635229 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 25.221293449401855 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 25.042649876837636 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 24.864840250748856 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 24.69680555361622 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 24.554617440259015 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 24.380626786838878 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 24.21986552647182 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 24.053659798806173 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 23.891657845727327 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 23.724018501023114 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 23.546757221221924 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 23.37223051024265 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 23.197711829216246 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 23.030140876770016 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 22.863648265600204 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 22.698413812197174 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 22.53294596527562 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 22.360150717977266 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 22.19944520557628 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 22.039584104565606 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 21.87033643041338 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 21.701363697857925 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 21.537809583875866 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 21.3706305418929 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 21.194792148229237 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 21.022818485895794 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 20.848443570889923 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 20.679276847220088 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 20.50502608372615 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 20.331612768052498 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 20.15625286102295 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 19.9871603883343 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 19.81547698742006 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 19.645681220364857 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 19.473909627823602 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 19.303338766098022 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 19.1308673925178 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 18.9616767291365 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 18.790749593214557 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 18.620336487052146 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 18.45978453424242 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 18.2909650016617 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 18.12348022668258 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 17.953491064809985 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 17.78928425971498 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 17.62723826107226 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 17.456402599811554 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 17.301558976320877 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 17.13250603481215 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 16.96046259908965 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 16.7943434715271 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 16.62730565637645 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 16.460961781296078 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 16.294275515287826 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 16.128500351539024 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 15.961767423720588 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 15.794506131478077 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 15.627739618871813 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 15.459548561661332 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 15.291804210855327 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 15.122072826732289 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 14.952956970747527 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 14.78387016909463 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 14.612077455605025 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 14.444692883575172 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 14.272704342137212 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 14.103038993375055 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 13.935322649458536 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 13.767305325653593 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 13.59787787309214 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 13.428731441497803 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 13.261929198730092 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 13.093594445556892 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 12.925774487053475 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 12.757854669324814 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 12.590271377563477 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 12.427609409604754 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 12.330188000296044 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 12.230188474059105 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 12.146671581637952 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 12.040826192268957 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 11.946339134041589 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 11.83587216608452 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 11.733765474835733 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 11.63048105809226 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 11.508329938959191 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 11.375578936408548 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 11.198324835213432 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 11.015800413878068 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 10.834202220971635 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 10.65195802279881 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 10.46986629946012 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 10.287320210900106 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 10.106701832551222 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.926141275299921 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 9.745830075494174 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 9.565789137801078 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 9.386652777795078 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 9.207412603739145 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 9.026648407814488 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.84594456354777 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 8.666282865385346 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 8.487646353872199 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 8.30886716936149 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 8.131416568508396 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.952217786542832 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.772226040179913 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.593834049382787 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 7.414876554585709 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.235574722290039 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.057383239269257 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.879004426624465 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.700114008821087 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.521733610176601 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.342817800800975 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.165670409347072 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.98755796846137 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.810072854607405 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.632367451985677 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.454539946550448 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.276497658561258 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.098503818288881 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.921177891797798 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.743870908814359 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.566810131072998 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.38969874382019 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.212991248477588 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.036606131300414 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.859873940435688 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.683385288249181 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.5074230035146075 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.3313423546638274 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.1553618619730184 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.97934364230255 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.803275916887366 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.627384237340979 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.4517866129516275 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.276217874996165 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.1006974717403977 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.9254898747439106 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.749945841337505 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.5746556302015695 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.3995430767536163 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.224474022425518 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.0493784368652659 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.8743214851770645 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6993169930516456 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5244060349343392 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3495579054861358 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.17474677335077793 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   34.9s finished

    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  19.419 seconds)

**Estimated memory usage:**  1858 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
