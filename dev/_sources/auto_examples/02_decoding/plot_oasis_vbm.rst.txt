
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-90

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 148-150

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 150-163

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-166

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f500a991bb0>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-229

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 178.6327362060547 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 30.65768027305603 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 28.427297830581665 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.645901759465538 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 27.166579723358154 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 26.833672285079956 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.53436867396037 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.287155900682723 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.096145629882812 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 25.92734474605984 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 25.73451805114746 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.588521545583554 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.424047708511353 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.277771087793205 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.12086296081543 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 24.976547876993816 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 24.845862984657288 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 24.6988386406618 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.55523286925422 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.4475423913253 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.305540800094604 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.160019318262737 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.012922590429135 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 23.87438999051633 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 23.740113735198975 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.603796243667603 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.46668705573449 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.32928044707687 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.188548156193328 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.045495460773335 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 22.908409357070923 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 22.777283084008 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 22.63925313949585 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.510882211453985 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.386874689775357 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.250940901892527 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.11256064309014 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 21.97102865657291 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 21.83208207080239 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 21.701223257260448 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.56300163269043 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.4277297520056 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.29017936615717 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.155074529869612 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.016986998644743 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 20.888406621085274 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 20.75805361374565 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.619620272453794 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.492462476094563 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.367282293280777 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.233870267868042 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.09437842462577 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 19.95804258493277 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 19.82395883776107 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.685629650398536 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.54961178519509 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.4128007207598 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.28200023634392 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.14683393774361 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 19.009866229558394 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 18.87236007054647 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.740148427056486 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.60513344118672 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.472744067509968 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.348407298326492 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.218148433245148 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.084422328255393 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 17.952470003668942 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.8206522324506 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.684943980064944 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.55077052116394 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.475170061621867 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.366497887505425 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.23489014743126 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.100297206156963 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.963661909103394 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.824460556632594 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.695852988726134 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.560788148488754 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.425777142560936 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.29175579547882 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.15330595145991 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.01570862677039 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.877647658428513 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.740532806941442 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.603802821215462 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.466662467912185 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.330876460020571 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.19355687228116 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.055621291814225 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.918777333365547 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.781690346015678 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.645963679189268 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.507903096496419 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.369511923891432 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.231272421385114 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.092857142289478 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.957001364108214 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.820010671810229 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.683522983030839 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.548828840255737 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.411888339731952 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.275690279754938 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.13983684141659 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.003453621497522 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.878051315035139 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.740247245104808 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.603941396018055 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.473045296139187 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.33789280795176 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.20087918368253 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.064583767641773 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.929310117449079 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.7945170086042 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.661127337238245 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.525306639464004 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.388890677484973 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.253469279688648 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.116676443714207 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.981694602164902 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.84544579188029 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.70844754502793 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.574179711889048 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.437822748975055 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.301019314796694 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.163988018035889 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.027637780658782 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.891483639168927 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.75507965683937 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.619484629741935 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.483424535164465 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.347674812069377 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.21196725874236 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.07591454247783 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.940487968387888 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.80416374736362 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.668491251328412 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.533431206306402 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.397763234981593 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.262177306113482 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.126662526811872 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.99075146769801 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.855303539356716 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.720332379107709 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.585323068830702 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.45016074180603 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.314706377787132 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.178849906337505 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.0430436843150375 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.9079170275054524 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.771985212961832 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.63653326192439 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.501726526963083 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.368353126874936 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.2332212986884175 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.0973291858550045 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.962426613538693 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.826758118951396 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.69113440151456 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.55541518799164 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.419913947582245 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.2846054053454665 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.148829142252604 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.013161087328671 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.877848881046947 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.742211695873376 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.6068826612219755 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.471243704150537 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.335649490356445 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.200086741757816 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.06433019918554 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.928821531652707 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.793035008186518 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.657701915399188 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.522138447597109 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.3865793432508196 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.251517501744357 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.1162055575914973 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.981065736727768 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.8454439919754115 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.70980789926317 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.5742306116536176 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.4386648136180833 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.3031878849196303 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.1677072359168013 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.032161809302665 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.896673038441648 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7611835602133032 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.625700625967472 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.4901746681758334 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.354649305343628 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2191852050301917 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0837625563144684 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9482976957924008 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8127807317320834 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6772701679131924 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5419163071379369 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.40650854013898047 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.27101138866308966 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13550100015036426 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   27.1s finished

    1968 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  7.599 seconds)

**Estimated memory usage:**  1893 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
