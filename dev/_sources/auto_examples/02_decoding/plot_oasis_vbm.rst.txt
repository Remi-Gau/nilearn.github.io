
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f80657194f0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 178.17020416259766 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 30.135117769241333 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 27.907148838043213 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.24227046966553 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 26.756535291671753 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 26.82654047012329 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 27.0578084786733 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 27.023517370224 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.858150482177734 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 26.62614986631605 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 26.39857292175293 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 26.209283416921444 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.968576192855835 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.771017202964195 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.592056683131627 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 25.391228357950848 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 25.188847422599792 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 25.0159407082726 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.84863151444329 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.687577247619632 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.50574517250061 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.337435427166167 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.19035605950789 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 24.04411324210789 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 23.888067086537678 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.72372555732727 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.567010145920975 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.416101093645448 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.271066495350432 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.133542282827968 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 22.991730610529583 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 22.846869945526123 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 22.699339628219604 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.557270151196104 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.41455215566299 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.268954821995326 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.131544007195366 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 21.98156767278104 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 21.836436397150944 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 21.6966111048674 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.585521697998047 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.44859332573123 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.307904061816988 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.164575221926665 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.025208408182316 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 20.884321053822838 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 20.750022286954135 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.61396462359327 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.472847779591877 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.328809494874918 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.18657612800598 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.043761075711718 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 19.900147162950958 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 19.770332147490304 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.63160268465678 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.50123167037964 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.35981621061053 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.214950180890266 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.070213827593573 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 18.92669487403611 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 18.78544052441915 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.646917487754198 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.509382409434163 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.367955907942754 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.22960591316223 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.090813159942627 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 17.950326999028523 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 17.808726278703602 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.672810007544125 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.531125441841457 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.392114094325475 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.26279860483089 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.125318315294052 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 16.989154858131933 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 16.85523417833689 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.720853249231975 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.58871370867679 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.45632889982942 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.320866089600784 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.18744275841532 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.050826907157898 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 15.914384129606649 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 15.777419479881845 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.644298809120453 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.512575297128587 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.387747582267313 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.258382076440855 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.120289947794772 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 14.982706676829945 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 14.843577910005376 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.7074298063914 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.570286156057001 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.436692320782207 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.303469516897716 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.168324237174176 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.033879982797725 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 13.89971234401067 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.763924982129913 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.628611871174405 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.492639604240956 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.356385469436646 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.224278622334547 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.092638399086747 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 12.961038568644849 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 12.826128519498386 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.691644611812773 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.558865029856845 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.424867028387908 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.291054672665066 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.157134316383152 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.025037266991356 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 11.892182111740112 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.75939963545118 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.62479778517664 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.489200955943058 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.355019911475802 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.220466917958753 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.086392930430225 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 10.951763169240143 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.81725129760614 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.683133284250895 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.550150163902725 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.417282526610329 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.28436137408745 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.151812891806326 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.017819356918334 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.883543404321822 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.749322127169512 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.61553156375885 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.48085172786269 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.349573905651386 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.215326587662442 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.081404360857876 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 8.9475883146874 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.813660582499717 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.680065093217072 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.545996834250058 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.412888895856202 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.27897846871528 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.146218262130407 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.013150930404663 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.879788878961658 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.746212939141502 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.613056978145679 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.479828702078925 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.345779188748064 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.211855316815311 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.078091032651006 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.945009018923786 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.81177690205158 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.678828954696655 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.54560271319964 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.412924741443835 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.279536301793616 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.1460306985037665 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.012585363080425 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.87847133171864 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.74471476731027 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.611123866672757 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.47744911271821 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.343891024589539 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.211599292222018 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.078382948298513 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.944484671200711 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.810829244008878 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.67701818003799 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.543426737727889 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.410168320832852 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.276580038524809 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.143096719267805 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.009180868373198 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.875286163642392 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.74175491998362 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.6082216149809736 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.474435762427319 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.341650111334664 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.208001927895979 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.0745905886935647 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.9412051854508645 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.807593581396774 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.673995945188734 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.5403892598758087 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.4067599197010416 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.2729683847375255 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.1394987313643745 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.0057097383447595 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.8720809951905282 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7384069577895385 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6046536780418232 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.4709276799802427 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3371940412019427 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2034845701687 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0697543124357858 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9359729500014546 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8022741263674706 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6685389372018667 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5348387786320277 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4011263242227777 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2674152345368357 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13369360880636091 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   26.7s finished

    1943 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  6.956 seconds)

**Estimated memory usage:**  1939 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
