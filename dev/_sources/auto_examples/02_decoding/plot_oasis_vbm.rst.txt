
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-142

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 143-145

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 145-158

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 159-161

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 161-176

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f2f3154c340>



.. GENERATED FROM PYTHON SOURCE LINES 177-179

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 179-223

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 216.80116653442383 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 37.916905641555786 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 34.93427038192749 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 33.65762980779012 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 33.009084939956665 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 32.82874846458435 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 32.38513692220052 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 32.371776478631155 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 32.51803779602051 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 32.339391496446396 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 32.24676489830017 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 32.299964449622415 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 31.91531491279602 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 31.6887599504911 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 31.4767073903765 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 31.29754940668742 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 31.030572056770325 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 30.780459207646988 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 30.613468435075546 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 30.381577705082144 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 30.126771211624146 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 29.881885449091595 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 29.72849249839783 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 29.486005472100302 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 29.313679536183674 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 29.166770696640015 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 28.995496768217823 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 28.812190726951318 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 28.625184638159617 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 28.452823507374728 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 28.265153169631958 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 28.076582931703136 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 27.900030255317688 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 27.719751834869385 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 27.52700393340167 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 27.325657878603256 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 27.142355998357136 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 26.97579045553465 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 26.811609995992562 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 26.653837338472027 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 26.474236488342285 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 26.29078238184859 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 26.134304966245377 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 25.96435462042343 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 25.801682515577838 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 25.619770261976456 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 25.444746255874634 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 25.27512890734571 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 25.107531785964966 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 24.910163465811284 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 24.764275074005127 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 24.59468689619326 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 24.405462650152355 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 24.22145919529897 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 24.148828276881467 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 24.415602272207085 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 24.71977962766375 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 25.012601559622244 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 24.87502757434187 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 24.673886763847477 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 24.485839128494263 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 24.278991538970196 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 24.077003509767593 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 23.870914568976747 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 23.684955954551697 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 23.4887401507451 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 23.295533310283314 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 23.083621533948982 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 22.88887065999648 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 22.70246298071267 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 22.510253770010813 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 22.31878773259445 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 22.151735941569008 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 21.957810225552077 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 21.775019317059904 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 21.58892552057902 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 21.409942626953125 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 21.224073143748495 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 21.050693860420814 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 20.877775738510902 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 20.69424533843994 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 20.50581775771247 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 20.318067004040973 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 20.145339015018507 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 19.96078846568153 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 19.776946432450238 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 19.59740630415983 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 19.40864496395506 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 19.22334384918213 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 19.04501052384966 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 18.869952864117096 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 18.68853996874212 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 18.508533861326136 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 18.33142762799417 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 18.154334225553146 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 17.991318602310987 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 17.817145566145577 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 17.641355757860794 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 17.471980377119415 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 17.29191301085732 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 17.111083507537842 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 16.931639990003983 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 16.75774542023154 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 16.578502578642762 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 16.410037994384766 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 16.237102281479608 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 16.05874542020402 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 15.898088118740331 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 15.733671232506081 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 15.557399791315062 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 15.37571050904014 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 15.196713432535395 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 15.019354564802986 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 14.839799450562063 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 14.664903301941722 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 14.493081237958824 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 14.319438334169059 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 14.14560205100948 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 13.970060902126766 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 13.804420805778825 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 13.631241798400879 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 13.453839081378023 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 13.28005268143826 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 13.102679620913372 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 12.924547003161523 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 12.747536516189575 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 12.584250041416714 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 12.40744148089191 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 12.239348754286766 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 12.068520895270414 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 11.898707940028263 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 11.723707088077342 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 11.55204179792693 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 11.378838653851274 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 11.204456475243639 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 11.031616202107182 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 10.86233621485093 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.688255748609556 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 10.514885695084281 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 10.340650258304404 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 10.167663267680576 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.991630853490626 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.8186527138025 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.64500442918364 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.472173757023281 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 9.298526180201563 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 9.127341084284325 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.954158812153096 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.784092555174958 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.615038335723366 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.444917678833008 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 8.27477277509424 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 8.102597387213455 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.93060590083303 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.757857062599875 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.585908466769803 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.416316099655933 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.247969545376528 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 7.079164873195599 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.9106338369021625 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.740959882736206 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.569949024212287 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.398676227640222 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.229768083139431 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.059568469117328 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.890014496716586 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.72017445334469 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.550293212879204 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.381404740469796 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.212906070009491 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.046334631302778 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.877444649300379 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.709875123445378 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.541437865681731 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.3726001936813885 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.203368118831089 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.0338850021362305 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.864819484915437 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.6954778124777117 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.5261629866488153 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.3576183584001327 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.1908243887990877 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.0221407492082197 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.8538267729712317 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.6867853869562563 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.5184381845835095 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.3502735835249706 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.182899259628459 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.0156709437674665 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.8472372993590338 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.6792579450105365 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.5111330566605972 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.3429457247257233 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.175228626616878 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.0070685529217278 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.8390180942339774 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6710841169162672 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5032407898588229 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.33540107505490085 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1676833174336496 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   33.5s finished

    1979 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  25.019 seconds)

**Estimated memory usage:**  1872 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
