
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-142

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 143-145

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 145-158

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 159-161

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 161-176

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f2fe0a967c0>



.. GENERATED FROM PYTHON SOURCE LINES 177-179

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 179-223

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 246.9325065612793 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 39.36920619010925 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 36.779327630996704 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 35.54829819997152 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 34.87024903297424 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 34.38327956199646 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 33.7189945379893 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 33.12488733019148 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 32.61631965637207 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 32.187087297439575 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 31.899756908416748 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 31.7034331668507 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 31.43831928571065 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 31.15480496333196 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 30.854316473007202 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 30.58871642748515 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 30.383007764816284 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 30.515526505077588 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 30.44552863968743 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 30.323665355381216 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 30.095361471176147 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 29.88935797555106 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 29.748895775188103 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 29.59517710105233 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 29.41699965794881 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 29.23131489753723 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 29.05139917593736 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 28.88629678443626 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 28.722423383167815 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 28.549947886631404 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 28.335898955663048 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 28.111109910472745 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 27.955748319625854 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 27.804161548614502 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 27.646914397968967 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 27.48704358509609 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 27.300537665685017 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 27.117629186527147 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 26.928727551510462 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 26.766945307071396 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 26.603307723999023 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 26.43637064608132 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 26.234769423802693 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 26.05463382809661 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 25.888435883955523 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 25.72494549221463 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 25.541068699048914 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 25.374943697706183 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 25.205554684003193 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 25.048610142299108 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 24.890592098236084 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 24.72780436628005 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 24.564037029559795 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 24.382529713072866 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 24.195940476876718 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 24.012527465820312 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 23.846624646868026 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 23.687405644801622 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 23.533502915809894 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 23.356394169694283 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 23.173438151677452 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 22.98900504581264 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 22.822772879754343 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 22.650260985843715 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 22.497136652469635 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 22.36573356848497 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 22.200236139875468 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 22.024582414484737 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 21.863516891703885 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 21.708049383716308 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 21.541215590068273 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 21.381243155036174 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 21.23075188530816 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 21.07369236423545 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 20.921159969793784 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 20.763451655705772 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 20.586247142992523 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 20.410559428202642 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 20.23719088236491 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 20.072052717208862 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 19.914717435836792 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 19.748196183899303 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 19.570951147777276 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 19.403229871428156 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 19.24187442234584 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 19.083449181388406 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 18.925554014915644 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 18.7592621014036 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 18.590499531139027 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 18.432421261005185 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 18.273085991541546 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 18.10149236825796 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 17.931692019752838 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 17.766388911072927 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 17.60764179331191 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 17.449099829322414 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 17.28972625732422 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 17.12762169985427 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 16.957908474669164 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 16.789317993202594 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 16.614561080932617 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 16.443038980559546 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 16.270431490505445 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 16.10457069202534 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 15.943440363957333 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 15.771100838979086 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 15.600335283099481 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 15.430610271257775 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 15.26640647429007 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 15.109847458130723 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 14.946490157734265 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 14.773380913175979 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 14.601666978427343 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 14.439996717250452 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 14.271930874439708 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 14.10830749636111 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 13.94315664521579 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 13.774503771056477 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 13.606216127589597 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 13.4403186946356 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 13.272944768269856 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 13.105699160867488 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 12.933884898170097 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 12.762553399171285 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 12.591455613413165 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 12.419828796386719 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 12.249972097457402 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 12.084378929588738 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 11.923544526100159 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 11.762741464053013 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 11.600333030407246 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 11.433114941793544 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 11.265518072879676 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 11.10015330637308 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.93688178062439 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.77257153722975 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 10.605785369873047 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.442846138111866 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 10.275955366051715 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 10.112646787286662 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.946446520941597 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.780601180191582 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.614177478870875 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.448285898128589 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.28406114048428 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 9.120493938182962 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.954799531257315 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.787943900036975 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.618848761996707 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.45062045442978 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.282751480738321 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 8.115450257497118 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.9514091140345515 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.786335787741967 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.6204038192699475 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.454001857388405 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.288763449742244 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.1250497110330375 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.961673063567922 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.796436339804211 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.633550345897675 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.46879035641688 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.305355448781707 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.140049064086258 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.975000276798156 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.809854724190452 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.643686883420829 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.477669623083697 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.311815171014695 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.146071573686317 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.979301284341251 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.811656699543111 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.643701154132223 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.47647808741972 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.309801981366914 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.143594128744943 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.978145967830311 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.812260404144977 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.645906140295307 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.4797144908478805 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.3136763042873802 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.148410313695834 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.9830905212150824 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.817738693268573 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.6519915331964907 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.4862188519658273 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.320962864865539 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.1556860967115923 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.9899948454917744 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.8242529472976765 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.658838297191419 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.49325425462573 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.3278810481230416 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.1620713355010037 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9959550125082743 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.8298697838416466 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6638415249026551 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.49796646863675964 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3320088242039536 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1660119325072322 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   33.2s finished

    1963 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  16.185 seconds)

**Estimated memory usage:**  1906 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
