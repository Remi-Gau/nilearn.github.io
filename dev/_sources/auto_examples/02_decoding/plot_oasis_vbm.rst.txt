
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f103cb229a0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 193.0713653564453 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 41.54870080947876 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 39.30612301826477 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 38.39546362559001 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 37.79224348068237 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 37.58175444602966 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 37.13803140322368 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 37.07550648280553 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 36.81059646606445 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 36.64117934968736 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 36.52195334434509 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 36.29526283524253 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 36.04634610811869 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 35.84696716528673 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 35.60045385360718 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 35.33622336387634 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 35.107067704200745 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 34.92395719359903 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 34.73441667026943 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 34.52306476392244 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 34.336519718170166 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 34.163161470776515 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 34.01221418380737 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 33.874009204947434 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 33.76051155726115 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 33.62182259559631 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 33.41082325348487 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 33.203422996732925 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 33.01779856000628 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 32.80670082980188 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 32.5900088151296 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 32.418073661865726 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 32.2182891368866 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 32.011778253497496 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 31.8304418816286 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 31.626087631498066 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 31.438844786749943 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 31.26112943082242 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 31.057534556639826 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 30.833788926784813 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 30.61785888671875 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 30.421201351212293 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 30.225535506293888 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 30.030595108520153 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 29.82120791348544 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 29.623816702100967 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 29.427158905112226 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 29.238694865652853 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 29.05850923061371 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 28.888035107632074 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 28.719842433929443 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 28.5403387780283 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 28.339038537098812 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 28.14413097219647 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 27.947260521076345 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 27.751843950965185 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 27.55139718736921 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 27.36561241484525 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 27.17114367156193 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 26.988607164156637 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 26.85245760281881 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 26.652697856308986 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 26.45866508637705 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 26.264667533692858 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 26.07639107108116 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 25.889204978942875 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 25.692596052632187 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 25.491087436676025 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 25.294446187860824 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 25.105609105980914 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 24.920363562447687 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 24.724305636446243 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 24.528489854600693 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 24.32364788447341 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 24.138634965226455 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 23.95856261253357 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 23.76714153038828 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 23.573434120648866 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 23.369345512145603 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 23.17134952545166 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 22.981759071350098 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 22.79149918203001 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 22.597854393284493 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 22.407054748879858 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 22.227481535502843 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 22.040279739043292 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 21.850059437197306 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 21.651612501034794 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 21.45236500826749 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 21.260811856623445 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 21.068387985229492 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 20.877736081133833 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 20.6757186288419 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 20.48585426935586 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 20.299816430883205 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 20.10427338198612 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 19.91073876619339 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 19.713141461008604 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 19.52136271827075 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 19.329718570516565 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 19.134475231170654 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 18.93863015363712 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 18.745944902008656 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 18.555293580860766 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 18.358628566448505 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 18.172420081638155 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 17.987328889235012 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 17.80159522439832 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 17.611233949661255 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 17.423433776295514 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 17.27330277182839 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 17.082538078497123 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 16.891161254474095 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 16.704216678585627 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 16.514338003961665 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 16.32300189267034 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 16.13291654915645 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 15.939643825221266 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 15.745290251101478 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 15.552174652324004 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 15.359428882598877 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 15.167899982988343 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 14.979451523452509 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 14.785113543998904 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 14.591155290603638 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 14.40055932998657 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 14.210298996123058 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 14.018379115682887 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 13.825574576854706 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 13.6319975760556 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 13.43661697094257 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 13.242512160585127 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 13.050229888973814 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 12.855932153257212 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 12.662748472014469 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 12.469235446718002 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 12.284660114961511 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 12.093642633326732 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 11.899429186530735 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 11.705402346823712 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 11.512410163879395 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 11.319430699585178 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 11.126491476112689 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 10.932932568596794 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 10.737267149819269 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 10.543597295366483 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.354639977624972 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 10.166341734581254 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 9.979073859549858 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 9.79188364304152 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.605990807215372 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.415533086322002 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 9.226962240118729 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 9.03532246826521 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 8.843232343723248 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.652124274161554 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.459490274771666 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.267887697098361 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 8.076734096189087 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.886575287992849 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.69597452878952 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.506975960287249 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.31775900758343 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.1274964385237425 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.935731434240574 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.743496071208607 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.549838183874107 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.356878469090262 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.163788886297317 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.970721421157115 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.777473758248722 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.585476034565976 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.3938146136527845 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.202676112941235 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.011343007800223 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.818776811872209 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.6265844323418355 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.433792600523954 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.240827322006226 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.048236212916881 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.8559298515319824 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.6630027386365014 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.4704252861358307 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.2777273198945927 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.0846601154493247 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.891689500293216 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.6986253876839914 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.5058109785783738 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.3135114679945272 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.120833492783642 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.9280385971069336 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.7350101171363712 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.5421792368094125 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.3492200411663153 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.1563644654972038 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.9635926699027036 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.7708492084425322 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5781261448932783 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3853782740506259 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.19268772590100466 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   38.5s finished

    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  7.221 seconds)

**Estimated memory usage:**  1922 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
