
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-90

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 148-150

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 150-163

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-166

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fcc57cce370>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-229

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 169.42262649536133 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 26.04291343688965 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 24.19921374320984 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 23.72599236170451 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 23.309365272521973 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 23.07271385192871 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 22.813190460205078 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 22.62851371083941 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 22.486398696899414 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 22.317258093092175 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 22.22278070449829 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 22.105559804222803 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 22.030928770701088 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 21.908990181409397 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 21.82038463865008 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 21.72512404123942 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 21.616532921791077 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 21.490231485927808 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 21.358186139000786 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 21.252776208676792 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 21.155425786972046 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 21.049019790831068 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 20.934475725347347 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 20.82511617826379 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 20.726945877075195 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 20.623265743255615 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 20.510575202795177 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 20.415250310191404 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 20.32370175634112 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 20.228766153598652 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 20.274020512898765 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 20.160364512474306 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 20.066753089427948 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 19.9516680096135 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 19.821784608504352 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 19.684269189834595 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 19.584632131788464 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 19.47742746971749 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 19.368882141615217 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 19.25459255316319 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 19.1586332321167 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 19.044321874292883 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 18.919195924486434 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 18.79665525569472 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 18.67888524315574 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 18.564035018285118 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 18.437491054120272 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 18.310983941910113 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 18.185394406318665 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 18.052287962971903 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 17.930166721343994 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 17.80643357482611 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 17.682680368423462 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 17.5625360686824 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 17.442065671638208 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 17.32125839320096 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 17.205184527805876 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 17.090203080260963 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 16.979094743728638 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 16.860358666565457 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 16.740074396133423 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 16.62383430121375 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 16.512662449190692 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 16.395731191786506 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 16.28559273481369 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 16.17627893961393 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 16.06437899127151 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.950736914108049 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 15.838178999283734 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 15.72127506007319 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 15.607964856284006 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 15.491335932637604 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 15.36833275689019 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 15.24777135783679 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 15.128121749774829 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 15.008050203323364 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.884330536189832 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 14.763458137388353 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 14.64385909300584 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 14.52253651920753 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 14.402833342552185 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 14.28172336684333 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 14.163027303974802 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 14.04636985422617 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.928344272431874 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.810092519311345 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 13.700127756872842 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 13.581863712990422 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 13.460688894445246 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 13.338872515753414 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 13.217015398873224 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 13.09224169070904 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.9690899848938 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.84469134064131 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.719072149154988 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 12.596805246252764 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 12.4734774629275 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 12.348485863085875 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 12.227492488160426 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 12.107477886508208 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.98596453666687 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.864581934296258 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.743536374148201 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.622344648953781 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 11.501949163583609 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 11.380177702222552 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 11.260656919119493 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 11.13979292807178 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 11.020070296746713 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.899940208557549 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.781533566388218 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.664110548861393 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.546665787696838 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 10.428293890657677 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 10.308045320343552 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 10.1883879640828 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 10.072068436392422 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.951985024998331 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.832989777548839 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.713715821755033 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.59511915842692 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.474953901669211 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 9.353899603984395 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 9.242424175991275 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 9.12189753593937 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 9.008584213256835 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.888465060128107 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.767447373998447 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.646697282791138 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.525561094284058 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 8.404867575718805 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 8.283575005203712 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 8.163691730210274 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 8.044056105434446 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.925092316385525 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.8049487979323775 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.6874394136316635 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.567183271811826 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.447127552999967 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.326536772062452 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.205734797886439 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.085246610303297 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.963770429852983 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.842871866026124 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.721509536107381 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.601598287450856 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.480886400562443 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.36119050395732 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.240433499619768 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.119953849971695 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.000871817270914 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.880768068578859 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.760072507356342 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.639247429916282 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.518282490891296 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.397258097125638 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.276744818076109 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.1563650878371705 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.036803206310996 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.916778603439811 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.796226263046265 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.676074820275633 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.555621841807424 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.435203695589779 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.314485497590972 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.194151452093413 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.073859252125383 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.9538775618204816 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.8340665726434615 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.7141799291915443 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.5948336825651284 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.475008554625929 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.355003318121267 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.2355282320452563 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.115895323369695 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.99627035004752 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.876360405575145 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.7559795110239147 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.6362671959266235 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.5163568211667364 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.3962793085310192 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.2762028762648776 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.15634624512641 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.0363794858338404 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.916683984839398 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.7967155881830166 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.6768481577596357 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.5574198100656111 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.437743029695876 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.3178270720930956 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.197982022636815 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.0780808563631867 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9582986136277516 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.838481320000683 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.7187505505748631 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5989240071712396 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.47909926395027 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3592962081057166 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.23950287790009472 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11974794541172047 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   23.9s finished

    1978 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  1.049 seconds)

**Estimated memory usage:**  1863 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
