
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-90

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 148-150

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 150-163

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-166

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f3a3e72f490>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-229

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 178.00569534301758 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 30.414048671722412 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 28.305291652679443 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.670043547948204 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 27.33573079109192 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 27.09792137145996 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.90053987503052 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.699330057416645 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.5092716217041 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 26.295023202896118 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 26.101829290390015 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.94705642353405 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.786308447519936 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.628042294428898 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.4759053843362 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 25.322214921315513 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 25.172168970108032 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 25.031881276298975 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.887831528981526 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.744158644425244 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.614808082580566 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.48219759123666 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.340252724560827 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 24.19220803094947 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 24.04059600830078 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.895503520965576 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.75034757760855 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.61912663777669 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.473410197666716 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.33791736076618 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 23.189463218053184 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 23.033138082873435 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 22.884130239486694 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.733278158939246 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.578976813484644 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.428122929164342 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.284900003009373 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 22.141051956125207 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 22.01117152916758 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 21.860307082151756 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.713876724243164 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.56612278775471 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.42004087993077 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.26767522789711 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.121869564056396 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 20.978530539406673 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 20.831924739091296 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.68706429258306 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.548335671424866 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.423347925653264 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.29262137413025 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.159167906817267 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 20.02879362839919 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 19.889619395417988 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.744995947237367 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.604995922608808 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.46557494572231 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.32860055722688 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.18871544969493 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 19.049616930848458 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 18.920098145802818 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.789616940451452 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.65257353936472 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.516619235750227 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.394526690244675 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.255892808620747 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.12041814399488 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 17.984127614035536 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.84511326341068 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.707306689110354 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.57658532687596 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.442655774909007 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.30827882554796 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.173404788317747 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.038495282869082 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.90162022908529 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.76199630687111 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.624040969006426 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.490768120839046 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.35758149472973 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.22183382511139 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.086922569039427 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 15.95249426655653 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.823983442352478 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.685764267331077 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.5506690530216 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.415100014486978 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.283371517027932 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.147608800367875 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.008011129464995 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.869953473409018 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.7323935346289 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.594826314760292 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.45910507376476 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.32365870475769 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.1883196956233 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.055173615614573 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.917841375488596 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.780361024700866 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.645007675344292 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.509685754776001 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.37213407176556 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.235005822836184 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.107474417362399 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 12.971299464886005 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.834745180039178 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.69717369439467 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.5608386748305 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.424469497468737 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.28939448146645 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.151916287162088 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.015910814474296 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.88017019203731 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.74316447604019 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.6087133633463 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.472601859465888 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.338449165738862 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.202893821602194 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.068055783287955 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.932138631323808 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.797914187113443 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.662483130604768 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.528210319456507 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.392264784836186 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.257845501745901 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.122104787826538 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.985700709479197 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.850278968886128 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.71728827059269 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.582629573437595 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.447727148349468 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.31260592700871 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.176955093036998 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.042206905838242 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.909406583700607 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.774335181271589 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.639990413890166 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.505672794188897 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.371305469153583 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.239902367694773 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.105484110968453 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.970193140895654 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.83552296732513 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.700898025419328 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.567533201641507 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.432680269767498 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.298759947084401 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.1693774096819824 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.039343286204983 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.909223871743119 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.7743031183878575 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.6392484011239565 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.504404670313785 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.369424330642801 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.234250511441911 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.098352232287008 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.962665808506501 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.827827395906874 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.692430272887024 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.557000424127159 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.42211252450943 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.287047746018594 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.151857667499118 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.016669170988118 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.881446599960327 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.746412291671291 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.611105568437691 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.475478377884733 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.33992812747047 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.205051728254239 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.070260005838731 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.936864454146714 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.801825650902682 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.6665858753843805 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.5313772415292677 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.3961000442504883 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.260668873786926 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.1251259941165728 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.989429310466466 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.853637785884921 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.7182816664377847 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.582810167449614 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.447116000311715 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.311291591717246 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.1752573096233867 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.039358731862661 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.903318287223898 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7674341558772613 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.631425913344038 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.495418974962184 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3594165852195337 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.223581455140838 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0875774224599202 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9517308146224738 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8157456511074735 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6797563112699069 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.543782749954535 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4078047033493894 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.27185824904778993 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1359184435264549 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   27.2s finished

    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  8.107 seconds)

**Estimated memory usage:**  1945 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
