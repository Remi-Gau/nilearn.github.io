
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fdf2f31be50>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 185.9569549560547 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 31.434881687164307 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 28.911994457244873 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.927696863810223 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 27.36656093597412 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 27.026370763778687 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.628956476847332 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.323606184550695 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.138591766357422 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 25.936568710539074 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 26.132370233535767 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 28.114872759038754 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 29.56887682278951 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 30.8770312162546 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 31.87448971612113 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 32.64556972185771 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 33.27700853347778 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 33.90453592468711 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 34.27039755715264 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 34.726046436711364 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 35.144471883773804 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 35.186377343677336 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 34.567876989191234 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 33.87489724159241 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 33.22375535964966 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 32.62429642677307 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 32.06705452845647 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 31.524895588556927 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 31.02270977837699 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 30.548279951358662 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 30.09606989224752 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 29.67473856864437 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 29.267994225025177 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 28.86449282097094 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 28.482993406407974 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 28.114507300513132 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 27.83309499422709 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 27.488056595261032 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 27.148301877473532 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 26.82457359020527 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 26.513779640197754 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 26.211670927885102 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 25.91201439357939 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 25.6330047097317 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 25.347403569654986 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 25.089154031541614 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 24.83186870035918 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 24.572511358464016 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 24.316122571627297 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 24.06616149143297 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 23.818811416625977 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 23.57982186710133 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 23.340523187930767 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 23.102888143287515 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 22.87694842727096 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 22.653465487740256 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 22.43410532815116 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 22.225407830455847 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 22.017451722046424 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 21.811920028621866 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 21.612911224365234 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 21.41569606984248 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 21.218532754528905 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 21.02991123048086 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 20.850178360939026 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 20.65489191275377 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 20.455064968629316 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 20.257691621780396 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 20.060297895880307 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 19.86371252156686 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 19.689514466694423 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 19.506951056735616 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 19.319230397542317 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 19.13862801251346 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 18.962599464364953 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 18.787604570388794 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 18.610940745002345 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 18.433560513830805 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 18.26219210869227 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 18.091284821305095 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 17.9146546125412 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 17.74036936112392 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 17.566563594632033 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 17.392642503761383 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 17.221667108081636 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 17.053376155741077 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 16.88628853199094 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 16.71714597734912 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 16.550738378004596 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 16.381881277212933 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 16.208966387642757 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 16.039670173938458 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 15.871139754419742 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 15.704414188220937 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 15.548805637562529 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 15.409654215762492 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 15.26945964495341 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.109498606514684 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.946403989986498 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.793986635978774 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.63328766822815 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.469903627244552 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 14.30688508351644 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 14.1445853200931 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.982941774221567 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.821291287740072 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.661346817916295 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.501127684227773 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.345368950455278 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.189129770348925 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.03409970890392 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.88237054927929 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.74060434954507 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.585366972779806 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.449442922023305 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.316264795220416 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.161703241282495 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.007161407389193 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.85214238247629 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.69862440453858 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.543530782063801 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.389756931746302 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.235958240071282 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.082485896785084 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.929478545342722 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.777342700958252 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.625828303988019 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.474296036667711 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.324224025011063 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.174973637558693 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.024788984885582 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.874779655733182 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.7257624539462 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.576284200625313 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.427330511719433 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.279374369868526 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.13196350546444 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.983542482348254 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.837387160978455 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.692255325454601 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.548832212175641 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.405168807252924 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.260244879924075 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.1176771434037 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.9742211368348865 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.830337179118189 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.686879060039781 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.542954175650668 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.397799562763524 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.2531593405960395 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.108240207036336 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.963385376709186 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.819756934517308 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.6760309584000534 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.534001034575623 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.39084743684338 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.246420640211839 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.1015328464994 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.957250432123111 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.813177350182204 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.668743968009949 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.524130188900492 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.380029219168204 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.23615524666441 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.092368451560416 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.9484906919074785 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.804837766900119 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.661505327967113 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.518151010785783 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.375091844761865 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.231883147183587 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.089268974393431 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.9464768642602968 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.8038421324911837 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.6614580949147544 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.5192237922123497 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.3770506707104766 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.234857590185047 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.0929151572538225 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.9512185597552936 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.8093713919321694 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.667811106581714 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.5264002831427605 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.385275241455745 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.244241942530093 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.103310385265866 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.9633501678384762 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.822503193177004 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6816808162851535 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.5409749588638386 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.4003911269338507 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2599296844442478 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.1195945342381795 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9793200097553469 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8391602702976503 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6990666878529084 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.559064500185908 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.41916035032514387 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.27935785476607505 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13963346026051585 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   27.9s finished

    1986 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  7.110 seconds)

**Estimated memory usage:**  1923 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
