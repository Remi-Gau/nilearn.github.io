
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f143154dac0>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 165.16685485839844 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 23.846812963485718 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 22.762991666793823 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 22.101588169733684 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 21.885512590408325 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 21.526142120361328 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 21.197373310724895 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 20.996408700942993 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 20.821964263916016 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 20.619067033131916 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 20.45123839378357 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 20.32529360597784 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 20.265146255493164 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 20.11665777059702 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 19.99248014177595 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 19.86667776107788 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 19.728234887123108 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 19.62744098551133 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 19.505084461636013 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 19.37715468908611 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 19.253610849380493 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 19.14351335025969 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 19.042038527402013 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 18.949364444483884 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 18.8283044497172 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 18.7201931476593 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 18.612251593516422 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 18.52063141045747 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 18.419225999287196 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 18.31067002230677 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 18.2288236618042 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 18.14252359636368 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 18.05027961730957 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 17.945433956204038 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 17.84819166800555 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 17.74171624864851 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 17.643717288970947 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 17.530345800760628 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 17.41200275170176 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 17.310613626088852 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 17.224267959594727 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 17.117473526698788 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 17.002659616016206 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 16.8816451361013 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 16.759954495863482 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 16.6496909459432 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 16.537330378656804 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 16.42152300794074 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 16.308648467063904 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 16.20346369062151 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 16.102667570114136 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 15.990985809587963 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 15.877675111477192 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 15.761509571435317 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 15.655086376048901 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 15.548707658594305 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 15.446812902178085 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 15.332031931793479 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 15.223767321685264 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 15.117223323401758 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 15.007241010665895 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 14.891292181171355 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 14.781736735374695 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 14.673330776275149 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 14.569737553596497 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 14.463357540277336 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 14.359523404728282 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 14.259024545327941 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 14.15700413199032 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 14.0488993914231 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 13.935938358306885 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 13.82160500069739 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 13.710449642605251 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 13.608570066216874 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 13.508766676928545 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 13.401055335998535 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 13.288111184772692 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.181238524325481 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.096004638916407 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 12.992167228384863 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 12.89108669757843 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 12.789562613875779 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 12.68362875101043 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 12.574830672827112 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 12.472248043332781 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 12.362745860043695 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.26454372184221 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.162895509566384 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.052994034507059 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 11.952831986245144 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 11.845432069566515 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 11.739186564644614 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 11.63157431975655 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 11.521000467320926 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.411456366802783 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.302718112343237 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.196292400360107 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.088824921047564 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 10.978201418506856 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 10.866429326510188 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 10.757890701293945 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 10.648705676050469 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 10.539456680709241 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.429755396055944 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.320806650015024 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.211626495633807 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.105157285366419 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 9.995439003561145 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 9.886009454727173 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 9.776684229527044 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 9.671061970970849 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 9.563486410690858 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.456101843288966 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.348588340050352 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.241348755987067 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.133690740751183 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.025414664169837 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 8.91955510367695 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 8.812325873617398 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 8.706835293970189 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 8.599993069966633 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.493090069983618 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.385200910880918 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.277593635931247 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.170605944048974 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.062761211395264 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 7.953320321582613 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 7.84399286405308 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 7.73659385740757 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 7.631322576094043 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.523658000505887 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.415848873953783 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.307665434750644 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.200009917854367 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.091086277321203 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 6.982466070740311 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 6.873635235954733 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 6.766710451919667 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.661033419595248 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.554726734435816 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.447128432137625 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.338756674570394 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.232843221073419 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.124378110978987 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.01612753338284 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 5.9082581092571385 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 5.7993441444553735 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.6915348646592125 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.583651955063279 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.474888385542287 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.366963863372803 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.259802024096053 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.152320159109015 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.043801245346568 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 4.936812750704877 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.82956208721284 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.72157343228658 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.613573528399133 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.505833426608315 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.398393230618171 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.291095018386841 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.183711207431296 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.076078332500693 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 3.9688420164073173 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.860885905056465 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.752948905482437 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.6465476478438776 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.5423403842720442 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.4345986956641785 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.3270660180311937 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.2193753719329834 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.1119089168414735 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.0040221657863886 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.896373004582576 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.7888042762361724 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.6810959407261437 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.5738557360389014 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.466474133022761 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.359238461162267 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.2520742696090785 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.145054578781128 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.0374412668344064 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.9299085009229051 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.8223718463397418 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.714871468751327 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.6076994973260004 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.5006347522940688 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.393327850708987 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.2859811782836914 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.1788734582366136 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.071725895530299 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.9646822382642337 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.8574197292327881 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7501141456742361 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6429228684336868 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5357567774943817 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4285625486957783 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.32137824315104996 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.21423293604995267 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.10713489930234363 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   21.4s finished

    1968 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  57.525 seconds)

**Estimated memory usage:**  1899 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
