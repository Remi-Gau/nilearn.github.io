
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (:term:`VBM`)
to study the relationship between aging and gray matter density.

The data come from the `OASIS <https://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard :term:`VBM` pipeline (using SPM8 and
NewSegment) to create :term:`VBM` maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the :term:`ANOVA` step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the :term:`ANOVA` step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

:term:`SVM` weights are very noisy,
partly because heavy smoothing is detrimental for the prediction here.
A standard analysis using mass-univariate :term:`GLM`
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 112-123

Prediction pipeline with :term:`ANOVA` and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

In nilearn we can benefit from the built-in DecoderRegressor object to
do :term:`ANOVA` with SVR instead of manually defining the whole pipeline.
This estimator also uses Cross Validation to select best models and ensemble
them. Furthermore, you can pass ``n_jobs=<some_high_value>`` to the
DecoderRegressor class to take advantage of a multi-core system.
To save time (because these are anat images with many voxels), we include
only the 1-percent voxels most correlated with the age variable to fit. We
also want to set mask hyperparameter to be the mask we just obtained above.

.. GENERATED FROM PYTHON SOURCE LINES 123-149

.. code-block:: default


    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 150-152

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 152-165

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-183

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fec4dc7d580>



.. GENERATED FROM PYTHON SOURCE LINES 184-186

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 186-231

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 190.12451171875 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 31.491294145584106 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 29.561018228530884 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 29.124578475952152 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 29.048725605010986 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 29.62349510192871 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 29.295106808344524 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 29.015122754233225 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 28.760610580444336 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 28.825572066836887 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 28.584814310073853 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 28.381396943872627 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 28.36229101816813 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 28.149996354029728 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 28.08096466745649 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 27.895454565684002 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 27.709314465522766 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 27.507163272184485 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 27.33075589603848 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 27.26876278927452 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 27.072674989700317 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 26.876879147120885 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 26.69636340574785 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 26.52058690527211 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 26.350087642669678 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 26.17444086074829 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 26.10249451490549 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 25.927072798764264 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 25.77756599017552 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 25.604719901907032 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 25.432820955912273 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 25.261602147932972 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 25.15720170736313 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 24.98647457180601 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 24.810641723520618 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 24.61024628366743 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 24.410304731792873 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 24.220311416162026 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 24.03366565704346 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 23.854972441991173 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 23.723575592041016 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 23.535780063489586 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 23.35536651384263 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 23.168649324150973 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 22.99914212660356 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 22.83081176545885 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 22.664136015850566 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 22.530066170590988 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 22.35072696208954 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 22.18758993732686 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 22.013760566711426 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 21.87637337983823 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 21.7029199050023 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 21.53331884798014 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 21.41964172433924 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 21.336149194023825 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 21.167449746813094 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 20.999948409565707 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 20.8385049639077 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 20.672126430576128 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 20.512855450312298 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 20.377993290541603 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 20.21007140221134 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 20.045892178066193 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 19.878856748342514 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 19.717000832924477 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 19.55583274003231 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 19.39205593849296 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 19.25527297749239 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 19.099104231682375 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 18.9400132724217 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 18.778528629893987 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 18.622214847140842 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 18.465156042412538 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 18.306331466984105 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 18.145877520243328 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 18.01368220228898 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 17.857698245482013 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 17.70213145476121 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 17.548456973667385 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 17.395854949951172 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 17.239167660842707 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 17.082443150078376 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 16.95255896269557 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 16.801342782520113 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 16.64935217184179 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 16.497705792271812 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 16.345136179321116 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 16.196497657082297 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 16.0453463886561 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.907843033472698 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 15.756636664107605 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 15.602715191633806 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 15.452570592203449 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 15.301410380830156 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 15.149971246719362 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.998797555764515 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.855576026070977 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.712683711733138 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.566172383048317 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.41990351676941 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.270275085279257 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 14.121731496324726 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.972303135881146 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.82248614384578 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.687671264012655 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.539312596591014 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.391246735492599 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.245346166469433 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.096991250274378 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.949380722912876 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.80128719355609 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.664456844329834 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.515755239841157 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.367908055322212 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.220577779023543 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.07264522026325 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.924106027326014 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.775416309550657 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.63761241696462 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.494704087575276 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.356242341443528 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.211754243881977 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.065076025520883 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.917299839758105 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.771074199676514 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.632703743283711 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.486613117803739 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.33962070941925 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.193461331286171 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.048440548089834 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.904085960096985 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.75792257713549 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.612364763604072 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.473488740066983 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.327115756494027 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.182413325590245 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.036742112932414 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.89077207316523 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.744300353441307 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.598726000104632 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.459358808842111 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.313828773901497 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.169046430321007 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.02408774693807 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.880126147434629 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.736059956354637 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.592740485457337 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.452461146019601 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.306866770622714 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.162156343460083 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.017375363419387 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.872395841698897 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.727084737977171 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.581730028251549 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.442346196020804 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.298375575970381 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.155482521482334 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.01095117194743 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.866410913707325 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.722063779830933 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.585731762536565 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.4456364725842885 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.302339132578095 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.158046617740538 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.0137763023376465 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.870137760438115 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.7255998785624245 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.5816285723731625 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.43767285629137 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.297010590048398 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.153227224684598 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.009452232094699 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.8667568581641754 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.722769109682105 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.5791543211255754 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.4355491616509175 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.2936190252250195 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.1499780483460156 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.0064167150572025 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.862965663274129 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.719446038672937 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.575916974099128 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.4327346588093075 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.2908020226851753 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.1474308194340885 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.0039075907840522 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.8607165392707377 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.7172461012576488 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.5738088277281908 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.4304971193012437 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2878388921627824 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.14490803082784 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0017357465516716 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8584922834769967 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7152998447418213 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5721356722773338 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.42904662964912843 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.28610499699910485 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.14302879242441763 seconds remaining)
    1984 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 11.296 seconds)

**Estimated memory usage:**  1827 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
