
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f692f8a3d60>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 174.43418502807617 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 33.40841627120972 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 29.832127332687378 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 28.567375977834068 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 27.90289330482483 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 27.50359797477722 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 27.097717285156254 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.860690764018468 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.714801788330078 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 26.47814647356669 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 26.34603452682495 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 26.185482957146387 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.999178886413574 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.835263142218956 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.68130271775382 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 25.517887274424236 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 25.407512545585632 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 25.243910593145035 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 25.096347835328842 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.912955723310773 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.73650097846985 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.58616671108064 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.422741608186204 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 24.254750396894373 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 24.099461237589516 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.99183750152588 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.83751838023846 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.678912551314742 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.520469801766534 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.36652635705882 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 23.209959824879967 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 23.156790002699818 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 23.03557562828064 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.924295555461537 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.80010320158566 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.655828680310933 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.51934748225742 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 22.379767920519853 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 22.225663774891906 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 22.076968009655296 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.931214332580566 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.781567271162825 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.635401941481092 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.484990718752837 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.336442773992363 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 21.19053904215495 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 21.044555353081748 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.902602956650103 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.756899992624916 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.605032784598215 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.465335607528687 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.324310246635886 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 20.180869964452892 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 20.030808043929767 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.888036259898435 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.746718796816737 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.602786949702672 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.459415695123504 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.313557378176984 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 19.16392277458967 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 19.017710526784263 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.870319260925545 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.729411894275295 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.58685735293797 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.445033580064774 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.3020561841818 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.16207990501866 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.01800632120958 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.876739095239078 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.740166346232098 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.603715181350708 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.462340912348786 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.322310553656685 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.183380319647593 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.043262829651702 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.902579466501873 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.76361648659957 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.624605770234936 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.486890591107883 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.348466417457484 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.211299180984497 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.074422509581954 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 15.932217638667037 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.79386426454567 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.653703076498848 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.514327119378484 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.374164830806642 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.23453406355847 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.09542196447199 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 14.957095882865818 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.818106916215687 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.68555640912318 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.548677019450977 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.411843458811443 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.275578828568154 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.138032022275423 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.014751215775807 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.875072250661162 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.739446557297999 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.604737183060308 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.471166849136353 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.33591073810464 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.201403486962413 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.065229075626263 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 12.928808432358963 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.793354352315268 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.657966735228053 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.523570334799937 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.386507970315439 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.250103657398748 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.11360829526728 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 11.980323449985402 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.844335862568446 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.70876382093514 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.57610463259513 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.445504665374756 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.310159592792905 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.173666356975197 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.03823971748352 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.903340523984252 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.76912482579549 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.633331271242506 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.497597643586456 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.363823557287697 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.229633685081236 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.09385962486267 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.958596759372288 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.823712352692612 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.688571602106094 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.554067524828652 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.41925366108234 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.285260542658449 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.152753324219674 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.017781390283341 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.882351288154943 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.748924237710458 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.625980377197266 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.492097558766385 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.357587817786396 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.223021092174722 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.08927355493818 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.954912319250986 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.820237656714212 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.684631724457641 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.5497286849551735 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.414882733904082 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.279951915349045 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.144535100378958 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.008775923703168 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.873752851614216 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.740199168523152 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.605912860655627 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.472495530780993 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.337755560095793 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.2027488528908075 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.067939235318092 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.932332430130396 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.797080802310044 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.662105032160312 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.528646799003553 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.393577694892883 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.258166630075586 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.123011038627153 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.988235785185925 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.853323808530482 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.718895984418465 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.583984168179064 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.4497557642931 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.314862841651553 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.179847713052873 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.04500802825479 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.909973589300412 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.775063620057217 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.640054443668079 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.5050082617792593 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.3698107174464633 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.234610026532953 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.0992729529149114 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.964042293891478 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.8290671449799776 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.694064484702216 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.5593603276416084 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.4244220361604794 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.2894939790006545 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.154490056245223 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.0198947481206946 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.8850454053571148 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7503219734538684 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.615603817270157 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.4809249645818476 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3463475578709652 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2116751658354754 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0769857168197632 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.942344181278209 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8077233943742576 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6730935267913035 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5384775181205905 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.403843584399538 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.269220313640556 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13460158582907825 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   26.9s finished

    1968 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  8.024 seconds)

**Estimated memory usage:**  1921 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
