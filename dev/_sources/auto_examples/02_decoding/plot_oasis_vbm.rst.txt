
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7faeb47e0430>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 179.16202545166016 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 30.440760374069214 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 28.459540128707886 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.65592169761658 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 27.17497944831848 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 26.89103364944458 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.649323304494224 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.403080293110442 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.201528549194336 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 25.992099708980984 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 25.820505619049072 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.642496564171534 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.49016491572062 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.425694850774914 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.289174488612584 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 25.15379802385966 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 25.010640501976013 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 24.886519516215607 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.73742940690782 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.59201891798722 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.613986253738403 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.502263875234693 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.42916332591664 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 24.29689177222874 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 24.165912787119545 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 24.039193391799927 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.885109461270847 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.74904520423324 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.629328455243794 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.51052169142098 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 23.383175134658813 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 23.249391817277477 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 23.114611566066742 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.974759195790146 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.836625071132886 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.70555775506156 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.574715084499783 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 22.43789951221363 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 22.3011784051594 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 22.192369259320774 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 22.059679985046387 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.926561942914635 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.795409429640998 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.660367017568543 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.522287542169742 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 21.376092778311836 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 21.238622603209123 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 21.09800341281485 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.955320994059242 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.81562146848562 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.67464804649353 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.529302568996652 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 20.386981303875263 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 20.25209418782648 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 20.114882734086777 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.97120202671398 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.82544892174857 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.689181373830426 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.54759593667655 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 19.402505042189258 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 19.255377848943077 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 19.113462803793738 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.9676185423328 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.82545635056874 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.681960999965668 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.538416073872494 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.403866919604216 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.30272556418803 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 18.22014275719138 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 18.084156178045962 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.940554516656057 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.797341726195643 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.657106611463757 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.518347877345672 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.377224935067666 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 17.23605990409851 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 17.09337188068189 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.952265891161833 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.81066208619338 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.669360154791722 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.52908480167389 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.388017536681378 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.249550982219418 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 16.12120237120663 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.983063345863705 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.849359330009012 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.708305963250092 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.567267163046475 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.425259893590754 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.285970945036812 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.145056512620716 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 15.004650176226438 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.865433682566104 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.725468697086459 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.58524305262464 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.444984097229808 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.30532928307851 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.166247213009706 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.026205909495452 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.886620413173327 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.747482299804688 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.615307687532784 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.477082327300428 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.338661404489313 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.198363670935999 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.076073033469063 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.936934295690286 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.797569493267023 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.656608705167418 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.517413826163756 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.377624663439665 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.238132410221272 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.111605286598206 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.971128404667947 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.831174005541886 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.691469586413838 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.552625491701324 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.41376079657139 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.274741471824 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.136546868236126 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.997378667195637 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.858451581198322 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.719291346972106 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.579722319192033 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.440448784059093 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.300990390777587 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.162090691309126 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.026027437270157 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.886551886796951 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.747727192649545 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.608575545824491 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.469468351538854 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.330846006220037 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.192452525734005 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.055232507079394 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.916855997509426 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.779902065501494 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.641712618570258 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.50336796304454 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.36533521576751 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.22747128350394 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.090299381431958 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.952455369519516 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.814214261261733 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.676966892348395 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.539152038508448 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.401841604546324 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.269842728465593 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.132429148699787 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.994932337895336 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.8570864995320635 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.7196822529597 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.581492599688078 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.443770530177098 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.306264781332635 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.168896959673974 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.031761346719204 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.894339752804702 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.757309527336796 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.6207347246086075 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.483305633068085 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.345868138793093 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.208592364817489 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.071485947977545 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.933896843979999 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.796479333530773 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.659286470298308 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.521814708938142 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.3844232105073475 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.246996785056662 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.11007412742166 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.9738952472195987 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.8366714743680737 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.699497305588915 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.561921454024041 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.424769742148263 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.28760459206321 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.150222356710057 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.013037346722035 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.876089016152494 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.739162551032172 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.602016267196908 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.4648803590418216 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.32797917772512 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.1911441968834917 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.054257953489149 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.9173709833493797 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7804695947922486 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6435876805731588 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.5066547671323098 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3698070551219739 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2328417213799443 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.095918446779251 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9589084417708796 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8219076898909107 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6849613067431327 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5479455237485924 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4109374871713861 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2739646531114675 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13697716219341335 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   27.4s finished

    1968 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  9.018 seconds)

**Estimated memory usage:**  1848 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
