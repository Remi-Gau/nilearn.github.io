
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f072407dee0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 189.06354904174805 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 32.66475868225098 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 30.29744553565979 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 29.31567748387655 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 28.717199325561523 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 28.557246923446655 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 28.50611964861552 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 28.434587069920134 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 28.132856369018555 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 28.51969872580634 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 28.28147053718567 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 28.029875213449653 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 27.796688397725422 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 27.541499889813938 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 27.3307341507503 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 27.08608603477478 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 26.89160144329071 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 26.667797789854163 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 26.471161603927612 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 26.28228821252522 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 26.089085340499878 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 25.89943326087225 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 25.720025040886622 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 25.542542975881826 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 25.367396036783852 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 25.1943416595459 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 25.042273026246292 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 24.87180773417155 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 24.714773484638762 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 24.566512781998206 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 24.414660692214966 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 24.274301344348537 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 24.113244652748108 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 23.969010548158124 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 23.824206688824823 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 23.66961775507246 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 23.522830830679997 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 23.373512912440944 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 23.213164818914315 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 23.06005035913908 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 22.901034355163574 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 22.755227216860142 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 22.596822727294196 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 22.446536662966704 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 22.30180497602983 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 22.162150992287533 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 22.01387711193251 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 21.869351802988255 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 21.72742656866709 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 21.586258863916203 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 21.440272092819214 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 21.286781011843214 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 21.147031160501335 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 21.002842061924486 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 20.85927818439625 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 20.710108496926047 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 20.55997569220407 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 20.41793636690106 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 20.27842044008189 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 20.142337015119647 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 19.999792416890465 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 19.855919697245614 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 19.71209153052299 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 19.5673218038347 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 19.42287513613701 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 19.285859089631302 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 19.14022197867885 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.994410984551727 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 18.850610059850357 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 18.705687761306763 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 18.579122713633947 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 18.43848469895376 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 18.294988844129772 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 18.156182106227092 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 18.011309063112414 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 17.869439125061035 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 17.725475763019762 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 17.583550279790703 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 17.43703230222066 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 17.29305660573742 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 17.149158596992493 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 17.006880639511863 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.866384186395784 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 16.720284237919085 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 16.575399921053933 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 16.433162422741162 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 16.289692457332166 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 16.149346014548993 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 16.009550788185813 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.866340765792332 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.724353684319391 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 15.585142326878977 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 15.439932066461315 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 15.293876758185768 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 15.149561349381791 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 15.007780514265363 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.867586572964985 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.729429677589653 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.596269870290952 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.461948811405836 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.322234630584717 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.18023450775902 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 14.043070634206137 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.902836211676737 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.759997001061073 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.617163624082293 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.472977971130947 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.333176251883819 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.193706035614014 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.04898715675424 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.906123616478661 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.764363589587512 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.619970730372838 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.475735225508698 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.333002517097874 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.193384543709133 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.047202611791677 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.903146874191416 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.758828854156754 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.61343732000399 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.468835353851318 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.324382123868329 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.184003927668588 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.037513754232142 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.896621919447377 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.753195667266846 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.609232845760527 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.466818244438471 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.323728889226913 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.178847723228987 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.033752423066359 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.889969470846744 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.747068947011774 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.602893956621788 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.460303107304359 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.316433818251998 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.171984279856963 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.02960754659054 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.885139292564945 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.741288900375366 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.597780738558088 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.4537315317925 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.310359142196011 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.16658314958319 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.022436526086596 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.877729900952043 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.733031338208342 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.587981715494273 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.44312587944237 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.29927093230638 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.155170996983846 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.011223167773114 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.867480980722528 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.723901008468828 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.580654952433202 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.437160845725767 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.29375871633872 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.151871728289659 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.008289397517337 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.865942812565738 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.723662793636322 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.580927705172426 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.437221665441253 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.29366122433013 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.150907964241214 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.0080357392628985 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.865882037633873 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.723085758928767 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.5806367964971635 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.437156668781529 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.294541274800021 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.151528772554899 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.008536998615709 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.865731131823766 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.7225946859381667 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.580397776194981 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.437563029202548 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.29449755189109 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.1514175045356323 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.0081083388301915 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.8647606902652316 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.721594687983476 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.578634623642806 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.4359974170643124 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.2935422814410664 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.1506246296135156 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.0078837358823387 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.864948602921185 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.721889480631402 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.578995839628593 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.435878364663375 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2925904296455584 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.149438460667928 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0059683001720843 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8624820315960756 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7189656832279303 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5755092951716209 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4318073388888751 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2880013181705668 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.14402771355518743 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   28.8s finished

    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  10.888 seconds)

**Estimated memory usage:**  1919 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
