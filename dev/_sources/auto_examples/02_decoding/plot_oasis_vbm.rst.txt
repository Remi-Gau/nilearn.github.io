
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-60

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 61-63

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 63-86

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 87-89

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 89-105

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 106-108

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 108-143

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 144-146

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 146-159

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 160-162

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 162-177

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f38cad531c0>



.. GENERATED FROM PYTHON SOURCE LINES 178-180

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 180-225

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 202.10027694702148 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 36.08428359031677 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 33.9211163520813 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 33.283259868621826 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 32.82748031616211 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 32.43687987327576 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 32.19095826148987 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 31.95462615149362 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 31.825618743896484 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 32.61521991093953 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 32.532065868377686 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 32.215724749998614 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 31.99493869145711 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 31.652128824820885 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 31.362149374825616 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 31.05729031562805 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 30.759793281555176 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 30.489363544127524 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 30.235146469540066 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 30.008234061692892 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 29.793724536895752 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 29.621629363014584 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 29.40245288068598 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 29.21469743355461 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 29.014725367228188 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 28.80941605567932 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 28.651560379908634 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 28.477532598707413 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 28.282204014914377 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 28.100765557124696 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 27.896892468134563 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 27.696146680462743 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 27.5267014503479 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 27.346156806656808 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 27.16840282608481 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 26.99295503752572 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 26.817218912972344 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 26.635312170595736 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 26.463928624203334 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 26.289183011421795 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 26.153301239013672 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 25.99195849604723 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 25.829312301817396 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 25.666910881219906 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 25.496360193599354 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 25.324536906348335 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 25.161010223886244 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 24.99987956818114 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 24.824704925219216 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 24.65470625916306 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 24.484512090682983 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 24.31350664531483 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 24.157078064405002 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 24.00338948897596 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 23.829713803750497 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 23.661182988773692 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 23.484360286167693 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 23.313738170423004 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 23.150770688879078 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 22.99092873476319 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 22.82977374394735 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 22.65785204387102 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 22.480837583541867 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 22.310498941512332 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 22.15353375673294 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 21.98324148471539 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 21.812810854478315 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 21.633656597849146 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 21.4595713334925 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 21.28655233244965 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 21.11707649912153 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 20.963915902124324 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 20.798377990722656 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 20.626933319927897 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 20.456586406037612 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 20.292600393295288 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 20.124377664766815 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 19.963395289012364 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 19.79994701116513 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 19.63569500476499 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 19.46999716758728 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 19.301332456094247 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 19.13311150597363 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 18.967335281601873 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 18.809991302944365 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 18.653356678345624 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 18.49392713502396 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 18.328834585759832 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 18.163734696128152 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 17.998345203613965 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 17.83466551038954 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 17.67297756278908 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 17.509466886520386 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 17.345082636802427 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 17.18206934218711 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 17.016794330195378 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 16.853555540243782 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 16.68531618413237 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 16.51883840560913 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 16.351832637883195 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 16.18542790412903 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 16.025551394660873 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 15.871388547560748 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 15.710922243525681 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 15.546708033635067 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 15.381154287429084 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 15.217384995154616 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 15.050665962361844 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 14.885355914080584 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 14.719977466338271 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 14.555154692042958 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 14.389328673079207 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 14.224170054708209 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 14.059794282491227 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 13.895594023821648 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 13.735290434049523 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 13.570693065380228 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 13.408191998799643 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 13.2450661497601 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 13.081686071988916 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 12.917262077331543 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 12.755259961136117 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 12.592670378137809 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 12.42963823070371 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 12.266349654043875 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 12.104472827911376 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.941208975655693 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 11.77842999067832 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 11.616778269410133 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 11.453869509142498 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 11.292595166426437 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 11.130933337539206 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.973630847352924 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.814609448712572 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.650942788195254 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.48963063734549 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 10.327707851634306 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.166294256266015 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 10.003291337386422 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.844462044805073 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.682355403900146 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.520262948164703 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.358298835620074 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.196379519842722 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.033087068133884 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.871130655551779 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.71100207550885 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.54969224800058 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.386800024960493 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.224115230893128 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.06178061167399 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.900120160437577 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.738041325619346 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.576229781107187 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.414834951425528 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.252665835042154 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.090984717393533 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.930152159587593 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.76929665818999 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.607682515990059 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.445895254611969 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.284612723759243 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.123289423224366 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.961204068061033 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.801731510860164 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.642387354012691 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.481182282229504 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.320954328525566 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.15914181300572 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.997459077270778 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.835820983437931 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.67411038052966 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.512394394985465 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.350912342181784 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.189538947467146 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.027752774102347 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.867059046571905 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.705977699850912 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.544771885604001 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.3834748934101126 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.222424374686347 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.0623835279138047 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.900964653098976 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.740239884683995 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.579497192216956 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.418206749735652 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.2571904274725147 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.0959184055022377 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.9347750633320908 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.773549512580589 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.6124050115284165 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.4510724482111905 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.289695531129837 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.1284255067301536 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9671873013997816 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.8059670130411783 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6447173965220548 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4835138115180931 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.32232643137074485 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1611470565124972 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   32.2s finished

    1961 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  13.752 seconds)

**Estimated memory usage:**  1955 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
