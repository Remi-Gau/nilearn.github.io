
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-90

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 148-150

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 150-163

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-166

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f90a3d92040>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-229

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 198.29034805297852 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 30.748443126678467 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 28.609421968460083 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.77290447552999 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 27.234957456588745 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 26.80809259414673 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.448276042938236 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.22640323638916 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 25.962055206298828 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 25.743386612998115 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 25.58261513710022 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.41980045491999 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.653749068578083 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.475642956220188 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.383783204214915 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 25.201566378275555 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 25.058770298957825 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 24.997035825953766 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.864450375239052 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.709569767901773 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.568450927734375 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.396668967746553 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.220082304694436 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 24.051378996475883 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 24.04231293996175 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.917795419692993 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.824824021412777 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.67116891896283 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.520310163497925 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.371196582399563 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 23.214235862096153 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 23.0522095464891 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 22.899061739444733 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.764926975423638 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.60793123525732 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.45045290674482 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.295496278338963 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 22.14023269833745 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 21.99869197293332 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 21.850889866168686 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.702183723449707 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.54856095662931 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.40224712235587 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.25532885484917 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.113060669465497 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 20.975184890959 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 20.840891537459 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.7081811986071 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.566389044125874 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.430892749708526 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.289002180099487 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.15431151670568 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 20.007548093795776 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 19.865082817257576 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.728819379100095 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.594649228182703 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.460579599652974 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.321101703141863 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.197633439096908 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 19.054841813394578 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 18.919496774673462 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.790852362992336 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.98685174603616 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 19.10042261320447 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 19.24723994731903 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 19.410378786233757 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 19.276246294830784 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 19.111500127991633 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 18.945737474104938 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 18.786995880845666 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 18.62475711958749 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 18.46557553385345 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 18.31189473470052 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 18.16972808968531 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 18.01093274193841 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 17.85332759221395 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 17.69849247681467 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 17.5407883904197 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 17.384769928761017 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 17.22962098483798 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 17.07521367073059 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.933611313501995 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.778260451991382 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 16.624325528202288 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 16.474673100880214 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 16.32253572520088 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 16.172165776407994 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 16.027411860981207 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.8768329186873 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.728010129392816 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.574855910407173 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 15.4261283324315 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 15.276030530100284 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 15.127082014596592 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.97998805248991 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.832999794106735 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.687163949012755 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.538379130904207 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.391563036003891 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.24954909748501 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.103395938873291 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.955902980105712 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.807979125602573 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.66158062046014 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.514861693749062 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.367523306892032 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.222194158805992 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.075370998026054 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.928099234898886 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.781665841373828 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.636342937296089 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.492965513521487 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.348272102219717 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.203858316472147 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.05844481367814 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.91302911094997 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.769691944122314 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.624526967350235 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.484207779674207 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.339660882949829 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.195314566294352 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.053141270787263 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.910646293984085 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.767234181970116 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.626008810535554 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.482481241226196 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.340563944407872 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.197327465522946 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.054531261324883 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.911254076994666 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.768571376800537 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.626899273340939 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.484833088788118 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.343117194068164 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.200491360764005 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.058114307898062 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.91653969708611 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.774820071937393 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.63356932349827 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.493531439801771 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.352085386003766 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.210903243815645 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.070376298796964 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.930477975965379 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.789706269900004 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.652228700703588 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.511839393067033 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.370920343463924 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.229881286621094 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.08872823907225 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.949908971786499 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.80996020582338 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.669271042472437 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.528743955824111 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.389009370432271 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.248159316278273 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.108010206467066 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.96851616452454 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.830048491683187 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.689810136579117 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.550129294395447 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.4117909499577115 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.272958467036117 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.132970362353179 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.99315576437043 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.853418473041419 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.71382866422814 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.5741693045564755 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.435168039231073 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.2959095641706115 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.156335774589988 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.017227206313819 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.8782245336576953 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.7392064891109578 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.5999368525099484 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.460702964237758 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.3222836039283057 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.183319269600561 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.0443307040782455 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.9056642934596737 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.7667535410987005 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.627770877016183 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.489357455746158 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.350977487251407 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.2124582373577617 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.073918071953026 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.9352466060269264 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7968481874720936 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6583439695074202 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.5200831814417763 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3816575878544857 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.243365631053585 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.1049969096978505 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9667179880982235 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8286091789756854 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6904114576486441 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5522608319107367 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4141507281869801 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2760849697421296 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13801768916336135 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   27.6s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  7.020 seconds)

**Estimated memory usage:**  1898 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
