
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-90

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 148-150

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 150-163

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-166

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fe40df94be0>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-229

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 187.36839294433594 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 30.867151260375977 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 28.90385127067566 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.9947521686554 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 27.427847385406494 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 27.111050605773926 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 27.088165998458866 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.755132845469884 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.48529052734375 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 26.244754367404514 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 26.059297561645508 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.869448900222782 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.666658004124958 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.485935064462517 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.300039223262242 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 25.1149423122406 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 24.94600224494934 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 24.803056744968192 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.81729271676805 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.679900420339486 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.524404764175415 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.368898482549756 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.206096887588505 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 24.04118675770967 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 23.875221570332844 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.725629806518555 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.56854827587421 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.41882335698163 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.271429709025792 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.126941828892146 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 22.98214364051819 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 22.836597896391343 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 22.70262908935547 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.556706695845634 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.409805185654587 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.26185131072998 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.118928617901272 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 21.97216721483179 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 21.833885192871097 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 21.693880820885685 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.558125495910645 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.416779727470583 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.278000252587454 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.154166593108066 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.023723212155428 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 20.889649947484337 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 20.75077976351199 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.614533525832154 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.47471034526825 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.333934890980625 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.19573426246643 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.056758118610755 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 19.917647636853733 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 19.779133045448447 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.63890163986771 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.504718910564076 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.372549193246027 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.23393268334238 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.09896818522749 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 18.960894208843424 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 18.82386541366577 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.691583391095772 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.560046880475934 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.422169284215048 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.283196210861206 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.15251865753761 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.016292543122262 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 17.883650078702328 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.74607508322772 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.610695838928223 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.471888405936106 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.333512272633296 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.192081451416016 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.057289188855314 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 16.921854392902272 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.787589391072594 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.654032042152004 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.521682076639944 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.38579886387556 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.250223259382608 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.122196555137634 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 15.988865037023286 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 15.852606313984568 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.717695190245847 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.585958673840477 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.450988320743337 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.314102078593054 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.176155054706268 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.041561343453147 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 14.911387296205156 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.775244235992433 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.638926899040138 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.504954866741016 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.369452209882839 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.233786395255555 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.098546366942557 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 13.965085764726002 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.829721844073424 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.695481582563751 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.561606489046655 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.426302909851074 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.291189698889704 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.156533942503088 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.02482959599171 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 12.892037244943472 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.758503913879395 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.624916342069518 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.492393540444775 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.358542486473366 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.226142415212928 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.093475341796875 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 11.95923992320224 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.8253367798669 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.692384838002972 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.55963236825508 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.425974638565727 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.292912927167169 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.159494742369041 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.025752528239105 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.891540463231191 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.75785779953003 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.624163885747107 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.490899496391172 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.358647133276714 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.224935100924585 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.091266250610351 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.957085624573724 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.822600927878552 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.68814392387867 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.554036031397738 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.42057416989253 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.288243426621415 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.155022700627645 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.023343961041673 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.88867818419613 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.754254588374385 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.619973463170668 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.485298045360258 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.351101433021435 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.21649345219564 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.082923207964216 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.949384506712568 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.8156513429023855 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.6823041522419535 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.548771182696025 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.414984111128182 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.28100957282602 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.146989700745563 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.012808464668893 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.878307139313461 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.744476556777954 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.6108746007578265 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.476686176500822 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.342515847262215 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.210001626572051 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.075578235810803 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.940728597151927 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.8061930009513905 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.6715309167210055 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.536664398961097 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.401825904846191 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.267793976742289 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.13360771720792 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.998598597532401 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.8635141093556475 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.728610623966564 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.593814097255109 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.458558999135823 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.323237782432919 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.188216921845837 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.0529685721677895 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.9178157187344733 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.7829998870228616 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.648131471148805 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.513199943235551 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.3780570030212402 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.243411378426985 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.109227843203787 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.974217026421193 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.839332323500564 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.7042992909749346 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.5692070439375567 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.43398708825583 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.298901659543397 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.163795637047809 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.0285791706394507 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.8934061886161886 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7583796761252664 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6231619246462556 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.4879223366893788 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3526780730799624 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2175288300239604 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0822825531164804 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9472775212223665 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8119703101128647 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6766720368311955 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5413630446609186 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4060333852235436 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.27070220070655904 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13536288510614902 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   27.1s finished

    1996 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  13.250 seconds)

**Estimated memory usage:**  1920 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
