
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print("")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fd86d9221f0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 223.6008644104004 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 50.17833614349365 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 47.316965103149414 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 46.194732983907066 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 45.33722925186157 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 44.79922556877136 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 44.442946434020996 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 44.05616641044617 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 43.65575981140137 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 43.32088804244995 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 42.99626636505127 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 42.83203248544173 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 42.531917095184326 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 42.27904438972473 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 42.10451480320522 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 41.86459159851074 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 41.638580560684204 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 41.41706308196573 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 41.21843319469028 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 41.01261619517678 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 40.95442199707031 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 40.69586480231512 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 40.441173466769136 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 40.24138056713602 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 40.033692042032875 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 39.80599784851074 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 39.56825901911809 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 39.32347580238625 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 39.08989640644619 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 38.86174639340104 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 38.66894896825155 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 38.469787136200935 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 38.222080171108246 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 37.96414711981109 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 37.726325301563044 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 37.5014579977308 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 37.281576262580025 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 37.03098767512553 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 36.78808111893504 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 36.556044865877205 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 36.34782695770264 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 36.115400878394524 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 35.880985237303236 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 35.67517092616059 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 35.454024748368695 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 35.23230112923516 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 35.01621205910393 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 34.78808241194867 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 34.565151055653885 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 34.329169132271595 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 34.09976649284363 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 33.87054176891551 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 33.63575069720929 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 33.39631695567437 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 33.16103192611977 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 32.91636495156722 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 32.67589821134295 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 32.44324819246928 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 32.20503698546311 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 31.968822762117547 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 31.730789661407474 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 31.49650821920301 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 31.27042388146923 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 31.049491439546856 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 30.811657458543777 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 30.575561064940235 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 30.346483461784594 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 30.122796976744237 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 29.902765484417184 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 29.688051562378373 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 29.464664220809937 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 29.25951126931419 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 29.027629852294922 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 28.79875751390849 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 28.564414327209057 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 28.335320949554443 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 28.10279499857049 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 27.8656416279929 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 27.63399986120371 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 27.401030944872506 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 27.175540566444397 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 26.947599596447418 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 26.7188117445969 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 26.485829580261047 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 26.254861036936443 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 26.02959119572359 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 25.801910161972046 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 25.57089989486782 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 25.340533863414418 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 25.110167806068162 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 24.877423895729915 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 24.643949244048567 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 24.413572249205217 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 24.188394574708838 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 23.965117363219566 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 23.730115451310812 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 23.50397996107737 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 23.270419880286934 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 23.045281838397592 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 22.81861788817126 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 22.589840173721313 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 22.358617076779357 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 22.128561492059745 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 21.903276767545535 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 21.67175740462083 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 21.438558907735917 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 21.206050058580797 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 20.977566458354485 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 20.749770985709297 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 20.51921631436829 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 20.292346325787634 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 20.0682252634753 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 19.8416303225926 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 19.613175371051888 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 19.3843115338108 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 19.158897265144017 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 18.930762167634636 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 18.706529588780853 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 18.479648032430877 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 18.251909662695493 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 18.02804136276245 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 17.803019358106884 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 17.575959733275116 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 17.347811937332153 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 17.12187154831425 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 16.893258333206177 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 16.670489738857935 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 16.449005295911174 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 16.226796180009842 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 16.000645153282225 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 15.774536994787363 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 15.550656293184701 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 15.324175018252747 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 15.097178315757809 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 14.870265537233495 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 14.64674671490987 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 14.421862770529355 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 14.195710371880635 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 13.968753026879352 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 13.742028949929656 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 13.516057389123098 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 13.287959477580186 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 13.063276626694371 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 12.840104301492651 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 12.615189711252848 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 12.387982072501346 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 12.161049989804829 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 11.935541259999178 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 11.709874803955492 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 11.484999178239963 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 11.259368181228638 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 11.033803011407915 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 10.81046992854068 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 10.587039272769605 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 10.362651682519292 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 10.137422746227633 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 9.911859053831835 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 9.686652683148719 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 9.462241842776914 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 9.237744991134548 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 9.014117121696472 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 8.787557912909467 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 8.562399443284963 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 8.338521218738673 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 8.11268773311522 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 7.8871683207425205 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 7.66257352714079 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 7.437549029995582 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 7.212077231634231 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 6.987253774552656 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 6.762623169842889 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 6.5370430388645815 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 6.311718962913337 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 6.086014066817444 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.860505232865783 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.636026791163853 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 5.410122058608315 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 5.184474474966189 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.959011439527019 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.734354429404829 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.509008725484212 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 4.28349560400399 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 4.057980796793005 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.832403886513632 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.606972321220066 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.381438983453287 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 3.156003511080178 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.9302039159172995 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.7047715440709537 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.4792241469892873 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.253849531474866 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 2.028395711439442 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.802942007780075 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.5776871918396627 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.3523957409809546 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.127035562808697 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.901743577451122 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.6763362654574632 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.450900552248714 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.22546480408865005 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   45.1s finished

    1948 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  10.675 seconds)

**Estimated memory usage:**  1900 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/nilearn/nilearn.github.io/main?filepath=examples/auto_examples/02_decoding/plot_oasis_vbm.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
