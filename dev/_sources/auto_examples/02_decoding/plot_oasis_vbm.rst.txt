
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-90

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 148-150

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 150-163

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-166

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fa73a589250>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-229

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 188.7989044189453 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 32.4009153842926 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 29.879216194152832 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 28.848388274510704 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 28.57258152961731 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 28.170743465423584 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 27.92453185717265 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 27.662176302501134 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 27.410642623901367 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 27.202427546183266 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 26.99917221069336 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 27.009662974964492 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 26.82227293650309 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 26.665809869766235 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 26.49361426489694 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 26.312476873397827 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 26.144632697105408 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 25.974864300559553 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 25.837515221701725 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 25.689260118886047 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 25.521602869033813 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 25.349309399014427 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 25.190259369936857 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 25.029720161272135 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 24.88177712758382 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 24.7284197807312 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 24.581577576123752 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 24.435672733518814 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 24.28259314809527 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 24.131726330724256 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 23.990835825602215 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 23.851115795873824 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 23.699484765529633 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 23.552380561828613 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 23.396193658604343 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 23.245320081710815 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 23.102665053473576 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 22.957618797147596 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 22.806712238412157 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 22.65025284351447 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 22.49704647064209 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 22.35204847847543 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 22.201708748227073 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 22.05299177835154 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.911113890734587 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 21.767539395226375 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 21.620645409045014 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 21.475212761696348 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 21.329827308654785 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 21.186926145942845 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 21.042795181274414 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.90061023188572 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 20.757570633521446 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 20.60980383854992 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 20.466424474009763 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 20.32958698272705 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 20.196143082209996 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 20.049584543495847 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.903304519324465 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 19.75751159554821 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 19.614681800206505 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 19.46878966737966 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 19.339144199125226 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 19.193492927248514 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 19.049712866544724 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.912946205872757 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.77277199427287 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.63144126578943 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 18.491716062321384 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 18.35243716792784 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 18.213912418910436 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 18.07380911330102 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.934822506374783 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.79549343945229 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.65607242970853 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 17.518973747889202 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 17.38713049888611 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 17.246489246170242 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 17.110367762736786 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.970172311686262 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.83158826828003 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.69234934265231 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.552587073023727 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 16.41012237732669 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 16.266805115200224 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 16.12513675409205 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.984862122424811 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.844959187781674 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.706315300681373 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.565517736284919 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.427055544323393 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 15.286092158202287 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 15.146585350451263 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 15.006020707468833 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.86545125474321 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.724981195048283 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.583352029323576 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.442677527358851 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.300812117907466 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.159983360406123 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.019205331802368 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.879353520893813 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.738173377280143 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.597796329016825 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.455835709205042 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.319544848941621 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.17656148604627 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.035224943517525 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.895703589474714 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.754920134850599 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.613373864780774 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.472011978561815 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.330306138311114 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.187847557321058 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.045994750240393 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.904701367668483 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.762708335087217 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.62019576985612 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.477139343649654 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.33501239383922 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.192457358042398 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.051176508596122 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.908838150931187 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.767756869153278 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.626664923083398 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.485741090774535 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.344429156136892 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.202844298730685 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.061746403574944 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.92081010249234 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.780344266157883 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.63980643439839 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.498156785964966 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.3563976305768 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.215997880964137 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.075376475298846 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.935242035809685 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.794998898123302 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.655303077421326 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.515309805492702 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.376067399978638 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.235952737483572 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.09586366465394 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.955552216176386 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.815710518095228 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.67533673911259 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.534928494936799 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.39426487805892 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.257829872337548 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.117617951143508 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.976990461349487 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.836891951150452 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.697310949626721 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.557359729716981 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.416975086385554 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.277064392643591 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.1377676878219996 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.998593962116606 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.859052446824085 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.71996442027062 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.580715358257294 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.440718673030783 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.303788656069909 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.16422169925245 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.024617264910442 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.884882710196755 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.745249541409044 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.60542430991898 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.465979848589216 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.326182957937026 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.186489147298476 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.046690171225029 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.9072106272675273 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.7676737997573237 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.62788426739046 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.488339866910662 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.348873203450983 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.2094834524359404 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.069873220465156 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.9303359372655775 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.7908527851104736 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.6518800377187146 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.512257696508051 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.3724647154573537 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.2333019712696904 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.0937260743734 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.9540229305144279 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.814505059451343 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.674804408499535 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.5352581531282454 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3955446167996055 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2561789957016551 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.1165564060211182 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9769551358692385 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8373567345216103 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6977658883119241 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5581489436480463 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4185990597390887 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2790690503939234 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13953687318006353 seconds remaining)
    1996 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  10.640 seconds)

**Estimated memory usage:**  1928 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
