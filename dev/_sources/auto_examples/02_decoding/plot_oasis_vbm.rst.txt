
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f86f47ce5e0>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 159.30652618408203 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 26.93042516708374 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 25.145711660385132 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 25.18868414560954 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 24.392579317092896 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 23.973814487457275 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 23.871872345606487 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 23.558663163866317 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 23.27644157409668 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 23.003216452068752 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 22.756341218948364 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 22.553749908100478 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 22.39406728744507 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 22.2720124904926 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 22.14911096436637 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 22.015759706497192 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 21.8693665266037 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 21.728192778194654 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 21.60203573438856 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 21.46869946780958 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 21.342639684677124 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 21.180387496948242 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 21.04272671179338 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 20.912125421606977 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 20.79300753275553 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 20.66872239112854 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 20.536032529977653 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 20.410616962998002 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 20.283818551472255 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 20.146117785881305 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 20.004593690236412 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 19.86430905711266 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 19.7481347322464 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 19.6288334311861 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 19.49688372892492 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 19.370181594576156 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 19.25325740708245 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 19.122505039782137 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 18.990273262325086 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 18.850684734491203 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 18.72627067565918 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 18.601341003324926 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 18.474560964675177 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 18.351767983547475 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 18.223572492599487 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 18.103624847200184 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 17.978057177170463 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 17.88409848416105 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 17.757208903630573 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 17.686931566316254 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 17.580674171447754 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 17.467164016237444 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 17.34257877790011 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 17.21973021525257 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 17.08820461343836 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 16.968265836889092 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 16.842446872166224 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 16.715628230780883 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 16.59188075723319 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 16.456944744465712 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 16.32783087094625 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 16.1995725983479 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 16.067914978150398 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.938773582852075 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 15.807726323604584 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.682493338218103 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 15.562889828826442 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.437663078308105 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 15.31475190555348 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 15.192931389463121 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 15.074365888323102 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.954625163279788 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.830729590521917 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.706419389541836 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.581219099663398 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 14.45860783259074 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.336490392684937 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 14.213734397640476 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 14.091793653292534 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.972030914282497 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.853212237358093 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.769208319393206 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.647495583790104 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.527192299624524 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.412858020691644 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.292351007461548 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 13.171348871186721 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 13.053279753389031 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.932640942660244 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.815796174360125 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.690026071336534 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.569346113519353 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.4480648662733 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.328249028933946 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.209061485655765 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 12.089522273916948 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.966705600420633 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.847493655902824 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.73130127848411 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.614224556720616 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.495595455169678 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.378963605012043 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.261942293129716 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.142881013814685 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 11.02572199014517 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.908993562062582 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.795332881639588 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.677913641261163 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.561650629396793 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.441235686660907 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.32339451529763 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.208253119442915 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.095962984221321 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.977954370785604 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.860572187524093 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.746760637863822 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.630842291075608 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.513331193190355 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.396729776414775 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.299910709637555 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.185485363006592 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.070216314851745 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.953224584704541 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.837992206821596 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.724829035420571 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.609689807891845 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.493269564613463 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.375397409979753 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.258660361170769 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.14469751831173 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 8.031043932988092 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.916510369031483 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.8010631402333575 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.685870218994026 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.570798115943795 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.4564742247263585 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.338891534244313 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.223007708570383 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.10657408963079 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.991280288147411 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.875820841108049 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.7611132175364395 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.64478848685681 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.530444618705269 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.414938582314385 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.300046534373842 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.1840357029274715 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.067698266230473 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.95212721824646 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.835665611612717 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.720290660858154 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.604486678609785 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.489111950522974 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.373215666004256 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.257199801407851 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.143408852238809 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.027894362425193 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.912939797541139 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.7978072468238535 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.682640732459302 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.567630112171173 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.4520197344122465 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.3370057506325805 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.222228635308201 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.107510601601949 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.9933017889658613 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.878578177417617 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.7639418633398183 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.6510591961088634 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.5373869972116143 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.4228743384866154 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.3077857815034206 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.192866646966269 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.0785630038707934 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.9645292156044096 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.8503039223807196 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.735896435650912 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.6214775648494224 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.5074359700920876 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.3930956052002292 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.2786734104156494 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.1644938097474324 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.0503887082194234 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.9361210807425078 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.8218474802763565 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.7075813654306773 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.5936171085603776 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.4795376731750163 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3654743509089693 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2514452782888261 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.1374270037600869 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.0245430993784161 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9121010204156239 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7978805667995789 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6837755626009911 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5697399897453113 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.45571764634580025 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.34173936650232617 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2277908999510486 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11389413670678834 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   22.8s finished

    1981 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  0.207 seconds)

**Estimated memory usage:**  1912 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
