
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f4b8c339b80>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 188.48180770874023 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 33.999157667160034 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 31.647538661956787 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 30.806252876917522 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 30.47427225112915 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 30.28534984588623 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 30.117080211639408 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 29.88568963323321 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 29.59522819519043 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 29.419548829396565 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 29.268452167510986 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 29.203639333898373 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 28.96981406211853 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 28.804239713228668 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 28.602959735052927 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 28.408377011617027 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 28.22802448272705 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 28.050479734645172 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 27.878218173980713 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 27.726883135343854 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 27.53996729850769 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 27.356405212765647 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 27.231815836646344 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 27.075217164081078 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 26.897311528523762 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 26.751453399658203 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 26.585942800228413 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 26.399332020017837 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 26.262060812541417 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 26.108827286753158 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 25.968919833501182 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 25.809423538946334 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 25.66716957092285 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 25.5124438531471 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 25.3488245010376 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 25.195939779281616 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 25.049342897203232 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 24.8900441543476 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 24.749297769446123 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 24.604594841981548 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 24.45407199859619 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 24.298424354413658 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 24.14787889662243 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 23.98879304043082 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 23.828745408491656 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 23.67565698093838 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 23.516009797220647 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 23.36291886897797 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 23.20808700720469 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 23.05304789543152 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 22.896881103515625 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 22.759142786848777 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 22.605942322657658 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 22.44840856318204 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 22.309626932497377 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 22.163667267019097 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 22.018668855939595 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 21.878103879460117 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 21.734783328812696 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 21.583704908015363 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 21.42396108309428 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 21.27489212692761 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 21.135622962828602 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 20.974507975199863 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 20.821182876825333 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 20.68077927369338 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 20.52886360341852 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 20.437249763688044 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 20.284119129180908 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 20.13082386445308 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 19.978761877332417 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 19.828637989474014 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 19.672642178005642 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 19.520271516826057 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 19.38029323397456 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 19.228888750076294 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 19.071858732323896 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 18.918924334761385 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 18.759362422502956 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 18.60039371176611 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 18.44592833518982 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 18.287956170093867 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 18.13056434654608 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 17.975923380219793 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 17.818719784418743 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 17.6619471802431 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 17.503226097240002 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 17.344039667611835 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 17.18504710630937 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 17.0539097223389 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 16.895599762598675 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 16.738555947502892 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 16.586479021155316 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 16.429695216558315 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 16.274275617396576 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 16.11786336647837 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 15.959004799524942 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.799536791044412 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 15.642570310709429 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 15.487081693880484 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 15.332373142242432 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 15.178353146751329 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 15.022873616686054 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 14.865761689769412 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 14.70731361095722 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 14.549689610799154 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 14.392586977976674 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 14.237049853690317 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 14.08092423721596 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.924749061601972 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.771416729146784 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 13.619417115374729 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 13.463825157710485 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 13.308224397422993 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 13.151472468125194 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.996994060018787 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.842742549962011 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.688321199172583 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.533087770817644 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 12.37850878018291 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 12.226974805196125 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 12.071745626197375 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.917325441954567 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.76355878899737 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.60818079979189 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.45490345954895 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.30004912709433 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 11.148509352225956 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.994574710726738 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.844143170718999 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.689778016163752 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.534994487544052 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.380491365085948 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.227148937999754 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.073537371051845 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.92151023723461 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.769134297090417 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.616145558600879 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.462188240410624 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.308121646908548 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.15526853288923 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.0012788772583 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.847037808995852 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.693416367043982 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.540608525276184 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.387718833726028 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.23371037391767 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.080353832569253 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.926495262094447 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.772630741132186 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.619093656539917 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.464635399003692 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.310039972004137 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.158065037010543 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.005856625445477 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.8525903071126635 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.699914125295786 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.5465952347797955 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.393374430982372 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.24065796084374 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.088526129722595 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.935777587179812 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.782987777097725 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.630169309721403 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.476818340580638 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.324150663433653 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.1711024634809375 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.018551775081429 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.865763755071731 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.7131092957491 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.561265440548167 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.408290168695283 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.255741208098656 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.103012749225418 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.950751986996881 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.7983277184622626 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.6461605700579556 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.494358046580169 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.3418371463089844 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.189654689927341 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.0375235080718994 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.8855957049691217 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.7334665125542945 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.5813054074355164 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.429091743800951 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.2770675775167106 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.125080131715344 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.9731042780340675 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.8211863497470286 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.6693386905407779 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.5174141306626168 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.3655208779879267 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.2136965692043304 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0618361833799688 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9101815739857783 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7584043404994867 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6067125602644317 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4550168574764039 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.30333027935991386 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.15165956056297725 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   30.3s finished

    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  16.484 seconds)

**Estimated memory usage:**  1891 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
