
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print("")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f701ce744f0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 177.60753631591797 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 37.8914749622345 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 35.95705461502075 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 35.241343657175705 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 34.70780372619629 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 34.34562134742737 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 34.04478669166565 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 33.899993249348235 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 33.790855407714844 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 33.562247329288056 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 33.32287335395813 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 33.1004464192824 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 32.90734942754109 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 32.80345940589905 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 32.74067197527204 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 32.61515323321025 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 32.48315477371216 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 32.46533438738655 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 32.383423460854424 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 32.313676143947404 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 32.2279257774353 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 32.09817542348589 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 31.975692467256028 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 31.838722788769267 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 31.655394236246742 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 31.434978485107422 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 31.227128670765804 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 31.026133254722314 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 30.81522836003985 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 30.61918105750248 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 30.419697682062786 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 30.221621528748543 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 30.021690130233765 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 29.82559079834909 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 29.629416928571814 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 29.431753431047714 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 29.238005134794445 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 29.040939775673117 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 28.850934957203116 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 28.662656081028477 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 28.47364044189453 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 28.277095381806536 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 28.07963291803996 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 27.883301163828648 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 27.690381028435446 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 27.4980890750885 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 27.305869351262633 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 27.11473677513447 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 26.92432908217112 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 26.735114530641205 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 26.547101497650146 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 26.359633637409583 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 26.173307730601383 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 25.986427734482962 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 25.7986441983117 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 25.613061969930474 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 25.426984037671772 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 25.237775334140707 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 25.050254566916102 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 24.866114580025105 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 24.68132535616557 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 24.50249327597071 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 24.320910653760354 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 24.137484277997697 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 23.95412540435791 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 23.769317370194656 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 23.58708479910186 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 23.405788478566638 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 23.224730477613562 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 23.044661224752232 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 22.86605637414115 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 22.687414814049088 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 22.511437733968098 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 22.334563438206505 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 22.155952962669165 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 21.979451179504395 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 21.803903818130493 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 21.644113875054693 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 21.469884731830696 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 21.299719351756423 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 21.12727117538452 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 20.951643987938212 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 20.774363523576316 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 20.59404445556273 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 20.41873558362325 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 20.27240990189945 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 20.104007804116534 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 19.926359193078405 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 19.748744574460115 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 19.57009786702274 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 19.39260294702318 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 19.21835025326236 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 19.04190628424935 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 18.864901819536765 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 18.692128632931 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 18.514847818173862 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 18.33714171250661 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 18.16159162816313 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 17.986419789645137 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 17.808775470714373 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 17.628244161605835 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 17.44852002304379 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 17.269204808216468 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 17.089138628209678 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 16.910341776334324 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 16.730632248378935 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 16.551393117544787 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 16.372723470224397 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 16.194240075570566 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 16.015765734768788 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 15.837259379300205 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 15.658796132147849 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 15.480774453708104 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 15.30318723526676 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 15.12570313403481 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 14.94758707544078 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 14.769644761907644 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 14.591923935800537 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 14.413665031982681 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 14.236628702708654 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 14.05914036432902 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 13.881782561294305 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 13.704359621298119 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 13.526854747679174 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 13.349386161373507 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 13.17259726524353 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 12.99641499822102 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 12.819820788901621 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 12.6422830671072 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 12.465911567673203 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 12.289190842555119 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 12.112216641884723 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 11.935671177777376 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 11.758857216153826 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 11.582266512201793 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 11.405416197246975 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 11.228345197789809 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 11.051997811254793 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 10.875441924385402 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 10.698933863811355 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 10.522542306355067 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 10.345914363861084 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 10.169751123643257 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.993897544754136 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.830807540151808 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 9.670252586233204 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 9.508603853722141 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 9.345746181449112 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 9.182471397760752 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 9.01914021472803 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.855931758880615 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 8.694531330209694 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 8.531852998231587 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 8.361118784137801 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 8.185265503920517 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.00930336213881 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.833995568446624 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.658429217186703 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 7.481883504722691 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.305489384153354 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.128343880176544 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.951245766989193 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.773690008822782 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.595792107786869 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.4184645734182215 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.240917762120565 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.062954175903136 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.884693219990074 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.706548100426083 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.528612220075709 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.350705946193022 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.17177104671099 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.99291785927706 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.814540759676454 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.635940431178302 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.457328285489763 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.278611898422241 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.099752206586849 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.9211691256319536 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.742483117726928 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.5638660060034857 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.385952239537107 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.2079813794775323 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.029738423602829 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.851098475248917 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.6725276418634363 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.494044460276122 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.3156154895211287 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.137392571631898 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.959004316380415 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.7808385522742018 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.6025519970199824 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.424312561750412 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.2461356190202149 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.0679349358548824 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.8897955173101181 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.7117455930125957 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5337152807845682 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.35575128083277235 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.17785375202121448 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   35.5s finished

    1987 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  2.605 seconds)

**Estimated memory usage:**  1822 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
