
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-142

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 143-145

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 145-158

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 159-161

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 161-176

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f11c7ecf6d0>



.. GENERATED FROM PYTHON SOURCE LINES 177-179

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 179-223

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 155.01976013183594 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 25.262675523757935 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 23.14782214164734 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 22.332062403361004 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 22.61209464073181 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 22.33967113494873 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 22.14242649078369 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 21.93537327221462 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 21.65155792236328 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 21.45161204867893 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 21.254598379135132 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 21.060649980198257 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 20.86573298772176 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 20.709481147619396 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 20.55629335130964 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 20.4001366297404 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 21.010531783103943 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 21.918068016276642 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 22.716677215364243 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 23.2120796881224 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 23.80394411087036 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.33497439111982 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.751124988902703 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 25.020032488781474 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 25.299449602762856 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 25.536627531051636 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 25.741983340336727 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 25.932740361602217 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 26.129804168428695 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 25.93062487141839 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 25.571805000305176 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 25.17717716001695 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 24.804011464118958 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 24.44369332718127 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 24.10749533597161 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 23.787394421441213 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 23.472253057691784 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 23.16905977919295 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 22.87059805267736 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 22.583783125266052 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 22.307697296142578 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 22.046368691979385 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.78702423686073 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.533169690952743 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.28928167169744 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 21.052795886993408 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 20.820792467697807 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.591817794962132 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.373366236686707 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.1610100804543 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 19.943172454833984 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 19.731673927868112 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 19.522721859124992 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 19.31840283015989 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.122574850364966 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 18.927065870978616 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 18.74365486417498 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 18.552050762009202 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 18.36782905973237 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 18.192460989547985 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 18.015975316365562 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 17.83760598057606 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 17.662975511243264 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 17.491947280036076 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 17.323324650526047 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 17.157252898583046 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 16.99274545727354 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 16.82385797287101 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 16.66137671470642 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 16.496466754139334 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 16.338052919932775 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 16.18240801717194 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 16.024073282877602 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 15.867904721874082 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 15.71440375173414 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 15.562315781911215 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 15.410714676505641 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 15.25808309889459 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 15.110154977211586 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 14.960068262076076 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 14.808632254600525 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 14.659227123966925 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 14.51209717262082 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 14.366882766585752 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 14.223317895616804 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 14.078624136307662 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 13.940618958584096 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 13.798822926378799 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 13.656932310624557 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 13.515518935878625 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 13.37539913919237 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 13.235637408036451 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 13.095299720764162 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.958122727691487 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.819944391859337 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 12.685854698482315 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 12.55122540394465 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 12.416519700866385 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 12.280768793456408 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 12.145674069722492 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 12.0126793384552 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.880229378690814 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.746938046287088 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.613861452028589 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 11.483118570767918 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 11.353528204418364 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 11.224745696445682 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 11.094156898070718 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.964304853368688 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.833752203425137 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.704719586805865 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.577170870325586 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.4482969556536 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 10.320374218763503 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 10.192752239996928 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 10.065070328505142 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.938509719125156 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.811525041221554 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.685111296378961 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.559801075638843 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.435393174489338 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.311293663072192 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 9.186492568156758 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 9.061920828935577 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.937293914056594 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.813047742843628 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.689011649479943 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.56523863537105 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.442100256681442 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.32188323486683 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 8.199847734891451 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 8.077621265222097 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.955926555575746 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.834608873926608 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.7127809061932915 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.591565679620813 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.470492755665498 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.3495571804742745 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.229423142861629 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.109659208668221 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.9903295040130615 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.870733983127783 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.75215581101431 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.63162054882183 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.511792990896437 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.392191919787177 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.272347368606149 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.153150508192932 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.034057771837389 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.914893635167371 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.795796473821004 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.67705943884439 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.55887874804045 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.440610832638211 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.3220944002077175 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.2062135204192135 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.088336247664231 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.970234366738872 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.852577791938298 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.7351005212315975 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.617566347122192 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.499937928241232 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.382304553632383 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.264884044787635 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.14780601641027 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.0313303831851846 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.9146876794746124 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.7981691117772085 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.681822958446684 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.5651124722858856 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.44870382196763 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.332626058344255 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.216266094252121 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.100092428957107 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.9838968063222953 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.8681397097451344 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.752196951345964 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.6365567034920727 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.520820652500967 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.4052837547643224 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.2901683648427325 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.174929770316867 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.0598630014356676 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.9446915824556612 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.8297972057176672 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.715018130637504 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.6002207417641918 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.4854768992745302 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3710160153977413 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.256371056592023 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.1417327805569297 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.02716595714629 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9127142628033955 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7983717337791165 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6841185977778484 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5698826313018799 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.45574805201316365 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.34168609265748623 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.22776177916863954 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11385945578915391 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   22.8s finished

    1965 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  58.960 seconds)

**Estimated memory usage:**  1837 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
