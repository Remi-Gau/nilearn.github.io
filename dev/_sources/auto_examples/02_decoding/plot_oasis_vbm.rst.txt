
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-142

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 143-145

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 145-158

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 159-161

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 161-176

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f21c10a0e50>



.. GENERATED FROM PYTHON SOURCE LINES 177-179

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 179-224

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 193.74847412109375 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 33.41282868385315 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 31.326626300811768 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 30.504543145497642 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 29.973793506622314 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 29.670823574066162 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 29.38175447781881 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 29.148940324783325 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 28.88155174255371 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 28.579135868284435 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 28.368422985076904 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 28.10562703826211 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 27.876487731933594 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 27.726706394782433 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 27.535694360733032 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 27.361572265625 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 27.184701323509216 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 27.000958484761856 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 26.819048775566948 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 26.675314514260545 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 26.50907850265503 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 26.337162358420237 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 26.17532077702609 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 26.03107321780661 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 25.88251225153605 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 25.75508713722229 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 25.596839079490074 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 25.42459828765304 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 25.281159809657506 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 25.098374407866903 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 25.032119115193687 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 24.951461130572902 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 24.783189475536346 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 24.620912703600798 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 24.474451948614682 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 24.32032299041748 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 24.162378390630085 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 24.007580628266204 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 23.852941801673488 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 23.698920078766655 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 23.563761711120605 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 23.408598713758515 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 23.24641820362636 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 23.088581140651257 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 22.9332051710649 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 22.7683728006151 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 22.60692538385806 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 22.45994761142325 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 22.310609698295593 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 22.161077621031783 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 22.014397859573364 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 21.871757998186 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 21.705639637433567 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 21.543466761427105 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 21.386115392049152 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 21.241852912035853 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 21.081817695072722 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 20.922871769520274 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 20.76789010804275 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 20.61569769907806 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 20.462305784225464 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 20.313415027055584 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 20.167118680092596 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 20.021515990060472 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 19.874003648757935 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 19.72459882956285 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 19.586070638714414 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 19.44222963034217 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 19.296812716652365 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 19.160875987315524 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 19.018292324883596 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 18.878165496906764 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 18.734623379177517 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 18.58914131987585 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 18.44278747326619 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 18.300846417744957 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 18.168117811805324 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 18.04845862264757 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 17.902408214715813 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 17.758030716376968 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 17.61602246761322 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 17.471528939258906 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 17.327258214717958 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 17.182999340884656 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 17.03806314014253 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 16.89137625694275 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 16.742666477380794 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 16.595971444557453 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 16.447946245020084 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 16.299426338645848 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 16.152332411872017 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 16.00544190144801 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 15.865495640298596 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 15.720536457595006 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 15.573305317696104 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 15.42724280608328 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 15.279086510340372 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.132416975866889 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.988050251590963 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.842038462860414 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.695833206176758 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.552910847238975 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 14.40899159861546 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 14.26414019853166 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 14.117667344900278 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.970506213960194 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.82451600848504 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.679633223007773 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.53831179936727 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.39129792440922 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.244436394084584 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 13.099677115947276 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.956585185868398 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.816262557443263 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.670052448908487 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.524753902269445 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.378026271688528 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.23208278672308 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.084445787688434 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.937170571639758 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.789929707845051 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.641598599016175 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.49272674810691 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.34389978695691 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.19488703050921 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.046341514587402 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.898969979513259 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.750302286598625 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.602640807628632 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.455933751986008 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.308448039568386 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.16088761810128 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.01450102257006 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.869119188839331 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.721325909913475 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.573721673753527 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.426598717184628 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.277942401649307 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.1300257841746 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.982501457063414 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.836605651038033 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.68917779719576 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.54142946592519 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.39518234946511 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.247644543647766 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.099676567932654 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.9526613117897345 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.804457782888089 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.658756455859623 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.51249202785876 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.365212917327881 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.217567557530687 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.070730234447278 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.924211059520448 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.777377661172445 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.6296083388790015 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.481766566252097 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.334366385344487 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.186856251728685 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.039913456394987 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.893164098262787 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.7451801833158695 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.597670196015158 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.450333871724415 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.303169198152496 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.155742219000151 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.008146550281938 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.860363644754101 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.712573323931013 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.56515608313521 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.417983938665952 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.270549162089476 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.122823310452839 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.9750517696314467 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.82822340384297 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.6806651524135043 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.5335217064077202 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.386467555148453 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.239363035459197 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.092206498098107 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.945317692226834 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.7979670677395814 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.6503253900087795 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.5030365954331364 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.3558003384134043 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.208278881536948 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.061064156152869 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.914156778610964 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.767000157782372 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.6196345790984137 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.472384540658248 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.3250246110386874 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.1777432362238565 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0305294941126373 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8833369053516191 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7361093239906507 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5888600981965356 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4416562288545715 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2944461022964632 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.14722144184400088 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   29.4s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  11.565 seconds)

**Estimated memory usage:**  1838 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
