
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f6ca92f6430>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 178.9402961730957 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 31.850217819213867 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 29.411089181900024 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 28.580041805903118 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 27.95364212989807 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 27.626652002334595 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 27.312725305557255 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.982426166534424 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.767026901245117 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 26.554442776574028 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 26.37113046646118 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 26.17197691310536 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.982321818669636 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.81765578343318 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.664467130388534 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 25.503587643305462 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 25.339551210403442 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 25.182922713896808 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 25.019572602378 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.848361354125174 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.88137459754944 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.780797878901165 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.721717032519255 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 24.590263117914617 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 24.459592024485268 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 24.298868894577026 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 24.12799517924969 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.965752336714004 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.803290230887278 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.636086365272256 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 23.46916739145915 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 23.337213093234645 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 23.181010365486145 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 23.018761800997186 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.86970602764803 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.735316072191512 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.595443858040703 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 22.445502854682303 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 22.299844867304753 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 22.15310986225422 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 22.00372886657715 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.86615327509438 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.726982525416783 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.587748616240745 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.44269895553589 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 21.320123381084866 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 21.187261063119642 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 21.052283231248246 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.914706190427143 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.783278426345515 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.646108627319336 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.502968563753015 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 20.3616785636315 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 20.226585536632896 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 20.089918154257315 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.950358412482522 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.807858535221648 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.669291496276855 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.527566358960907 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 19.383061299889775 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 19.24382050832113 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 19.107390544453605 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.969856392952703 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.833822314701383 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.69790545105934 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.555194157820484 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.41520897547404 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.272389347873517 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 18.153075204176062 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 18.014332235723302 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.875931603567942 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.736991529733363 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.5994021097819 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.459023122918115 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.317590410644943 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 17.177287340164185 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 17.0379477300142 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.89701629613901 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.75984399746626 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.62085060530071 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.48156249523163 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.35475421540531 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.220749250272423 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 16.12245831719364 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.981464533578782 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.840274249806125 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.698685923288034 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.557425537328612 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.425894087011164 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.28738248214293 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.14906880590651 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 15.008699105336115 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.870981796928076 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.732223844015472 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.589439879072472 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.446519864232918 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.305005649725596 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.167466714210118 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.027210420491745 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.886295451058281 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.744704961776733 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.608307281343063 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.470627167645624 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.332987303872711 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.199197549086351 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.063210124061222 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.925352703850225 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.786644663766166 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.654035868468108 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.513624773113005 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.373429103331134 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.232520969064387 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.093097380229406 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.955219154864286 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.818157923849006 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.680512956950976 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.540995063452884 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.40174716965765 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.263037620964697 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.12369130639469 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.98595364888509 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.846822716973046 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.708549038308567 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.572694549715616 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.437961109222904 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.301794195175171 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.165345680145991 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.028595226017508 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.89154428243637 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.752880567728086 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.615225846950825 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.47580997816479 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.35130625782591 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.215311744159326 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.07771343259669 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.9401866418344 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.801913093118106 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.663371225343134 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.524554142053576 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.385878113533954 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.247535841805593 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.109419114200781 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.971128023846049 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.83259658880167 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.69409892294142 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.555467441164214 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.416888047571051 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.278142380876607 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.140230359257879 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.001973661000297 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.864197254180908 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.725509349873524 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.587109766508403 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.448436924055511 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.310258357555835 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.1722838801722375 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.0351069156940165 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.896908760070801 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.759260907957825 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.622007278526354 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.4844003319740295 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.346466003737835 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.20870264959924 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.071293282362581 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.934182649705468 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.796289631814668 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.6584631994546175 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.521105003927996 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.383231072198777 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.245651539966199 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.108342998168048 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.9710644532365404 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.8340366219365323 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.6966311435478962 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.5593975467243415 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.4223277228219167 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.2853874618356875 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.149506758835356 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.0123549097039723 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.8753960372349403 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.7383045620388455 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.601283090549279 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.4640750125214295 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.3269009381695525 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.1899956827578335 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.0531190537117623 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.9160972846451627 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7789713048679943 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6418546159216696 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.5049800607893202 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.367993204217208 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2310601167029736 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0942071775595346 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9574279624563424 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8206160486358958 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6839451789855957 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.547115574077684 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4103007933815119 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2735216208178588 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13675226278640518 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   27.3s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  9.988 seconds)

**Estimated memory usage:**  1942 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
