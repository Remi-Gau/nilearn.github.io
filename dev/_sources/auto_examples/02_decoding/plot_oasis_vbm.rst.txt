
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f2bfbb89ac0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 157.19175338745117 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 26.8113374710083 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 24.661321878433228 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 24.015725135803223 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 23.664490222930908 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 23.635801792144775 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 23.416363080342613 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 23.29212580408369 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 23.15749168395996 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 23.03372181786431 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 22.8646342754364 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 22.728742686184972 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 22.600225528081257 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 22.49298930168152 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 22.34537938662938 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 22.219921271006267 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 22.105461359024048 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 21.993908265057733 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 21.847931994332207 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 21.711502978676247 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 21.588154077529907 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 21.422755854470388 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 21.264728329398416 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 21.116720624591995 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 20.956546147664387 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 20.807340383529663 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 20.651052419955914 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 20.498800268879645 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 20.347565480640956 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 20.201775287759713 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 20.06267889340719 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 19.917641047508486 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 19.77541673183441 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 19.641963026740335 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 19.516360507291907 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 19.393624305725098 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 19.264585733413696 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 19.135246599042738 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 19.00375297195033 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 18.872214017770233 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 18.766427993774414 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 18.66087407600589 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 18.532915592193604 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 18.401791555936946 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 18.280560233376242 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 18.156372600131565 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 18.04180413743724 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 17.928455783965738 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 17.822074055671692 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 17.70888789332643 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 17.60269331932068 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 17.48823553908105 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 17.379038664010857 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 17.262389012102812 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 17.149331993526882 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 17.029100201346658 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 16.90962532588414 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 16.78527121376573 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 16.6629964400982 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 16.540453979524514 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 16.416977882385254 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 16.294380141086265 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 16.167076649204375 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 16.040604931967597 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 15.912467956542969 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.792545446982752 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 15.667058511213822 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.540995903869174 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 15.417823034174303 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 15.2929552188818 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 15.174305166516985 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 15.051672028823639 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.92922888861762 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.812098218970103 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.690999739878885 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 14.57192341486613 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.452088757565146 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 14.331051572576746 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 14.209445617137812 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 14.091180943235566 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.970667958259583 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.851789904229436 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.738763053242753 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.620851522468659 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.499237344378516 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.38055644315832 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 13.262662926385568 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 13.146084168861654 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 13.035275892777877 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.918948106551438 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.802993880377876 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.688240640766018 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.573776970738951 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.463393388255952 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.347357536884063 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 12.231630262575653 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 12.117140094439188 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 12.002535878997488 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.887512416255717 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.771870343372074 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.654801607131958 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.537893741437705 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.419800038431205 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.301203711518964 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 11.183802311237043 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 11.06841878663926 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.952968795344516 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.836802148373327 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.71917940069128 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.603736818383593 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.489677429199219 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.376318209880107 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.263132657323565 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 10.14937961207027 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 10.035073439280191 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.921761668246726 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.806468059276712 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.69006918434404 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.574276701878693 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.458254860228852 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.34297513961792 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.226942913591369 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 9.111555998442604 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.996433736832161 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.880868234942037 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.765497970581054 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.65005554093255 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.534599901184322 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.419061556458473 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.304302945617557 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 8.188211441040039 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 8.072032486209432 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.956082170659846 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.840594576713735 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.724683028548511 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.608631319469875 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.492108288933249 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.375274466772149 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.25815154504085 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.141664189400433 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.024515254156929 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.908045545537421 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.790505714819465 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.672752775512375 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.556737184524536 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.439554617322724 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.322375431452712 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.204902647303887 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.0871476031638485 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.969533499455292 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.851484298706055 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.733916901594755 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.617062091827393 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.500578761879915 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.38282948964602 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.265064370247626 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.147038942728287 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.029236514097566 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.911793099174016 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.79432509080419 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.676747441291809 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.559343422421758 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.44339919090271 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.327419298558147 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.210464093743301 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.093373919978286 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.9766107926885765 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.861035671062812 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.74423344930013 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.6275909722909416 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.510790081585155 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.3942698512160985 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.2775160989096 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.160983572116477 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.043910188236456 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.927228110177176 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.810531908815557 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.693629522108089 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.576396821589952 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.4595624787847425 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.3434110747443304 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.226053143074499 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.108717428458916 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.9915679934246293 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.874312856922979 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.7570026565242458 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.6397620375438404 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.5225812254105022 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.4054362520258477 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2884122467545605 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.171279380196019 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.0542520440685812 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9372138977050781 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.8201283988557331 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.7030729338065865 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5865811934837928 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.46934843549923017 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3520509180078652 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2347230501849242 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1173642508348628 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   23.5s finished

    1976 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  0.457 seconds)

**Estimated memory usage:**  1867 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/0.10.1rc1?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
