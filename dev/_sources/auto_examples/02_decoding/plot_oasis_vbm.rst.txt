
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f6d64b715e0>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 172.54352569580078 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 25.197153568267822 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 23.30695652961731 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 22.709516604741417 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 22.293243885040283 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 22.02203106880188 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 21.771398703257244 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 21.559826884950912 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 21.372596740722656 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 21.200313409169514 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 21.11132049560547 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 20.960532383485276 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 20.812715212504067 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 20.69393152457017 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 20.60244471686227 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 20.479271252950035 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 20.37040603160858 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 20.24631024809445 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 20.105803410212197 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 19.980074079413164 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 19.84186863899231 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 19.71355514299302 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 19.59623334624551 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 19.47856272821841 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 19.363564014434814 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 19.254562854766846 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 19.143712190481335 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 19.0301972495185 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 18.918469054358347 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 18.816148108449475 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 18.719826221466064 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 18.632654882246445 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 18.533607602119446 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 18.439627734097567 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 18.3425330694984 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 18.24125157083784 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 18.136384354697334 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 18.02531404752989 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 17.917621963902526 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 17.80777530792432 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 17.695935249328613 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 17.58510975139897 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 17.47364393870036 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 17.35833195752876 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 17.250499443574384 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 17.143451664182876 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 17.045389621154122 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 16.93239411394647 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 16.820184350013733 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 16.716554340051147 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 16.616816997528076 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 16.511293121412688 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 16.40501616551326 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 16.29039929947763 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 16.178061061435276 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 16.06387762589888 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 15.94928414481027 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 15.833082429149693 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 15.722640629472401 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 15.611363883745872 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 15.506017446517946 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 15.399353453370392 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.296979950320335 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.191298329640947 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 15.120149672031403 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.003599662047167 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 14.886172171795007 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 14.773789879101425 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 14.664950146394617 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 14.555127047110295 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 14.446661676679339 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.335675891016571 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.22224129570855 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.107809945328595 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 13.994317202954678 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 13.878863652547201 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 13.76717401805677 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.65296561377389 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.542536234244322 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.432961424694785 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.324131488800049 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.217367840401922 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.111681060093204 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.005311285156802 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 12.896724803107125 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 12.785191283506506 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.671814413957817 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.558215105670623 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.444082910364324 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.330247629894298 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.2198400232527 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.110860722405569 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.002185448356299 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 11.894206013730779 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.784647799552754 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.678836885251497 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.573806444803873 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.467927514892263 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.36125610312637 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.256101468596794 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.148605585098267 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.037932466752459 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 10.928010103749294 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.818795139349781 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.710679127619818 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.603233598527455 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.494070260029918 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.383933151993796 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.274948923676103 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.165650748331613 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.052919387817383 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 9.940018623798817 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.825570787702288 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.717492766084924 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.604829599982814 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.491805905881135 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.37993339012409 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.266667906035725 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.157568681038033 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.045937251643975 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 8.938344955444336 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.825999892447607 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.715202413621496 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.601309092064213 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.487401193188083 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.373954105377196 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.260737396421886 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.148873958062 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.035583853721619 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 7.923222589862439 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.810253473428579 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.697852404062984 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.586324518377131 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.473312012235025 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.3617572499744925 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.2491142396573665 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.137097975786994 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.024536975108794 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.912854039150735 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.8010666713440155 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.689152990068708 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.577231669256873 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.464453626686419 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.352229583513487 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.240173790189955 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.127742241168844 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.01503422488905 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.902660238499545 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.790083221487097 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.677684350301756 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.566087245941162 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.453784847891094 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.341905393098529 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.230672032225366 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.119235583714076 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.007344991930069 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.896363019943237 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.785083658376317 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.673919040945512 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.562549980931312 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.4510414600372314 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.342766961695985 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.230839535042091 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.119151232432734 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.0073646626821375 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.895583152770996 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.7838787860180956 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.6725442580834122 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.561248597644624 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.4498159151810865 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.338248687631944 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.2265331271099065 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.116100211476171 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.0047022607285165 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.8930956741859175 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.7814677783421105 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.6700831543315537 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.5588452155980685 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.447345149651002 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.335815520259921 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.224414692984687 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.1129458727757573 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.001288414001465 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.8898274768245678 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.7784961202870244 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.6670830249786377 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.5558611551920574 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.4445435694832216 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3332857273994607 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2221840626348264 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.110970233616076 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.9997292114177924 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.8885645469029744 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7774622798583668 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.666401573063172 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5553976083413148 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.44442832713224445 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.333350190051316 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.22222672327600346 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11111085259135645 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   22.2s finished

    1967 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  58.099 seconds)

**Estimated memory usage:**  1890 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
