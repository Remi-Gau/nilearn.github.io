
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f98b8215730>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 173.05850982666016 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 30.191909790039062 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 27.866173267364502 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.070365905761722 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 26.656965255737305 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 26.330288887023926 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.01945487658183 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 25.788381917136057 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 25.554731369018555 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 25.34524326854282 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 25.161080360412598 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 24.993854154240005 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 24.812662442525227 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 24.64746948388907 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 24.50256769997733 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 24.45737099647522 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 24.32254123687744 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 24.177052596036127 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.026964399549694 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 23.887595063761662 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 23.737427473068237 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 23.59034942445301 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 23.460502472790807 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 23.3263943195343 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 23.191566308339436 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.08715057373047 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 22.94511420910175 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 22.81149282278838 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 22.68659271512713 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 22.543661331308297 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 22.409176270167034 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 22.27177946798263 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 22.130919992923737 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 21.98780018633062 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 21.878590373431937 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 21.741229125431605 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 21.606038914786446 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 21.469274224461735 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 21.33927681571559 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 21.230082933719345 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.09148406982422 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 20.95326721377489 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 20.81238661493574 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 20.673192534335822 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 20.53840307755904 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 20.40232841173808 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 20.2669749363609 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.13223714524127 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 19.996949036916096 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 19.865088253605123 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 19.731409549713135 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 19.6388598984363 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 19.50697143261249 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 19.37498144833547 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.241064424867982 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.109964327378705 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 18.977162769862584 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 18.843548452645017 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 18.71012972141134 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 18.57588759923385 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 18.442238966623943 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.308608379520354 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.17462924988039 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.0386373202006 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 17.908229798078537 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 17.77354876811688 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 17.64127134554314 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 17.50914371903263 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.377419443691476 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.243718188741934 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.11044614655631 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 16.976117627721436 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 16.84462653266059 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 16.711273056187043 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 16.579307130865146 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.448219219843548 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.315982417056436 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.18769526791263 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.055229199238312 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 15.922827986222279 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 15.791303515434265 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 15.658970929958203 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 15.52833671686126 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.397018604967968 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.26492895398821 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.1381093193503 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.004920776500258 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 14.873163911117905 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 14.738953980532559 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 14.605368906192565 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.473810248904758 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.34100390790583 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.20890644322271 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.077023144691223 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 13.945229707880223 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 13.812928488380033 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 13.679934561252592 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.547757571505517 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.414858978621814 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.28258856860074 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.150368690490723 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.022000185333855 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 12.89153933057598 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 12.761345298544875 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 12.631720469548153 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.501407078334264 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.37145225956755 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.240251086582647 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.108596519187644 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 11.976651106405695 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 11.845497998324308 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 11.7139111338435 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.582749247550964 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.452806624691043 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.322708134065595 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.191420119741688 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.060075431034482 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 10.92870388683091 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 10.797021033400197 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.665488611750243 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.533307075500488 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.402922198792135 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.269840060687457 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.13699418548646 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.006509827029321 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 9.875117683410645 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.742832418472048 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.611108571525634 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.479495421051979 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.347980024278625 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.215413882182194 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.08715123620652 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 8.955787492520882 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 8.824177528682508 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.6928132042956 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.561114496654934 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.4303638233858 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.298862137063576 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.167382872622946 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.035360231673975 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.904302086148943 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.773269271174221 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.6415163228209595 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.509520784124628 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.378979338539971 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.24710514627654 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.1150491466260934 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.983501883591114 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.851798592387019 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.719947306101754 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.588338057200113 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.4569582228629 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.3251703161942325 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.193188679763694 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.06168980412669 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.929840633946081 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.798527827629676 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.667190914700745 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.535275368750849 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.403163170664565 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.271044313907623 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.139172331887003 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.006918577500331 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.875005986792909 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.742840766906738 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.610860326073387 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.479071657341647 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.3471121802301464 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.215147472563244 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.083034631063247 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.9511560832752903 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.819380984668843 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.6873736880546395 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.555602404423532 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.4239483181087453 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.2922490324292863 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.1612746282057325 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.0302292829179494 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.898690764823656 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.7670536574038715 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.6356464227040606 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.5043703021265524 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.3727226519322655 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.241090163507097 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.1094027187513267 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.9777747682622961 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.8460626089444725 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7142912640291101 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.5825639785604273 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.4508308153303842 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3193678981379457 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.1920357112485076 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0645006696383157 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9350425431147757 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8057554456376538 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6742391769702618 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5418494866818797 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4081943325584915 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.27318919547880544 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13709253402211558 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   27.5s finished

    1985 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  7.478 seconds)

**Estimated memory usage:**  1933 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
