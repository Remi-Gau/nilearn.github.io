
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f90b50be0d0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 197.98040390014648 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 33.74504065513611 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 30.805816411972046 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 30.69731736183167 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 30.368627309799194 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 31.151181936264038 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 30.914693593978885 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 30.410448823656356 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 30.24005699157715 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 29.982155005137123 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 29.571220636367798 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 29.301868460395124 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 29.179916699727375 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 28.948257207870483 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 28.67504392351423 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 28.483718395233154 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 28.31729793548584 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 28.0447872246013 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 27.8459874259101 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 27.58047377435785 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 27.335707426071167 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 27.116571051733835 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 26.89063917506825 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 26.72704074693763 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 26.523174285888672 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 26.313058853149414 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 26.174829703110916 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 26.046505610148113 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 25.94178250857762 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 25.819416712070332 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 25.63997300465902 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 25.435183271285023 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 25.295405387878418 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 25.126473318446767 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 25.00590306169847 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 24.920713560921804 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 24.744113471772934 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 24.597666804854935 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 24.440263585040444 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 24.273141909868293 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 24.08122158050537 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 23.922375196363866 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 23.769401663825626 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 23.620896716450535 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 23.467755707827482 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 23.301611185073853 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 23.122438866159193 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 22.943975534844906 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 22.7736652692159 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 22.613597344379038 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 22.4501895904541 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 22.275259793973436 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 22.107067529971783 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 21.948709460924256 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 21.77585110840974 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 21.61864393407648 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 21.46292740958078 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 21.300814135032788 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 21.132468231793105 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 20.9704336069398 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 20.846562465031944 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 20.686769606637174 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 20.52361459885874 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 20.377503940037318 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 20.22865128517151 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 20.066394292391266 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 19.896348064596 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 19.73900233453779 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 19.580196997698614 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 19.425149668817934 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 19.284895658493042 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 19.15145332040921 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 19.006842719184025 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 18.847447022999802 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 18.684902042955965 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 18.528688351313274 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 18.372105636094744 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 18.220121634470953 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 18.074965000152588 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 17.947243156312386 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 17.788432002067566 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 17.62642851876624 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 17.465457328935948 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 17.307755409953106 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 17.158899897620792 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 17.008851359872256 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 16.854084042615668 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 16.7125448988772 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 16.5704721104015 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 16.422541098648242 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 16.282911009258694 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 16.15292567211193 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 16.010022018266763 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 15.866667188623902 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 15.725311898170633 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 15.570047265604924 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 15.41753417253494 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.268365916517592 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 15.120408719899704 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.967367545522823 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.823986053466797 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.671248209358442 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 14.514941201490515 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 14.36070566269958 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 14.221812321589544 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 14.072790611357917 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.932390064563391 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.781287601060956 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.632157784921151 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.478006848501503 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.326978596774016 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 13.180793734284135 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 13.031987122126989 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.882289156449579 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.731161017166942 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.577334621678228 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.42605105761824 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.274211834638548 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.123903642266484 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.974795030946492 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.825270970662434 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.672966925565863 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.522899506522007 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.37376564305003 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.23278768600956 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.08634090423584 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.938639648376949 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.786215834730253 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.639311969280243 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.489598261293514 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.339180359473595 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.192067188161019 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.044932061975652 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.895287316544612 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.743641963645594 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.592119040312589 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.441101523006663 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.297878709152666 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.1545264409936 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.006871396689107 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.858280863080706 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.710919422460785 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.564254693582024 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.418425665035114 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.27054152223799 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.121855209613669 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.974420978598398 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.827158559747294 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.6793667367986735 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.531584814890919 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.385163148244222 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.239697636357995 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.0920700023048795 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.943199036168117 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.793685256660758 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.646345807660011 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.498857608208289 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.3496873773586975 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.20068367523483 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.054329975596014 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.906131088733673 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.7574526434359345 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.609267099404041 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.4611621663614285 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.312354704228843 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.163774981643215 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.019460749913411 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.872988186910481 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.725301106770833 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.5764307326819065 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.427697700612685 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.279464923847488 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.132421948188959 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.9854186160026948 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.837675097344936 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.6903658594403947 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.5431119528683745 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.394963645665659 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.2474759589420277 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.0998300773471428 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.9529551929897733 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.8047271341250086 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.6573778665982757 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.50969546609889 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.3625071774358335 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.214458671776024 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.0669927340681835 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.9192483986125273 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.7716148203991828 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.6239887822872747 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.4761011725977846 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.3282390601972012 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.1807675957679749 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0331372448817435 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8854237192684843 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7379866991287622 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5904598041456572 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.44293135918941595 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2953043297083691 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.14763728577886995 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   29.5s finished

    1978 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  15.084 seconds)

**Estimated memory usage:**  1856 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
