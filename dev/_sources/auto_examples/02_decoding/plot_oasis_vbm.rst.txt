
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (:term:`VBM`)
to study the relationship between aging and gray matter density.

The data come from the `OASIS <https://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard :term:`VBM` pipeline (using SPM8 and
NewSegment) to create :term:`VBM` maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the :term:`ANOVA` step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the :term:`ANOVA` step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

:term:`SVM` weights are very noisy,
partly because heavy smoothing is detrimental for the prediction here.
A standard analysis using mass-univariate :term:`GLM`
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 112-123

Prediction pipeline with :term:`ANOVA` and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

In nilearn we can benefit from the built-in DecoderRegressor object to
do :term:`ANOVA` with SVR instead of manually defining the whole pipeline.
This estimator also uses Cross Validation to select best models and ensemble
them. Furthermore, you can pass ``n_jobs=<some_high_value>`` to the
DecoderRegressor class to take advantage of a multi-core system.
To save time (because these are anat images with many voxels), we include
only the 1-percent voxels most correlated with the age variable to fit. We
also want to set mask hyperparameter to be the mask we just obtained above.

.. GENERATED FROM PYTHON SOURCE LINES 123-149

.. code-block:: default


    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 150-152

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 152-165

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-183

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f40a63003a0>



.. GENERATED FROM PYTHON SOURCE LINES 184-186

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 186-231

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 173.2349395751953 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 29.982818365097046 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 28.033427238464355 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.33019542694092 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 27.84998321533203 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 27.34935736656189 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.973519722620647 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.672122171946935 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.404552459716797 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 26.14405984348721 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 25.948694229125977 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 26.22687363624573 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 26.00147231419881 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.781796308664177 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.584163120814733 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 25.518463611602783 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 25.762585639953613 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 25.614478111267093 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 25.636402103635998 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 25.503351437418086 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 25.316195011138916 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 25.12997235570635 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.931544585661456 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 24.74622180150903 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 24.60224946339925 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 24.42624831199646 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 24.390227189430824 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 24.205227489824647 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 24.034210647855488 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.848178140048322 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 23.6685631275177 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 23.5282942633475 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 23.365710854530334 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 23.26947892073429 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 23.11087142719942 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.94176861218044 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.77347887886895 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 22.62431847082602 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 22.454594210574502 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 22.29205316763658 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 22.144030570983887 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 22.068830897168414 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.919627598353795 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.76356539060903 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.600740042599764 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 21.4390959209866 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 21.28173411410788 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 21.131511211395264 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.986647884051003 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.890613448863128 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.762720346450806 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.642895567650886 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 20.507087212342483 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 20.365849877303503 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 20.2252366454513 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 20.079383156516336 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.980977194649835 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.831938931816502 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.688318984261873 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 19.538876185982915 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 19.390953381856285 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 19.243224003275888 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 19.094852847437704 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.98610245992267 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.83871778845787 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.687462384884174 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.53978474212415 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.388558910853828 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 18.240356094696942 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 18.09925521629444 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.952580792563303 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.840066570631215 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.7004271613227 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.557384350528455 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.412247567563444 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 17.273987929026287 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 17.127251725447806 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.982499323882067 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.857908059389164 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.714796045158483 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.56962263584137 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.424149213013827 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.277903609159516 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 16.134443409471626 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.99009008634658 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.845421763027417 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.72673254789308 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.581848289774753 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.437012195587158 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.294744360312986 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.151769505606758 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 15.01077097588843 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.868326829827351 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.723621496590235 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.600217469195101 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.456605911254885 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.313917060693104 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.17208623640316 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.031880354394719 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.889446318751633 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.747154951095581 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.623823387788073 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.482089771943935 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.339993766210611 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.197392463684082 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.055972553434826 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.91579764744021 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.774636469154714 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.633581735469678 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.5068309110239 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.366019574078647 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.225282909633878 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.084049395152501 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.94452010635781 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.804746150970459 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.667227371879244 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.526209321515314 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.40135291702727 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.262999845763385 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.123376798229058 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.986621856689453 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.847972123090887 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.708469011744516 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.568139768228297 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.456611948628579 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.326382827758788 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.18673302635314 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.047364189868837 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.907917156815529 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.768059220424918 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.628504111216618 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.499780545707877 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.359576456474535 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.228627131397563 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.089007737031624 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.949604467109397 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.810705521527458 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.67125878368851 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.531712034474248 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.39897922131655 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.25963112286159 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.120403108867347 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.98180150649917 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.842211081431462 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.702409823735555 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.563030037386664 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.4312890849701345 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.291880406489989 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.152621507644653 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.013843958809872 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.874799172083536 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.735846437365804 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.597277616199694 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.4586619910071885 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.324264040240993 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.185535723163236 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.046882476562109 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.908650433181957 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.770134515400174 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.631595544095309 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.493472099304199 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.358511434578748 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.221476837440773 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.0851690491284325 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.94738513667409 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.8093116355664804 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.670999828591404 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.53278394801888 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.3946026393345425 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.25953651603157 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.121667371076696 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.9841550205186094 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.8465011618858163 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.708423610367527 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.570372312918477 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.432666301727295 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.2968572378158565 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.159744567116775 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.02220240603672 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.884488340196663 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.7466573185390897 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.6088795214068163 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.4712784473712626 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.3336230418721184 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.197489323823348 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.0598011854532605 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.9224071143775858 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7847035147927024 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6471048365248009 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.5095704093812004 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3721808759789718 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2347907857745106 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.098120778799057 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9608318966287405 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8234784283588842 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6860975730113494 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5488128272854551 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4117118150449646 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.27443852569117694 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13728050730336253 seconds remaining)
    1979 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 6.893 seconds)

**Estimated memory usage:**  1902 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
