
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-60

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 61-63

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 63-86

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 87-89

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 89-105

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 106-108

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 108-143

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 144-146

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 146-159

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 160-162

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 162-177

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f24ae0dca30>



.. GENERATED FROM PYTHON SOURCE LINES 178-180

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 180-225

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 293.2000160217285 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 36.50977301597595 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 33.022911071777344 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 31.677815278371177 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 30.998770236968994 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 30.833393096923828 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 30.721925656000774 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 30.627237626484465 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 30.469951629638672 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 30.30065247747633 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 30.00894546508789 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 29.805999885905877 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 29.50310699144999 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 29.243326223813572 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 29.01716903277806 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 28.82865913709005 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 28.61029088497162 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 28.395661943099082 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 28.175083372328015 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 27.966127596403425 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 27.79456901550293 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 27.69110408283415 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 27.563997463746507 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 27.46057002440743 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 27.296830336252846 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 27.136964559555054 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 26.988873811868523 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 26.83892255359226 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 26.675283738545012 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 26.49110252281715 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 26.331499417622886 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 26.17815149984052 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 25.993532180786133 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 25.806905377994884 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 25.62051228915944 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 25.43240353039333 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 25.247302956051296 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 25.068337756234246 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 24.913250760028237 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 24.743502714695076 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 24.584155082702637 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 24.427586194945544 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 24.295131456284295 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 24.158601588981096 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 24.00836029919711 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 23.840474102232193 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 23.661520325619243 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 23.499536899810142 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 23.338477929433186 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 23.169367790222168 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 22.995110034942627 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 22.829953301186652 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 22.662759487445538 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 22.4987950100089 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 22.333491802215576 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 22.17863952029835 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 22.013119901929585 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 21.857426852510685 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 21.694245527530537 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 21.536319154804033 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 21.37948020299276 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 21.223452587596707 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 21.082526414625104 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 20.920286821940586 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 20.758515119552612 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 20.602487820845386 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 20.442318164941035 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 20.279952284115463 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 20.118740011664 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 19.956281661987305 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 19.795155388968332 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 19.644730557858104 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 19.50323994954427 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 19.36174642876403 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 19.21933981534597 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 19.068957567214966 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 18.922871828079224 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 18.773717099970035 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 18.625753592222164 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 18.480340975749343 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 18.336155891418457 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 18.190239099808682 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 18.04042804531935 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 17.88823300959116 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 17.73551339194888 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 17.58715953546412 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 17.440981698590655 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 17.291834242042455 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 17.144786444577303 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 16.99236230368025 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 16.841360224617855 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 16.684016775298904 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 16.532507844593216 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 16.387565110319404 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 16.239766465856672 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 16.090272526991996 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 15.936016499996184 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.782979979957503 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 15.627413808083048 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 15.475233954612653 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 15.323854923248291 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 15.176161532354827 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 15.026321560728784 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 14.8719097734655 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 14.718377626859226 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 14.562312864121937 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 14.41022217048789 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 14.259553096004735 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 14.112153697896886 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.963386813434985 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.812102621251887 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 13.659953536214056 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 13.505280290331159 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 13.354212353714798 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 13.20253965310883 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 13.05132131991179 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.90441498263129 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.750594509972467 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.596471079325273 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 12.440405220544639 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 12.285915851593018 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 12.129614737408222 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.971911637509455 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.81637810497749 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.662492744384274 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.507806348800658 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.353425847159492 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 11.200513892286406 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 11.050901100039482 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.900694349939508 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.749926640437199 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.595234477792987 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.44304617245992 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.2888643598198 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.135986317449541 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.984004965534917 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.832192701451918 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.680603121318956 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.528273634288622 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.374669507253085 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.222220046179634 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.069570691872995 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.91526604370332 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.760475953975757 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.606139341990152 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.450575335272427 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.295399388221846 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.140036080159298 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.988343947642559 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.835267294173272 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.6800477504730225 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.52418664749095 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.368630860981188 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.213219214109035 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.05841284912902 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.903555946965372 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.750697160378481 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.59834660694098 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.44582366339768 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.29354386059743 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.140254616737366 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.987182190699607 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.834794668503749 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.683597324815996 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.528961216531148 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.376936544071545 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.223113217985773 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.069339450961816 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.915121078491211 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.761019088812834 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.6070396619684555 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.45245259268242 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.299533466960109 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.145319774660761 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.991132971884191 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.8371765954153876 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.6838352680206294 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.529916705384766 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.376236875405472 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.222844422196543 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.0700054963429766 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.9158493089412456 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.762068103957962 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.608383720689784 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.454719812973686 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.300934675577525 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.1475951645963938 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.9942763310702727 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.8410577672593136 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.6878650592117712 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.5347288407777484 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.381312264197784 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.2280336916446686 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.074510245743193 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9210893714550844 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7674676332718287 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6138846971550765 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4603432834450969 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.30686283834052813 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.15340142274022703 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   30.7s finished

    1972 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  11.622 seconds)

**Estimated memory usage:**  1877 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
