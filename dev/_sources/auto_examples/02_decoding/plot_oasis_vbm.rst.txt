
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f764b96d6a0>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 182.19709396362305 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 30.35592818260193 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 28.266204357147217 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.39402556419373 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 26.79464364051819 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 26.55813503265381 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.247120857238773 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.02209758758545 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 25.847219467163086 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 25.643415636486477 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 25.460224866867065 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.28309733217413 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.11562649408976 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 24.92875852951637 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 24.75907679966518 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 24.64429537455241 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 24.55427384376526 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 24.424456063438868 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.27547142240736 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.15758998770463 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.037169694900513 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 23.900263161886304 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 23.756123326041482 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 23.65549996624822 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 23.55828332901001 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.42074465751648 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.28409315989568 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.15059334260446 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.031572478158136 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 22.882300467326722 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 22.738808075586956 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 22.59781532133779 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 22.45610350370407 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.312827052492082 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.16410583608291 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.026835237230575 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 21.880779610739815 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 21.750451899863577 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 21.61750139688191 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 21.47708898935563 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.462900161743164 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.324874598805497 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.187943515323457 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.038950027421464 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 20.89677234129472 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 20.74988823466831 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 20.608136311821315 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.472200084239876 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.341141661008198 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.217156531859416 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.080390691757202 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 19.944707992030125 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 19.80774208215567 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 19.66495678559789 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.530110270888716 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.39709782600403 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.258507796696257 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.1178347269694 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 18.978482517702826 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 18.839387485536477 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 18.70342262585958 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.56949550206544 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.435819372054066 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.298844935402037 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.162853121757507 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.026629796394936 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 17.891246752305463 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 17.754719029611614 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.616488035987405 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.48936669031779 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.353588478905813 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.21682878615151 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.079227447509766 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 16.947429761494675 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 16.81331110644985 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.679844856262207 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.548254339318525 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.41199904912478 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.276969604003124 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.14420959013927 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.015089511871338 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 15.882002085815243 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 15.747414187687198 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.613423106182053 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.477299361001878 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.344770137001488 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.210164308547972 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.075320583650436 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 14.94077799536965 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 14.8038755668683 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.668519973754885 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.531319568445394 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.396008294561636 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.260287433542231 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.12492190016077 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 13.989906135358309 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 13.854198078314463 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.71938166913298 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.587645292282104 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.456760478742193 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.323736667633057 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.190195489637922 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.055494430018406 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 12.925572240236894 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 12.792335656973032 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.656031415576027 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.522015702049687 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.388458251953125 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.253827951572559 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.117979839307452 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 11.983199097893456 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 11.850214825020181 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.715933527265276 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.583800674539752 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.45366698817203 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.319815428360648 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.18707956938908 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.054256351585062 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 10.922073849176957 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.788637708215154 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.654609998067219 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.521225881970619 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.387016937380933 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.255736265725236 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.125116417484898 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 9.994716596603393 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.862966794816275 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.731030760787602 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.59810471534729 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.464752285979515 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.333454352158766 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.200934200796462 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.068224733526057 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 8.934864207317956 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.801177533704843 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.667515454468903 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.533592785105986 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.399782361775419 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.266915324805439 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.132912080064951 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.999216522489275 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.8669258330730685 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.734277285320658 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.600970556685974 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.467368841171265 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.334096119321625 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.20057778162499 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.066372131814762 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.932790769113077 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.79957397672154 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.666252295176188 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.532582826172279 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.398699133019698 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.265181028765012 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.131606835823554 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.99823018043272 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.864652963785025 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.731069879167399 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.597179639188549 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.46485495417373 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.3317365646362305 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.199252387751704 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.067118241463178 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.938324783477315 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.805233501806492 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.671700513724125 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.53831151020096 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.404947485038621 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.271535691760835 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.138023492147231 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.0046396676231835 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.8708645921004443 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.7376669728478724 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.60429288886186 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.4708638876334006 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.337341444832938 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.204091819849881 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.070596029529464 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.937328887789437 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.803894682303487 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.6703597704569497 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.5368017373164053 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.4033697018256555 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.269954217587664 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.1365880551545517 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.003186644734563 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.869711688769761 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.736098271640227 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6024123861434612 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.4698665936787922 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.336223288586265 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.202612849430264 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0689811507860818 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9352910320993532 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8016403729153663 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6679973907959766 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5343631578951465 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.40075565473682384 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.26715316194476507 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13357918585964185 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   26.7s finished

    1978 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  7.772 seconds)

**Estimated memory usage:**  1858 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
