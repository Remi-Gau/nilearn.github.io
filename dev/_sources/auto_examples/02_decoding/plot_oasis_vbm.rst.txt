
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f887629e0d0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 178.68757247924805 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 30.563833475112915 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 28.192349195480347 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.739102840423588 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 27.247819900512695 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 26.867034673690796 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.529874404271446 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.286570855549407 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.121437072753906 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 25.98472762107849 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 25.909727573394775 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.721279772845183 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.554986000061035 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.409915447235107 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.261071886335102 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 25.091186046600342 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 24.935662865638733 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 24.801642600227808 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.65363910463121 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.50350146544607 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.35497283935547 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.220407168070476 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.083243196660824 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 23.93843504656916 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 23.80508788426717 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.662789583206177 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.51272245553824 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.367529621830695 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.23430722100394 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.10293698310852 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 22.962145566940308 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 22.826978329689272 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 22.691656708717346 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.54683597160108 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.399311332141654 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.253291130065918 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.11963677406311 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 21.98167480649175 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 21.849368258526454 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 21.71193376565591 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.574286460876465 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.438840656745725 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.311269260588148 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.174188209134478 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.045614004135132 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 20.904036071565418 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 20.763952193052873 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.628078521566188 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.496343890825905 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.35694553900738 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.235488891601562 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.10187963878407 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 19.95995752628033 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 19.82461878938495 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.68612793639854 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.563167268579654 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.42375087738037 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.289068431185 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.14954645880337 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 19.012437646671877 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 18.875468730926514 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.74256711709695 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.60556806287458 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.468355772987245 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.331407010555267 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.201146034094005 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.0674419186332 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 17.929072052685182 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.794693077311795 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.657019110693447 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.516507080623082 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.37643898037118 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.243204752604164 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.104882220699363 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 16.966103186478485 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.833674907684326 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.69966703967044 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.56205146343677 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.43308026362688 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.294634109810936 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.159623742103577 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.023613850275677 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 15.885865130075594 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.757321176758731 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.623297986530122 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.489933687097887 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.35501103068507 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.223625624316863 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.091880798339844 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 14.95814226986317 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.822835180494522 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.690366404397146 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.55405440537826 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.418674315175704 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.281830782585955 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.146976521140653 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.009090344111124 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.872162359276997 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.739957994344284 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.61242681801921 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.477994680404663 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.343721139549029 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.206725443110747 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.069986644300442 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 12.934057088998648 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.7983459291004 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.662621741024953 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.52732211852742 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.391117466820612 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.255132572366557 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.119495305148039 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 11.984093212866568 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.848712239946638 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.714203840863387 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.57904857501649 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.444394640300585 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.308603689588349 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.172943814187988 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.038146604925899 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.902955421880515 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.769364198048908 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.63395858796175 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.498082071054178 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.360672508797993 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.225229547869775 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.089983224868774 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.955851876546467 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.821375482664333 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.68710644543171 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.552154298900634 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.417039761176476 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.282084643385792 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.147538560809512 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.012768542856202 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.884427451375705 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.74906841913859 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.613675285788144 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.478376943699635 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.343335659607597 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.209564243289206 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.075044972555977 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.941008238082237 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.806530912157515 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.671879780042421 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.539242333836026 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.403811906946116 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.268235938189781 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.133276775580685 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.998228775488364 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.863252642970758 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.7287304401397705 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.594286983376307 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.459977651897229 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.325099301494025 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.190256081618272 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.0552047990983535 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.92044719060262 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.7858549288124035 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.6509225247781485 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.516108094521289 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.381414353847504 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.2464504523306905 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.111525147049515 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.9771093459217095 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.842408447730832 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.7084418065620195 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.574152285794177 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.439377883237279 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.304423377627418 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.169863772815501 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.035164762945737 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.9002723652019835 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.7656242292980817 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.631161999840268 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.496547000161533 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.3619029181344167 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.227226148952137 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.0925145836199746 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.95802153094431 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.8235023914102735 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.689005162980821 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.5543726992211946 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.41970931828677 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.2851073780997857 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.150811527086341 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.016298210298693 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.8817758816544727 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.74728801798693 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6128859367776422 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.4786813889861736 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.344329269308793 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2098209645735656 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0753090878327687 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9409188977177279 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8064770723126599 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6720492350749481 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5376119175735785 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.403222382976319 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.26879480872491396 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13439743722503508 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   26.9s finished

    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  8.189 seconds)

**Estimated memory usage:**  1916 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
