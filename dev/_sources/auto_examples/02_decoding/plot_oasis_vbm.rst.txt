
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (:term:`VBM`)
to study the relationship between aging and gray matter density.

The data come from the `OASIS <https://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard :term:`VBM` pipeline (using SPM8 and
NewSegment) to create :term:`VBM` maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the :term:`ANOVA` step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the :term:`ANOVA` step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

:term:`SVM` weights are very noisy,
partly because heavy smoothing is detrimental for the prediction here.
A standard analysis using mass-univariate :term:`GLM`
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 112-123

Prediction pipeline with :term:`ANOVA` and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

In nilearn we can benefit from the built-in DecoderRegressor object to
do :term:`ANOVA` with SVR instead of manually defining the whole pipeline.
This estimator also uses Cross Validation to select best models and ensemble
them. Furthermore, you can pass ``n_jobs=<some_high_value>`` to the
DecoderRegressor class to take advantage of a multi-core system.
To save time (because these are anat images with many voxels), we include
only the 1-percent voxels most correlated with the age variable to fit. We
also want to set mask hyperparameter to be the mask we just obtained above.

.. GENERATED FROM PYTHON SOURCE LINES 123-149

.. code-block:: default


    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 150-152

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 152-165

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-183

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f61d9202e20>



.. GENERATED FROM PYTHON SOURCE LINES 184-186

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 186-231

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 153.86581420898438 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 25.37606978416443 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 24.404728889465332 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 23.539840698242188 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 23.497430324554443 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 23.04049515724182 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 22.70556696256002 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 22.48684733254569 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 22.23040008544922 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 22.085667265786064 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 21.92013907432556 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 21.756528724323623 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 21.576071818669636 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 21.562107379619892 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 21.396102496555873 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 21.27632204691569 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 21.10940432548523 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 20.981324167812573 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 20.829498211542763 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 20.732612107929434 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 20.63094449043274 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 20.532196124394734 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 20.58838970010931 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 20.4527370929718 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 20.31461477279663 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 20.16060996055603 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 20.01496069247906 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 19.87410804960463 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 19.74992666925703 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 19.611772027508966 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 19.47666589419047 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 19.401272689142534 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 19.266141057014465 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 19.14509796373772 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 19.02364993095398 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 18.907920598983765 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 18.781600422329372 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 18.66123664701307 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 18.53345320099279 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 18.40272623453385 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 18.319828987121582 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 18.19160778348039 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 18.068085852123442 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 17.943051937014555 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 17.821979544379495 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 17.708502451578777 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 17.588513882263847 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 17.47494368350252 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 17.405150771141052 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 17.314491014091338 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 17.18960666656494 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 17.063314638885796 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 16.938638797173134 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 16.820328550518685 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 16.70292188503124 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 16.597382632168856 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 16.471607412610737 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 16.34903852144877 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 16.251683802440247 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 16.142949245743832 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 16.025534788767498 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 15.903357497981338 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.782201897713444 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.666867305362034 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 15.554531216621399 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.441673388847938 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 15.345882430221096 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.229604094775755 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 15.163487644756541 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 15.047179522721663 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 14.930659839085171 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.816266929599601 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.699520111083984 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.584498072323735 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.468273626791463 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 14.410734574000042 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.295400456378335 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 14.178139733029651 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 14.060298326687935 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.943011365359341 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.829796552658081 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.712134393644922 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.594087083165238 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.485524266599173 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.380851155235653 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.268676252926097 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 13.147846316182335 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 13.029072221668288 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.909619721499356 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.790242803230713 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.671362453036839 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.55249042563386 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.443554836770764 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.326952642010106 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.207782811306892 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 12.087884262988442 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.970896303653717 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.852994702525974 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.736800529518906 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.619096069624929 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.501510381698608 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.393908788662145 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.275311666376451 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.155381952674643 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 11.035550484290491 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.916948590959821 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.800528085456705 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.688956795451796 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.572488104855573 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.463198499942045 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.3565608588132 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.239430128991067 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.122529966490609 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 10.006775683006353 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.889721138435497 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.77288772748864 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.654175659705853 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.537200306215857 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.418232315677708 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.308939593178886 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.193514029184977 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.078805728392169 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.964077101379145 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.850399833384568 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.735716266016807 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.619567060470581 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.50272031814333 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.38594648969455 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.277598768472672 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.163454349650893 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 8.046980674450214 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.931904878325135 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.81742348092975 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.70112471114424 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.583547496083956 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.466612612759625 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.350618811214671 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.239949480460508 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.124384413594785 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.010002209985856 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.8942149707249225 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.777791530527967 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.661543782328216 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.545430146730863 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.429439173804389 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.313675033635106 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.2002625530713225 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.083832353150764 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.968249591621193 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.853713347607811 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.739529291788736 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.624393521555212 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.509332832537199 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.39431345852372 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.281975256932246 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.166903480406731 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.051470768757356 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.935698778006681 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.8203696812255465 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.705644761991201 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.59253203868866 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.476999712286529 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.361453627362663 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.248602068497359 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.133748101025093 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.0182976072484795 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.9026475814451653 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.787517223529473 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.672739165169852 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.557509782046256 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.44291285907521 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.3280157025097403 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.2168747491614766 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.101532040303842 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.9866683126866134 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.87188594681876 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.757038127292286 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.6422290977111644 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.527223520064622 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.4118910674942273 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.2968458069695363 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.1849428435056906 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.0700153570908766 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.9550114798415554 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.8400243883547576 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.7252865546458478 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.6105036838080293 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.4954621728091317 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3802719724939223 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2656886426229326 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.1505573423285234 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.035412511276325 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9202748239040375 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.805198565665922 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6901076921482676 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5750400408720359 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.46008830167809306 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3450578554027577 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2303530326997391 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1151645938355719 seconds remaining)
    1989 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 59.156 seconds)

**Estimated memory usage:**  1903 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
