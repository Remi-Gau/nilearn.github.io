
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fcce9e4b220>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 277.2212028503418 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 57.96135759353638 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 57.35614514350891 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 56.84728932380677 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 51.86519408226013 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 48.14427924156189 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 45.12898166974386 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 42.89135469709124 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 41.226144790649414 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 39.85208540492587 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 38.75145125389099 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 37.81421145525846 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 36.99316199620564 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 36.22837534317603 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 35.60409654889788 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 35.039253870646164 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 34.51934897899628 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 34.04698470059564 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 33.62083829773797 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 33.20671828169572 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 32.83317160606384 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 32.47178548858279 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 32.12006055225026 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 31.774547462878022 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 31.47058629989624 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 31.179527044296265 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 30.884821359927837 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 30.598365165569163 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 30.32721563747951 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 30.067665683812105 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 29.807652870814007 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 29.536308311646984 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 29.283718049526215 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 29.020677335334547 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 28.764263601864087 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 28.505863564355035 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 28.27303483751085 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 28.048003538234813 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 27.821851316251255 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 27.593675099886383 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 27.378376960754395 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 27.158434292165243 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 26.938651153019496 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 26.719008501185925 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 26.510796416889537 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 26.295556757185196 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 26.08270035619321 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 25.878976334916782 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 25.689358194669087 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 25.49978018780144 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 25.299646854400635 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 25.109580572913675 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 24.9160164136153 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 24.728386024259173 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 24.535356397981996 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 24.350772164084695 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 24.15919365201678 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 23.972338772656624 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 23.790601697461355 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 23.60453734559528 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 23.41174578666687 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 23.22607741590406 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 23.04182539447661 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 22.857588200342086 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 22.67360880970955 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 22.48889945103572 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 22.305525425708655 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 22.123516114790046 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 21.949224219602698 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 21.76979941216068 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 21.599195071629115 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 21.430346619914957 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 21.256963941786022 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 21.08785761872383 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 20.92004034325883 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 20.752031803131104 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 20.58176198758577 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 20.416695309923842 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 20.240875244140625 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 20.06808401964888 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 19.892478704452515 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 19.722981700190793 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 19.55153910706683 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 19.37841813248324 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 19.20791118485587 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 19.036149670096005 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 18.86041466025419 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 18.692019095366028 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 18.519532680511475 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 18.34792826148901 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 18.175040509965687 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 18.005201934458135 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 17.833961745967038 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 17.66391372167936 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 17.49353193729482 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 17.321799027292354 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 17.151901324590046 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 16.98035952479569 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 16.810055523502584 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 16.64425500233968 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 16.481242656707764 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 16.315809899037426 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 16.14875402170069 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 15.98377034502122 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 15.82000681070181 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 15.654397601173038 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 15.486658379716694 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 15.321956086381574 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 15.154768555252641 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 14.98833044078372 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 14.82644482092424 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 14.659503105524424 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 14.506905726024083 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 14.340753249362507 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 14.17331258037634 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 14.007016254507976 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 13.83994356517134 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 13.67424301000742 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 13.508428060402306 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 13.341075626741938 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 13.175861358642578 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 13.008665406014309 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 12.84313629885189 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 12.677670164806086 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 12.51147695510618 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 12.345820713043212 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 12.17961401409573 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 12.014670529703455 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 11.848678439855576 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 11.682346477064975 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 11.516306767096886 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 11.350493338271862 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 11.184533256472964 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 11.019144361180471 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.852350818577097 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.685847441355387 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 10.5208880480598 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.354936514457647 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 10.190287849177485 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 10.025638582037507 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.859854187284197 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.694975005819442 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.529780189755938 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.363939535367738 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.19836695988973 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 9.033255355111484 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.867366336796382 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.702508936122973 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.537148237228394 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.37247665296465 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.20614997545878 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 8.040178527895188 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.874832780737625 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.709025211583556 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.544732468468802 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.379524907758159 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.213975649613601 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.048543222390922 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.884826503222501 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.7197870218528895 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.555355608463287 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.390818360429373 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.226779834723766 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.062686026462017 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.8980643167728335 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.733117573189013 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.569448939288955 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.406048731889554 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.242390450977143 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.078379899087037 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.913938522338867 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.749633842044406 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.586715071700341 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.422943552105413 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.258788593884172 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.09500755582537 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.9309780055826358 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.766868765071287 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.6023684030168512 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.4383577607863445 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.274042791790432 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.1102320700060595 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.9463305106529822 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.7823930203588936 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.618675791698953 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.455248220546826 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.2919607726476525 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.12830823245533 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.964701622090441 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.8009304180347099 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.637252180199874 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.4735883655348374 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.309824744860331 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.1461251584977066 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9824601350371371 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.8186191350985795 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6548557476121551 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.49113410983593936 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.32740331418586505 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.16369662332774407 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   32.7s finished

    1947 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  17.294 seconds)

**Estimated memory usage:**  1911 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
