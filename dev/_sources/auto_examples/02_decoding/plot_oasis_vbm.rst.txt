
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f4ea9c56f40>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 216.65334701538086 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 39.26563310623169 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 36.1851110458374 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 35.045939207077026 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 34.407084226608276 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 33.954729080200195 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 33.54372572898865 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 33.22433842931475 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 32.85447120666504 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 32.52987673547533 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 32.26916551589966 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 32.07392152872953 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 31.812148014704384 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 31.54782562989455 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 31.285472222736907 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 31.021642684936523 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 30.772753834724426 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 30.52314132802627 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 30.288822597927517 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 30.100737559167964 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 29.898392915725708 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 29.684911114828928 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 29.497262434525926 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 29.309777902520224 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 29.16746759414673 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 28.992677927017212 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 28.791649873440083 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 28.603899390609175 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 28.426279749189106 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 28.239653447578693 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 28.114180008570354 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 27.978180262350264 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 27.8346728682518 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 27.68333596894235 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 27.526353233000815 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 27.382688283920288 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 27.207495503955418 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 27.06034101022256 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 26.922112715871712 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 26.78148057521918 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 26.61928367614746 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 26.466321177598907 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 26.307068279811315 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 26.15694254498149 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 25.993573730642144 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 25.835978481504654 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 25.679524079613067 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 25.51087640701456 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 25.345446427663166 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 25.17443141645315 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 24.999227285385132 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 24.828937366896984 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 24.651295790305504 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 24.477975381995147 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 24.311985033529776 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 24.150124484842472 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 24.00398785727365 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 23.828372976236174 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 23.653059309926523 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 23.47934585506633 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 23.31250286102295 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 23.15031298262174 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 22.981869359170236 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 22.811374751348342 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 22.63565441966057 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 22.46395936379066 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 22.292699719920304 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 22.127108773188805 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 21.955584189471075 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 21.785020213196244 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 21.61232829093933 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 21.440525555274856 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 21.270733303493923 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 21.099371165445408 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 20.94099376008317 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 20.771183570226036 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 20.603117240102666 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 20.43211365984632 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 20.269061357547073 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 20.104222976708712 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 19.941916823387146 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 19.776573599120717 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 19.610179732485516 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 19.435994702649403 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 19.268715767633346 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 19.102483496946448 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 18.94162386517192 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 18.78172866777442 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 18.61895569888028 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 18.450817333178573 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 18.288834147983128 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 18.12347818468953 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 17.96030526575835 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 17.7926323798395 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 17.626441209874255 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 17.46161891284742 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 17.2968226869901 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 17.130663997119235 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 16.96479190612326 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 16.802681330478553 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 16.640115976333618 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 16.47361992373325 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 16.30497232137942 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 16.13777757385402 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 15.971425129817083 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 15.80260579926627 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 15.63499654464002 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 15.464747462317208 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 15.297365206259268 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 15.129143841769716 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 14.964429356835106 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 14.797645225181236 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 14.630068285124642 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 14.46423267052237 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 14.298021492205168 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 14.131830018499622 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 13.967293344694992 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 13.806301911671957 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 13.652307506334985 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 13.492879857536124 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 13.32846721013387 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 13.16291558249923 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 12.995478067241732 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 12.824917054757838 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 12.656950112312071 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 12.491513729095459 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 12.325216444711836 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 12.161000501452468 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 11.994937151670456 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 11.83036927659382 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 11.664754243997427 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 11.499311281524541 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 11.330353679078998 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 11.162554891485918 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.994105677106488 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.824488789946944 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 10.65686315648696 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.48923759390838 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 10.321900778922481 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 10.154608961489561 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.985768522535052 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.817653456478254 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.64975676066439 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.482671187474176 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.318564229541355 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 9.153382663069099 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.989859192338708 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.823269342889592 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.655023768141463 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.48624114062162 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.320368925730387 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 8.154091514498981 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.988774450201737 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.822346427082237 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.65554945499866 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.488650529615342 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.32214584106054 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.156372636746449 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.989141518556618 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.822250082807721 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.655471980571747 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.488793189481179 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.322008338975317 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.155812087965889 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.989913201913601 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.822944243748983 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.656119205865515 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.490027036495552 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.325685864403134 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.1586132289389885 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.9918167030110085 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.825418585225155 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.658932857735213 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.491807237525896 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.3249400456746425 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.158281700951712 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.9918794631958003 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.8256799555094227 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.6589834181110508 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.4924455834500616 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.3261695702870684 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.160037476713486 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.9941269093817406 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.8277861238177358 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.6612662647081455 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.4949347843994967 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.328955945148263 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.1628769336537244 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.9964305796521773 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.8300219692250408 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.6638086093099493 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.4975190399829006 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.3312199413776398 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.1647091270110768 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9983167722053135 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.8319706183213453 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6655913567056461 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.499171776214832 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.332819690608015 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.16639414145119824 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   33.3s finished

    1961 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  17.945 seconds)

**Estimated memory usage:**  1913 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
