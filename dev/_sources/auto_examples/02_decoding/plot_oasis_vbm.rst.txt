
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print("")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f491f354460>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 175.20904541015625 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 37.690449237823486 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 35.867810010910034 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 35.13458434740703 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 34.714170694351196 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 34.3113477230072 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 34.009526332219444 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 33.75200312478202 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 33.541791915893555 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 33.365715662638344 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 33.16044735908508 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 32.93315089832653 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 32.717054684956864 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 32.51882653969985 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 32.328581775937764 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 32.1298508644104 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 31.93068754673004 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 31.73870524238138 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 31.54874351289537 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 31.38730113129867 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 31.221992254257202 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 31.06259340331668 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 30.896757082505662 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 30.758048244144607 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 30.608349164326984 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 30.427992820739746 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 30.249888016627384 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 30.10423770657292 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 29.923125777925765 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 29.733446532282333 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 29.557679653167725 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 29.387396743220666 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 29.216087579727173 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 29.03890939914819 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 28.853240770452164 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 28.665846552167622 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 28.497142367892796 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 28.31591553945799 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 28.139576874281232 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 27.966218116955883 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 27.782910346984863 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 27.61818646221626 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 27.458342960902623 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 27.285200651301892 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 27.118418260054156 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 26.93847147623698 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 26.76156697065934 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 26.582148815723176 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 26.412433067957558 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 26.230902219305232 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 26.05723285675049 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 25.873788445603612 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 25.689522431446957 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 25.512690256226737 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 25.337100505828857 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 25.160214792598378 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 24.99248518262591 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 24.814924181553355 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 24.63336628880994 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 24.456129955033123 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 24.277653455734253 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 24.104073309507527 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 23.932341883259433 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 23.75702214997912 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 23.577771812677383 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 23.399626108316276 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 23.227435957301747 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 23.05808956943341 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 22.884423957151526 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 22.705236365829688 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 22.529993670327325 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 22.355119228363037 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 22.177103254530163 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 22.001498075380717 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 21.824398582046097 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 21.649363438288372 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 21.474433171121696 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 21.301716364823378 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 21.127809267777664 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 20.959359350083748 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 20.78295636177063 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 20.607154510639333 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 20.43186691912209 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 20.25551609533379 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 20.079678069977533 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 19.910520174924066 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 19.734661351802735 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 19.559207499712365 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 19.387988350608133 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 19.216253436013552 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 19.042469819386802 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 18.870126643023646 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 18.695279981779017 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 18.52140783750883 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 18.34826981767695 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 18.173030828174795 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 17.998105684916176 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 17.825566262314002 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 17.65131933835088 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 17.476851236940632 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 17.30276918411255 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 17.12825126459103 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 16.954512339012297 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 16.782041376076855 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 16.610254141000603 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 16.436007340749104 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 16.264325758196275 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 16.090167426617345 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 15.916040023167929 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 15.74255701598771 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 15.568403720855715 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 15.393802829690882 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 15.219602022852216 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 15.045351657192263 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 14.874126455240082 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 14.700899818669194 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 14.52609843221204 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 14.352162352993957 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 14.177678876003977 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 14.003757314521726 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 13.82882308959961 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 13.657441338231742 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 13.484617346622906 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 13.311568971571882 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 13.13906438889042 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 12.967277526855469 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 12.794269913718814 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 12.622338278087105 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 12.45009058713913 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 12.277673625206763 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 12.10384229513315 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 11.93042598243888 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 11.757776975631714 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 11.585539430603946 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 11.414200160040783 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 11.24355842449047 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 11.07168601540958 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.89983893658993 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 10.728452551192131 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 10.557168000036006 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 10.385243858609881 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 10.212690280684342 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 10.040861838300463 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.868953806537014 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.696737011273703 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 9.524059575179527 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 9.352046826114393 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 9.179603390142221 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 9.006732811798921 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.83342503221243 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.660604874293009 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 8.487508039600801 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 8.31594379324662 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 8.143428514206333 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.970882666575444 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.7975651448772805 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.6245939914996805 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.451527228021318 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 7.278072477896002 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.104540339056051 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.930749714374542 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.75719868470423 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.583734035491943 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.4105738306338065 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.237346329340121 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.063666871099761 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.890066419739321 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.716757057669634 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.544630413963681 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.371487593509742 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.19822743359734 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.024949996792085 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.851739340050276 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.678223864880601 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.5047956143302486 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.331374815532139 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.157905860380692 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.9843046570901817 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.8107431899295765 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.6375621097713875 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.4647405677371554 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.291435596034013 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.118279726950677 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.9454447324158717 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.772083448327106 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.5987864378336316 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.4254610000118135 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.2521451259041854 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.078835695347887 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.905581129921807 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.7323114997462221 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.559086561203003 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.3861248393853505 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.2130272981416375 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.0398714714443562 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.8667247906709329 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6933466950241399 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.519994101548558 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.346643510490957 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.17331198951107774 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   34.6s finished

    1960 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  55.254 seconds)

**Estimated memory usage:**  1901 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/nilearn/nilearn.github.io/main?filepath=examples/auto_examples/02_decoding/plot_oasis_vbm.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
