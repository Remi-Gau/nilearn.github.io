
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fa7bc3e7130>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 143.80216598510742 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 24.6625874042511 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 22.828845262527466 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 22.322371244430542 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 21.85530161857605 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 21.574828147888184 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 21.461270968119305 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 21.476599284580775 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 21.35771369934082 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 21.11608844333225 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 20.888840913772583 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 20.71705490892584 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 20.56049044926961 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 20.400954539959248 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 20.27359802382333 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 20.154808123906456 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 20.022467136383057 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 19.924768125309665 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 19.81686692767673 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 19.699831272426405 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 19.570100784301758 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 19.436687571661814 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 19.301330089569095 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 19.181729140488997 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 19.049092769622803 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 18.938477516174316 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 18.819977320157566 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 18.697262304800528 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 18.58226500238691 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 18.47116578858474 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 18.34895396232605 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 18.24104844370196 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 18.131006598472595 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 18.017678101857502 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 17.90704455095179 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 17.800628185272217 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 17.696448855929905 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 17.598913476273818 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 17.5006118699124 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 17.398554557409042 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 17.29308795928955 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 17.17735794695412 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 17.064197369984218 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 16.95158412290174 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 16.833970004862003 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 16.725233289930557 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 16.611416215481967 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 16.495197012069376 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 16.39082634449005 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 16.275123722699224 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 16.160085439682007 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 16.046300037234435 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 15.935088065954355 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 15.832215651026312 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 15.731465304339373 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 15.630378723144531 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 15.523139681134907 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 15.41553317036545 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 15.306595818749788 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 15.228044962478895 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 15.114904244740805 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 15.003140297092376 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 14.888423888914046 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 14.778128786692543 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 14.670243680477142 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 14.561833399992723 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 14.4511606910012 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 14.340969434425013 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 14.232484228470746 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 14.122547318969948 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 14.013980967657908 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 13.90222426535378 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 13.790761735704208 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 13.683802993330238 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 13.575837908564386 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 13.468326727549236 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 13.360594874934145 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.25096272183703 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.143058562890078 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.035359132138987 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 12.928865790367126 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 12.828179800951924 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 12.725430854936924 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 12.621920413281543 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 12.520071165902273 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 12.414212282966165 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.30894021100776 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.201751366428946 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.089947787198152 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 11.97923549105612 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 11.869612481858995 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 11.76215448484316 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 11.651893242545752 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 11.545291126415295 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.436804553295703 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.329156863062007 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.220005452632904 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.109870114277319 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 10.99942742075239 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 10.890480171550402 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 10.78152322769165 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 10.67365801688468 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 10.567916421329274 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.460337745333181 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.351816397446854 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.243716251282464 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.134728845560327 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.024762182592232 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 9.916629826581037 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 9.80791445828359 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 9.699773506684737 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 9.592132211805465 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.484818424497332 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.376527640671856 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.270558679312991 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.16325399150019 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.055712477914218 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 8.949594414132273 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 8.841868566254439 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 8.734751707365533 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 8.62744363149007 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.520247591428522 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.414502370552938 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.307973820988725 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.20012677100397 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.091428804397582 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 7.982448593018547 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 7.873767263307346 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 7.765315622091293 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 7.65671520454939 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.548951790882991 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.440367218192297 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.331086426070242 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.223024072503685 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.115082167867404 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.007576827649717 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 6.898768705480239 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 6.791148813971637 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.683608780736509 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.575517186157995 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.467443943023682 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.360464180614931 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.253080126265405 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.145260307338688 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.037769847446018 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 5.929684696526363 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 5.822133603161328 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.714638452140653 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.60680855287088 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.499212303417641 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.392272631327311 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.2845461226457004 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.175861559416118 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.067275446224836 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 4.959239148474358 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.85165532173649 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.743286579083174 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.6351937533943515 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.52806807469718 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.4206428512837155 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.312582969665527 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.204783174562158 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.096696217854817 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 3.9884842217334207 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.8800397035552234 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.7720833402691465 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.66394869965243 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.555708364098372 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.447767757234119 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.339743159931792 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.232043350444121 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.1245872639773182 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.016540887743928 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.9085892542249208 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.8006084458581335 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.6929101603371755 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.585173682733015 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.477295002694857 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.3698075273063743 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.2621229254333666 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.1547794342041016 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.047325999697269 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.9397340161459786 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.8321032445938863 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.7246204873789912 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.6166632368757918 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.5088851708237843 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.40100518394919 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.2930972271777212 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.1851982641472387 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.0773220313222784 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.9694358428735383 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.861597329378128 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7539891937236094 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6462145048318451 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.538556539095365 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4308442047664097 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3231254858413929 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.21543198884135548 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.10770527441896985 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   21.5s finished

    1978 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  58.399 seconds)

**Estimated memory usage:**  1838 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
