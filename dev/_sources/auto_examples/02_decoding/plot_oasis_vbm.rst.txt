
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fc61acc5910>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 265.195369720459 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 51.85049819946289 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 46.97912907600403 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 43.800907135009766 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 42.16312623023987 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 41.72486472129822 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 40.82128198941549 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 40.16286853381566 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 39.661211013793945 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 39.33183964093526 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 38.992684841156006 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 38.63288172808561 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 38.31401952107747 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 38.29967498779297 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 38.04404987607683 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 37.82511194547018 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 37.77412033081055 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 37.55355805509231 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 37.22721070713467 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 37.016232528184595 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 36.774452447891235 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 36.50802482877459 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 36.25558889995922 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 36.05652806033259 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 35.88040113449097 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 35.963109493255615 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 35.80304932594299 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 35.66094545964842 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 35.48074902806963 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 35.32731929318658 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 35.189401706059776 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 34.90744101616644 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 34.620921313762665 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 34.388440161040336 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 34.1896231174469 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 33.95709923335484 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 33.83224317762587 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 33.64148398347803 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 33.44503080217462 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 33.263483799420875 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 33.033613204956055 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 32.77674551707942 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 32.54241207667759 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 32.28209373008373 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 32.055904691869564 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 31.81300817595588 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 31.59498577532561 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 31.379263659741014 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 31.156803091367085 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 31.009830805720117 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 30.823285818099976 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 30.60510840135462 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 30.389272323021522 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 30.168855941520548 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 29.98376829535873 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 29.80562225255099 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 29.56643567766462 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 29.3315383676897 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 29.118175761453035 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 28.90538011162968 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 28.68793241182963 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 28.4719651175327 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 28.283407526631507 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 28.075407262832396 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 27.89546948671341 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 27.693992614746097 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 27.50097942352295 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 27.290040019732803 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 27.1200935419868 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 26.912045150563337 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 26.715956381389073 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 26.497891771961267 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 26.298532697889538 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 26.13408072680643 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 25.93141401780618 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 25.722394784291588 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 25.506739980296086 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 25.294386129874688 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 25.094983846713333 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 24.89946242223812 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 24.68467676639557 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 24.475218346089495 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 24.250102793298115 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 24.051756516996637 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 23.837034441175916 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 23.61658195888295 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 23.40553257631701 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 23.20278073179311 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 23.00771799954501 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 22.800516056210807 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 22.608055485619442 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 22.39989154155438 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 22.2068859597911 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 22.006154316727834 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 21.803636403793984 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 21.592959429088395 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 21.384152313073475 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 21.173458578660316 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 20.968483394506027 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 20.760131019534484 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 20.55772113800049 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 20.353189647787868 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 20.142074299793617 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 19.94175695678563 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 19.73201135488657 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 19.527213618868874 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 19.315310473711985 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 19.112183111850346 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 18.910850984078866 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 18.701097449031444 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 18.492811137979682 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 18.282671531041466 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 18.073673708098276 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 17.888071003213394 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 17.67940303735566 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 17.47087778215823 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 17.263417137080225 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 17.057678322506767 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 16.850729659452277 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 16.641234476025364 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 16.430442174275715 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 16.22036107315505 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 16.01632568484447 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 15.811356843002443 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 15.607714153105213 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 15.40209732055664 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 15.199512031343248 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 14.996493525392427 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 14.79330164194107 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 14.586047762124112 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 14.372984941189104 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 14.166395323877117 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 13.96166620832501 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 13.755229198843017 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 13.55147667785189 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 13.350106142185352 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 13.139784308040843 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 12.933509609124956 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 12.73018377414648 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 12.525902773836533 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 12.337359360286166 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 12.138516759196072 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 11.93520488873334 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 11.73275260158352 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 11.528002036942377 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 11.319521566917155 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 11.115903188104499 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 10.91067223970582 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 10.709350869462297 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 10.504185810985181 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 10.297927379608154 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 10.094047331652105 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 9.886585913206401 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 9.684698042526744 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 9.475330919414372 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 9.268278006584413 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 9.060777603051601 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.851939503554325 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 8.645090655435489 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 8.442466296489883 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 8.238610565662384 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 8.033073201682997 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.82885945579152 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.621199533251897 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 7.414703520332894 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 7.206267920407382 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.9999217067856385 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.792579490981416 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.584244682675316 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 6.380932044700757 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 6.175372796900133 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.9710148830859975 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.763988422793012 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.556037497658261 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.349511779587845 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.143661975860596 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.938342007723721 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.73142077963231 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.52531648217962 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.318279230394843 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.111475997500949 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.9060238303400534 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.6999058225652672 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.4942163743607986 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.2888117665829864 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.082870167654914 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.8775281034490114 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.671362145061799 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.465477867329374 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.259874485157154 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.0542666033694617 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.8485838230991862 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.642920821905136 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.437294668484228 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.2315542501272614 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.0262727248363006 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.8211319835818544 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.6158187607218166 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.41052040909275866 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.20525329436489087 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   41.0s finished

    1961 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  34.896 seconds)

**Estimated memory usage:**  1841 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
