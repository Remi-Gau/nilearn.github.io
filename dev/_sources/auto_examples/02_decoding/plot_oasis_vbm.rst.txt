
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f454153cf40>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 209.62238311767578 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 36.59047746658325 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 34.423893213272095 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 33.448307037353516 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 32.986163854599 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 32.67972421646118 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 32.36608831087749 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 32.10932128770011 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 31.83570098876953 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 31.668855322731865 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 31.535507917404175 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 31.40229385549372 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 31.245600382486977 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 31.166053918691784 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 30.957974910736084 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 30.732491970062256 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 30.567967772483826 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 30.402738837634818 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 30.215125799179077 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 30.020673701637673 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 29.841246843338013 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 29.683348326455977 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 29.510202321139253 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 29.332620993904445 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 29.17212359110514 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 28.992976665496826 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 28.827649134856006 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 28.653686867819893 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 28.496816430773055 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 28.340120932151528 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 28.182535807291668 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 27.992169641679332 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 27.83170258998871 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 27.645714767051466 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 27.456481512855085 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 27.260500022343226 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 27.08706333902147 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 26.911021825429554 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 26.734433525487 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 26.550900514309227 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 26.36717987060547 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 26.196166329267548 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 26.051528431120374 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 25.89199301808379 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 25.72564842484214 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 25.55204839176602 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 25.376721827880196 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 25.20423965251192 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 25.041209499041237 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 24.87174724072826 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 24.711695194244385 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 24.54008245935627 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 24.36484037912809 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 24.18995080354079 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 24.0254119237264 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 23.859859509901565 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 23.68717820303781 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 23.52997456935414 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 23.361953907999496 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 23.19057850514428 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 23.024500052134197 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 22.859079231981372 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 22.690550242700883 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 22.523764144806634 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 22.353735893964767 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 22.182118452512302 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 22.01972701332786 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 21.85307474278692 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 21.680578203762277 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 21.51238699581312 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 21.34543493815831 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 21.17460400957457 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 21.007507748074 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 20.842130625084657 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 20.68616383784526 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 20.518179734547935 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 20.350684291438053 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 20.188560934809896 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 20.02305823717362 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 19.859497704083406 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 19.695754051208496 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 19.53009401721719 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 19.365796275255157 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 19.201590549514954 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 19.04165808359782 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 18.878145722781912 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 18.712043423985325 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 18.552655159741985 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 18.387080929496072 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 18.223422184419096 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 18.05885010295444 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 17.896009073152648 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 17.732144065525222 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 17.567902362474833 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 17.40362145038361 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 17.238996468092267 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 17.07275036970774 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 16.907863380982704 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 16.743370435675796 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 16.57662980243413 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 16.41149640083313 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 16.24453522427247 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 16.08040835810643 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 15.918040051043613 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 15.752065438490648 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 15.586650212605795 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 15.420417205342707 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 15.25668893350619 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 15.089443930873164 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 14.926481454744252 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 14.762125448747115 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 14.597745137171703 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 14.433870128222875 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 14.270338069021173 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 14.104159430453652 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 13.93828104889911 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 13.774412278471322 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 13.610189558094383 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 13.450704073501846 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 13.287298625256835 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 13.126546223958332 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 12.96363854211224 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 12.800137035182265 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 12.639226686663743 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 12.473558764303885 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 12.309151124954223 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 12.145380901911903 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 11.984484588067362 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 11.819962710142136 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 11.655579554018123 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 11.489797738882212 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 11.325411017614467 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 11.159854816667961 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.99552331293436 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.830120723638961 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.66533832196836 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 10.5008685168098 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.335808456379132 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 10.171571113061214 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 10.005481558737994 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.841636725834437 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.676437394838807 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.511308337601138 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.347160526088901 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.182331416341993 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 9.018227199028278 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.853821548697066 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.688855667503512 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.52457078727516 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.359551429748535 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.195725282033283 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 8.03098462433215 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.866356473220022 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.7035987361583835 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.538824892663336 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.374396800994874 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.210113696562938 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.045925240607778 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.881302736982514 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.716822196852486 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.553603887557983 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.389403629006806 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.224840902987821 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.060209894472836 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.896319965036904 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.7312663757439815 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.567271439425916 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.403225082123351 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.239343506949289 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.075265368060952 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.911827297771678 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.747946994346485 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.584007795466934 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.420011826333283 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.256414421673479 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.092499256134033 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.928796833211725 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.7650780664325434 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.6014837602551064 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.43811402240945 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.274491998884413 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.110944624105211 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.9470898057078267 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.783569132695433 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.620162300441576 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.456285399359626 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.29232043604697 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.128569331398622 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.9646069191871804 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.800899890364793 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.6371782578920062 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.4733238407454565 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.3095672726631165 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.1459380653855713 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9822259072175961 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.8185451886592767 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6548819931185975 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4912813799030285 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.32755290378223767 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.16378934179718171 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   32.7s finished

    1995 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  16.289 seconds)

**Estimated memory usage:**  1923 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
