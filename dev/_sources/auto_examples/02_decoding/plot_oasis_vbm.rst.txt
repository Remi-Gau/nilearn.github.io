
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-142

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 143-145

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 145-158

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 159-161

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 161-176

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f9a926544c0>



.. GENERATED FROM PYTHON SOURCE LINES 177-179

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 179-223

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 238.53302001953125 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 41.766806840896606 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 38.93536019325256 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 37.89988374710083 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 37.23961400985718 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 36.739800453186035 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 36.5268878142039 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 36.316564900534495 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 36.11121940612793 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 35.86531896061367 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 35.67988038063049 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 35.544053142721005 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 35.30241640408833 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 35.07766208281884 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 34.986656529562815 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 34.89527543385824 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 34.712748289108276 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 34.561320178649005 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 34.431295765770805 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 34.264516943379455 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 34.119908809661865 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 33.97709820384071 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 33.87878751754761 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 33.73925331364507 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 33.66104666392008 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 33.4765305519104 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 33.38043720905598 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 33.19700994314971 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 33.03504388672965 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 32.83832115140454 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 32.66685859362285 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 32.42222901313536 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 32.211429834365845 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 31.989248485276192 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 31.77396946794847 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 31.535626888275146 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 31.34785975350274 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 31.1551153724258 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 30.918022306341875 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 30.70191247035296 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 30.48356342315674 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 30.26345091331296 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 30.053032296044485 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 29.88032765721166 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 29.715382836081766 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 29.50903730922275 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 29.320473639861397 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 29.136628526322383 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 28.975302298863728 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 28.765115971467935 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 28.611138582229614 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 28.41870961002275 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 28.23508409353403 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 28.06881647289924 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 27.888592340328074 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 27.68752046064897 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 27.496082987104145 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 27.293751536754137 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 27.11921351531456 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 26.926143322960804 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 26.730667432149254 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 26.542749596423793 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 26.345943112527166 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 26.14271763771299 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 25.95065227150917 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 25.755583928181576 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 25.556236281539455 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 25.351586181726027 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 25.174935957964728 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 24.993770665016726 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 24.793521574565343 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 24.58939164121386 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 24.387095981174046 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 24.200633199247598 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 24.014277664390768 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 23.824000755945843 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 23.63097563542818 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 23.446668426711838 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 23.25384338085468 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 23.07964076875131 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 22.889708518981934 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 22.70054265893536 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 22.504547595977783 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 22.31388015919421 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 22.11741634777614 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 21.92770667637096 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 21.73528612491696 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 21.54736980076494 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 21.367995435541324 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 21.200759828760383 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 21.013972732755875 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 20.824648217840508 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 20.632049653841104 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 20.448451613867157 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 20.24900203055524 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 20.055066911797777 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 19.873607456684113 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 19.676969592104253 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 19.496297588153762 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 19.311929813539138 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 19.120270252227783 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 18.92145502921378 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 18.74173576224084 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 18.543586580498705 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 18.345189241262585 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 18.15985550199236 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 17.96333564002559 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 17.769461471343707 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 17.593343513983267 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 17.401611689033857 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 17.219227292320944 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 17.03691190427488 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 16.8494633436203 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 16.655941182533198 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 16.461699565251667 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 16.267997233763985 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 16.077571663363226 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 15.891631262934107 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 15.693509396860156 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 15.49494844725152 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 15.305627028147379 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 15.11253827071387 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 14.922246706290323 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 14.726796758853322 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 14.53341987056117 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 14.343897771835326 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 14.150864714667911 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 13.964525718388595 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 13.7739377617836 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 13.589638780253802 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 13.395498385796179 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 13.211889911243933 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 13.022007674881905 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 12.831121459043116 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 12.63860508932996 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 12.45302215328923 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 12.262181450338925 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 12.068153393529627 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 11.876578859660937 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 11.6848667731388 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 11.494125979287283 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 11.308322898039581 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 11.120813312664838 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 10.928604055951524 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 10.739799751175775 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 10.548945147415687 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.36912346539432 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 10.175680218910685 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 9.983816926543778 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 9.792306527195361 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.599194049835205 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.407164540511882 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 9.219603839673493 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 9.027168766345854 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 8.83394870510349 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.642356534158031 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.450564745144966 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.258575225331981 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 8.06512518774105 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.871621934123009 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.677967667579651 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.485312250089942 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.294641259275837 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.1019095248239905 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.90901835953317 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.716063362179381 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.524239387856908 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.333605807698415 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.141218684968494 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.947577695169392 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.755251856411205 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.565639572533947 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.374739053637483 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.185052790393719 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.992845612010737 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.800376994269235 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.610503240065141 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.4186050285727285 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.229043282819598 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.039828050069969 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.8481259875827365 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.6565174476876443 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.464083789469121 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.2716234603214787 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.07912017988122 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.888300676603575 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.695764374989335 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.5034901432812533 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.311837815223856 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.1190802887003257 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.9261093892549213 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.7335329530126762 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.5412536660830178 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.3484005878626373 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.1558716837892828 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.9633174920693421 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.7705232123939357 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5778253272100149 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.38515073362022945 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.19255645311058467 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   38.5s finished

    2012 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  30.583 seconds)

**Estimated memory usage:**  1849 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
