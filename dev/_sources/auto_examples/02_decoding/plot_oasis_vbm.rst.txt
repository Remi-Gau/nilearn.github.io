
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (:term:`VBM`)
to study the relationship between aging and gray matter density.

The data come from the `OASIS <https://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard :term:`VBM` pipeline (using SPM8 and
NewSegment) to create :term:`VBM` maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the :term:`ANOVA` step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the :term:`ANOVA` step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

:term:`SVM` weights are very noisy,
partly because heavy smoothing is detrimental for the prediction here.
A standard analysis using mass-univariate :term:`GLM`
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 112-123

Prediction pipeline with :term:`ANOVA` and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

In nilearn we can benefit from the built-in DecoderRegressor object to
do :term:`ANOVA` with SVR instead of manually defining the whole pipeline.
This estimator also uses Cross Validation to select best models and ensemble
them. Furthermore, you can pass ``n_jobs=<some_high_value>`` to the
DecoderRegressor class to take advantage of a multi-core system.
To save time (because these are anat images with many voxels), we include
only the 1-percent voxels most correlated with the age variable to fit. We
also want to set mask hyperparameter to be the mask we just obtained above.

.. GENERATED FROM PYTHON SOURCE LINES 123-149

.. code-block:: default


    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 150-152

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 152-165

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-183

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fceb93a3fa0>



.. GENERATED FROM PYTHON SOURCE LINES 184-186

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 186-231

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 212.25452423095703 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 38.05682182312012 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 35.204529762268066 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 33.928183794021606 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 33.41522741317749 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 33.027546644210815 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 33.18064578374227 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 32.87334421702794 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 32.614288330078125 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 32.34886338975694 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 32.15709900856018 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 31.917899478565566 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 31.76659321784973 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 31.82308893937331 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 31.657796859741214 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 31.532239198684692 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 31.396900296211243 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 31.23493863554562 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 31.167916854222614 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 31.154304880844922 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 30.93657088279724 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 30.71858893121992 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 30.529069857163865 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 30.345210282698922 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 30.414358615875244 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 30.193551540374756 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 29.990918948100163 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 29.782126126465975 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 29.579991374697006 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 29.38388677301078 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 29.154805342356365 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 29.071990374595885 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 28.876788675785065 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 28.684646801515058 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 28.51353558372049 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 28.31509157589504 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 28.14026641845703 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 28.044585762797173 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 27.859539006885733 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 27.68775966228583 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 27.4996280670166 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 27.30925208766286 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 27.15189282099406 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 27.02637947991837 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 26.8287991176952 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 26.64037206437853 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 26.454397854597673 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 26.269184285021844 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 26.095003406206764 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 25.974176888563196 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 25.789637088775635 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 25.60129216138054 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 25.40574943102323 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 25.282075517582445 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 25.10382659346969 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 24.958101315931838 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 24.76720598765782 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 24.58687276589243 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 24.412306037442434 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 24.223259731874627 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 24.029541969299316 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 23.885846294340542 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 23.701283939423096 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 23.51668318112691 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 23.335694909095764 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 23.144733227216282 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 22.96595633391178 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 22.822658040630284 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 22.6350119674907 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 22.447082961814992 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 22.259957041059224 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 22.075606997583954 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 21.892894321017796 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 21.757453441619873 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 21.582507288133776 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 21.399320363998413 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 21.220379264731157 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 21.037538302409185 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 20.855932828707573 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 20.706413673449166 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 20.52813470363617 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 20.35078752776723 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 20.170142999509483 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 19.988265442560955 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 19.808107818875992 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 19.64684124553905 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 19.48242313917293 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 19.307948605767614 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 19.132988279516045 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 18.952805958437114 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 18.781818204455906 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 18.61380013004764 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 18.4640778562297 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 18.284574185648275 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 18.108820570276137 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 17.932403702484937 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 17.75575828552246 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 17.579931581143253 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 17.427901253408315 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 17.252793020672268 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 17.075229167938232 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 16.90166408944838 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 16.72507172939824 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 16.549767214117697 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 16.39186983842116 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 16.215612831569853 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 16.041599048758453 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 15.872691205728835 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 15.701901532985547 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 15.528904862360124 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 15.370592464100232 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 15.196505063288921 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 15.022027935300555 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 14.848389564362247 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 14.673563543118929 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 14.497806466144063 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 14.341717341850543 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 14.168816613335895 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 13.994693149954587 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 13.823356696537564 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 13.648699601491291 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 13.473201531024019 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 13.312185862025277 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 13.137758318970842 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 12.96626231747289 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 12.797076416015624 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 12.621295387782748 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 12.445892257014597 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 12.286177173256874 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 12.127815414768781 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 11.95583888200613 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 11.784994409284518 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 11.615432775381839 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 11.445041581204064 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 11.283913050124895 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 11.111989657084147 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 10.9398993323831 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.768182648359424 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 10.595864548199419 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 10.425302934303557 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 10.261990581239973 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 10.100539205767584 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.92972387394435 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.758033662409215 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.586249298519558 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 9.413586073908313 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 9.25062325882585 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 9.077248059162477 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.905661531396815 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.7336537501956 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.562074263890583 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 8.390007974296216 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 8.223896704222026 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 8.05488963376463 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.883238848153646 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.711653263338151 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.539437758616912 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.367420090231926 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 7.201651431337186 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.031003887548387 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.861374080181122 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.68986137313132 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.518939489199791 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.34692089981828 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.179740225396505 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.008961518605551 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.837449260504849 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.666208101603799 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.495283808026994 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.32400542744518 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.15644084706026 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.9848990189401725 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.814759731292725 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.643562232827865 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.472856225638554 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.304033313478742 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.13193206353621 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.9605109503040206 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.7889759862021113 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.6171255391403285 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.445183886422051 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.275811612935356 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.1037016674712463 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.9313446289854626 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.7590939687645952 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.586973931338336 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.4146306848013275 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.2434814078285097 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.0708426668288857 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.8982556824961667 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.725696325302124 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.5532762617340887 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.38082355260849 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.2094827674213469 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.0367638917313409 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.8640753489274244 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6913700590328293 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5185267562188473 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3457280024133548 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1729612542157197 seconds remaining)
    2006 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 17.221 seconds)

**Estimated memory usage:**  1903 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
