
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fc06fb8c9d0>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 268.45455169677734 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 49.772156953811646 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 46.30357503890991 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 44.79876772562663 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 44.109163761138916 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 43.894201040267944 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 43.819630543390915 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 43.20761431966509 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 43.02951622009277 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 42.56049031681484 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 42.26593375205994 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 42.30187621983615 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 41.92750175793965 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 41.70418161612291 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 41.35798399788993 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 41.03315464655559 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 40.690927505493164 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 40.3844628053553 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 40.1583694352044 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 39.8819921518627 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 39.63229250907898 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 39.365411644890195 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 39.153355750170626 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 38.96318575610285 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 38.684085845947266 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 38.44939970970154 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 38.20729483090914 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 37.94843339920044 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 37.694192205156604 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 37.443860637730566 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 37.16328398386638 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 36.906487318777266 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 36.75533849000931 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 36.607079989982374 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 36.40835084634669 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 36.32894703320095 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 36.10213565826416 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 35.86646104503322 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 35.67317842182361 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 35.4252702945318 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 35.18261528015137 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 34.96107153776215 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 34.72427080926441 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 34.49794778158498 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 34.25269811803644 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 34.014655907948814 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 33.77615269370701 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 33.553644494807465 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 33.3309766848882 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 33.10104311242396 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 32.85305070877075 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 32.61210634661656 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 32.406466245651245 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 32.17267869553476 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 31.939536333084106 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 31.740176287564363 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 31.63616057804653 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 31.417480079751265 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 31.211898795489603 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 30.990533303406277 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 30.76631832122803 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 30.54012384180163 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 30.305764859722505 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 30.083244876256064 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 29.85665014386177 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 29.632004664494442 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 29.411703658826422 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 29.202923084372905 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 28.97605928252725 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 28.753188568612803 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 28.523795093808857 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 28.32078800067096 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 28.092474619547524 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 27.863754073234453 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 27.63868900247522 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 27.46709982554118 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 27.23871716700102 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 27.037865062812706 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 26.81389225446261 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 26.609167690518536 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 26.38218104839325 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 26.16101040369199 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 25.935282015218966 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 25.73574079375669 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 25.51048189117795 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 25.289941156611725 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 25.063604726347812 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 24.84727672050739 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 24.621478687633168 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 24.390522359462267 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 24.16917443275452 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 23.94175790168427 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 23.71494561692943 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 23.510943256398686 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 23.288393482248832 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 23.05831989489104 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 22.85069723924001 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 22.63107922396709 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 22.40894273349217 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 22.189866301989312 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 21.958987951278687 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 21.749590385078204 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 21.521767550823736 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 21.301589488983154 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 21.090307749234714 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 20.87541046596709 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 20.65406451585158 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 20.453287579188835 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 20.229126568193788 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 20.015907814743322 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 19.799333290620286 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 19.57281877758267 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 19.34768976484026 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 19.1234298490845 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 18.903175512949627 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 18.689375867014345 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 18.481350093052306 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 18.25723668652722 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 18.031864275366573 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 17.811796542977085 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 17.588210423787434 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 17.369399518020884 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 17.145703389996388 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 16.92613263440326 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 16.715647866649014 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 16.503948068618772 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 16.27933784515139 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 16.05525174103384 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 15.831749707460403 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 15.61598373198694 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 15.39748872243441 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 15.180850387529562 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 14.955727996248187 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 14.73241352497187 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 14.51008327683406 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 14.28884168907448 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 14.068079555735869 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 13.84675252002521 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 13.630323451498281 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 13.408037648784171 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 13.18534255027771 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 12.962872342860445 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 12.741429893063827 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 12.518009247479739 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 12.295452939139473 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 12.073121054419156 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 11.853131718831518 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 11.634924363116829 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 11.417686178877547 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 11.196118052373796 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 10.974555730819702 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 10.753209924066303 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 10.531545864908319 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 10.310553348142339 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 10.092188002227187 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 9.87488958143419 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 9.653681406607994 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 9.432456590567424 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 9.213222796403908 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 8.992710458407611 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 8.773226082324982 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 8.553012353292903 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 8.33372355684822 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 8.113392692402096 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 7.892401073037124 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 7.672482974601515 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 7.452669738286949 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 7.234893386235494 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 7.01503258659726 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 6.794776229463385 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 6.5773691570057595 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 6.360766261641742 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 6.143367817235548 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.924036003950704 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.704834072069191 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.4843537126268656 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 5.265852570533752 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 5.046675598554018 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.827512966113144 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.608799572097523 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.388916095097859 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 4.169735119487699 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.9499145602131938 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.730387270776301 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.5113102664118228 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.29115839906641 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 3.071748977066368 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.8518659953765053 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.632338462991917 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.4128560490078397 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.1934042855312947 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.9739018410288227 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.7544369796911874 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.5349689814710863 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.3155726870310676 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.0962271323570838 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.8768477683164635 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.6576737982367501 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.4383786904691446 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.21917502484728943 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   43.8s finished

    1981 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  37.381 seconds)

**Estimated memory usage:**  1923 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
