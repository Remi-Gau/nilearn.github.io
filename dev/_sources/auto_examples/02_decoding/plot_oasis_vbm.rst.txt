
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f6beabdfa30>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 201.00116729736328 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 34.707183837890625 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 32.06010317802429 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 31.290795167287193 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 30.746825218200684 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 30.334147453308105 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 29.94104822476705 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 29.68111446925572 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 29.886320114135742 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 29.55317234992981 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 29.316827535629272 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 29.140426787463102 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 28.930250565210976 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 28.750450501075157 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 28.557343687329976 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 28.392463048299156 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 28.214024782180786 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 28.029075075598325 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 27.821169508828056 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 27.64000779704044 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 27.476622104644775 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 27.30725562004816 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 27.11017935926264 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 26.958247692688655 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 26.796963691711426 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 26.637165069580078 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 26.461430861399723 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 26.29615487875762 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 26.120490959712438 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 25.935209340062634 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 25.77276388804118 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 25.62913822358654 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 25.461083829402924 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 25.29523000572667 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 25.137474915560556 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 24.980628081730433 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 24.842919720543755 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 24.706314041807843 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 24.537015212209603 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 24.387060892887607 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 24.249553680419922 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 24.088223271253632 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 23.925267230896722 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 23.768393350201983 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 23.599291498010807 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 23.442321406470406 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 23.280345191126287 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 23.127249758294287 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 22.960139274597168 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 22.7954284123012 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 22.64181089401245 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 22.488810006309958 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 22.338988505876983 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 22.193814039230347 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 22.040524774127537 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 21.879307595166292 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 21.724327223641534 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 21.60857339909202 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 21.4582334304678 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 21.303295091047126 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 21.157903035481773 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 21.010302539731637 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 20.860695292872766 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 20.7052541687375 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 20.549272507429123 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 20.396783351898193 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 20.245133103746355 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 20.101362943649292 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 19.948437494390152 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 19.79327840735947 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 19.64010671206883 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 19.486722274565363 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 19.33300018310547 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 19.18507333977582 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 19.034463412052876 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 18.883188168207806 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 18.730616205617 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 18.583954170152737 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 18.430667754931328 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 18.27771099307869 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 18.12568509578705 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 17.973177583129317 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 17.8153842367777 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 17.665730263813433 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 17.50996002696809 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 17.35824099709006 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 17.206560107164602 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 17.057475903938556 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 16.904936920512807 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 16.750055471163115 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 16.599946286943226 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 16.450806112079828 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 16.300812565762065 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 16.153199421462194 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 16.00386099612459 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 15.852618907627308 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 15.702195405960081 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.551076269641365 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 15.401203539906717 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 15.251364488794344 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 15.10306167602539 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.953306271298096 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 14.804472292170805 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 14.6554804774164 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 14.506618573115423 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 14.353552352814447 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 14.203988943459853 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 14.053006263536828 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.900252730758101 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.749853490689478 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.600744355808606 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 13.452642576114552 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 13.301999415670123 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 13.154160925772338 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 13.003160037492451 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.850588114365287 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.699264172849984 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.550153834188087 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.398152432199252 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 12.245842322581957 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 12.093329111735025 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.941943367650687 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.788708424959028 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.636226997142884 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.485116004943848 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.33333830833435 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.18234220005217 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 11.031131243142555 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.882995754480362 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.731078866840333 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.57824919773982 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.425719190189856 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.272766301126191 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.121899920298642 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.969649005292066 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.81797683680499 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.665621140423942 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.513114478466285 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.360187309375707 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.207752433612193 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.056048665727888 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.904751113120545 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.753419493285703 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.603343541805561 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.451168616612753 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.299271049170658 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.148255635614264 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.997680089911636 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.845992126980343 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.6953274035613815 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.543978611628214 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.392359188850352 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.240439189107794 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.0890509801752435 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.937634604317801 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.7859420161093436 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.63473245425102 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.485157094943295 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.334155447875396 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.18260026277986 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.031508207321167 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.880801214194446 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.729454973597585 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.578947370037711 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.427939909260448 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.277430129773689 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.126741012894963 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.975692075169729 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.824600492204938 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.673876814588287 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.5225485633401314 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.3713254844933225 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.220297170239826 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.069662726683424 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.9189614071243115 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.7679068361009866 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.6168929880315606 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.465882220510709 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.31548999132735 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.164703365144783 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.013811906178792 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.8631729631792773 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.7122502274565643 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.5614110759047213 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.4104936226554536 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.2595726541570715 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.109011798776606 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.9583066988756312 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.807566480433687 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.6567997692754028 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.5061827207866467 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.355646383075814 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.205031394958496 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0544190863871203 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9038477484712896 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7532388124710474 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6025699158104099 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4520033035181501 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.30133700852442274 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.15065858831357717 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   30.1s finished

    1996 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  16.273 seconds)

**Estimated memory usage:**  1880 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
