
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7ff9651a3430>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 282.7334403991699 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 53.54861283302307 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 49.980353593826294 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 49.32561922073365 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 48.15611386299133 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 47.00369095802307 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 46.39253441492717 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 45.8291095324925 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 45.36966133117676 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 44.83237857288784 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 44.52071785926819 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 44.173112609169706 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 43.91922426223755 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 43.752386606656586 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 43.426607302257 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 43.565883080164596 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 43.31767547130585 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 42.92476979423972 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 42.719233751297 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 42.62420936634666 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 42.44287848472595 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 42.154145513262065 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 41.84568357467652 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 41.68712440780972 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 41.41737461090088 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 41.102394342422485 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 40.841098253543564 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 40.54868984222412 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 40.25802527155195 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 40.00535833424535 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 39.71853574117025 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 39.46051802173737 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 39.21331322193146 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 38.95748029333173 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 38.66554556173437 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 38.39117390768869 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 38.11844089296129 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 37.892205115911125 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 37.62675344316583 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 37.390824764202804 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 37.177130699157715 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 36.91827076818885 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 36.66210150718689 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 36.44920486073161 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 36.22714493491433 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 36.01061934894986 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 35.755157180454425 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 35.52029839982378 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 35.273072481155396 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 35.064068351473125 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 34.854798316955566 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 34.61864735098446 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 34.36679957463191 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 34.12942997014748 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 33.89548421789099 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 33.699848760258064 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 33.4589536530631 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 33.23766257051836 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 33.024329834970935 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 32.8520552546291 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 32.61837951342265 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 32.41118757842017 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 32.24616177620426 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 32.01800214298188 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 31.809499621391296 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 31.5806669822106 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 31.406698241378322 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 31.162806034088135 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 30.959161015117868 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 30.719396401142728 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 30.475829124450684 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 30.256544442243978 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 30.027947743733723 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 29.79458307566708 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 29.567110931551134 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 29.348013401031494 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 29.122757070942928 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 28.899528748029237 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 28.663359079605495 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 28.438546280317667 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 28.219636917114258 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 28.011834630259763 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 27.800240819047136 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 27.5503626099552 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 27.33981518518357 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 27.093782621271473 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 26.857084019239558 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 26.631766513846387 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 26.414193283427846 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 26.16818905680367 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 25.928134785758125 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 25.691672621192513 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 25.442788746045984 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 25.223636340069515 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 24.979974523503728 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 24.74384130929646 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 24.507750630378723 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 24.26503792005716 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 24.02618235957866 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 23.778735726770726 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 23.54880666732788 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 23.316084049715855 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 23.08561656521816 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 22.85574026478147 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 22.62130803328294 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 22.39436173439026 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 22.157978341264545 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 21.933898513562212 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 21.71228670190882 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 21.47621753893861 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 21.243122707713734 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 21.004655200081903 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 20.783255066190446 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 20.544006725328156 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 20.30574123064677 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 20.073496248411093 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 19.833394930280488 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 19.59635320891682 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 19.36164695933714 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 19.13262746314041 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 18.896639823913574 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 18.660133554915753 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 18.42125776947522 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 18.19042696022406 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 17.951454847089707 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 17.712667751312257 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 17.47604010597108 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 17.234954218226154 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 17.0040086209774 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 16.77451604096464 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 16.54230233339163 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 16.29960567532605 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 16.063749768517233 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 15.832100518664024 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 15.5956912930332 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 15.358205839439673 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 15.12766030255486 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 14.895360325374742 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 14.656263323797695 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 14.424749069076647 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 14.188215902873447 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 13.96533225275946 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 13.742223340021054 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 13.507677330003752 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 13.270052274068197 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 13.031006229334864 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 12.790021625283645 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 12.549632156787276 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 12.31172494630556 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 12.07256480191378 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 11.836623827616373 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 11.598001958518628 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 11.362548652448151 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 11.12167827444139 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 10.887679016435301 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 10.647849475183795 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 10.407138830576187 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 10.168760767408237 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 9.930722951889036 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 9.693021304952273 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 9.455056548118591 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 9.215720810505175 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 8.978217307432198 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 8.741454833855657 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 8.502692699432373 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 8.263119191834422 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 8.02432344333235 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 7.787286278730381 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 7.549758229936872 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 7.312375459445298 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 7.0747805903939645 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 6.839322474964877 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 6.604417778724848 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 6.367111568506053 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 6.129536686272457 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.893035377774919 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 5.657161799344149 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 5.420227912859728 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 5.183347426103742 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.947254139617835 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.711575931972927 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 4.476294558351211 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 4.239742983828534 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 4.00305087188554 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.766220030577286 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.5304865063847726 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 3.294340297739993 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 3.0581969615609887 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.8225921367077116 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.58808223784916 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.352110084734465 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 2.116598202920085 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.8809849619865417 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.6459139171659636 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.4106494643024563 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.1755048923003368 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.940340183219131 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.7053176872621333 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.4701317922033445 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.23506906763393076 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   47.0s finished

    1978 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  39.336 seconds)

**Estimated memory usage:**  1846 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
