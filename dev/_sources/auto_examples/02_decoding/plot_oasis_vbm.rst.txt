
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f89ec32b6a0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 142.30966567993164 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 24.465025186538696 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 22.642826557159424 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 21.90958110491435 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 21.40440344810486 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 21.09044122695923 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 20.87380131085714 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 20.772198370524816 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 20.59673309326172 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 20.478749434153237 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 20.34723973274231 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 20.238034811886877 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 20.132635434468586 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 20.003341693144577 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 19.87328164918082 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 19.75490951538086 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 19.657323360443115 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 19.58216782177196 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 19.454474714067246 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 19.3282183220512 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 19.218930959701538 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 19.086690039861768 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 18.99550084634261 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 18.881301206091177 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 18.76112906138102 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 18.658411026000977 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 18.54251080292922 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 18.430598126517403 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 18.346780981336323 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 18.22317569831322 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 18.119630018870037 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 18.013970259697206 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 17.903436720371246 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 17.78275462352868 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 17.673003098543955 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 17.568079233169556 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 17.458253145217896 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 17.388582693563926 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 17.269014358520508 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 17.15800708990831 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 17.041519165039062 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 16.92523924897357 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 16.80863778931754 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 16.695540733115617 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 16.58416544307362 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 16.490209288067287 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 16.38820088428 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 16.27418896999765 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 16.166131615638733 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 16.056406848284663 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 15.954068899154663 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 15.839675683601229 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 15.725452881592972 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 15.616261360780248 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 15.502632132282963 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 15.390705758875066 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 15.276015349796841 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 15.163427043379398 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 15.058246916738048 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 14.953578520629364 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 14.848669290542604 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 14.737021371966502 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 14.626198422524235 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 14.51332134292239 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 14.410652756690979 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 14.299341036723211 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 14.190317125031441 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 14.084208655713208 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 13.9823359040653 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 13.87547432858011 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 13.766775267464775 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 13.666290249623044 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 13.5760866800944 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 13.481402158737183 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 13.380610440228436 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 13.276032209396362 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 13.169757541857267 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.066037354531225 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 12.961944586191422 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 12.893097684353211 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 12.785382270812988 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 12.677726539564722 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 12.57143312547265 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 12.465477334447653 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 12.357419343221755 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 12.24512205404394 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.136159059613249 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.029169737607583 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 11.91909577629783 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 11.809743991058863 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 11.703267680274116 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 11.593193227118189 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 11.486678216768349 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 11.37708451158257 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.267303309542067 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.158761564053988 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.050018390019734 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 10.942157686371164 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 10.8330954872832 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 10.723306135697797 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 10.613998889923096 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 10.504827990390286 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 10.397870839810839 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.288617784537157 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.179522734421951 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.075628030867804 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 9.968246158563867 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 9.862145929693062 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 9.754724714491102 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 9.64747843611131 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 9.540534951470116 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 9.433573920447547 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.328962479318891 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.221240917138294 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.114319115354304 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.007182598114014 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 8.900629397096305 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 8.792933539447622 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 8.685274120104516 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 8.57748869887921 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 8.470178127288818 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.363417166323702 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.256527494211667 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.150741993896359 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.044274906958304 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 7.937527227401733 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 7.8309367459917825 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 7.723264172321229 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 7.615908533334732 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 7.510449607242909 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.404915424493643 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.2983522797358855 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.1910114794066455 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.083922450703787 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 6.97693158975288 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 6.870845997775042 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 6.763699026668773 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 6.656774715785563 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.551571459010027 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.445232029441449 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.340104818344116 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.233934448120442 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.127728250664725 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.02094711957278 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 5.915050639046563 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 5.80864038138554 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 5.702150766163656 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.5960316122794636 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.4895047432667505 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.382999869801054 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.277238289515177 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.171075369348589 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.065641327908164 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 4.959658504311555 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 4.853960198241395 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.748053873738935 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.64231241055024 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.5367232386473635 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.430784113799469 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.325330843715547 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.219397604465485 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.113574522622624 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.00773157602475 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 3.90311067821058 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.7975608604710276 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.6918014324072637 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.585921336369342 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.480130622486868 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.374227977934338 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.2689702792985904 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.163217993343578 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.057416284293459 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 2.95168211293775 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.845890382810824 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.7402517028238584 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.6344825880868092 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.528907017274336 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.4234850662576277 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.3183563907494706 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.2127673306278677 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.1073427730136447 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.001940275424093 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.89651064820342 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.7910544390235443 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.685545776201331 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.5800523886809479 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.4749682590525637 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.3694856039343033 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.2640982029285837 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.1586620731959267 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.0531769300761975 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.9477814117651335 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.8423880040645599 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7370029360519171 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6316384261416406 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5262961998963968 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4210014489232277 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3157185515776504 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.21045837257847644 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.10522197239363014 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   21.0s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  56.658 seconds)

**Estimated memory usage:**  1943 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
