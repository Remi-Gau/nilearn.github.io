
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f75faa2a220>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 244.81773376464844 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 39.47648000717163 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 37.19661283493042 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 36.48090394337972 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 36.00444555282593 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 36.051984786987305 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 35.77254430452983 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 35.41684436798096 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 35.32349395751953 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 35.01304083400302 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 34.79864144325256 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 34.67518888820302 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 34.240010261535645 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 34.26537775993347 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 33.875602790287566 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 33.50028657913208 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 33.180707812309265 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 32.85146776367637 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 32.594268480936684 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 32.36999180442409 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 32.10063028335571 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 31.896616368066695 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 31.619789643721152 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 31.355608836464263 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 31.088401158650715 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 31.022731065750122 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 30.798607899592472 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 30.557184440118295 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 30.29003749574934 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 30.109685059251454 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 29.963165521621704 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 29.734410816623317 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 29.575214624404907 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 29.360269582632817 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 29.114201896330894 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 28.87790322303772 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 28.66422594918145 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 28.449211932517386 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 28.255853853727643 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 28.105198823488678 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 27.880403518676758 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 27.677525369132436 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 27.467499494552612 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 27.320701588031856 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 27.147218552502718 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 26.97174072265625 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 26.76724764575129 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 26.545077034767637 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 26.36818750699361 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 26.182393901202143 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 25.986449003219604 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 25.829544586293835 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 25.625250431207512 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 25.450981473023038 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 25.251774346386945 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 25.049278064207595 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 24.862326008932932 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 24.671268220533403 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 24.464741690405482 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 24.260278338092867 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 24.056629260381065 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 23.905743985879617 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 23.800208930046324 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 23.593723051131715 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 23.429961264133453 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 23.246803577129658 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 23.058814908518936 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 22.868482774762963 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 22.677391248590805 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 22.494493950968202 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 22.31304383277893 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 22.14243241431008 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 21.999896579318577 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 21.831821131379638 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 21.64713425894041 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 21.467188199361168 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 21.28054141998291 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 21.107662392901137 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 20.942573877481315 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 20.759103720701194 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 20.577183723449707 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 20.388548306476924 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 20.205325522073885 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 20.01972761211625 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 19.840776466187975 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 19.659294563181263 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 19.48664674093557 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 19.300717499064305 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 19.124442447315563 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 18.952659065803783 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 18.775948815875584 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 18.598322071871912 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 18.417158883550893 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 18.254486817185597 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 18.07640526142526 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 17.893771573116908 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 17.717609842618305 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 17.540292855390568 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 17.370572411284154 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 17.201539003487788 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 17.02620553970337 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 16.846186425426218 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 16.671501921672448 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 16.495253322193925 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 16.320915588965782 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 16.144321725482033 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 15.981496257602045 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 15.828984842122157 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 15.663213932955706 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 15.491638343268578 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 15.367462374947289 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 15.200480136785421 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 15.042408568518502 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 14.87422176588953 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 14.694813059087386 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 14.514615794886712 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 14.334056262312265 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 14.15488280190362 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 13.9768862845534 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 13.798554043809908 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 13.621427694956461 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 13.444806031944339 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 13.267497656775303 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 13.091448562901194 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 12.914134540865499 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 12.739610481262206 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 12.561773591571384 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 12.383737160464909 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 12.20805448293686 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 12.033213216204976 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 11.859057499812199 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 11.685773865867207 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 11.512114676562222 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 11.33729905114138 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 11.16399430872789 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.989716000027126 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 10.816195656271542 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.642781302876715 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 10.47073853879735 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 10.299308956955834 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 10.126360518591744 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.955314933830964 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.783097777568118 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.61089483341137 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.438972896999783 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 9.266075611114502 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 9.093654420277844 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.921409603689805 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.748150342219585 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.575671264789248 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.4032142162323 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 8.232427079156535 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 8.060495476973683 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.888855613135045 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.7172615559070135 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.545553853434901 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.37444823827499 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.20380589309012 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 7.033211665817453 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.862283427760286 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.691541016101837 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.520637005752659 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.351465001518343 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.183164814498527 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.013810402009545 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.843996633182873 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.674790982740471 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.506125147471171 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.3371204648699075 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.167841277884309 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.999277830123901 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.830999993441398 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.662718340407971 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.494870462858608 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.326519727706909 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.158752202987671 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.9910691109570586 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.8235860463589595 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.6563113084000145 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.489385595534767 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.321727938122219 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.1543984110184136 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.9876733140631035 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.8208327931784543 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.654127660004989 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.4877079950796595 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.3211254150636735 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.1553404675448005 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.9891856325433608 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.8229321260300893 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.6565686276084497 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.4907181824689137 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.3246225118637085 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.1587150306899312 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.993020753270572 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.8273463493738419 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6617103644779749 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4961710859676303 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.33073598206645316 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1653336556113545 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   33.0s finished

    1996 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  24.640 seconds)

**Estimated memory usage:**  1902 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
