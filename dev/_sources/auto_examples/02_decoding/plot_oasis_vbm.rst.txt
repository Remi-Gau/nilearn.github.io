
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fc879ffac70>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )  
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 181.4889907836914 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 30.69260001182556 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 28.46027183532715 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.67248590787252 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 27.12956953048706 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 26.74968981742859 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.436026652654014 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.323961155755182 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.071374893188477 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 25.887433263990612 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 25.67189598083496 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.49037434838035 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.330009698867798 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.206425960247334 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.08832894052778 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 24.91401823361715 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 24.7531156539917 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 24.59794159496532 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.431919521755642 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.26584687985872 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.12359046936035 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 23.981036356517247 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 23.8410890752619 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 23.732883919840276 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 23.597531477610268 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.446220874786377 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.300403081453766 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.15986614757114 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.01187838826861 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 22.86150657719579 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 22.718125025431316 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 22.58256256964899 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 22.4464191198349 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.300832813436333 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.163765935336844 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.03395336014884 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 21.889949798583984 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 21.756813751684653 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 21.614712351246887 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 21.48774339602544 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.359954833984375 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.220284898106645 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.082517362776258 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 20.94576072138409 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 20.806244698437776 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 20.67393199602763 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 20.538058156552523 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.404855408567062 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.266945560773213 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.132714602412012 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 19.998499631881714 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 19.865655824249863 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 19.737415827237644 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 19.617922337550038 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.486333944179393 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.354622385718606 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.216614450727192 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.083244415751672 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 18.950640505757825 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 18.819350032483115 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 18.685033798217773 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.551324359706193 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.41593237846128 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.27884252487667 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.144626259803772 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.012167160327618 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 17.87789777553443 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 17.747005060537536 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.61392636860118 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.48177258519159 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.3450597013746 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.208658087421473 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.075074089898003 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 16.939492888646583 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 16.803151652619643 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.666957139968872 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.532694000946847 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.40049127170018 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.26608470158699 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.131696580331536 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 15.99834930896759 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 15.864396851739766 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 15.728875997589855 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.593361914875995 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.457803465071178 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.322589509627399 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.189863271491472 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.056468796455999 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 14.92204562100497 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 14.7936225205325 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.662175602383085 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.53129243850708 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.4012334243111 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.26709524790446 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.134311123097197 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.00292141813981 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 13.870251119136809 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.74024711441748 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.615468112789856 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.48110344915679 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.346840143203735 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.214376395291621 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.082517909068688 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 12.948072627910133 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 12.813951345590445 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.680362656002954 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.547292740839833 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.415701320238202 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.281845022130895 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.156315637291025 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.023251403461805 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 11.890887354945278 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.760429756981985 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.627700438541648 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.493986840833697 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.361848706784455 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.228893173152002 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.096211021781986 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 10.964486287812056 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.831314583786396 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.696985880533854 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.566974393592394 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.43352288887149 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.298919898707691 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.166261980610509 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.033308935165405 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.899725092781916 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.765302113660677 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.630747333168983 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.497690740481827 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.364196172127356 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.229729774344058 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.095467321800463 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 8.961821428815226 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.828725330865204 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.696123184981168 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.562407213098863 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.427999607837982 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.293945623480756 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.160438175681684 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.031249659402029 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.896802897148944 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.765290703572019 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.631704735589194 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.498713480101691 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.365222454071045 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.231497816843529 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.098692225761154 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.96522441425839 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.831356715835981 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.6979935963948565 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.564417589579197 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.431267437181974 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.2977491095175155 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.163609071211381 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.02996898466541 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.896186822499985 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.763057944121634 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.629396242431447 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.495835577167055 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.3621140122413635 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.228360937248846 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.094802126472379 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.961488331753784 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.827926612481838 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.69444186037237 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.560940886118326 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.427326419396315 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.293635958716982 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.160117787016919 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.026571975034826 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.8925963368332175 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.758991940076961 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.6250360701125484 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.491025790400889 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.3570575373513356 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.222930680621754 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.0886667811937922 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.9547410359543362 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.820888623179004 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.6868573029836016 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.55266635852624 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.418458100203629 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.284242536200852 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.150062436642854 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.015809188017974 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.8815955474812498 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7477124757307736 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6133795545456255 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.4790806909086842 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3447003364562988 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2102993021460728 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0760016838709512 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9415416593996354 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8070456932500466 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6725557156098194 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5380364291521967 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4035273433336752 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2690165500448208 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13450041008954072 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   26.9s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  8.520 seconds)

**Estimated memory usage:**  1933 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
