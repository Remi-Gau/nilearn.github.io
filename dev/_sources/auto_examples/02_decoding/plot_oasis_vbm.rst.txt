
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7ff1e8c360a0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 386.20471954345703 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 65.22134208679199 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 58.67947196960449 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 56.85557142893474 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 56.043806076049805 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 53.766353130340576 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 52.05684057871501 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 50.94846480233329 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 49.78138732910156 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 48.94407584932115 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 48.184244871139526 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 47.730511210181504 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 47.319294452667236 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 46.74182393000676 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 46.36153956821987 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 45.845967054367065 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 45.58092474937439 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 45.13758549970739 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 44.95831611421373 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 44.67186676828485 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 44.31730914115906 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 44.132647786821636 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 43.77362637086348 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 43.5943005292312 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 43.381220976511635 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 43.296685218811035 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 43.22388333540697 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 43.1893418011842 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 42.78745702334813 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 42.60588376275424 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 42.3686641852061 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 42.1235015930668 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 41.77151262760162 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 41.51941162889654 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 41.16388355984407 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 40.87355548994882 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 40.582301908069184 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 40.25571866937586 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 39.997966703615695 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 39.77165995500027 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 39.519362449645996 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 39.22189223475572 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 38.921815440768285 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 38.67175918956136 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 38.40829688852484 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 38.133638593885635 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 37.85636123366978 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 37.58637747866042 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 37.34389066696167 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 37.065918319079344 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 36.77768683433533 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 36.48482530724768 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 36.19270836389982 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 35.919718036111796 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 35.61429502345898 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 35.36405054005709 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 35.09487370082311 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 34.833681541576716 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 34.54759515565017 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 34.31393237841331 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 34.05622450510661 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 33.807259055434685 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 33.59431367535745 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 33.31712085860116 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 33.09596973657608 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 32.912290169642525 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 32.652012507120766 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 32.407682283600764 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 32.14917145055883 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 31.877420256103296 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 31.627740996224542 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 31.355893286181168 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 31.178817749023438 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 30.958031161190714 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 30.693361043930054 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 30.44389049212138 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 30.182533163773385 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 29.916671015999533 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 29.70103235122485 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 29.443443289285973 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 29.18063521385193 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 28.9200061397788 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 28.715309596643213 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 28.48716791566596 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 28.232498327891033 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 27.97726046337801 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 27.717073684514954 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 27.46360669464901 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 27.21824130144986 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 26.963385190856588 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 26.71662020683289 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 26.466654444788837 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 26.21811806637308 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 25.983791164172594 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 25.732659887760242 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 25.47048098162601 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 25.22247177362442 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 24.96762656182358 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 24.73220147405352 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 24.485914584362142 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 24.228612422943115 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 23.970972691432085 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 23.711626403472003 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 23.459621651658736 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 23.200555141155537 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 22.94019389152527 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 22.67983796011727 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 22.43589733025738 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 22.199073985770898 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 21.950131219461422 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 21.703701691194016 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 21.474876725995863 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 21.223131196839468 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 20.971006254179287 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 20.71974554396512 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 20.47506046295166 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 20.236121794273114 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 19.992328136395187 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 19.747342865345843 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 19.49875943400279 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 19.255954106648762 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 19.011062622070312 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 18.75603159920114 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 18.511567637203186 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 18.266294910061745 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 18.019637632369996 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 17.77785427608187 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 17.530767264328603 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 17.287244528532028 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 17.04288048892058 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 16.816113160206722 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 16.571425732765487 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 16.32512476949981 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 16.079215028232202 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 15.832997336316463 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 15.59412086451495 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 15.352789934943704 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 15.115068656684707 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 14.86994661455569 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 14.629050975223238 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 14.382308925901139 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 14.13787983495293 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 13.895198368690384 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 13.659797460049182 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 13.421654356850519 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 13.178502041718055 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 12.945359621962455 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 12.704895708836666 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 12.461753999864733 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 12.222685820304308 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 11.986897468566895 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 11.745356401860318 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 11.504242545679995 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 11.265374261569354 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 11.027965799554602 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 10.789472187719038 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 10.545808162444677 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 10.306583286091021 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 10.066150288038616 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 9.828799531144917 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 9.598428547382355 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 9.357979112530348 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 9.118974579705132 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 8.876553911372927 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 8.635732202995115 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 8.395989186836012 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 8.155358236956308 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 7.916334008028407 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 7.67458997453962 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 7.4335221708173576 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 7.191299326279585 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 6.953925093712165 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 6.713975856470507 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 6.47182425184746 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 6.229839744239018 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.991062028067452 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 5.752110763029618 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 5.512676571722085 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 5.27094969052947 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 5.030965573294869 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.790219969219631 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 4.548756662653296 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 4.307600773297823 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 4.067299092402224 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.827197365138842 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.5869072901236048 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 3.346512702203566 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 3.1064819346137225 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.866168620738577 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.6274964014689126 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.3879235543702775 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 2.1488696767397575 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.9097299178441365 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.6709186054881988 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.432056773569166 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.1933521918761425 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.9546197920429462 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.7157143251544933 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.47724572335830845 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.23855240261135388 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   47.7s finished

    1967 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  40.315 seconds)

**Estimated memory usage:**  1891 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
