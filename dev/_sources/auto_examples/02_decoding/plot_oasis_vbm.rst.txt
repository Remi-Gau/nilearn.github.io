
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print("")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fbd5ce0be20>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 206.33935928344727 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 44.67724370956421 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 42.45024275779724 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 41.63112084070842 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 41.053661584854126 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 40.494900941848755 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 40.31484794616699 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 40.00817339760917 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 39.6723690032959 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 39.41786588562859 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 39.17535972595215 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 38.98055278171193 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 38.782338221867874 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 38.55902171134949 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 38.30620673724584 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 38.05328265825908 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 37.80991470813751 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 37.60366138289957 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 37.389282915327286 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 37.16491995359722 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 36.94566106796265 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 36.734992912837434 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 36.53853992982344 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 36.3148714977762 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 36.13117980957031 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 35.913949489593506 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 35.708419231268074 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 35.488434623788905 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 35.28050698552813 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 35.05770586276876 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 34.838940938313804 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 34.63376492838705 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 34.43209648132324 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 34.226219314517394 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 34.015784838620355 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 33.800263370786396 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 33.583480517069496 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 33.38149462519465 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 33.17621315153022 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 32.969218437488266 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 32.758907318115234 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 32.5634988052089 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 32.38637520018078 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 32.17127321487249 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 31.957389788194135 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 31.741162962383697 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 31.539110505062602 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 31.336352287454808 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 31.132002353668213 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 30.92171528388043 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 30.711057901382446 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 30.502934745713773 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 30.30073308944702 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 30.09369155146041 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 29.880209251686377 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 29.67162812839855 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 29.468130724770685 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 29.26379566861872 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 29.05614325918 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 28.849516601885778 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 28.64364846547445 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 28.441243081796365 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 28.23303598742331 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 28.02716557563297 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 27.83406427502632 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 27.635080906061027 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 27.432219873775136 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 27.226624937199833 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 27.019908975152408 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 26.81503234738889 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 26.616278341838292 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 26.409258187656672 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 26.205003950330944 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 25.99543950655689 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 25.80037752357689 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 25.59357563654582 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 25.38873838123522 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 25.18678483096036 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 24.978545708534046 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 24.77317764789243 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 24.570380330085754 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 24.36848744639644 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 24.162822374483433 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 23.953018056340966 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 23.746665659404936 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 23.548113710740036 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 23.343650995298873 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 23.134909405105418 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 22.92602356997403 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 22.72047295195333 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 22.513341877195572 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 22.308317718925057 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 22.10060079201408 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 21.895483580968715 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 21.689539452816575 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 21.483942897696245 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 21.279745558897652 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 21.07453999322714 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 20.86673347804011 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 20.659787534463284 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 20.45485019683838 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 20.253082086544225 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 20.04573138554891 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 19.841846442917017 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 19.643753638634315 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 19.44358507792155 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 19.240070509460736 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 19.035676978458866 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 18.82977047672978 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 18.625313800409298 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 18.420586759393867 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 18.215413379239607 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 18.010497042110988 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 17.803801724341064 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 17.59837321649518 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 17.392644716345746 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 17.186971565772748 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 16.980686415973892 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 16.77485866465811 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 16.57034939878127 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 16.36551523208618 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 16.1594630962561 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 15.956386398096555 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 15.751872743048319 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 15.546361054143599 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 15.341809272766113 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 15.13714565549578 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 14.931967571964414 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 14.726341769099236 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 14.521253702252409 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 14.316435685524572 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 14.111539418460758 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 13.905897299448648 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 13.700915404728482 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 13.496641778234226 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 13.293439626693726 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 13.088527903837315 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 12.884350019649867 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 12.680148366568744 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 12.475688243083816 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 12.272710255214145 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 12.067591978303083 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 11.862483340249934 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 11.65768630688007 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 11.452980015012953 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 11.248592327381003 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 11.043889182887664 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 10.83912908463251 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 10.634738097319733 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 10.430986049191263 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 10.226629654566446 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 10.022299078126617 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 9.818506818068654 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 9.61399588397905 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 9.409926628137564 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 9.206751661915934 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 9.002098713165674 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.796356430478916 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 8.592732812784893 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 8.390431573555905 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 8.187332153320312 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.982832852357664 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.777667183934906 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.573326944573525 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 7.3687312428544205 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 7.164641669302276 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.960041439676859 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.755334158857425 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.551195235479446 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 6.347063837672126 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 6.142345737008488 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.937224475960982 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.7322565899338835 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.52760438285122 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.322575708915448 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.117551905768258 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.912774411114779 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.707946486392263 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.503372031651186 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.299003004361797 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.094329251183404 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.889440673490914 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.6847101358266974 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.480001521240818 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.275395642156186 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.070613564671697 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.86593295169133 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.6613068606126755 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.456688820047581 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.251960145102607 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.0473438313132837 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.843192150455495 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.6385640104611714 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.433777143300506 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.2289576948303538 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.0241695061708107 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.8193137840348846 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.6144946371843367 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.40969253068018446 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.20487586577333997 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   41.0s finished

    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  11.238 seconds)

**Estimated memory usage:**  1900 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/0.9.2?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
