
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f787cdc2520>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 265.9153938293457 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 46.27031445503235 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 43.157543420791626 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 42.23782809575399 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 41.83394813537598 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 41.461182832717896 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 41.059532245000206 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 40.58673701967512 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 40.20431900024414 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 39.970544788572525 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 39.69591021537781 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 39.51615324887363 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 39.34653639793396 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 39.136854483531074 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 38.88528759138925 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 38.65078258514404 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 38.433836340904236 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 38.353058001574354 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 38.0351996421814 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 37.80297104935897 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 37.662988901138306 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 37.46754640624636 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 37.2914684902538 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 37.10598554818527 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 36.88998317718506 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 36.676844120025635 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 36.47869365031903 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 36.270504827852605 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 36.1001923765455 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 35.85306548250132 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 35.6611708799998 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 35.46109315656847 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 35.213834166526794 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 35.01780289592165 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 34.77166473164278 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 34.52415612765721 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 34.277762466006806 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 34.03627905974517 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 33.814802960345624 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 33.5884988124554 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 33.376895904541016 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 33.17977262124783 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 32.93672511691139 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 32.73557114601135 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 32.51510414210233 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 32.28293628162808 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 32.09887450674306 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 31.892639332629265 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 31.681285579999287 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 31.46945966506491 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 31.286659240722656 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 31.056198919520657 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 30.82784410623404 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 30.5945214325527 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 30.37453281437909 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 30.175135200673882 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 29.997909614018035 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 29.81034950206154 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 29.63797698349788 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 29.41857126607733 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 29.209112564722698 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 28.994407599089577 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 28.784843144878263 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 28.568723322853206 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 28.35163602232933 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 28.13531222710243 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 27.91982226660757 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 27.703833241960893 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 27.488927364349365 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 27.273435292036638 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 27.080931118556432 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 26.857238772889257 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 26.636576334635414 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 26.42469802621293 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 26.2140641019151 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 26.00326935450236 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 25.785265797062923 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 25.568563040200765 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 25.503466948484764 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 25.566117066371287 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 25.608944535255432 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 25.61218994635123 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 25.432172560110324 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 25.20705038093659 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 24.97644401731945 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 24.74628079638762 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 24.526040154834124 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 24.304598125918158 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 24.079116171056572 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 23.85281235984202 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 23.61906393369039 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 23.395047664642334 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 23.168394638144452 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 22.945531478492164 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 22.737840292301584 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 22.51695701950475 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 22.29543073972066 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 22.084119644361675 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 21.861016974157216 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 21.646266465235236 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 21.432019233703613 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 21.214439186719385 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 20.99099033019122 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 20.786846109964316 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 20.570084205040565 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 20.348426149004982 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 20.127963021116436 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 19.910586519776103 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 19.694836854934692 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 19.473037986580383 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 19.2512865933505 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 19.03891272802611 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 18.820544600486755 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 18.61154556063424 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 18.404318102619104 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 18.1885274078535 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 17.972863246654644 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 17.768525963155632 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 17.550665204807864 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 17.336740722175406 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 17.114837487538654 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 16.896126100839663 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 16.680077287017323 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 16.462695222559983 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 16.243907766957438 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 16.028937292099 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 15.81210342286125 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 15.595038271325778 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 15.392930790781975 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 15.17896540035573 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 14.96097108033987 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 14.748579227287351 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 14.531798117088549 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 14.315128717207372 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 14.0991916692079 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 13.888730075624252 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 13.674358928904814 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 13.462512695006211 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 13.247119450914687 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 13.030230029881428 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 12.81562328338623 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 12.597840180633762 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 12.3813459268758 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 12.164903370650498 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 11.946373780568441 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 11.730042260268638 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 11.513681428073204 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 11.29991727296998 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 11.084512968321105 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 10.870350525683206 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 10.654602686564127 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 10.441289063321044 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 10.227378393474378 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 10.014547946406346 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 9.797794413256954 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 9.58260085505824 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 9.367952493520884 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 9.154528426516588 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 8.94140536272073 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 8.727133515495924 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 8.515199899673462 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 8.300797955590006 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 8.085083608274106 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.870289492460848 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 7.657000832441376 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 7.443386569167629 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 7.231052298143686 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 7.017917144798234 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.803997902643112 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 6.590030101629404 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 6.377346796147964 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 6.16388644251907 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.950430615003719 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.738087885641638 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.524808711019056 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.311831167766026 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 5.098520213907415 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.885795701021529 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.673306893766596 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.460415066287505 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.247880273395114 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 4.034853015815355 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.8209642551757477 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.607674847535097 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.3957228867904 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.1846617879094308 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.971717616563202 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.759894692324062 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.547048416543514 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.3344866636568904 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.121868233931692 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.909225867056722 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.6968715290228524 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.4847102078749106 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.2726764482321198 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.060480637428088 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.8485313094392114 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.6363719139002302 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.4241825667294589 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.21207364480100085 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   42.4s finished

    2001 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  36.715 seconds)

**Estimated memory usage:**  1892 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
