
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f805d5654c0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 140.15913009643555 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 24.29588270187378 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 22.460702419281006 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 21.718388160069786 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 21.290919542312622 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 21.016249895095825 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 20.841632207234703 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 20.636461326054164 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 20.465068817138672 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 20.305209371778698 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 20.158657789230347 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 20.09129944714633 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 19.950722535451252 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 19.814088307894195 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 19.682467767170497 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 19.566400210062664 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 19.46092450618744 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 19.36070916231941 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 19.287554634941948 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 19.186015317314553 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 19.09182858467102 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 18.976122254417056 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 18.860322627154265 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 18.74259868912075 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 18.63938776652018 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 18.537318468093872 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 18.421671867370605 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 18.306046176839757 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 18.19768030302865 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 18.088183411236464 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 17.994036118189495 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 17.90781448733422 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 17.795222461223602 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 17.6818912896243 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 17.573633348240573 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 17.461135421480453 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 17.344766775767006 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 17.24217922623093 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 17.13790990176954 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 17.03069751079266 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 16.921466827392578 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 16.808534529150986 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 16.695788826261246 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 16.584158742150596 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 16.477927858179264 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 16.367112583584255 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 16.257752884989202 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 16.15069992998813 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 16.041926344235737 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 15.937685893506421 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 15.828529357910156 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 15.718426835303212 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 15.609073033699623 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 15.502684215329728 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 15.394399642944336 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 15.28737584027377 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 15.185790743146624 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 15.082688603484838 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 14.98426636334123 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 14.881156634476225 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 14.771886825561525 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 14.664324307050862 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 14.557597714085732 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 14.453771916646804 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 14.348933935165405 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 14.243100313039928 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 14.166448997728752 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 14.081010238448185 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 13.979539127910838 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 13.873839357624883 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 13.764473710741315 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 13.65468570883845 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 13.547778235541449 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 13.469766251028402 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 13.375135718165216 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 13.281932671864828 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 13.17577224028738 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.079042635954819 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 12.974507961517725 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 12.86941842187809 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 12.765509605407715 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 12.662371085013874 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 12.552083870259727 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 12.443303182900669 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 12.333449999491373 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 12.22491198427537 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.117842458015264 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.012288690983565 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 11.90752311186357 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 11.802031533101971 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 11.696304957071941 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 11.588932970067956 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 11.484123447666999 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 11.376927880830664 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.270513975873905 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.162809422141628 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.05517146984736 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 10.947918734599634 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 10.839803973022773 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 10.731187196693034 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 10.623645067214966 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 10.516360490628989 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 10.409977127523984 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.30292484366778 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.194659526531513 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.088035140718732 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 9.980587833332565 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 9.872348792085024 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 9.764791232568246 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 9.656966793427774 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 9.55039260604165 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 9.442629953762433 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.33577731677464 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.23171767302319 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.124816802510043 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.018528150475543 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 8.911882589603293 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 8.805330594380697 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 8.699100672188452 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 8.592699988549498 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 8.486820220947266 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.37939101605376 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.272985071432396 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.167084550469871 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.060065446361419 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 7.954013156890869 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 7.8471877461388 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 7.7402640384013255 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 7.633006274700165 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 7.526217055875201 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.419215073952308 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.312659021552283 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.206389983495076 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.09997288266519 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 6.994208250472794 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 6.888251657839175 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 6.7819602068732765 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 6.675845433325663 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.569634254427924 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.463155521763315 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.35668362889971 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.250464611865104 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.143977840181807 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.037996500522106 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 5.931771000226338 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 5.826549151848102 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 5.719931210557075 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.613404475101809 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.507290846592672 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.400952615993935 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.295077880223592 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.189294128228497 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.083984851837158 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 4.9782129019693615 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 4.871985664615384 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.767940013639389 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.6614634073697605 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.555457885098305 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.449400753914555 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.343143770529789 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.236892402172089 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.130662648574166 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.024739927715725 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 3.919376472753981 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.8132861416514325 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.707082206552679 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.6009230900959794 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.4948066380209553 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.38859376453218 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.2827617966917138 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.1766662317163807 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.070760936067815 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 2.964800562969474 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.8589072392855077 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.7534451347658004 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.6476944174085344 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.5416310267014937 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.4355981821394237 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.329624837703919 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.2237460466736523 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.117775387234158 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.0119222145712836 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.9059713122608897 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.799909301142875 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.6939526018889053 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.5879692837998676 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.482009546731108 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.3762905521188828 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.2703995603196163 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.1645352916112022 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.058622824518304 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.9527229114352721 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.8468023141225178 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7408884992253595 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6349845473299321 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5291523811144706 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4232879171566087 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3174363417068714 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.21161632826834015 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1058066478326692 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   21.2s finished

    1974 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  56.403 seconds)

**Estimated memory usage:**  1866 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
