
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-90

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 148-150

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 150-163

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-166

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fb43dd54220>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-229

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 158.30755233764648 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 27.145637035369873 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 24.952635526657104 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 24.230793714523315 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 23.845592498779297 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 23.5625216960907 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 23.378265857696533 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 23.230091299329487 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 23.088518142700195 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 22.987349006864758 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 22.88187527656555 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 22.746324712579902 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 22.582572857538857 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 22.434199791688187 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 22.283653123038157 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 22.20315750439962 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 22.067065000534058 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 21.931146930245795 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 21.808211273617214 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 21.665939418893114 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 21.518223524093628 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 21.385756992158434 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 21.249433105642147 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 21.109953932140186 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 20.962448755900063 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 20.833876371383667 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 20.694356203079224 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 20.571108288235134 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 20.432333401271276 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 20.304837966787403 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 20.177263180414837 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 20.05054989937813 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 19.923140823841095 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 19.82493157820268 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 19.703685395857867 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 19.588661772864207 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 19.451601955625744 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 19.32797804394284 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 19.194941846947923 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 19.074047357608112 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 18.94377040863037 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 18.826839574953404 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 18.70806019646781 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 18.59319646413936 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 18.482589158144865 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 18.365317132737903 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 18.259076191031415 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 18.140130103902614 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 18.01448380947113 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 17.906971668710515 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 17.783796072006226 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 17.66365069034053 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 17.547002498920147 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 17.42527605002781 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 17.302219417360092 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 17.18070777979764 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 17.058675834110804 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 16.9370026337473 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 16.822299118699696 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 16.70610098919626 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 16.588748613993328 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 16.466092465353796 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 16.342836280022897 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 16.22312926110767 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 16.104937255382538 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.983507504829994 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 15.868142691525545 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.750394739321807 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 15.6264848428614 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 15.510732263758563 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 15.392431463514056 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 15.274433381120923 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 15.154590606689453 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 15.040190713046348 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.92281886049219 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 14.803696076075237 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.688705795689632 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 14.576935864114143 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 14.464583940995045 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 14.349019204513935 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 14.234686017036438 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 14.115059293346642 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.993390153094035 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.873689211994769 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.756848936989194 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.636121539508595 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 13.517936734266058 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 13.39825751863677 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 13.278374671936035 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 13.159900196482626 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 13.04248544904921 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.922485954158908 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.805430267168129 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.688744168127737 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.570836259963665 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 12.452410999097323 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 12.332165400187174 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 12.215317952264215 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 12.099061737255175 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.980211679381553 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.862656831741333 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.745064867605077 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.628005051145367 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.510635301904772 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 11.394627791184647 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 11.277701105390276 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 11.160302715481453 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 11.041598355658701 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.922036038504707 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.803191567779681 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.685258453542536 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.568819469159788 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.448187368256704 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 10.327507223703165 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 10.20886352605987 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 10.088840795599895 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.969618460227704 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.85477781907106 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.735923581204172 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.620245877434225 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.500649293263752 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.38046646118164 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 9.263742439082412 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 9.147544661188514 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 9.03126165174669 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.915141487121582 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.798450742449079 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.68192481055973 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.564843773841858 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.447311728499656 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 8.331242341261643 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 8.214209421900392 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 8.0968246532209 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.979139869374441 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.862612016165434 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.744993660185072 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.628392163444968 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.510617543311015 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.393104338991469 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.276090277184685 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.158162423542567 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.042080409137915 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.923882860532949 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.803601069883866 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.6844871044158936 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.56479971162204 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.445357962830426 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.3266454959402285 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.207281956801544 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.088580693174529 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.969320615132649 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.848995740839977 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.729435544264944 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.6094657533309045 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.489245544780384 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.3699566702688895 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.250046571095784 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.130098225964103 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.010417422161826 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.890657219496913 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.771098434925079 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.652111016445279 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.532318980605513 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.412907575537091 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.29338208640494 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.173487013036555 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.053572870162596 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.9351146178331207 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.815487407502674 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.696821806698861 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.5775765390957104 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.457934472993103 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.338544368743897 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.219218863228153 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.099720656186685 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.980280944279262 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.861191164363514 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.7419904679228355 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.6226593564065652 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.5032788894695943 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.384027189678616 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.264642436201401 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.1453760220454288 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.026203795208957 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.9072399139404297 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.7881133620803422 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.669085156533026 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.5498432169623553 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.4305873525903579 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.3114289720222432 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.192213209051835 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.072980805841416 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9536930918693542 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.8344345105126731 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.7152784116489371 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5960052624726907 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.47676675173701066 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3575400446877262 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2383353276686235 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1191548510412475 seconds remaining)
    1996 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  0.098 seconds)

**Estimated memory usage:**  1923 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
