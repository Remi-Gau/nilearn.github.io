
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (:term:`VBM`)
to study the relationship between aging and gray matter density.

The data come from the `OASIS <https://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard :term:`VBM` pipeline (using SPM8 and
NewSegment) to create :term:`VBM` maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the :term:`ANOVA` step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the :term:`ANOVA` step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

:term:`SVM` weights are very noisy,
partly because heavy smoothing is detrimental for the prediction here.
A standard analysis using mass-univariate :term:`GLM`
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 112-123

Prediction pipeline with :term:`ANOVA` and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

In nilearn we can benefit from the built-in DecoderRegressor object to
do :term:`ANOVA` with SVR instead of manually defining the whole pipeline.
This estimator also uses Cross Validation to select best models and ensemble
them. Furthermore, you can pass ``n_jobs=<some_high_value>`` to the
DecoderRegressor class to take advantage of a multi-core system.
To save time (because these are anat images with many voxels), we include
only the 1-percent voxels most correlated with the age variable to fit. We
also want to set mask hyperparameter to be the mask we just obtained above.

.. GENERATED FROM PYTHON SOURCE LINES 123-149

.. code-block:: default


    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 150-152

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 152-165

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-183

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f531c764e80>



.. GENERATED FROM PYTHON SOURCE LINES 184-186

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 186-231

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 194.79751586914062 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 38.28062129020691 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 34.54681992530823 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 33.01483511924744 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 32.350693702697754 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 31.81212544441223 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 31.308871110280357 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 30.932269641331267 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 30.904186248779297 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 30.563229348924423 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 30.23661184310913 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 29.972201650792904 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 29.708746035893757 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 29.468795758027298 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 29.446573121207102 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 29.39693347613017 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 29.225340008735657 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 29.037950571845563 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 28.836679140726723 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 28.630727341300567 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 28.4441978931427 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 28.365716536839802 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 28.181362000378698 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 28.029372173806898 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 27.85755713780721 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 27.724609851837158 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 27.57898917564979 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 27.500064381846677 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 27.303605318069458 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 27.101258606746278 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 26.914626598358154 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 26.715780127433035 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 26.534470796585083 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 26.35011011903936 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 26.229506170048435 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 26.042689561843872 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 25.86880991193983 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 25.716746684667225 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 25.54989514852825 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 25.379517151759224 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 25.279759407043457 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 25.13011676509206 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 24.954676332927885 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 24.787281202715494 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 24.615168116309427 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 24.45077408684625 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 24.281096240748532 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 24.16460146802537 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 24.032608668009438 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 23.926164558955602 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 23.78773283958435 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 23.63248500169492 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 23.483904930261467 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 23.38774125081188 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 23.2612855081205 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 23.128457394513216 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 23.00370413916452 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 22.85608376954731 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 22.717404735499414 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 22.610209149829412 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 22.47580313682556 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 22.35013078079849 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 22.20980664991563 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 22.07952294652424 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 21.93565344810486 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 21.81291048343365 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 21.649254061959006 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 21.47944394866032 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 21.307250934488632 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 21.127357220304184 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 20.950668811798096 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 20.803952663717137 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 20.63866466946072 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 20.467982664500198 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 20.296029200425018 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 20.12232780456543 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 19.947277043995104 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 19.774248194384885 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 19.62023555315458 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 19.445824523515338 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 19.27057921886444 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 19.096905852541514 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 18.925927255211807 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 18.752561123974353 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 18.60132160640898 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 18.43047496851753 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 18.263813528903693 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 18.09851032015921 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 17.942148728804156 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 17.778431766488577 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 17.61478082338969 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 17.495578323091777 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 17.325608875440516 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 17.158215566348005 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 16.99495997834713 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 16.831215281235547 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 16.66993506749471 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 16.522550622212517 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 16.361096927097865 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 16.19482558664649 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 16.03135848045349 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 15.872220882094732 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 15.704062700271606 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 15.555259554131517 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 15.388556407048153 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 15.2223022097633 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 15.05646412777451 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 14.894167572538429 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 14.73393549742522 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 14.570361423929898 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 14.423248724503951 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 14.258275695749232 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 14.092945609773908 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 13.92780404597257 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 13.763780656613802 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 13.600941626921943 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 13.445669371506263 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 13.280293468736176 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 13.11466433234134 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 12.949689201948022 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 12.786432902018229 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 12.6223835393417 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 12.462144155971341 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 12.308113759126119 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 12.143311746658817 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.978611135482788 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.815518882539537 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 11.652037965969775 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 11.48814408481121 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 11.324567585952522 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 11.16928665454571 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 11.006507656956448 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.844345295067988 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.683115195510979 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.521139372640581 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.35882697282014 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 10.20226422478171 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.039425299985565 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.876839129821114 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.715450964385656 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.554589578083583 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.392664545816732 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.231225436841939 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.075261279419585 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.915939304563734 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.755630073876215 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.59635708430042 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.435035204400823 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.27385587305636 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.11909364053867 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.9605973561604815 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.801354515631467 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.642315638692755 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.481621087766162 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.3209089613580085 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.1608196612327335 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.00397907770597 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.842496197694426 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.6818731585635405 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.520842745619 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.3597076535224915 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.198567240874961 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.042261874234234 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.881479415425494 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.721144397084306 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.560868111523715 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.40062260053244 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.241278775437864 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.081094106038411 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.9229768888484795 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.762918121674482 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.6035788463570215 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.444106745165448 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.284816733674507 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.124951787378596 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.967550482068743 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.807851574637673 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.648410642214414 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.489739184968927 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.331286070733097 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.172719902462429 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.013999875737817 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.856361580419016 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.697047224461707 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.537831223529318 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.3786542866681075 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.2193889823011173 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.0622956140793582 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.904042730940149 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.7451257957983268 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.5861915789152445 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.4272884161684527 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.2683823605378468 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.1097585759632327 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.951147676743183 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7929165913508488 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6346222819114218 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4762047583681678 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.31764570631162087 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.15888078727913862 seconds remaining)
    1978 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 15.515 seconds)

**Estimated memory usage:**  1918 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
