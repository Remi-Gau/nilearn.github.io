
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f902af3a190>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 178.87115478515625 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 31.139439821243286 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 28.7711763381958 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.927743832270306 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 27.58216166496277 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 27.345972776412964 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 27.070158084233604 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.83839988708496 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.60727882385254 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 26.38678722911411 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 26.129117727279663 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.91778308695013 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.719302256902058 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.52773453639104 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.385572876249043 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 25.257050593694053 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 25.114363312721252 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 24.943814193501193 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.79361263910929 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.640782669970864 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.500211238861084 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.353343759264266 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.2064228924838 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 24.05815302807352 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 23.96045446395874 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.82614779472351 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.706687982265766 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.571543552257396 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.415709018707275 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.263228901501357 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 23.126987139383953 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 22.97665546017308 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 22.822133660316467 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.677902684067234 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.533526729134955 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.40083622932434 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.25775763723585 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 22.123843341260343 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 21.983532127581146 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 21.96444960129567 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.817575454711914 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.664397478103638 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.51920482090541 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.372778265975242 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.229916941035878 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 21.082713736428158 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 20.94059907871744 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.79497643227273 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.658350110054016 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.522310096390395 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.379220962524414 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.23594372880225 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 20.09786451779879 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 19.95752828526047 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.813006507025825 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.66963306340304 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.53885841369629 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.39850492644728 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.25721784295707 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 19.118690219976134 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 18.97584319114685 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.83961624004802 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.705961958054573 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.574106723543196 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.43994641304016 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.30465685404264 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.16479307232481 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.02146930125222 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.886250818476956 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.748615054116733 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.615139280046737 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.48539101573783 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.349481370713974 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.207497462834397 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.06949529776702 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.929714679718018 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.789552199213126 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.6500964722076 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.514339832159187 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.385935698883443 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.258100867271423 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.11780686143004 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 15.979195943692835 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.843250803200595 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.706481990360079 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.568092472413008 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.430759008540663 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.295686477902294 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.162467436356978 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.025849366455935 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.888290431764393 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.748524710372253 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.61324427438819 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.476074685332597 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.341810718495795 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.204385694704559 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.068513095378874 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.931900449634828 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.797587594207453 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.659023369201504 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.522058725357056 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.386077394579896 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.250076490290025 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.113263477399512 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 12.975839688227728 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.840281861168998 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.702489412055826 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.565319056822874 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.430605473341766 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.296894362213415 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.161619251424616 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.025426024789208 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.889209747314453 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.752434500550802 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.616975035583764 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.482208625130031 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.347868146567508 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.211841546572172 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.079826403472383 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.944469201464614 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.808162053426106 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.671533769812466 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.536382632177386 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.402410766942713 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.268273891941194 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.132628774642944 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.99654497797527 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.8615591770082 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.72586852312088 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.589024970697801 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.456260002576387 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.32113715346533 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.185846892270174 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.050445669575742 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.914639149139177 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.778841998842028 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.642983156092027 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.50952853425576 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.374915478886038 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.23929896800638 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.104401213782173 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.968755943555358 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.8329726239325295 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.697127742367191 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.561196459664239 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.426054576347614 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.291406344061028 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.15613958786945 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.02113565883121 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.885975362470486 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.750490427017212 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.61525206060599 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.480524991687975 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.348892973918542 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.214123106622076 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.078847208330709 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.943137963612874 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.807705987031293 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.672437335871442 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.536805554755829 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.401432037353516 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.266147422494355 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.131381273269653 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.996742459162612 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.861103575404098 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.725753972024629 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.591559978852789 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.456642362172018 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.321749096825009 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.186327368550047 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.0511907409219186 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.9159569475385876 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.7807754749475526 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.645554764422378 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.510354655912553 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.3752785069601874 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.240122632546858 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.1050073709865074 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.969930040702391 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.8349312150944543 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.6999500062730575 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.5647348290648906 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.429658274074177 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.29464867857636 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.159588958906091 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.024658950599464 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.8895135797480103 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7544882692755226 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6193612382767046 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.4844911653528767 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3495549026288483 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.214479245440498 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0795049965381622 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.944558998463685 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.809609206681399 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6747335470639743 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5397764517336475 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4048147056308495 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2699008132472183 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13495640179619717 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   27.0s finished

    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  8.371 seconds)

**Estimated memory usage:**  1890 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
