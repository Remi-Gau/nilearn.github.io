
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f6cd1a34040>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 176.00297927856445 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 31.316932678222656 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 28.70447301864624 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.831975142161053 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 27.35085964202881 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 26.959060192108154 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.656292120615642 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.567307063511443 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.387271881103516 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 26.14720196194119 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 25.910851001739502 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.75914339585738 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.546013991038002 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.355519203039318 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.166130576814925 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 24.988480408986412 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 24.852018356323242 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 24.71042384820826 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.683794260025024 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.564545869827274 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.512051582336426 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.345529817399523 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.209538264708087 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 24.064143605854202 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 23.9473869005839 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.819263458251953 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.694502610426685 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.569553030861748 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.44100216456822 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.318163797773163 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 23.166654984156292 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 23.030460565320904 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 22.891327500343323 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.802820855920963 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.646675264134128 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.49506115913391 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.346598651674057 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 22.215205289222098 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 22.079466556247915 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 21.941880959730884 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.79609966278076 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.658051031391796 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.624930540720623 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.481135251910185 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.348381822759453 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 21.212206098768448 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 21.079920488855116 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.93607582944505 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.792240420977272 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.64729085260508 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.515228986740112 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.374961726805743 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 20.23123658620394 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 20.092153126338744 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.956750092683016 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.818274476311423 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.675072329384943 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.53490368106909 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.39360739444864 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 19.2582310498771 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 19.119563102722168 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.982010911722654 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.843367153598415 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.7056679385049 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.571275979280472 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.4443680873284 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.303340803493153 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.162550833687853 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 18.02850365638733 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.892862765685372 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.754553045545308 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.616853408410517 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.48060862223307 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.343501907505402 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.203584580808073 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 17.06307371457418 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.927158167487697 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.79498950537149 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.6527208059262 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.50890032249161 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.366997480392456 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.23491273691625 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.09669471368557 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.956390128078231 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.81733835311163 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.678223708096674 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.537905249484748 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.399185350571557 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.258497368205678 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.119689673520206 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.986657328075834 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.848676733918243 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.710632811421934 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.571100176021618 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.434437985115862 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.296089272750052 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.156860609849293 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.016460212235598 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.879515044543208 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.746575119519473 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.60941767692566 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.47211730598223 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.335099051980412 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.1991855403752 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.061919065622183 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.924211967559089 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.785889643543172 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.650948831968218 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.513553866633663 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.375005065847974 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.238780455155807 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.102387875050038 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.967915790421621 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.830912239783633 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.693730672200521 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.556987731353095 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.420003907433872 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.282283041212294 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.144857075254796 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.0074850831713 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.870723406473795 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.734293149522514 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.603099025663782 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.46493830331942 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.32869937342982 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.194841289520264 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.058060850415911 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.920945441629003 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.783583626151085 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.647656291030174 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.511795062285202 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.376963535337957 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.24087678302418 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.106406711994257 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.971283528342175 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.835916377879954 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.699494642369887 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.56344607276638 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.428677759308746 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.293544882493054 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.156584126608712 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.019894669241939 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.884227524340992 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.747641153268881 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.611268255445692 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.4759460975383885 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.340126223760108 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.205605437155484 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.069584285890734 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.933056029697393 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.796774546305338 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.661415848510944 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.525389520745528 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.389467471565297 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.253635632527339 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.118734459723196 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.982619187770745 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.846499224377286 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.710384812536119 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.573973609216558 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.438363552093506 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.302471702883703 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.166140217839936 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.029850637985884 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.89393758192295 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.757811134511774 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.622830304754785 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.486758937378844 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.350931031363351 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.215368874679656 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.079040569417617 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.9431950153663142 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.807569836461267 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.6717375027651045 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.5358220188097027 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.4002259118216376 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.2644408074292266 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.1285826001463635 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.992556692509169 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.8564141768982956 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.7202701568603516 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.584224689072667 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.448234676004766 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.3124742820614674 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.1764992423679517 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.0405800986934355 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.9045079472244428 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.768313651416391 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6321700988931858 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.4960288484260518 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3601587822562768 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.224142399133812 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0880787273248036 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9519856420823328 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8159526770876855 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.680022582029685 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5439576713406309 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4079442145255617 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.27195973107309057 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13599194953190022 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   27.2s finished

    1996 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  8.123 seconds)

**Estimated memory usage:**  1923 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
