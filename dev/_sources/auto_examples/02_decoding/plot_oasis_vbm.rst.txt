
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fdd445a3fa0>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 251.50299072265625 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 35.84515929222107 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 32.65712857246399 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 31.400262991587322 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 30.708763599395752 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 30.145521640777588 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 29.73454308509827 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 29.440963302339828 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 29.08424949645996 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 28.858652856614853 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 28.62604594230652 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 28.40400942889127 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 28.207637786865234 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 28.034547090530396 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 27.878836257117136 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 27.715158065160118 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 27.562262773513794 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 27.407516114852008 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 27.28955260912577 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 27.177029245778137 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 27.004222869873047 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 26.91233554340544 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 26.752438176761977 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 26.557992696762085 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 26.384092330932617 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 26.218974590301514 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 26.087955676592316 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 25.925485575640643 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 25.801098721367975 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 25.650774059624506 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 25.497373580932617 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 25.343349618296468 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 25.200397789478302 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 25.050118482474126 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 24.907253854414996 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 24.83454077584403 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 24.689308484395344 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 24.538518493239945 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 24.388250526628998 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 24.25210671547132 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 24.105521202087402 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 23.95490720795422 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 23.810895318076724 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 23.658391980237738 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 23.510676774111662 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 23.358212100134956 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 23.207634625227556 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 23.063042970413857 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 22.91514551639557 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 22.752685430098555 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 22.596623182296753 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 22.443051833732454 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 22.283618743603046 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 22.13572903849044 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 21.982251741268016 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 21.83695912361145 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 21.678816114153182 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 21.52989195522509 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 21.378876866965456 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 21.230258412280325 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 21.07446543375651 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 20.93062267537977 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 20.790372548564786 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 20.637558607828048 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 20.48403912782669 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 20.334553461808426 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 20.18359963099162 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 20.03117524332075 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 19.879775552188647 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 19.72686789692312 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 19.596038852419174 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 19.443198207398535 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 19.291553497314453 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 19.143559782472376 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 18.991895682102925 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 18.841053644816082 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 18.684832221583317 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 18.534400193722217 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 18.382025229625214 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 18.23096449767487 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 18.082213640213013 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 17.935726442454776 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 17.79342852569208 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 17.653381528624568 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 17.51560393969218 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 17.373726760639865 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 17.224861854730648 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 17.07802716068838 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 16.924740747971967 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 16.771863674849605 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 16.623740884992813 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 16.47458992947589 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 16.32375650820525 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 16.175568816482382 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 16.023597103484132 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 15.871656831942108 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 15.722654044628142 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.582546337363647 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 15.437507381244583 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 15.284007127838905 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 15.132175207138062 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.978412852428926 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 14.82775370279948 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 14.678244014388149 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 14.528326694781965 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 14.37833917708624 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 14.225261328355321 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 14.072355355057761 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.920191808983132 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.766756934857149 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.614901737733321 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 13.460711627393156 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 13.310163957732064 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 13.157484484984812 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 13.004104120689526 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.849803219670834 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.69531329746904 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.54483522920527 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.403258380243335 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 12.247998115395298 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 12.09555451075236 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.943174496169918 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.790609398826225 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.638435357954444 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.487682734766315 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.335908937454223 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.185302859260922 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 11.033099602526567 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.880964115262032 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.72908454532771 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.578125311778141 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.427412249659763 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.28022034962972 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.130044040823341 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.979038242083876 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.827389381549976 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.677841523114372 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.529062274598727 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.381142225818358 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.229590542882466 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.076254027230398 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.923004596791369 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.768888758941436 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.61602611141605 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.46473831600613 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.31221369217182 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.158948875453374 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.006583356532921 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.855369948052072 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.702248438892749 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.550550858179728 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.398497690428171 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.246883643300909 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.095293785232345 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.943961998084923 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.791237631151754 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.639107294571705 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.4870779408011465 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.3344178924077665 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.181725785417377 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.029590845108032 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.878955583394685 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.727073672377033 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.57583116607432 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.425011774388755 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.273860692977905 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.122881372290921 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.9720247791198915 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.821096647353399 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.670303124647874 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.519660318599028 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.3685829974057375 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.217433946077214 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.0670395820816125 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.91594454611855 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.7648865836007253 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.614318620074879 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.4636523359912936 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.3129609461580767 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.1632856603441293 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.012700690163506 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.8620820704086047 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.7111950523250705 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.560340588210059 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.4097189903259277 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.258881929758433 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.108521097449846 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.9579253183966652 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.8072048501765472 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.6564964074937123 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.5060972665485581 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.3555592491988737 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.2052700420220692 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0548638692173933 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9050244547657131 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7542067919021997 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.603310015736794 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4524725403277402 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.30160272241842867 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1507878902569488 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   30.1s finished

    1965 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  13.658 seconds)

**Estimated memory usage:**  1909 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
