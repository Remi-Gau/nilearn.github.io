
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f5764e4a3d0>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )  
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 234.26294326782227 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 43.50306749343872 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 40.04446220397949 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 40.1638887723287 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 39.023661851882935 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 38.37691926956177 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 37.74128111203512 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 37.45070447240557 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 37.20970916748047 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 37.01789961920844 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 36.818135261535645 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 36.55455675992099 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 36.36153554916382 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 36.0705984555758 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 35.95612978935242 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 35.80789359410604 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 35.490628242492676 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 35.24852009380565 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 35.0137755341 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 34.869762094397295 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 34.91524386405945 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 34.809032031467986 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 34.638431007211864 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 34.461728002714075 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 34.26765505472819 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 34.20714807510376 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 33.98030948638916 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 33.70391920760826 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 33.482362031936646 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 33.203775422326444 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 32.95883830388387 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 32.748584608877856 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 32.608902633190155 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 32.42736820018653 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 32.22194584678201 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 32.026989800589426 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 31.8426100148095 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 31.619578870567114 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 31.476907817940965 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 31.279131314693355 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 31.106718063354492 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 30.960750102996826 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 30.772684358415148 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 30.58734053789183 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 30.38610226457769 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 30.156137784322105 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 29.945051773734715 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 29.77556239797714 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 29.632199843724568 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 29.42655877191193 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 29.215521812438965 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 29.034482044332165 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 28.82357773414025 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 28.639890864210308 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 28.42702356091252 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 28.21050843325528 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 27.981058870043075 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 27.768391855976034 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 27.582294620316603 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 27.37916627980895 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 27.17217286427816 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 26.98004571336215 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 26.777421620584303 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 26.588021172417534 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 26.385434061288834 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 26.20615542851962 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 26.026654958724976 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 25.85847379200494 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 25.703346617081586 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 25.51766161987747 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 25.331166199275426 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 25.14329154726485 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 24.94627253214518 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 24.75906385787546 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 24.576780390095067 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 24.382557471593223 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 24.184928116045498 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 23.999666337843063 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 23.79809968899458 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 23.607616675050952 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 23.41378891468048 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 23.208384764047317 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 23.021704534204993 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 22.821735043123542 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 22.62295249530247 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 22.430083064471976 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 22.22700925760491 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 22.01844523418909 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 21.82319792834195 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 21.6283577426096 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 21.436207082536487 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 21.23570219501034 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 21.05371977971948 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 20.856772897064047 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 20.67042631798602 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 20.469545602798465 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 20.2616841395696 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 20.056539277440493 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 19.85418614562677 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 19.653910846421212 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 19.469894647598267 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 19.27160644295192 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 19.07874938553455 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 18.8810221176703 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 18.678584025456356 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 18.473362763722736 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 18.275479816040903 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 18.070851655764 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 17.872845826325594 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 17.68083958013342 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 17.48314515027133 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 17.283365314071244 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 17.08807613168444 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 16.890792694766965 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 16.69364096825583 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 16.495897065038264 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 16.29644694821588 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 16.097299380180164 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 15.902819136441765 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 15.706121368568486 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 15.511516412099201 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 15.32102067805519 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 15.127356314268269 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 14.929503714166035 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 14.738950560169835 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 14.549822044372558 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 14.35182841997298 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 14.155915949288316 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 13.961473926901817 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 13.766037029813425 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 13.571081638336182 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 13.378056628103474 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 13.18197261203419 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 12.985817591946825 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 12.788560557721265 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 12.59427966011895 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 12.398071064668542 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 12.206218775171433 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 12.008082959962927 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 11.812137861046002 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 11.622911248888288 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 11.426414408582321 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 11.236310398074943 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 11.040396326905364 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 10.84499408139123 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 10.651534195603995 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.462869800933419 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 10.271962014996276 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 10.078815228230244 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 9.884222789098752 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.688862482706705 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.501412225874844 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 9.306058231152985 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 9.112566396301869 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 8.92247182672674 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.729920310358848 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.538375995098017 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.345870408282918 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 8.153356998781614 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.959476599903226 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.763700067996979 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.568056769992995 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.3743933748315875 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.179640250703308 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.985094808950657 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.790852467219035 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.596035402941417 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.401315217960381 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.2083080382574165 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 6.012742880533432 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.818124644896564 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.625234879945453 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.430327271306238 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.235547691411366 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.041827903396782 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.8472118718283514 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.65244856747714 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.457902127066574 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.263814567180162 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.0694640521896615 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.875828981399536 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.682287949883477 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.48904495710855 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.2955280509802813 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.1011424271956733 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.9083039631714693 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.7141429557595202 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.520823098758963 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.3272653944948885 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.1330881043085976 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.939084304006476 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.745087021932552 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.5512191851933796 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.3572126077246789 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.1632210028540229 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.9694069287715814 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.7757590546899912 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5818729521659425 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.38804768311856974 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.19403996180050337 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   38.8s finished

    1944 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  23.780 seconds)

**Estimated memory usage:**  1838 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
