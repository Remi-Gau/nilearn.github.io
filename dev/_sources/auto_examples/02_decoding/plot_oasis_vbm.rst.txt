
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-90

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 148-150

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 150-163

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-166

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f7976dd96a0>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-229

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 193.71509552001953 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 32.52109432220459 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 30.419262886047363 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 29.6931160291036 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 29.190855026245117 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 28.820752143859863 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 28.559172074000042 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 28.592930521283833 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 28.266923904418945 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 28.036343759960598 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 27.803030490875244 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 27.618291117928248 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 27.448972622553505 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 27.264261154028087 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 27.09188420431955 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 26.913055499394737 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 26.75460946559906 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 26.593394784366385 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 26.446594397226967 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 26.29912953627737 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 26.153396129608154 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 26.01879452523731 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 25.86458602818576 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 25.75706804316977 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 25.606949965159096 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 25.45548915863037 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 25.293372741112343 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 25.115926927990383 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 24.953158821378437 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 24.8049332684484 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 24.651518026987713 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 24.49542010215021 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 24.337273478507996 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 24.17509886712739 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 24.018825474907374 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 23.86158677509853 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 23.712741586897106 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 23.5637403694359 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 23.420891799424826 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 23.27629396854303 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 23.1309871673584 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 22.982677616724153 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 22.829581113088697 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 22.68972617526387 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 22.539477760141544 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 22.388107087877064 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 22.240811980288964 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 22.09105836076939 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 21.941695610682167 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 21.78692076644119 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 21.6374409198761 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 21.487109193614884 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 21.333942871827347 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 21.187231090833556 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 21.03685945051688 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 20.88464273105968 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 20.72973224094936 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 20.577160659589264 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 20.42591807760041 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 20.277485980825908 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 20.129291931788128 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 19.980814179436106 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 19.832522069254228 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 19.702538721145142 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 19.559999644756317 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 19.41892851316012 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 19.275677522023518 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 19.128168056260293 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 18.978998885435217 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 18.831870673359305 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 18.681728839874268 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 18.531924016039138 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 18.385042826334633 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 18.242842719979482 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 18.098028157208415 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 17.950540383656822 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 17.80554181651065 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 17.658946102315728 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 17.512136227045303 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 17.36871711513664 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 17.223995089530945 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 17.081837562867154 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.937621023596787 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 16.79180930321475 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 16.646357093538555 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 16.500396209604602 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 16.354135568751843 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 16.213378980241973 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 16.07201944697987 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.926704420132582 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.779505305820042 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 15.632840185375004 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 15.488011432730636 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 15.35258997383938 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 15.211144736472596 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 15.066735468412702 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.920602003733316 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.775957559801869 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.630900932818044 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.48492625987891 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.343122959136963 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.202132189627921 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 14.087652010076187 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.957742582247096 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.816894604609564 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.679693153926305 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.535480256350535 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.389462332859217 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.247085694913512 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.104833889445034 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.960513548417525 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.815987548312625 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.670459985733032 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.527837605602972 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.385464513510989 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.241937170857968 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.097041236943213 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.952717503930769 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.805733228133898 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.660113220455266 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.51565106709798 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.371179484138805 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.227256989869916 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.08270530002873 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.935542106628418 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.790609550476074 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.644990535009475 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.500275694479154 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.354588106274605 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.211407731669818 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.066583229945255 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.921737630858676 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.779321677757032 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.635694795981387 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.491397526726793 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.347388514765987 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.20357188056497 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.059435919253495 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.915346425512563 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.770537306078904 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.626353570393153 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.481641153917245 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.336031242155693 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.190862050423256 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.046698225869074 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.9025542078347035 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.758283373427717 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.615991581053962 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.4728357856338095 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.329027793551451 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.184730847676595 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.04024252354704 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.8970344443070255 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.754808012956109 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.610732861927577 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.467061765732304 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.323203099079621 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.180577064016062 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.037560803980766 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.89467625498022 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.7519301772117615 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.608824353780806 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.466077969398027 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.322509869476037 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.178630439246573 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.0347890420393515 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.8905158990837005 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.7461441048605 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.602210589817592 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.459329334236461 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.315594112171847 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.171402878231472 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.027130315470141 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.8835031448761166 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.739911087628069 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.5962303706577843 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.4525631449439307 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.3087492514464816 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.1651763353454934 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.0217435066926415 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.8782125843895803 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.734318900503506 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.590293567259233 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.4464412999283423 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.302456855773926 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.1586541485142066 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.0147573230087117 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.8707664204153784 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.7266837637475194 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.5829909541619518 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.4391297917616994 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.295231374770559 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.1513334115346272 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.007349404646325 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8633987903594971 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7195058052356427 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5756286017748774 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4317219547813919 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.28780588718375777 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.14389917239471897 seconds remaining)
    2011 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  16.000 seconds)

**Estimated memory usage:**  1872 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
