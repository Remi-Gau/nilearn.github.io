
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f2e8b6800a0>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )  
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 192.20590591430664 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 33.289186239242554 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 31.26268458366394 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 30.592045386632286 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 30.265716075897217 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 29.932469129562378 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 29.823726971944176 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 29.4797340461186 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 29.18111228942871 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 28.948418272866142 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 28.7393536567688 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 28.594691666689787 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 28.40141749382019 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 28.31990359379695 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 28.132199968610493 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 27.939953088760376 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 27.772642135620117 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 27.604041169671454 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 27.449394941329956 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 27.272757919211138 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 27.124091863632202 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 26.960286117735365 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 26.79164749925787 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 26.62252213643945 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 26.4561177889506 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 26.30027484893799 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 26.145314840170055 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 25.992089368678904 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 25.857054131371637 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 25.707325680502528 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 25.539798895517986 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 25.374907931973855 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 25.22085928916931 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 25.063665541735563 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 24.899546721402338 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 24.74325054032462 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 24.590212239159477 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 24.433014895464922 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 24.28349462308382 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 24.161890219419433 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 24.02028465270996 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 23.865459663111988 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 23.733061642873853 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 23.57398607010065 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 23.41806546124545 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 23.267186482747398 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 23.11966597515604 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 22.967207391211325 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 22.82169485092163 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 22.68555640687748 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 22.538467168807983 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 22.38246885467978 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 22.2301327081827 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 22.080706398442107 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 21.946001918227584 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 21.78670276295055 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 21.630011558532715 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 21.47488540515565 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 21.324509702879805 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 21.172440557156577 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 21.030481894810997 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 20.881460029570782 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 20.731113818383985 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 20.57614114927867 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 20.4240879714489 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 20.268762753559994 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 20.11919276642077 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 19.967879427013113 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 19.817699432373047 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 19.660919541897982 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 19.509176118033274 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 19.35730060725145 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 19.208646986219616 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 19.057787219138994 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 18.90848837672053 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 18.765452305475872 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 18.622852664244803 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 18.466021540877108 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 18.307043619644947 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 18.148729783070237 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 17.996301412582397 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 17.84150576002804 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 17.684146421711617 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 17.524369627596386 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 17.368241582598003 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 17.210250153261075 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 17.057266340699307 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 16.909018505578754 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 16.76028316671198 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 16.611527689387287 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 16.4750607808431 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 16.32086341721671 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 16.16618843700575 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 16.014221037587813 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 15.86652502607792 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 15.715920887495344 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 15.564650972684223 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.409554889521647 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 15.25689739597087 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 15.10494084069223 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.95228886604309 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.801186311362994 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 14.649762868881226 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 14.499756940360209 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 14.346561285165642 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 14.196434815724691 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 14.046328504130527 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.89537042323674 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.743670799114087 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.59238406058845 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.440941073677758 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 13.287710670952325 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 13.135971137455531 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.982864177332514 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.829714022184673 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.677752505178036 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.526412511694021 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.37591108501467 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.223541865914555 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 12.073947057002734 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.92392047246297 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.772645995636617 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.621758226488458 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.470921578446054 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.321076616164177 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.171646308898925 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.022122564769926 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.872742106595377 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.72133083641529 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.571652427200199 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.420861005783081 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.271038202839042 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.122625134207984 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.974405078959645 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.825152155178696 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.67910498159903 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.531024035285501 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.382191776359168 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.2336179173511 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.085587381458968 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.937309571674891 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.788774295901575 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.639349349787537 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.489486277520239 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.34040571583642 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.191935177507071 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.042523573522699 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.89383162608763 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.746533226322484 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.597986440530559 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.449699083964029 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.300832058420244 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.152602396513286 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.003386391533746 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.854822787371549 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.7056262262405895 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.557211698629917 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.408463066550577 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.259317751172222 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.110856047216451 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.96199643611908 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.812460087841342 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.663259944798034 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.514444166897265 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.36530287091325 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.216363675666578 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.067621728023851 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.918964388841641 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.769970076424735 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.621256302094318 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.472334497115192 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.3235736116331225 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.174866875936819 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.02574086878341 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.8768850633467755 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.7280948843274797 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.579025496136058 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.42978291322956 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.280625825517633 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.1313790928718097 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.9827549192640515 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.8337573254306014 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.6848316140227264 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.535595452199217 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.386328013046928 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.2371348883654623 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.0879968109951226 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.9388772281095943 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.7896946288169697 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.640443099238885 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.4911907597592002 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.3419619155803901 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.192843645811081 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0436388705060888 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8945197813289681 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7454756773435153 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5964119239729277 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4472673157144924 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.29812099957706956 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.14903846577783325 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   29.8s finished

    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  13.542 seconds)

**Estimated memory usage:**  1943 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
