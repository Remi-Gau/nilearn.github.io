
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f6f2db4ff40>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )  
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 232.98025131225586 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 44.859623432159424 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 41.26178598403931 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 40.0574582417806 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 39.50981783866882 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 39.22008204460144 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 38.91467094421387 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 38.75580212048122 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 38.568397521972656 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 38.10088817278544 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 37.69041395187378 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 37.39121051268145 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 37.19835654894511 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 37.09681527431195 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 36.81197946412223 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 36.49389362335205 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 36.29087316989899 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 36.02819121585173 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 35.78431219524807 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 35.67587892632736 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 35.53984451293945 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 35.34033740134466 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 35.144162979992956 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 34.98855941191964 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 34.77100626627604 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 34.58607530593872 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 34.386240170552185 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 34.207783875642 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 33.98704450471061 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 33.78453242367711 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 33.56227159500122 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 33.33334664375551 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 33.11055797338486 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 32.91285918698166 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 32.693484797197236 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 32.519767795290264 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 32.33184708489312 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 32.142622451524474 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 31.95457660524469 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 31.73625408074795 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 31.55231285095215 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 31.32471013069153 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 31.102287281127204 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 30.904010251510975 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 30.701591881838713 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 30.48358758290609 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 30.264373240263566 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 30.042704298141153 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 29.862997929255165 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 29.648740578670893 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 29.52772307395935 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 29.322103350770238 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 29.102292629388664 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 28.892186799139346 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 28.693224959903294 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 28.48246728290211 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 28.313861233847483 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 28.128053334721347 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 27.926472507674116 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 27.730611138424628 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 27.515555222829185 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 27.306554743501007 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 27.091752867544848 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 26.88153503054664 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 26.67417550086975 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 26.48638701438904 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 26.277744192065615 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 26.066387952263675 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 25.8579260040732 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 25.678852917491525 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 25.470911605017527 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 25.262624381293712 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 25.079374949137367 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 24.877801715511165 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 24.70023971634942 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 24.506561358769737 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 24.31187162901226 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 24.105321110068978 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 23.917684824038773 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 23.713125310366667 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 23.51900625228882 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 23.32588819515558 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 23.122925392011314 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 22.931089053671045 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 22.730632305145264 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 22.528890932307526 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 22.32798285816991 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 22.127166693238006 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 21.952158884568647 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 21.755344937356668 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 21.55851048893399 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 21.358201862691523 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 21.161719228910364 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 20.95821229360437 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 20.757009993208214 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 20.561437067232635 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 20.360165019830067 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 20.161642711187145 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 19.96723780340078 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 19.764057193139585 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 19.57283043861389 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 19.38997231615652 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 19.189818905849084 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 18.995611063485008 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 18.81302833557129 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 18.620329754693167 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 18.429200721236896 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 18.236751159774922 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 18.03658653188635 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 17.838978603345538 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 17.650969310240313 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 17.456108580838453 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 17.26043050629752 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 17.062218303174042 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 16.866149375313206 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 16.66648865782696 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 16.47533472653093 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 16.280167483875896 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 16.078964900162262 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 15.884513061587551 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 15.686651547749836 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 15.493996492102127 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 15.294715943883679 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 15.096211671829224 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 14.898469640362647 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 14.700160217285156 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 14.50112229301816 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 14.306500992437046 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 14.112120062112808 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 13.914749797924545 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 13.729455911196194 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 13.532321571393776 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 13.337378653613003 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 13.142025373932116 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 12.943080884307177 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 12.75146358984488 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 12.558056775261374 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 12.363019821417593 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 12.16441163463869 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 11.966627956294326 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 11.769273212977817 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 11.571185852618928 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 11.37765633220404 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 11.179234032864336 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 10.980902194976807 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 10.786510599070581 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.590186399956272 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 10.392164624467188 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 10.195778685647088 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 9.996845358970182 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.800662755966187 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.604857064240816 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 9.40924546593114 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 9.212827070086611 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 9.017643027491383 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.820351316082863 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.623303388937925 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.425925002735891 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 8.22904578643509 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 8.032938108504194 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.83561509847641 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.639006856065359 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.453502404836961 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.255745171037919 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 7.058218211662479 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.861138798973777 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.664027544389288 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.467190014388033 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.271955671764555 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 6.07487164305512 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.877851023393519 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.681605004427725 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.485133537026339 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.2884413245096376 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.092926222702553 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.8962333883558 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.700010570612821 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.503404646943518 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.3068381561322155 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.1104872293312456 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.9142263995276556 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.7189339181994865 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.522611618041992 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.327247181876761 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.132090506346329 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.93623423576355 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.740812870763963 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.544828704334198 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.3489599075723198 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.153051271640434 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.9582899118724622 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.7624744208071246 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.5667925775051117 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.371587984302501 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.175714212594573 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.9797249573927659 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.7836855090394311 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5877410046340246 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.39177302399066966 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.19586319060780893 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   39.2s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  28.234 seconds)

**Estimated memory usage:**  1949 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
