
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f595a37f640>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 149.49321746826172 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 25.344660997390747 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 23.645854711532593 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 22.969408750534058 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 22.476425647735596 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 22.152374982833862 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 21.956187963485718 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 21.829605000359674 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 21.620824813842773 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 21.45137929916382 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 21.304296493530273 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 21.2147630778226 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 21.132779121398926 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 20.96895476487967 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 20.814414739608765 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 20.669677178064983 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 20.5583655834198 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 20.40643198349897 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 20.26396550072564 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 20.120435099852713 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 19.989506006240845 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 19.864877360207693 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 19.727626822211526 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 19.594361605851546 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 19.472536722819008 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 19.369877576828003 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 19.259298507983868 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 19.16755239168803 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 19.04143738746643 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 18.91840945441147 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 18.7963125705719 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 18.68712156818759 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 18.57605391740799 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 18.463536580403645 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 18.34913785317365 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 18.254376207079208 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 18.160257471932304 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 18.058994995581138 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 17.94587731361389 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 17.850535649519703 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 17.74775791168213 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 17.656129115965307 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 17.557320072537376 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 17.487011754235557 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 17.38493969223716 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 17.279070324367947 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 17.176814597585928 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 17.065486968831813 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 16.958592534065247 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 16.848512717655726 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 16.739971160888672 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 16.631819640888885 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 16.53796276679406 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 16.43550732000819 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 16.32538547339263 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 16.216848546808414 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 16.10929891041347 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 15.996892046510126 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 15.881893108631001 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 15.769132545438863 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 15.666099548339846 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 15.555991340856083 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.438958491048504 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.319181029758754 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 15.207135111093521 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.091234610630917 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 14.977779446226178 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 14.864583186249234 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 14.75160392592935 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 14.638068327005358 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 14.533430542264666 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.42524255161554 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.31326209174262 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.202238200462029 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.094124723125148 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 13.980429967244467 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 13.865082665493613 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.751186946769813 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.64136178065569 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.533321124088914 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.429951071739197 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.317702472945792 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.20624871370269 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.099111999373838 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 12.989166180292765 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 12.876542063320384 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.76366574265236 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.652308368134774 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.541471654718572 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.429830725273389 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.31801109843784 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.209994944897327 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.103467433348946 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 11.993982545791134 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.884419081058908 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.777611895611413 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.672864337762196 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.56359873850321 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.45161295910271 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.339589003360631 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.232096910476685 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.122479285344038 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.009335036371269 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.898558790243946 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.786984590383677 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.67894637017023 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.567526196533779 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.455160470766442 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.341946460582593 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.22998562865301 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.118483109907672 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.006302028088957 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.893416438783918 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.780615059675368 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.670392931553355 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.560171044391135 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.449181614250973 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.33857917989421 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.225474575818597 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.112177410045591 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 8.997993787129719 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.885018876761444 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.772105416313547 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.660813938311444 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.547344307745657 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.435564947128295 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.324211219000437 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.21282802792046 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.100591480731964 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 7.989380708960599 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.877859647457416 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.767284544369646 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.656803535692619 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.546389904237332 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.43436459996807 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.323279972429629 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.213663437787224 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.102997798989289 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.991820940072985 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.880925108202927 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.7707372052328925 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.659282707998939 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.548077992989984 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.436996376597798 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.326475183169047 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.214973227731113 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.103054801078692 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.991298862055046 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.879483177855208 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.768540137566176 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.656037171681722 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.542872345210701 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.4341163886220825 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.327127830654967 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.229150406725995 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.116460161824381 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.003596739891248 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.890652866120551 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.777574110634719 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.664370278892277 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.550855219364166 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.438099333958596 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.324510742116857 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.210491943944451 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.096741309980067 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.9836701913313433 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.8703509870781954 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.7569894961968155 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.6433590480259483 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.5301513629552175 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.416689984938678 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.3026162699649206 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.189067269480506 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.075799652606766 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.9618016001821936 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.8474478721618652 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.7332303524017334 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.619211649490615 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.5059050468916304 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.3920765975334124 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.277901066674126 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.163940129359124 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.050147674895905 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.9364343666639485 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.822497678839642 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.7091261438421301 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.5958301457025672 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.482010845194526 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3681093378269924 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2541998038216242 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.14035637755143 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.0264311610716177 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9124509592851002 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.798423712735349 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6843782724793425 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5703306381519024 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4562829562595912 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3422426596510834 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.22815349607756646 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11407041549682617 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   22.8s finished

    1961 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  59.454 seconds)

**Estimated memory usage:**  1866 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
