
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fdb5831ad00>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 147.1877098083496 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 25.49169397354126 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 24.218757390975952 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 23.841973145802818 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 23.50553798675537 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 23.22144055366516 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 23.02575476964315 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 22.833818537848337 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 22.619007110595703 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 22.435540384716457 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 22.21909785270691 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 22.013102596456356 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 21.826216061909992 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 21.634241305864776 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 21.502215794154576 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 21.38632893562317 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 21.264697909355164 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 21.127422515083765 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 20.982342349158394 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 20.843823897211177 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 20.704411268234253 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 20.577195894150506 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 20.539940357208256 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 20.406146360480268 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 20.27853473027547 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 20.14507222175598 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 20.009883587176983 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 19.88684555336281 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 19.758284977504186 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 19.63157479516391 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 19.50290036201477 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 19.37844880165592 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 19.255251288414 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 19.135075215137366 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 19.015046484330124 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 18.89222768374852 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 18.77702021598816 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 18.66719097060126 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 18.55400310064617 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 18.43271802021907 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 18.314868927001953 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 18.189402615151753 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 18.068797100157965 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 17.949572890303855 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 17.8333852074363 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 17.714613967471653 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 17.598694718402367 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 17.480673840705386 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 17.37928851445516 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 17.26330685128971 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 17.163650035858154 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 17.08408524943333 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 17.00320258507362 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 16.89560205081724 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 16.782715329417478 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 16.664495663209394 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 16.549641609191895 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 16.4332467589462 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 16.316654723266073 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 16.193930880498076 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 16.076152324676514 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 15.955237638754923 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.83736382761309 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.721006022559271 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 15.607367128133774 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.491711524816662 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 15.37774338866725 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.324429262929888 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 15.209892006481395 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 15.09744039480237 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 14.978672402245659 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.861266418242119 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.745148128933376 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.628311186620634 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.505280572014886 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 14.387948910395306 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.272430081116525 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 14.154259647641863 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 14.036756821167774 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.918798950654041 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.801994919776917 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.682344692724723 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.56544523122834 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.443404200565384 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.320097276142665 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.197232653112973 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 13.076137054798213 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.959194542347701 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.839556520635432 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.720244597852899 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.60182817776998 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.486116317602304 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.372072240580684 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.256927449216127 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.142981498799426 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 12.029030762220685 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.913230935732523 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.799452093458667 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.685882393194705 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.5718792688967 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.46236276626587 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.348815002063713 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.232249933130602 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.116391624061807 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 11.001569454486553 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.88440972282773 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.765240151927157 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.648023705616176 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.531324545542398 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.412822167807763 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.293934887105769 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.174279756374188 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.053861004965645 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.935542370365784 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.817211987679466 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.699465886406276 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.580585857917523 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.462476832234962 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.343745086152675 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.225015572139196 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.107048829396565 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.989309269534656 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.872588751746006 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.756767484230723 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.64002480814534 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.522315740585327 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.406779781220452 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.2907042353172 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.176415652036667 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.060451015945553 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.943920777394221 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.828985900369309 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.7127087766473945 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.597074947859112 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.4807276263165825 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.365306907229953 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.249362721162684 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.133420188931653 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.018191085345503 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.90296693156949 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.787266867501395 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.671607129117276 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.556604099945283 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.441162951342709 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.326677680015564 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.212657468072299 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.098268094128125 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.9839541441729285 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.869365679251182 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.756075174216456 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.641944169998169 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.52745916827625 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.413270373093455 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.299103394053341 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.18513646373501 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.071254591788016 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.957909828577286 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.84359429748195 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.730394810060911 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.616522768008634 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.502670586109161 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.388773570149582 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.275002773897147 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.161301165270659 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.047540856570732 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.933944622675578 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.820662570286946 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.707696092342902 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.594409533909389 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.481179412300065 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.367964113459868 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.2550773202327257 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.1421282235966173 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.0292807714098453 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.9167658953831115 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.8040762288229804 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.691288503733548 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.578491286369367 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.465796526898159 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.3531432378225485 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.2405298286014133 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.1280305161660547 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.015497142141992 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.9030351417312206 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.7907560182654338 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.6786416350184261 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.566422575263567 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.4542961694340018 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3421930049328092 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2300925052985943 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.118195508655749 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.006262027780423 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.8943600257237752 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7824754171420872 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6706258144575297 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5588053862253824 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4470205161036277 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3352194038139382 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.22345447781110053 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11172896773371864 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   22.3s finished

    1976 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  59.547 seconds)

**Estimated memory usage:**  1896 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
