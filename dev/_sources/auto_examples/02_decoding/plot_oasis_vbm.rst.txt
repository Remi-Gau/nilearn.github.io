
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fd5d78cb4c0>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 209.1360092163086 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 34.74030065536499 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 32.393643379211426 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 31.324424584706627 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 30.76065731048584 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 30.289552688598633 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 29.906944195429485 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 29.764164584023614 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 29.462997436523438 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 29.261086887783474 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 29.03613805770874 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 28.852031577717177 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 28.67822003364563 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 28.52027561114385 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 28.334993566785542 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 28.203009843826294 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 28.03860080242157 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 27.857529822517847 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 27.663330448998344 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 27.500993628250928 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 27.359076976776123 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 27.24992831548055 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 27.165966705842454 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 27.02563206009243 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 26.890193780263264 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 26.792600870132446 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 26.637784481048584 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 26.479081198021216 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 26.322033541543146 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 26.16806829386744 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 26.017305930455528 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 25.84853999076351 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 25.71705973148346 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 25.6594670902599 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 25.501496974159693 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 25.34107732772827 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 25.18713683552212 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 25.03007841754604 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 24.869928058825042 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 24.717951823503547 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 24.57317066192627 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 24.43988705844414 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 24.297173715773084 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 24.13513277297796 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 23.96422453360124 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 23.79105557335748 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 23.64183710969013 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 23.470796859010736 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 23.309921860694885 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 23.144133884079604 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 22.97370457649231 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 22.813082012475704 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 22.64255895981422 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 22.476723000688374 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 22.312570880960536 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 22.15453180399808 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 21.995422840118408 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 21.82644570501227 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 21.657992190328137 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 21.500677137051596 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 21.336640437444053 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 21.177871254623913 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 21.035028473023445 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 20.885892837766615 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 20.717998653650284 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 20.556440811890823 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 20.391757892839838 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 20.229514029488634 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 20.068966837490304 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 19.90687810856363 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 19.746006659099034 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 19.586637678280685 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 19.425029754638672 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 19.266165906435823 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 19.105424513687957 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 18.951353232065838 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 18.791025764063786 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 18.63089094223914 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 18.477579226860634 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 18.320128365408017 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 18.16279685497284 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 18.009239906146203 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 17.856242156610257 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 17.700232649423988 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 17.54063147590274 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 17.385013678494623 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 17.229581644368725 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 17.082195630018738 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 16.93207463351163 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 16.774010567182906 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 16.61583169301351 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 16.458527292524064 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 16.306615933128025 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 16.157509921699443 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 16.0058365426165 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 15.859530649687116 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 15.709979653358458 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.561135825422621 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 15.405741706186411 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 15.254052966532079 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 15.100464820861816 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.948803623123924 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 14.801385589674409 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 14.64757656819612 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 14.492732048034668 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 14.34433627128601 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 14.225845714785018 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 14.079302734303697 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.93159247327734 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.781338698273405 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.628312197598545 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 13.475415614274171 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 13.321791274206978 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 13.169300870557802 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 13.017513555392885 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.864173453787098 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.710850575874591 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.555665590824226 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.40495362524259 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 12.25281846423109 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 12.10084867477417 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.950419303799464 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.798753664141797 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.646564770520218 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.495103090040146 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.342610883712767 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.19138268440489 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 11.039983858273724 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.890988737344742 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.739803596984508 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.59068670639625 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.43893741105349 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.287848313649496 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.136373245626464 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.986239639680777 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.836193976578889 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.686302521649528 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.535699524148537 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.385567385217417 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.235816953851165 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.0864611353193 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.940175643203952 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.790348785024294 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.640636110639239 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.490643633736505 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.340360838791419 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.18943029233854 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.03879892258417 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.887484685794727 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.7363865007490125 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.585118691126505 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.4349797719361765 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.285506549634431 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.136178672703264 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.986991095852542 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.836125350767567 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.68572570116092 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.536894623640996 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.3868295422083206 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.236229505179064 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.085402846336365 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.934896383226288 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.784028435930793 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.632481513579199 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.480681663606225 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.329434091394598 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.178702641682452 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.027351994714337 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.876033646719796 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.72488460738278 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.573588160907521 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.422033454939636 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.270568991816321 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.119180757875387 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.9670276888485616 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.814489228384835 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.661909526044672 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.5098584021552135 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.3571243366498624 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.2049074705752583 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.053060796525743 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.9003986653702034 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.7477983039814036 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.595288723544345 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.44281180008598 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.2900846133360995 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.137527442747547 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.9848363437754586 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.8323379171655532 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.6796047851522131 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.5270723920119436 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.3745293592283239 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.2222920358181 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.069751002010286 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9171318540868071 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7644115166786389 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6116470220137615 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4587412957612633 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.30582185947533813 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.15292728126947605 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   30.6s finished

    1965 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  16.653 seconds)

**Estimated memory usage:**  1932 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
