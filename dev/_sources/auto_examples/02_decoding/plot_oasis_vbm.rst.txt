
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f22e5c5bdc0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 187.36839294433594 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 40.184648513793945 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 37.914912700653076 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 37.22452425956726 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 36.62767243385315 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 36.1967875957489 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 35.857125997543335 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 35.54678354944502 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 35.253204345703125 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 35.00984811782837 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 34.775991678237915 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 34.59675797549161 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 34.3720018863678 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 34.17370563287002 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 34.01335052081517 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 33.789563735326134 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 33.570961117744446 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 33.35506498112398 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 33.15987592273288 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 32.97044915901987 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 32.75859546661377 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 32.55910247848147 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 32.35672467405146 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 32.171164077261224 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 31.992554505666096 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 31.81267738342285 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 31.63127710269048 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 31.432505148428458 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 31.237120083400182 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 31.08634277047782 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 30.889121452967327 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 30.71798519165285 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 30.66686761379242 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 30.848355163227428 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 30.869295695248773 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 30.782815422330586 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 30.57528527577718 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 30.366540889482238 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 30.15834278809397 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 29.950302888185554 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 29.749157905578613 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 29.564732464348396 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 29.35889636902582 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 29.147486021352368 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 28.940640514547173 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 28.735325309965347 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 28.537979602813724 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 28.339032244175037 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 28.13539163271586 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 27.935494641868438 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 27.740698099136353 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 27.54293989667705 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 27.346923846464893 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 27.150559254412382 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 26.95268295429371 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 26.755839001048695 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 26.562747206006733 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 26.366508688843037 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 26.173552907746412 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 25.97675766379146 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 25.786809047063194 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 25.592256022281337 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 25.39809211607902 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 25.209906415333823 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 25.070556670427322 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 24.883996560023384 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 24.696660829312872 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 24.50615997100944 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 24.32419765696806 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 24.13302544925524 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 23.93970026288714 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 23.74748651746293 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 23.556727939181858 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 23.368717023771104 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 23.184681086926847 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 22.994261185328167 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 22.803238843616686 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 22.613674210263536 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 22.430553723604252 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 22.2460463016848 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 22.061979174613953 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 21.872788070160667 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 21.68356751814121 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 21.493136428924927 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 21.308704103742325 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 21.122285688624665 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 20.933455683464228 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 20.744691873418876 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 20.556112852963533 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 20.367549130086147 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 20.17989566591051 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 19.992672676568503 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 19.807027443595555 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 19.619501052364228 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 19.432309013731935 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 19.246014682870165 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 19.06385898590088 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 18.87698034896064 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 18.689961623172373 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 18.503599443820992 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 18.316915035247803 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 18.13468275447883 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 17.949452647975846 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 17.76389833561425 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 17.577909763042744 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 17.391819011597406 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 17.20674127002932 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 17.021399313044324 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 16.836023101100217 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 16.650268106285584 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 16.464982704682786 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 16.280029350572878 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 16.095064640045166 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 15.909948621175985 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 15.725141466709605 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 15.540252353834068 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 15.35539380435286 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 15.17083817261916 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 14.986853676327206 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 14.80434288097029 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 14.620595614115397 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 14.438332350786068 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 14.254032365611343 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 14.072150464949567 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 13.888615254432924 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 13.70423641204834 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 13.51952528196668 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 13.335051157343106 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 13.151066198945045 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 12.967181484828624 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 12.782810669678907 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 12.598756875700623 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 12.414885679880777 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 12.230834510989656 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 12.049529826463157 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 11.867470838405467 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 11.684256497551413 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 11.500199965316884 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 11.31652069437331 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 11.132600159953824 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 10.949364423751831 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 10.765839064374884 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 10.58247836878602 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 10.39881623208106 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 10.21517789363861 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 10.031823092493518 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 9.848639850747094 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 9.66588177161963 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 9.483967310673481 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 9.300465326181195 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.117582082748413 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 8.936312564950905 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 8.75300834053441 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 8.57002629641614 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 8.387329052020977 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.204321484411917 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.021302712269318 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.838287347441266 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 7.655222255972366 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.472360739917875 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.289320528507233 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.106972432284622 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.924649014885042 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.742053559952718 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.559264270270743 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.376622106089736 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.193845987319946 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.011319264680326 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.829376856486002 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.646665392542731 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.463998920777265 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.2814363234224375 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.099083623220754 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.916560902071827 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.734055212174339 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.551938806261335 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.370146718892184 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.188087742207414 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.005954712964176 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.824032401239406 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.641681883070204 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.4593973186134632 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.277003188709636 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.094759393910893 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.9126748209414273 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.7304416669381633 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.548267064555999 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.3661121047116858 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.183981119318211 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.00193687721535 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.8201733262915358 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.638171620393923 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.4560775061448414 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.2740306261289922 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.0920454472610632 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.9100644160539676 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.7280368026421994 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5460375759202212 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3640055415606258 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.18199646532835073 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   36.4s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  3.764 seconds)

**Estimated memory usage:**  1878 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
