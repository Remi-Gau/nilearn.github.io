
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-142

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 143-145

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 145-158

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 159-161

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 161-176

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f6f8fae69a0>



.. GENERATED FROM PYTHON SOURCE LINES 177-179

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 179-223

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 243.03436279296875 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 45.81906223297119 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 41.936301469802856 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 40.57492542266846 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 39.7060489654541 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 39.0613317489624 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 38.689263661702476 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 38.349202326365884 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 37.95700263977051 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 37.69223062197367 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 37.47334313392639 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 37.34279030019587 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 37.09963456789652 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 36.90251700694745 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 36.656844990594045 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 36.41103045145671 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 36.177260637283325 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 35.93736257272609 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 35.7217382589976 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 35.49746537208557 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 35.24792146682739 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 34.99664792560396 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 34.95107741789385 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 34.72397219616434 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 34.509307066599526 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 34.3003044128418 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 34.08359076426579 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 33.92453558356674 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 33.730215821947375 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 33.493700537188296 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 33.27423961957296 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 33.06069607119406 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 32.82850420475006 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 32.59474460283915 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 32.38526117100435 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 32.168037210192 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 31.939590480592514 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 31.720642721330798 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 31.521046701230503 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 31.348311632107468 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 31.140483856201172 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 30.927131687722554 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 30.71667604219346 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 30.502933757249696 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 30.30058979988098 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 30.09271910455492 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 29.881781329279363 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 29.663612061358513 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 29.46084682146708 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 29.264940544050567 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 29.06454348564148 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 28.868959384806015 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 28.68018309886639 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 28.49341863506245 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 28.309999836815727 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 28.200942407954823 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 28.000514847891672 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 27.801227230774728 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 27.609533655232394 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 27.4057499352148 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 27.205536444981895 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 27.003931635715922 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 26.811125232327367 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 26.61522507289099 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 26.413019061088562 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 26.217117658028236 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 26.027517557144165 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 25.822622459326215 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 25.623854398727417 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 25.446164684019227 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 25.254047666277206 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 25.067010177692897 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 24.870121002197266 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 24.674154043197632 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 24.47873593665458 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 24.29015874862671 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 24.0963336543033 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 23.904226355738455 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 23.71175398582067 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 23.513945479936236 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 23.332447171211243 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 23.144270075692074 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 22.961258911504977 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 22.77708157573838 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 22.589930239177885 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 22.405409967198093 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 22.21929084977438 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 22.029657459807122 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 21.84088282151656 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 21.655446647258287 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 21.464934216605293 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 21.27502804012089 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 21.091903613961264 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 20.913376123674457 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 20.7256601566964 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 20.53203350619266 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 20.341050247351326 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 20.14793477844946 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 19.952616560215855 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 19.775521107394283 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 19.585858583450317 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 19.38989496231079 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 19.197493398890778 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 19.005844023621197 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 18.81704433147724 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 18.630658047539846 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 18.44519713689696 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 18.25669291086286 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 18.066748513115776 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 17.872561365092565 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 17.687532988461584 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 17.492075980246604 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 17.296142884663173 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 17.10053101472095 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 16.90722445856061 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 16.712311952010445 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 16.515622467830262 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 16.320562733544243 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 16.130422179981814 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 15.937936444242462 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 15.740199247996012 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 15.543525248519646 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 15.347831174975537 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 15.152603827840913 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 14.955302430737403 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 14.75832781791687 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 14.56048852299887 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 14.36555931136364 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 14.170121625065804 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 13.972681176754854 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 13.776358109254103 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 13.58150882939346 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 13.385241407336611 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 13.190189521115526 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 12.995196221479729 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 12.799615021105165 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 12.602279999676872 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 12.40563052936192 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 12.210411890693333 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 12.013476862324227 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 11.816773755209786 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 11.620303662956184 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 11.423416829444992 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 11.227757242176082 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 11.031486445003086 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 10.838702234728583 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.643497133908205 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 10.446021848795366 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 10.248300062643516 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 10.04934003689145 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.85153826077779 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.65389188709638 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 9.455403478522049 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 9.257310150495542 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 9.062150924236743 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.865452504927113 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.66943560502468 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.47348291555028 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 8.27689029295233 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 8.07976666636437 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.882285177707672 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.68567404983947 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.4882729259538054 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.291079828344239 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 7.093441608475476 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.896749012397997 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.700801806277539 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.504555106876853 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.308749425978887 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 6.112609135328665 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.914802439072553 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.717016392981099 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.5198244216830235 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.32270767647407 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.125062657498765 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.927926915032523 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.731581763787703 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.5339965335393355 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.336653572789738 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.139882430017994 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.942315313551161 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.7458276985758574 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.5492151936331946 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.352505668264921 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.15531879922618 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.9580572489145642 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.7610517342885337 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.56390110949144 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.366360618713054 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.1691646500239297 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.9719152576044985 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.7750050160273207 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.577732334534327 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.380491587782153 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.1831951977051411 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.9859821857550205 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.789023039292316 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5918811481011096 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.39457670365921177 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1972977528020964 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   39.4s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  27.314 seconds)

**Estimated memory usage:**  1936 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
