
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f5743297d60>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 168.7169075012207 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 25.005616903305054 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 23.353455305099487 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 22.606232961018883 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 22.21938705444336 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 21.8662748336792 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 21.629385948181152 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 21.4807208946773 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 21.31914710998535 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 21.153728087743122 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 20.975290536880493 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 20.829875642603096 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 20.643968979517616 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 20.495637820317196 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 20.38984751701355 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 20.263800541559856 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 20.166563153266907 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 20.099806392894074 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 19.99232562383016 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 19.865441786615474 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 19.73388934135437 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 19.595155125572568 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 19.470214128494266 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 19.352907377740614 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 19.230790297190346 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 19.12817144393921 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 18.996670796320988 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 18.880514012442696 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 18.758770738329208 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 18.63972549602903 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 18.613689978917442 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 18.499545866443263 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 18.386919915676117 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 18.269543850060664 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 18.157181234920728 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 18.036792959485737 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 17.9255080487993 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 17.806013442374564 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 17.694051090039707 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 17.574786809774547 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 17.461054801940918 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 17.34450046027579 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 17.235933723903837 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 17.124400266381198 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 17.012947537682273 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 16.903355810377334 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 16.79427456855774 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 16.68268406137507 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 16.56568177541097 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 16.448296868071264 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 16.337859392166138 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 16.2221338187947 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 16.112865466337936 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 16.0059786652619 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 15.905753241644966 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 15.804187601262873 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 15.697516373225621 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 15.58981498500757 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 15.481267115165446 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 15.374237404031268 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 15.265822807947796 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 15.160357322849212 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.052111756417057 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 14.945914170098682 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 14.840293169021606 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 14.731735082773064 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 14.623696832945852 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 14.514570417688853 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 14.409912207547356 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 14.302917839824289 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 14.196410996573313 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.0903149457045 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 13.981779310438368 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 13.873770707274137 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 13.76385438120043 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 13.657238880793255 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 13.548550505387155 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.442535833878951 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.336914539337158 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.229614607895476 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.120248556137085 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.013350701626438 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 12.90942907333374 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 12.805020332336426 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 12.699301117942447 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 12.598041534423828 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.490568676660226 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.38272257782947 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.275235436179422 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.166947327303083 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.05614784028795 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 11.943578093916505 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 11.830412211625474 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 11.71585762628945 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.60209122617194 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.490242694553578 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.378744641939798 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.268071850550543 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.158499975593722 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.046322856286558 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 10.937662124633789 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 10.826489585461003 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 10.714058212205476 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.601470866249603 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.488952269920937 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.377491156260172 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.266152998186508 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.154492253455047 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.044918881522285 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 9.933726306355327 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 9.822728698903864 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 9.710582099519335 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.599628176007952 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.489104627507977 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.379624479695371 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.268427237220433 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.158188351269427 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.047640189146385 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 8.938769578933716 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 8.829288350433863 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 8.719894727071125 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.610313305184862 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.499959003729899 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.389929439963364 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.280449705739175 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.170804738998413 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.059810237279015 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 7.94958630696995 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 7.840012326836586 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 7.7311188287513195 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.621111961511465 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.510829861837489 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.40070139278065 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.290637880339658 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.181085839200375 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.070995993084377 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 6.960954666137695 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 6.851723336825406 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.741801683453546 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.632665320266065 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.523078782217842 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.415203581465051 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.306466334302661 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.197131468699529 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.088193231158787 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 5.979575855978604 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 5.870996690776249 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.762204231859065 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.652531346759281 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.544221311607617 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.4350957075754796 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.326418870332225 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.216955260226601 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.108061899546705 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 4.998814415622067 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.889549086170812 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.781768187498435 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.67246956430423 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.562846506698222 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.453908280006744 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.344722211360931 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.23585355503959 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.1270539495680065 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.018707936526807 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.9097055632893634 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.800945513176196 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.6924501614398264 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.5834025480076224 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.474565006437756 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.3654026604263034 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.2568578860338997 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.1480792028862132 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.039289335871852 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.9303871854881334 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.821793805593732 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.7131266934531073 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.6044846773147583 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.4955905211173883 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.3868231907319486 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.2782659077777545 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.1699556509653726 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.061473118007512 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.9528860600440057 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.8442104996227828 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.7356830472531526 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.6270874319849788 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.518426569559241 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.4097762056850494 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3012065227995526 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.1927754122113423 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.0843669991744191 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.9760051597475382 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.8674669067064921 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.75896027915836 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6505345757474604 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.542084840627817 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4336614122196119 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3252437284150099 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.21682728179777513 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1084145804745468 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   21.7s finished

    1984 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  57.660 seconds)

**Estimated memory usage:**  1931 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
