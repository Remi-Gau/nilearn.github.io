
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fc10d592160>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 208.89759063720703 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 45.6319854259491 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 44.77317523956299 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 43.345203479131065 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 42.87450933456421 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 41.92791223526001 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 40.60874080657959 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 37.53106600897653 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 35.24638366699219 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 33.45246039496528 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 32.012842655181885 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 30.84204086390409 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 29.808693170547485 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 28.951151756139904 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 28.194347517830987 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 27.52877179781596 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 26.91820526123047 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 26.378596207674814 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 25.87312814924452 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 25.417171101821097 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.98155403137207 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.639750639597576 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.25245516950434 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 23.888903151387755 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 23.55688635508219 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.235475063323975 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 22.927211908193737 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 22.640150635330766 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 22.372534445353917 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 22.10852763570588 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 21.85747559865316 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 21.615565407660696 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 21.37864100933075 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 21.144815481070317 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 20.914835565230426 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 20.6919618334089 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 20.476713392469616 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 20.277475763011623 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 20.083488690225703 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 19.8945892285078 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 19.703410148620605 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 19.51447485714424 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 19.33220949627104 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 19.149592820988143 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 18.977937958457254 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 18.807391113705105 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 18.637681173241656 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 18.47245128104027 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 18.31138221422831 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 18.14470526150295 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 17.985244274139404 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 17.826615595350077 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 17.671938511041496 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 17.548953497184897 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 17.405671455242015 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 17.273720546202224 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 17.138277666909357 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 17.00015163421631 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 16.852063302336067 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 16.70483835672928 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 16.56802272796631 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 16.426657278029644 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 16.28162997768771 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 16.139567091351463 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 15.999236553907394 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.858899171535787 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 15.72173718250159 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.58377745614123 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 15.448320066227632 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 15.316587157871412 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 15.183795656476702 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 15.050749348922515 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.918386247422958 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.785124465210798 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.653171951706344 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 14.523483514785767 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.395572687450208 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 14.275379995246986 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 14.149984940504416 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 14.01993208595469 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.890580773353577 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.761129008399116 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.632750941485893 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.50904913982713 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.38153236252921 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.255213302724503 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 13.12927466769551 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 13.00380902454771 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.879226077686656 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.756271354268106 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.634867164823746 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.511028740432236 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.386272368223771 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.263742944245699 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.142668013877056 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 12.019064878162586 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.896119177341461 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.77494257504178 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.654990454109349 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.532310753157644 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.41014289855957 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.288941723285335 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.168024759666594 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.048912914053908 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.930304453923153 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.810721408753167 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.690496197286642 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.571548862992046 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.454294204711914 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.335812192444408 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.21888414296237 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.100209459528193 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.982687081609454 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.865528638383983 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.74993063692461 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.632873369299846 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.51550241996502 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.397785404808502 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.279941611370798 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.163335944424157 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.046605745951334 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.929250931936847 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.813066517720458 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.696729503026821 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.580439121492448 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.465870475769043 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.34975712639945 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.233466542611911 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.117745950818062 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.001606065173481 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.88579091658959 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.770116607651455 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.654099616137418 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.5404493611558046 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.425566036309768 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.310415223792747 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.195520737591911 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.080056649925065 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.965423051861749 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.849897683095588 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.735292400632585 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.621078259556006 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.506789385432929 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.392658558758822 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.2787349753909645 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.164942527639455 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.0507026077949835 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.93738180926057 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.823248083527024 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.709338151368519 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.595414638519287 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.4822369442870285 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.369129908712287 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.256882541319904 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.144744492196417 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.033646075956283 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.922020563712487 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.808819125412376 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.69630478001848 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.583897397203265 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.471511662006378 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.358664613332808 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.245987641958543 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.133542596196835 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.020947473805125 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.908390319708622 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.795812038053949 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.682967131723187 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.5706478300548734 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.458216743356377 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.345840916914099 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.2338203059302435 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.121644397114599 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.0095207112372955 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.8972991225363196 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.785208327429635 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.673166036605835 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.5613820283426403 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.449520968319325 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.337901142056428 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.22630148463779 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.1147230659400558 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.0030122903677134 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.8919251968300408 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.780338826386825 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.6686681283486857 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.55883958519146 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.4472282493815702 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3356708465738498 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2243449637498804 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.1127660399989077 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.0013000702982797 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.8898252248764038 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7784452796600025 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6671074862332689 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5558258447891626 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.44456554918873065 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3333582611858542 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.22220161707714353 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11108603189938032 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   22.2s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  58.663 seconds)

**Estimated memory usage:**  1869 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
