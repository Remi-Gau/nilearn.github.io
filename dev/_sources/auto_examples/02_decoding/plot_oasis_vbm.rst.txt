
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print("")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f3e7c4bdc70>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 226.3164520263672 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 42.25407004356384 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 39.744651317596436 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 38.79823382695516 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 38.373191356658936 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 37.9759476184845 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 37.73676371574402 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 37.40952781268529 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 37.13722801208496 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 36.89488644070095 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 36.63091683387756 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 36.39072684808211 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 36.14448539415995 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 35.9002590913039 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 35.705414158957346 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 35.48529179890951 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 35.26259160041809 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 35.07112320731668 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 34.84928782780965 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 34.6316736999311 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 34.442447662353516 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 34.24842590377444 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 34.057806643572725 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 33.858798825222514 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 33.65092865626017 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 33.45702242851257 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 33.27129380519574 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 33.084841083597254 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 32.89382260186332 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 32.68805573726522 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 32.47528672218323 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 32.280509048892604 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 32.09220689535141 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 31.897994055892482 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 31.70579375940211 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 31.508162600653513 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 31.30170687039693 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 31.112251384838206 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 30.916272037907653 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 30.722605148951217 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 30.53644561767578 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 30.346785934959968 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 30.144222725005378 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 29.953181094901506 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 29.753256602720782 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 29.548293246163265 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 29.350254680799402 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 29.15781062714597 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 28.984543402989704 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 28.788710720685064 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 28.594089031219482 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 28.407417040245203 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 28.21632486123305 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 28.022385106896454 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 27.82602360513475 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 27.642080111937087 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 27.45891768591745 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 27.266995036811156 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 27.077740603479842 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 26.884300389532314 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 26.695785681406658 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 26.507764972624233 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 26.31837196503916 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 26.1230387498462 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 25.93218830227852 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 25.735664441035347 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 25.54457571289756 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 25.357222457430254 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 25.159999146180994 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 24.971451410348866 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 24.77964847428458 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 24.589340092430653 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 24.401019626193577 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 24.21407175390688 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 24.024899096102327 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 23.834315538406372 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 23.71005129814148 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 23.51833153390265 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 23.326390627102974 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 23.139433061020284 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 22.948933124542236 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 22.760222938325672 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 22.57392557074384 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 22.382828132215753 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 22.19270736830575 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 22.003403313019696 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 21.815695740455805 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 21.62164944067769 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 21.426352457566693 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 21.233107132858105 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 21.040280951393978 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 20.848030512149517 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 20.659427497697916 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 20.46557209568639 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 20.275014020026997 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 20.08632166762101 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 19.8932258884112 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 19.699651251134185 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 19.512315419255472 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 19.325328419906924 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 19.136176109313965 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 18.944581492112416 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 18.765030000724046 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 18.572989697595244 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 18.381290068993202 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 18.187483901069278 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 17.994033898947375 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 17.801542589597613 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 17.611082439069396 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 17.418902279040136 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 17.228542067787863 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 17.036456550563777 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 16.843999896730693 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 16.651942485201676 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 16.459504738188627 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 16.265528005102404 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 16.073917915081157 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 15.8807349388416 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 15.68672742277889 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 15.49508168316689 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 15.30176830291748 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 15.110489451195583 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 14.918901443481447 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 14.728753179069455 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 14.538391567045643 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 14.345656299591065 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 14.15470780266656 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 13.963602180556048 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 13.772281497716904 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 13.57935722484145 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 13.386804030491755 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 13.195318096466647 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 13.005345315644234 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 12.812706508134541 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 12.619851628346229 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 12.42717143341347 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 12.235243516809799 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 12.04361241055231 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 11.850858370463053 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 11.659093120972887 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 11.466336556843348 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 11.274506161398921 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 11.08204593121166 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 10.891413553611383 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 10.701694554752773 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 10.511977006649149 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.320697408832915 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 10.130054480364533 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 9.938237293346509 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 9.747135122350398 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.556289354960123 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.365063248880652 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 9.174639024232564 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 8.983508753620722 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 8.792719234119762 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.60174318282835 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.41044091567015 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.218833057743728 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 8.027978480616701 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.8366925761384785 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.645191729068756 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.454055556599398 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.262540446387397 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.070889061945348 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.879500505400867 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.688705400987105 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.497404147343463 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.305504523351521 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.113787106105259 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.922498539354674 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.7315934265361115 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.540305157153926 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.348874286163685 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.157536191058297 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.966117346423796 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.774904557636805 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.5837695815346455 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.3927173196932685 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.201734162448497 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.010859881033444 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.819675736957126 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.628620270207442 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.4376361003288856 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.2464369554988677 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.0554797131082285 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.864381345542702 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.6734596811315066 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.482490415879112 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.2914721559970936 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.100489229121536 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.9095470905303955 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.7186445078924688 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.527660439411799 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.3366995463099502 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.1456615334933566 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.9546948885306333 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.7637441985461176 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5727979689080098 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.38184391609346024 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.19092722154741912 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   38.2s finished

    1995 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  0.357 seconds)

**Estimated memory usage:**  1829 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/nilearn/nilearn.github.io/main?filepath=examples/auto_examples/02_decoding/plot_oasis_vbm.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
