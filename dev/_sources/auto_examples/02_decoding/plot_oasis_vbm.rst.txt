
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (:term:`VBM`)
to study the relationship between aging and gray matter density.

The data come from the `OASIS <https://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard :term:`VBM` pipeline (using SPM8 and
NewSegment) to create :term:`VBM` maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the :term:`ANOVA` step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the :term:`ANOVA` step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

:term:`SVM` weights are very noisy,
partly because heavy smoothing is detrimental for the prediction here.
A standard analysis using mass-univariate :term:`GLM`
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 112-123

Prediction pipeline with :term:`ANOVA` and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

In nilearn we can benefit from the built-in DecoderRegressor object to
do :term:`ANOVA` with SVR instead of manually defining the whole pipeline.
This estimator also uses Cross Validation to select best models and ensemble
them. Furthermore, you can pass ``n_jobs=<some_high_value>`` to the
DecoderRegressor class to take advantage of a multi-core system.
To save time (because these are anat images with many voxels), we include
only the 1-percent voxels most correlated with the age variable to fit. We
also want to set mask hyperparameter to be the mask we just obtained above.

.. GENERATED FROM PYTHON SOURCE LINES 123-149

.. code-block:: default


    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 150-152

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 152-165

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-183

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f8e4e6ddbe0>



.. GENERATED FROM PYTHON SOURCE LINES 184-186

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 186-231

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 142.81034469604492 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 21.713672399520874 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 19.97511863708496 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 20.18970568974813 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 20.057713747024536 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 19.596200466156006 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 19.286198616027832 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 19.03383207321167 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 18.83053207397461 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 18.62503616015116 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 18.485193490982056 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 18.30376202409918 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 18.160063425699867 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 18.07225273205684 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 18.247052601405553 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 18.09092116355896 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 17.947487235069275 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 17.79962426073411 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 17.66510650846693 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 17.52887675636693 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 17.40204119682312 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 17.28476659456889 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 17.168650432066485 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 17.054321765899658 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 17.001468181610107 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 17.052923679351807 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 16.937531232833862 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 16.821340251851964 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 16.710900272641865 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 16.590005488231263 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 16.490747610727947 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 16.37712579388772 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 16.27051717042923 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 16.155777902314156 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 16.05259613429799 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 15.940271411623273 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 15.930885208977593 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 15.818615887616131 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 15.708872644524826 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 15.598358447735128 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 15.490513801574707 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 15.381350511457862 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 15.272723220643543 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 15.172733179358548 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 15.066792141307484 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 14.960448900858562 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 14.879112025965815 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 14.806581852283884 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 14.701224088668823 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 14.596150198761299 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 14.488680839538574 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 14.385957932939716 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 14.282129287719727 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 14.181638285798847 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 14.079974033214429 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 13.97678763216192 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 13.874460901532855 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 13.825170788848608 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 13.719320954947635 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 13.62750902822462 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 13.52312715848287 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 13.420553699868625 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 13.317363600577076 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 13.216009999078416 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 13.112697631120682 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 13.011323140217709 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 12.908425685131188 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 12.807887771236363 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 12.747156353557811 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 12.648911603982897 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 12.545008625302996 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 12.445669211132426 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 12.344390445285372 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 12.245885525664239 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 12.14304436219705 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 12.044439713160198 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 11.942156503075047 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 11.844254233620383 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 11.742617362584824 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 11.675796478609495 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 11.574472904205322 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 11.474827607472738 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 11.374305131958751 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 11.275633697050164 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 11.175396283467611 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 11.07578530031092 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 10.974957438402397 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 10.877007725595059 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 10.777797655625777 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 10.678735537475413 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 10.605382839838665 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 10.505009687863863 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 10.405465115671573 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 10.306682022668983 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 10.207879132412849 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 10.108562293805575 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 10.010433673858643 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 9.912144238186865 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 9.814054070686808 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 9.763877625417226 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 9.714471340179443 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 9.615195899906725 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 9.515170134750067 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 9.415751561377812 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 9.315914154052734 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 9.216726291747321 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 9.11711586646314 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 9.017465341871029 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 8.918492467315108 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 8.819559197907054 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 8.736496860330755 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 8.636095493763417 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 8.536276374544416 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 8.438616881328347 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 8.33908472144813 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 8.239297421082206 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 8.140113509934524 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 8.04119457750239 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 7.9419409986269685 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 7.842593307254695 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 7.743711948394775 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 7.658273791478686 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 7.55875256022469 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 7.460087597854738 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 7.361002952821793 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 7.2627503871917725 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 7.163280929837908 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 7.067644267570315 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 6.968443125486374 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 6.870575001073438 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 6.771931336476253 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 6.6735728988210665 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 6.586431402148622 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 6.488425434083867 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 6.389945289981899 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 6.2914051744672985 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 6.193048925960765 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 6.095363810114617 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 5.996195744777071 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 5.898663865576545 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 5.799841608319963 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 5.702134320076476 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 5.603685026437464 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 5.514098217437318 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 5.415691839324103 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 5.318197357243505 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 5.219961071667606 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.122089757400305 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.024416536898227 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 4.93142936693742 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 4.847671031951904 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 4.752344643043366 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 4.654244222139057 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 4.562545851165173 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 4.464574516593635 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.366876602172852 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.269243374848977 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.17152307291699 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.0732452990133545 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 3.9757245201734626 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 3.878275513648987 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 3.780366750977795 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 3.6829486540806142 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 3.5854223973911963 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.4929545507198427 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.395261287689209 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.297711495893547 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.2001792270980194 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.1029649007888067 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.005234979313506 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 2.907972798627966 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 2.810385547883329 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 2.7131252510603088 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.6157969615362973 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.518579751595684 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.424044302531651 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.3269787484949283 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.22955937439439 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.132460476307387 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.035106248695757 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 1.9379980299207897 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 1.840668267308019 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.7435403420374942 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.6466085663258705 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.5494790284529976 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.4533209800720215 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.35666823387146 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.2597000203668116 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.1627559611137877 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.0656756370786635 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 0.9686694270686099 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.8716550846998604 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.77467875679334 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.6777052286375371 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.5808152292192597 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.48392704816964954 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.3875074483910385 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.29056928121499 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.19369757055032136 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.0968313121316421 seconds remaining)
    1948 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 47.044 seconds)

**Estimated memory usage:**  1827 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
