
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fde0897ca30>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )  
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 188.09795379638672 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 32.65261268615723 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 30.44404649734497 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 30.126901070276897 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 29.439996242523193 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 29.093769550323486 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 28.705000718434654 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 28.5065279006958 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 28.170570373535156 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 27.86920936902364 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 27.60606360435486 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 27.35859573971142 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 27.13862403233846 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 26.991590591577385 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 26.799480301993235 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 26.59051545461019 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 26.413215279579163 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 26.258694185930143 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 26.10479900572035 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 25.97691855932537 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 25.846169471740723 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 25.707230613345192 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 25.5591310154308 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 25.418929742730185 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 25.270989100138344 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 25.128504037857056 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 24.981834411621094 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 24.90766614454764 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 24.75323019708906 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 24.59383542784329 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 24.45514996846517 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 24.33432452909408 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 24.197702944278717 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 24.08191035010598 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 23.973115808823533 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 23.861698048455374 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 23.73525595664978 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 23.588504011566574 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 23.442597364124502 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 23.302518080442383 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 23.174309730529785 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 23.037054201451742 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 22.895823149454024 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 22.761044042054994 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 22.618045221675526 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 22.49405180083381 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 22.356667580811877 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 22.22847658015312 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 22.10574408372243 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 21.975707414198897 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 21.84236240386963 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 21.701441638609943 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 21.56409819309528 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 21.42394409989411 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 21.28666640211035 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 21.1481210751967 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 21.00133732386998 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 20.861679876059814 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 20.72101783752441 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 20.58093314251657 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 20.4356590906779 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 20.289850184174835 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 20.146078532741914 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 20.000678331132917 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 19.853337317705154 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 19.7097227206597 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 19.567918799140237 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 19.425483137813966 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 19.28118909106535 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 19.140552465466484 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 19.000402791159495 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 18.858998013214325 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 18.72106255425347 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 18.580736157012314 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 18.44130167445621 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 18.302269776662193 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 18.160155785711186 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 18.01687774100861 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 17.87139207888872 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 17.72891585736335 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 17.58190369606018 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 17.435956993220767 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 17.29168868646389 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 17.149563013789166 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 17.006875764755975 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 16.8660089969635 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 16.721890427345453 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 16.578840184485777 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 16.434284383600406 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 16.291239601842474 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 16.145946661631267 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 16.003130145125336 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 15.861093085745107 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 15.71899127191113 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 15.586261708685692 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 15.441100283672936 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 15.29690623283386 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.151984185287633 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 15.009254664790875 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.864946589325411 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.718430042266846 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.575121449952078 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 14.429441031287698 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 14.284113948784986 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 14.138038928692158 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.991577613921393 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.844661483224833 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.697753063986234 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.551367503625375 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.400938353407273 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.252451419830322 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 13.10262773917602 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.953334655080523 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.8014675241656 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.650874915875887 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.497872051985366 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.34747656460466 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.196293578188644 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.047534445584832 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.898170260822072 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.767858187357584 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.622127186168324 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.474629007402015 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.328342753697216 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.178370383477981 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.029093694686889 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.882885047367642 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.733042174436914 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.582867696881294 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.433132901672245 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.284164208632248 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.135074300620392 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.986778447122285 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.838915152657302 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.691042227531547 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.542235595208627 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.395116020651425 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.247275958096024 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.098125046578007 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.949685491246285 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.80064719063895 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.651264359765019 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.502727427952726 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.354776752578628 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.205926206376818 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.056346350702746 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.9077213627018335 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.759309554586605 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.610741415539303 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.463329419193652 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.316782792409261 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.169175659583893 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.021414857161672 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.873781062419119 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.726134730623913 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.579062507998559 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.431008210548987 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.284220463151385 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.138740427886383 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.992849065072881 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.846982657909393 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.700321369289612 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.554440407105433 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.408101352445918 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.260736285186395 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.113864010030573 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.9666973855122025 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.822098559248233 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.677350180489676 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.531104151313826 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.38399338722229 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.23730456759358 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.09152508890906 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.945297631225145 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.7991983095804853 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.6533002853393555 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.507414091717113 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.3616209609360346 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.215812667032306 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.0697794626544974 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.9237533410390215 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.777660139357846 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.631117896719293 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.4846452168428184 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.338087620942489 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.191621155352206 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.045359739693262 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.8991085922016817 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.7528881925217648 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.6068765107916776 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.4610169310318795 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.314874772626068 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.1686734855175018 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0225953660480716 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8766265013783249 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.730677543542324 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5846792873071164 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.43857761567014125 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2924287126521872 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.14623284100288123 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   29.2s finished

    1999 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  11.821 seconds)

**Estimated memory usage:**  1895 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
