
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f9c57b2c550>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )  
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 264.42527770996094 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 48.00695466995239 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 44.71994948387146 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 43.553367694218956 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 42.95414900779724 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 42.74072527885437 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 42.60287833213806 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 42.50949771063669 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 42.27829170227051 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 42.023451169331864 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 42.016310691833496 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 41.87379156459462 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 41.62623349825541 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 41.439083521182724 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 41.193077598299304 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 40.8789021174113 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 40.537662863731384 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 40.300989768084364 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 40.03733176655239 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 40.015105611399605 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 40.0307035446167 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 39.905225980849494 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 39.77329167452726 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 39.563021483628646 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 39.25529432296753 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 38.90044140815735 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 38.61779522895813 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 39.186148157826175 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 40.27142902782985 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 39.89358502420885 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 39.61930600802104 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 39.373340129852295 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 39.09837734699249 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 38.77567967501554 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 38.45971005103168 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 38.13722000803266 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 37.86901677979363 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 37.61299786052188 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 37.384552679563825 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 37.119394773092026 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 36.81827354431152 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 36.573293680098 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 36.31835524241129 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 36.07604894527169 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 35.82338294115934 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 35.53855689366659 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 35.246195191922396 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 35.094909317949984 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 34.81867365042368 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 34.53362512101933 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 34.295140743255615 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 34.036344444050506 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 33.759820846410896 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 33.57252932944388 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 33.313828459492434 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 33.04429537599737 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 32.79442303521293 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 32.578211416277966 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 32.35863152043572 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 32.21640812340429 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 31.96185636520386 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 31.7007544236105 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 31.499089548664706 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 31.24420334422399 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 30.963958859443665 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 30.702029283230125 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 30.471289641929395 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 30.231851268170484 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 30.02324391813839 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 29.76432802711708 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 29.55978962353298 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 29.312529842618485 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 29.04293738471137 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 28.78032248314113 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 28.514169970074214 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 28.258493741353355 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 28.028607493952702 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 27.787600037339445 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 27.531916936238606 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 27.271591443049754 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 27.073448181152344 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 26.862382235350434 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 26.61816487661222 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 26.37138154420508 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 26.124986512320383 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 25.906316673054416 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 25.68734828261442 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 25.43411582091759 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 25.18542138012973 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 24.944320373320846 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 24.71349218156603 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 24.4803774199643 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 24.24428213160971 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 24.008434344363472 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 23.764377588921406 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 23.529381902594317 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 23.302429219086964 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 23.061930744918353 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 22.82834815979004 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 22.597709809890898 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 22.36697268486023 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 22.138447466463145 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 21.9155886406992 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 21.696343299254632 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 21.467948253338154 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 21.24611442429679 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 21.02855917192855 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 20.79519267616985 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 20.58998092898616 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 20.374491446608797 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 20.14700863578103 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 19.911184435492164 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 19.67996605804988 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 19.454202187799773 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 19.22371540989792 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 18.984138188154798 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 18.74722325390783 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 18.52267340105823 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 18.290090912479467 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 18.06708174994012 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 17.841973463694252 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 17.63305139541626 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 17.411977072231107 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 17.18700010602067 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 16.964250518429665 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 16.73458685874939 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 16.51206506623162 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 16.29074977702043 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 16.066192746162415 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 15.83412140654039 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 15.607753882041344 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 15.380351739985342 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 15.158450480663415 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 14.931507533654235 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 14.709731500540206 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 14.488491411562318 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 14.268849541159238 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 14.041436694834355 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 13.814366250798322 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 13.604441160778347 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 13.375365563801356 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 13.145902905903808 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 12.916617322975481 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 12.686297603420444 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 12.456618547439575 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 12.226366519927979 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 11.996938391907573 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 11.774413056925042 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 11.550912238456108 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 11.324218492379925 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 11.102516412734985 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 10.880250338687013 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 10.654390209599544 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 10.437981773825253 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 10.21712418964931 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 9.995491596960253 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 9.772803190426949 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 9.554689410385812 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 9.333112858518769 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 9.108502167575764 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 8.88673621416092 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 8.661175547179228 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 8.437607850557491 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 8.214951662929511 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 7.991584295179786 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 7.767921852343011 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 7.543885745197893 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 7.320855934462862 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 7.098499116443452 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 6.875628258349627 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 6.652895071927239 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 6.4313573544485525 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 6.210019294605699 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.991717756139061 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.770662718805774 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.547028677804129 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 5.324255932461131 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 5.101898297078192 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.880011877317107 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.658477895086704 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.436662091149224 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 4.215042558164227 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.9914072843698354 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.7683559297863907 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.545078547104545 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.3230633284594564 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 3.102082480666458 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.880488426290094 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.6580806539413775 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.4356650612341664 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.214552691108302 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.9927615395391176 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.7708227336406708 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.5489315183669172 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.3280061766044382 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.1064570378034542 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.8852168491908482 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.6637687356338888 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.44241302422802864 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.22112589625257942 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   44.2s finished

    1999 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  39.312 seconds)

**Estimated memory usage:**  1844 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
