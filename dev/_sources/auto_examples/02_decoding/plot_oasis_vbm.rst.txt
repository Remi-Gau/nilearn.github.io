
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print("")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f65ea96ed00>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 206.70175552368164 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 41.49651098251343 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 38.93236255645752 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 38.04052297274272 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 37.577285289764404 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 37.278815031051636 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 37.08402307828268 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 36.79467167173113 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 36.497039794921875 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 36.238133086098564 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 36.03306269645691 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 35.84258710254323 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 35.64555652936299 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 35.41800814408523 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 35.18603232928685 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 34.963477293650314 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 34.75337374210358 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 34.54375244589413 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 34.343115621142914 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 34.10552712490684 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 33.9020254611969 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 33.716523056938534 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 33.52225969054483 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 33.342620186183765 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 33.143356800079346 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 32.929363489151 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 32.71839033640348 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 32.528523197880496 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 32.332221031188965 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 32.13723485223178 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 31.9440704981486 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 31.743558899048832 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 31.56179505586624 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 31.36295278144605 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 31.172894576016596 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 30.98316478729248 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 30.80926571951972 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 30.618327166583086 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 30.428084360925777 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 30.237839980003166 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 30.044888496398926 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 29.86408152231356 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 29.68155991463434 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 29.505976538325463 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 29.325981681997124 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 29.144906096988255 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 28.965909957885746 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 28.77658869357819 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 28.585453033447266 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 28.392712155166937 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 28.186126470565796 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 27.985253109651453 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 27.790888951374935 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 27.591142429495758 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 27.397401597764755 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 27.199863737279717 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 27.008629049573628 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 26.811118301592373 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 26.617133280326577 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 26.423299373206444 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 26.233186086018883 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 26.044296260739937 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 25.858404244146037 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 25.671461778973775 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 25.479070723056793 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 25.283928779455334 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 25.09343189904184 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 24.896515960124002 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 24.70572272469016 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 24.51267140844594 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 24.32435291154044 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 24.137334370277298 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 23.95360565185547 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 23.7656805384649 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 23.57880870715992 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 23.4463107585907 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 23.25895825185274 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 23.068057750726673 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 22.87683584139897 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 22.69101369230053 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 22.502086758613586 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 22.31474347467776 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 22.169574615431994 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 21.978210865733136 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 21.787258318492345 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 21.59621495359084 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 21.40743804532428 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 21.217633378916776 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 21.024680441076104 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 20.838469368688177 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 20.651928318871395 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 20.46113588783767 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 20.2701123693715 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 20.08330171595338 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 19.89710552641686 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 19.71173049274244 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 19.5248198111852 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 19.336970024502154 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 19.149953710789585 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 18.961100373605284 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 18.772480964660645 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 18.586424773282342 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 18.3992022673289 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 18.210082341166377 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 18.021275446965145 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 17.83638903072902 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 17.65235029976323 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 17.464051355825408 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 17.27475553088718 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 17.08755739238284 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 16.89819691397927 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 16.710254686372775 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 16.524223685264587 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 16.336494753846026 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 16.146741611915722 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 15.95793122830598 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 15.771912303464166 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 15.586033211814033 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 15.396892551648415 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 15.207761109376154 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 15.019290129343668 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 14.830142854659027 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 14.641204693278329 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 14.451120762321038 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 14.263746361578665 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 14.075510787963866 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 13.88629444440206 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 13.698348931440218 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 13.509671911597252 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 13.321674430093099 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 13.133132952910202 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 12.94417981155046 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 12.757153503822558 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 12.569672586326313 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 12.381117048548228 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 12.193063727131596 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 12.003574146943933 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 11.813984385372079 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 11.6243794793668 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 11.434547244216041 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 11.245706115450178 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 11.056702525903146 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 10.868654670849653 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 10.682473177676433 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 10.495198951827156 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 10.307236252159907 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.119452897816487 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 9.931273627443378 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 9.743198820062586 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 9.555291139039417 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.366085449854532 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.176792089512805 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 8.987739236731278 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 8.799339852301904 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 8.611027076646879 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.423283184728316 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.235843988565298 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.048208321735357 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 7.859218217149564 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.671536054251329 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.483245313167572 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.2952218070533705 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.107856812300505 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.92104954953574 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.73406500932647 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.546821009029042 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.358923242752811 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.171231529669847 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.9835941678001765 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.79604620058861 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.608834841672112 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.421656432904695 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.23421075732209 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.0471836872872595 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.859913201167666 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.673035417284284 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.486111099069769 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.299175591118591 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.112326249647676 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.9255159820258285 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.7385646237267385 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.5516044869607324 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.364969764436994 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.1782479103797123 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.991574370342752 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.804603963284879 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.6177318634525424 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.4308729299249494 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.2440079678880407 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.0571215518567927 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.8700534168042633 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.6831132317088662 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.4961634775002797 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.3090324562448292 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.1220527555524689 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.9350896859780335 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.7481884956359862 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5612146455019259 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.37413988691387756 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.18707271916183396 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   37.4s finished

    1974 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  58.761 seconds)

**Estimated memory usage:**  1903 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/nilearn/nilearn.github.io/main?filepath=examples/auto_examples/02_decoding/plot_oasis_vbm.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
