
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-90

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 148-150

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 150-163

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-166

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f09bf047a30>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-229

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 184.06391143798828 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 31.181618690490723 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 30.413763284683228 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 29.149456103642784 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 28.324596881866455 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 27.781097173690796 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 27.38868077596029 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 27.131086792264668 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.817415237426758 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 26.88386935657925 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 26.641242504119873 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 26.415503545240924 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 26.209453344345093 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 26.010908035131603 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.850586686815536 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 25.676577011744182 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 25.490074038505554 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 25.50305069194121 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 25.405468914243908 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 25.23049246637445 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 25.05712366104126 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.89672669910249 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.74605937437578 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 24.589679655821428 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 24.536834716796875 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 24.38562321662903 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 24.228876719107994 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 24.06930527863679 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.910240547997613 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.77673297092832 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 23.612966537475586 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 23.461754052869733 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 23.389399230480194 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 23.239618200244326 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 23.08138620152193 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.92900252342224 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.78579341040717 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 22.63151323473131 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 22.47830313130429 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 22.38851860853342 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 22.238384246826172 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 22.09497670429509 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.94062690507798 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.802612764890803 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.650240941481158 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 21.498285320070057 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 21.399677763814513 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 21.25224344273831 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 21.104148825009663 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.954949807147592 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.80829930305481 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.659987664690203 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 20.510011196136475 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 20.360269384564095 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 20.247493849860298 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 20.106897657567803 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.96278476715088 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.81640170331587 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.675952993590254 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 19.5283079066519 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 19.382901350657146 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 19.269528072388447 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 19.135969438860492 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.991482061053077 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.849158108234406 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.70639696488014 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.561131874720257 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.417613488524708 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 18.275532624300787 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 18.169855905615766 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 18.028343984058925 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.886783630075588 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.746627383761936 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.601646674822454 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.456049403628786 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 17.31337587038676 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 17.19095727017051 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 17.046912942613876 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.900400907565384 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.757707131059863 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.612515807151794 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.469300323062473 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.325420908811616 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 16.204130767339684 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 16.06076213291713 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.916753432329964 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.772202951963557 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.633107363492593 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.48949367349798 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.346686368577934 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.20627013842265 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 15.082442561348715 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.942650515100231 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.805551175148258 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.666194484588948 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.525574445724489 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.383559962113697 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.241950718397947 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.115419290503677 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.973528320139103 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.833244323730469 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.694198794884256 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.55354619026184 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.411888759113053 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.270062006436863 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.13051530293056 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.004869852425918 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.865271523734119 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.725139423652932 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.584221264637938 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.443219011480158 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.303399584314844 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.165801405906677 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.038100711012309 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.898258050282797 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.757752128269361 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.619384650526376 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.478619667199942 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.340440333899807 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.20102542388339 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.070211410522461 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.929988725126282 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.789440803840513 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.649686431497093 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.509804702574208 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.370313549041748 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.230443636576336 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.091350574193038 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.958601117134094 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.818065014920492 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.679196706184973 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.542101381389239 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.404646613381125 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.264973247857919 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.125740325272972 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.994298528741906 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.85395756889792 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.714701093896462 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.575048004371533 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.436191833276542 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.297232219151088 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.16112928694867 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.02419793437904 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.887519956468702 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.749700533019172 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.61320660854208 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.473765046629187 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.334268788902127 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.195352419002637 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.057912861740829 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.92232608795166 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.782793881877368 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.6439004697297745 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.504922305836398 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.3654014290153205 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.2267097426999 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.087734583096626 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.953060982333627 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.822647695299945 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.684322336184904 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.545429825782776 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.4057448443418705 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.266534322573815 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.127317033662386 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.99099994868767 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.851837996280555 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.7128513261496305 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.573894402224147 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.434578895568848 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.295837709889609 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.157444799647612 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.018457518683539 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.881423950195313 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.7427608098597887 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.6035714286497273 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.4645724296569824 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.3255373998121778 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.187006126015873 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.047962274444237 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.9112762618997245 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.7730566395653615 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.634047990345823 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.4948903047121487 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.3562183875203786 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.2174530029296875 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.078569592656316 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.9396768077727287 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.801950083696906 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6632357556769186 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.5243985589849884 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3856319753747237 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2469176958992843 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.108211189508438 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9697638632719998 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8316368270166142 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.693043066905095 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5543753127662503 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.41573736147227025 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.27713122030701304 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1385485742559385 seconds remaining)
    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  10.734 seconds)

**Estimated memory usage:**  1896 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
