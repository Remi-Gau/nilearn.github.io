
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f6a95da8c40>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 192.62075424194336 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 32.83541941642761 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 29.926517486572266 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 29.04055190086365 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 28.65149688720703 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 28.379955768585205 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 28.146531820297245 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 27.826731749943328 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 27.654756546020508 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 27.471000247531467 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 27.325677633285522 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 27.183979836377233 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 27.024516661961872 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 26.840213262117828 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 26.68298373903547 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 26.5157474676768 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 26.34312355518341 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 26.14993336621453 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 26.004112270143295 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 25.82203743332311 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 25.669008493423462 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 25.496640307562693 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 25.385075265711006 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 25.22116178015004 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 25.06731414794922 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 24.91551184654236 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 24.758248714300304 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 24.602441151936848 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 24.4402015209198 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 24.281444870192427 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 24.117932081222534 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 24.034802598337972 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 23.9334933757782 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 23.786940870863017 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 23.643039591172165 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 23.49257285254342 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 23.34683773252699 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 23.19681056125744 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 23.04777055037649 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 22.902476359636356 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 22.743804931640625 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 22.589303324862225 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 22.44185227439517 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 22.300904651020847 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 22.162472118030895 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 22.012997812694973 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 21.863759465839554 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 21.720616852983515 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 21.574452320734657 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 21.431285429973993 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 21.287760972976685 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 21.14221842616212 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 21.000107251680816 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 20.849862233647762 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 20.702338722017075 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 20.54950562390414 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 20.411329201289586 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 20.265097793779873 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 20.11712729519811 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 19.96617528543634 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 19.818433125813804 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 19.684778362024026 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 19.53548812866211 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 19.38472074175638 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 19.238262802362442 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 19.098583129736095 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.95394283352476 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.81520969476273 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 18.674040598027847 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 18.53072504720826 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 18.38717075756618 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 18.241283312649795 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 18.09396574232313 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.953325839891825 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.808262071093996 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 17.67560442288717 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 17.532911275562487 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 17.394202857822567 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 17.249807058236538 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 17.109004056906397 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.962518334388733 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.818849439974187 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.68078785407834 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 16.536432162824884 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 16.391833816255843 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 16.24776743440067 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 16.10645217119261 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.961971444645147 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.815518249164928 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.669571541668324 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.526889933480158 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 15.383610578683706 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 15.241954533950144 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 15.10455955484862 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.964484260437336 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.823730117396305 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.685395717620848 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.544884993857945 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.407509151770144 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.264671511120264 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.122724294662476 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.981906258233703 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.843458680545583 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.703468061187893 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.559963959913988 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.416550556818644 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.274902051349857 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.149912858677801 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.021916177537706 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.914234926941198 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.772961399771951 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.629868696401786 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.490409203938075 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.349833347101127 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.212264726036473 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.068694664084392 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.925937463497293 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.787872546758408 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.646833500619662 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.505197176412375 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.363355159759521 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.222865622890883 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.082703863988158 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.942231253879825 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.802839033065304 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.662209415435791 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.52058025768825 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.378244675989226 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.237190902233124 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.094782308090565 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.95213853395902 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.809955897222038 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.667394760883216 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.523835766584353 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.381703889192039 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.240174125742028 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.098598929012523 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.957295316849311 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.815403292144554 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.6733048922724 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.530695881162371 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.389169885757122 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.247966343248395 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.107425733046098 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.965603245629205 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.824111206778164 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.681477370327466 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.539377533659644 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.398005801278192 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.2571476881936094 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.115565538406372 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.973474500984546 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.8321154995968465 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.6899005057764995 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.54867757140816 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.407205312482772 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.266166699238313 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.124659135842779 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.9824522688419 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.841377523710143 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.699341654777527 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.557589025971312 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.414257879610415 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.27196052761897 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.129949941867736 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.987332156210234 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.845233658710158 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.702874760427875 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.561007681347075 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.418256893665832 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.276300360174741 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.134005150599786 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.9915494641592337 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.8492236578395604 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.7068164266388997 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.563852889197213 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.4216555790467695 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.279612973584967 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.137872607520457 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.9959072667127216 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.8535845279693604 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.711372160779837 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.5690009069966746 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.426733876838059 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.284407594929571 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.141699320561177 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.9988386733557588 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.8560106091320834 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.7135299063743428 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.5710401345813085 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.4283371473613538 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.285529069251415 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.1426466703414917 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9998263003294949 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.857052363071245 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7142540430411314 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.571376119341169 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.428587482665396 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2857234911485152 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.14285227401771738 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   28.6s finished

    1978 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  11.659 seconds)

**Estimated memory usage:**  1898 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
