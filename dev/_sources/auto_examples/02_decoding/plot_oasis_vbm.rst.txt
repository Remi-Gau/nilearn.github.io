
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print("")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f8ff110bc10>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 194.8833465576172 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 38.9972825050354 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 36.70983910560608 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 35.750325202941895 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 35.44572949409485 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 35.0921094417572 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 34.91773883501689 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 34.72288223675319 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 34.5849723815918 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 34.45421430799696 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 34.254961013793945 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 34.32929979671132 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 34.11353556315104 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 33.9239068031311 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 33.76421867098127 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 33.55114245414734 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 33.35259759426117 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 33.131691708284265 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 32.92646214697096 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 32.79680523119475 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 32.6659369468689 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 32.48864693868728 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 32.28817684000189 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 32.08297873579938 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 31.88518683115641 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 31.70288848876953 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 31.508036833543045 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 31.283506296299123 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 31.071434600012644 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 30.88567491235404 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 30.68589552243551 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 30.529907780308875 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 30.37980455160141 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 30.262446056712758 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 30.0843682569616 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 29.868861028126307 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 29.662137455410427 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 29.496259096506478 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 29.301701244555023 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 29.108447282742233 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 28.921463012695312 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 28.750208930271427 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 28.564669098172867 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 28.394400790680287 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 28.21835173260082 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 28.02133321762085 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 27.821010879848316 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 27.633073461816664 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 27.451928178469338 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 27.264557074527353 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 27.06597089767456 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 26.881141115637384 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 26.689184922438404 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 26.51006694559781 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 26.31612162236814 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 26.122187094254926 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 25.94631978443691 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 25.75543253045333 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 25.57298603551141 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 25.396417937036286 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 25.208855787913006 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 25.025851730440486 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 24.843682004559422 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 24.6534292962816 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 24.469764828681946 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 24.292249587865978 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 24.120931083505802 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 23.942833879100743 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 23.758095082114725 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 23.567997683649477 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 23.38533459390913 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 23.203133532698725 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 23.01694107055664 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 22.833300600313162 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 22.644628943623722 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 22.458897829055786 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 22.284625731016458 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 22.099193229303733 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 21.916157526847645 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 21.732170811182336 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 21.5503910779953 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 21.368727822362644 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 21.188974932926456 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 21.012501325952 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 20.831558068593342 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 20.652067871654737 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 20.46915815042895 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 20.293854620264867 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 20.111722295934502 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 19.941763585872863 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 19.76581120491028 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 19.583460964999354 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 19.40517664992291 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 19.227877539973107 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 19.04623055458069 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 18.86800861358643 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 18.685210287570953 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 18.50511071116654 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 18.32596460653811 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 18.143434396897902 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 17.9622962474823 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 17.78526491693931 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 17.61053592083501 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 17.432938247051055 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 17.254439207223747 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 17.07371255329677 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 16.891925915232246 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 16.71396607327684 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 16.532484628536082 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 16.350076616357224 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 16.167632818222046 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 15.99031179445284 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 15.808051875659398 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 15.62547922978359 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 15.443111674827442 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 15.264838021734485 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 15.0837857969876 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 14.901583414811356 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 14.720952543161683 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 14.540593866540604 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 14.357446034749348 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 14.178881160483874 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 13.996403229041178 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 13.814627027123924 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 13.632847386021767 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 13.45234293937683 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 13.27271350603255 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 13.09496078528757 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 12.914485305547714 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 12.733042916586232 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 12.552966906474186 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 12.372490566195422 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 12.19296739318154 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 12.013258652579516 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 11.83222176779562 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 11.650995166213423 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 11.470097822301527 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 11.28981095160881 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 11.108949847843336 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 10.929227679753474 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 10.748425892421176 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 10.567662460584167 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 10.388229339895114 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 10.2101275020546 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 10.030007322629293 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 9.853030566511482 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 9.673727166162777 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 9.493247075956695 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 9.314105684692796 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 9.139998498378985 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.961305220921833 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 8.783983074276652 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 8.603321351503071 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 8.42344254138423 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 8.244831227636956 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.065794837090278 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.886838692885179 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.707932854913602 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 7.527713063396984 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.347418618652056 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.1682493686676025 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.988574843969404 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.808949485237215 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.6301905509153025 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.450609369975765 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.271501815680302 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.092991133770311 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.913367205751157 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.734063148498535 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.553972451644536 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.374211732079002 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.194799819187811 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.015105624531591 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.836006481523459 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.657677847763588 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.478531701224191 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.299590251662514 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.120459932391927 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.9413243706306713 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.7622363314282294 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.5826390849219427 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.4035770102759093 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.2245948524265495 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.0452616358063915 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.866056027619735 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.6871093479362695 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.5078731249737483 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.3291651539624056 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.150167495646375 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.9708189686770161 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.7917379956496389 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.61245588107883 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.433115025361379 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.2538429282489836 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.0746213160839277 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.8954232411506848 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.7163079222854303 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5371697154747048 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3580840573166356 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.17903293437095144 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   35.8s finished

    1985 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  3.676 seconds)

**Estimated memory usage:**  1898 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
