
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-90

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 148-150

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 150-163

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-166

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f09003ca6d0>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-229

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 272.9296684265137 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 47.22410726547241 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 42.446324586868286 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 41.03823796908061 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 39.9608211517334 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 39.59245204925537 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 39.097448190053306 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 39.09051367214748 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 38.721364974975586 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 38.77333694034152 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 38.616626262664795 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 38.4560701196844 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 38.33908661206563 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 37.9499456515679 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 37.694990975516184 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 37.59770282109579 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 37.398483633995056 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 37.205573222216444 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 37.09264190991719 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 36.8149293096442 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 36.61739730834961 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 36.31971391042074 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 35.992198163812816 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 35.76106322329977 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 35.57464392979939 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 35.30455136299133 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 35.04418642704304 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 34.830667363272774 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 34.78568254198347 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 34.593517517221386 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 34.47303509712219 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 34.33520612409038 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 34.140140533447266 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 33.99632711844011 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 33.78881960756639 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 33.54924528939384 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 33.424370209376015 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 33.27399014782261 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 33.10268459822002 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 32.878849384112236 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 32.68133068084717 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 32.47358618713007 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 32.25200762067522 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 31.996750881505566 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 31.768900069323454 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 31.701108800040352 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 31.538688265759014 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 31.311590681684777 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 31.119024793306984 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 30.92043981260183 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 30.709500074386597 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 30.49679251278148 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 30.27251382974478 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 30.032956163838225 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 29.837964525929205 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 29.606512654911388 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 29.378613608224054 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 29.171179407521297 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 28.949750793391257 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 28.76933317265268 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 28.591583967208866 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 28.388192169001847 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 28.196858905976814 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 27.987040988982667 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 27.837437987327576 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 27.633993992438686 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 27.425172899708603 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 27.2294328995605 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 27.05151166635401 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 26.872370398562886 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 26.654502868652344 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 26.458103042253306 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 26.2432132297092 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 26.046718300205388 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 25.841741594108374 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 25.626771847407024 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 25.38660511217619 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 25.167278813077257 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 24.955400234613663 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 24.75143489656569 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 24.55191457271576 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 24.362616933422327 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 24.156885199430512 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 23.959813003080438 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 23.746434200377692 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 23.544609995449292 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 23.34198165494342 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 23.129172766345672 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 22.913291454315186 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 22.7262716427278 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 22.532777123981052 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 22.323322288282625 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 22.141313646150675 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 21.93573768420886 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 21.719265405167924 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 21.50947989915547 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 21.31349589427312 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 21.105162460779407 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 20.90153650848233 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 20.686301621523768 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 20.472104787826538 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 20.253861934831825 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 20.037711456710216 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 19.824718162851426 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 19.620195315434383 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 19.4144343989236 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 19.200470294592517 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 18.989563505226208 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 18.783153957790798 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 18.574790173714312 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 18.368791060014207 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 18.16348260157817 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 17.95223045349121 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 17.74750203368938 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 17.55636897839998 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 17.350466935530953 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 17.150528176077483 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 16.946734516029686 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 16.74121239225743 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 16.53466765219424 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 16.325249671936035 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 16.116000321285785 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 15.904706614916442 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 15.697367007170266 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 15.492771563991424 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 15.28661413192749 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 15.080235159586348 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 14.86997994287746 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 14.659638985991478 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 14.459988350091978 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 14.255674563921414 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 14.048045293065428 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 13.846438335649895 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 13.638347713570846 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 13.429873167578853 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 13.221780882941351 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 13.012211519129135 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 12.804684057722996 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 12.600141587464705 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 12.393994391393319 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 12.189680916922432 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 11.981891479898007 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 11.781454502696723 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 11.579344856155503 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 11.376974622408548 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 11.173429300045145 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.969893987864664 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 10.766871942143862 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 10.567287045556146 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 10.36665192066423 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 10.163523991902668 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.956389836128183 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 9.74994232780055 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 9.548567422854356 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 9.344857479070688 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 9.143566085446267 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.94059743025364 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.738420686904032 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 8.537114282197589 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 8.336446552156652 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 8.133007287979126 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.92949350428137 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.727041547681078 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.528557300567627 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 7.326004150437146 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 7.12466371420658 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.922381254563849 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.720534585907074 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.519077528090704 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 6.319011191644612 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 6.117459128884708 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.916482706516109 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.714849843535313 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.512351550118772 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.309670204403757 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.1062376499176025 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.903756726871837 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.703146298726399 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.500520671351572 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.296936626540882 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.0936791367001 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.890118664799474 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.6855436602791585 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.483452494678602 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.2809193030647608 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.0770743730905896 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.872557670839371 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.667716157627616 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.462670305941967 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.2576987226173357 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.0528178716960706 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.8476322034266608 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.6429299414157867 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.437998628369267 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.232917040893712 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.027690092722575 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.8223642719035246 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.6168063219428668 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.41123246664952756 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.2056389873351284 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   41.1s finished

    1992 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  27.173 seconds)

**Estimated memory usage:**  1949 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
