
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fe9bc374910>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 146.0719108581543 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 25.42043113708496 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 23.858545303344727 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 23.25018620491028 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 22.823606491088867 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 22.54783272743225 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 22.304466883341473 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 22.128595931189402 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 21.904993057250977 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 21.73936128616333 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 21.60393476486206 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 21.44464028965343 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 21.293203274408974 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 21.194324841866127 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 21.069891214370728 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 21.016341050465904 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 20.85491192340851 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 20.711492005516504 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 20.61597492959764 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 20.494049022072243 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 20.382404565811157 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 20.277240106037684 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 20.14095280387185 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 20.013236014739327 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 19.89449103673299 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 19.73896813392639 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 19.60930923315195 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 19.48038047331351 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 19.355804681777954 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 19.224587572032007 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 19.102982123692833 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 18.96792947092364 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 18.84213477373123 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 18.702778274362736 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 18.58109101127176 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 18.463497059685842 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 18.346639394760132 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 18.23755643174455 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 18.134403178566384 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 18.025640946168167 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 17.915668487548828 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 17.80113580750256 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 17.682026159195672 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 17.57628291706706 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 17.467190980911255 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 17.348530716366238 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 17.231357698855195 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 17.108008724577882 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 16.989766160647072 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 16.868397873275136 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 16.794695377349854 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 16.6762940603144 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 16.562623574183537 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 16.45102940865283 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 16.340054935879177 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 16.224858262322165 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 16.10961219242641 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 15.997164797364618 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 15.880086512401185 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 15.765843205532784 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 15.649961551030477 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 15.529611212308291 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.412142492109728 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.299067667552402 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 15.185768097639084 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.066538150493917 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 14.950864632924398 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 14.83966790384321 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 14.721187423257266 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 14.608341458914936 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 14.489597797393799 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.37229718624706 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.25948757595486 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.142026225181475 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.0269743300773 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 13.914684057235718 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 13.802324332688984 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.686435132831722 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.570450122539814 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.453478291064878 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.338349342346191 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.226520726710191 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.114194538535141 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.002486835043115 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 12.890098094940186 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 12.77566848081701 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.660825590754664 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.547160192467702 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.43339781327681 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.319323456689213 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.20633739895291 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.09437828535562 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 11.984722168549249 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 11.874443382345222 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.762483393892328 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.650724812557824 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.53953178723653 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.426577133001741 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.311803540404963 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.199492143862175 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.0875244140625 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 10.974881837863734 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 10.86345598744411 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.75216807208015 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.641632300156814 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.530695676803589 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.420736740220269 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.30858892146672 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.196326299949929 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.08382543511347 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 9.97144324129278 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 9.859860121666848 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.747328758239746 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.637271562508777 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.525810609784044 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.415338941242384 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.305758139182782 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.194231807676136 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.084606211064226 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 8.971809884079365 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 8.859155019124348 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.748437706103996 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.638944719658523 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.527074377711227 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.416781563912668 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.305997514724732 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.194292692911057 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.083797773976963 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 7.973586872220039 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 7.8639469664226205 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.754750123390784 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.644582187856426 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.534623341126875 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.42463417340042 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.313482110180072 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.201650540033976 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.090154423433192 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 6.978986988972573 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.866747738658518 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.754643189821312 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.643714836665562 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.5352366951340475 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.424961331864478 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.314178453458773 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.203227943844266 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.092989477617987 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 5.981521544391161 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.871096596425893 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.760212144336185 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.649871026109529 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.53879451751709 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.428270941538527 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.317663343329178 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.206818522970661 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.09621296610151 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.985068052045761 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.874404626014905 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.7636850593955655 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.652945913845979 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.542514342182088 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.431622684001923 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.320681881460344 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.209768598462328 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.098696421991828 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.9877451803626083 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.8767081101735434 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.765754179782178 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.654824152678073 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.544280233837309 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.4333402052433533 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.3230121836942788 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.2121558022080805 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.101773494897887 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.9909135234149207 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.8800431065175727 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.769426243645804 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.658686171878468 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.5481217500180176 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.437462262892991 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.3269407749176025 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.2161747084723578 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.10548884433936 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.9947559204730358 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.8839094625796127 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.773206379102624 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.6626368986593711 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.5519443199198735 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.4411495484132817 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3302781074605088 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2195023872234203 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.10881727620175 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.9979938249937527 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.8871344129244486 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7762431480723958 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.665418701073558 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5545403468303192 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.44366064363596386 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3327665667848539 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.22189870506826076 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11096908099687279 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   22.2s finished

    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  0.420 seconds)

**Estimated memory usage:**  1917 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
