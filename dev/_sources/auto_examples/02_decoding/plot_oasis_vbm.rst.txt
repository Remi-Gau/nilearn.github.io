
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-90

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 148-150

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 150-163

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-166

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f0bfe1d2c10>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-229

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 172.7008819580078 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 29.66019034385681 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 27.243632555007935 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 26.321954806645714 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 25.720518589019775 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 25.39773201942444 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 25.301242828369144 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 25.22541730744498 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 25.108463287353516 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 24.986566146214802 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 24.812699794769287 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 24.65849297696894 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 24.492482741673786 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 24.323262929916382 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 24.22643872669765 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 24.090244213740032 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 23.93090331554413 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 23.78652022866642 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 23.6845928563012 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 23.531696896804007 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 23.361019134521484 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 23.206344479606265 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 23.073754570700906 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 22.92094137357629 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 22.749570051829018 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 22.609257459640503 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 22.45843010682326 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 22.308886934209752 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 22.151006323950632 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 21.991392423366676 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 21.8348335425059 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 21.67290977508791 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 21.537944555282593 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 21.392256837902647 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 21.253211414112766 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 21.139722449438914 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 21.04070438279046 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 20.980649973895098 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 20.882407966413 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 20.760988846803325 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 20.62455463409424 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 20.478627152559234 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 20.348384720938547 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 20.203350494074265 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 20.0541953607039 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 19.915211359659832 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 19.769845226536628 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 19.62526220463692 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 19.481980204582214 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 19.34016496307996 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 19.20439839363098 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 19.063731520783666 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 18.921435026022106 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 18.788963583280456 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 18.65944540942157 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 18.527134483510796 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 18.393472399030415 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 18.25873293792992 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 18.121984292720924 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 17.986242795394638 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 17.85017267862956 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 17.717538556114572 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 17.58917314006436 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 17.45542862301781 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 17.32639691233635 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 17.188839747355537 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 17.053897005138975 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 16.91911193150193 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 16.785887171240415 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 16.660065695859384 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 16.53310431752886 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 16.40060795192987 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 16.26973427666558 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 16.137770012633442 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 16.0080528065965 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 15.877898931503296 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 15.746992412366366 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 15.611256011120684 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 15.477918050228022 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 15.354076159151294 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 15.22101080417633 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 15.08495350237246 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 14.953408886746661 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 14.823161188378391 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 14.701441129048666 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 14.573066683376538 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 14.44399839778279 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 14.310068766276043 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 14.178673830899324 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 14.045931583040215 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 13.914313740200468 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 13.782800286680787 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 13.651752109112948 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 13.52097684337247 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 13.390595836842314 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 13.261315659472817 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 13.131890018781025 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.002515470858702 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 12.87705649648394 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 12.746666691519996 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 12.615911722183228 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 12.485753413474205 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 12.35650463665233 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 12.225558956849923 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 12.09518469296969 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 11.965718133108956 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 11.83645071173614 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 11.70680940039804 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 11.57693041695489 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 11.447516695075079 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 11.32185569676486 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 11.193717501184961 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.066368750163488 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 10.93802849381371 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 10.810437332119859 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 10.683620390684707 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 10.563650114782925 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 10.434569525922466 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 10.307186187323877 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.18036414795563 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.053226629892984 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.926071831017486 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 9.79942638756799 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 9.67275647419255 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 9.54641696714586 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 9.4196213722229 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.293990097348653 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.166993082977655 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.041840180754662 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.914680804393088 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 8.786960766865656 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 8.659972942512454 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 8.533970392111575 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 8.410278497781968 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.284820239935348 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.158620445816604 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.033234427956973 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.908920930249847 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.784773470698923 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.66006623755256 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.5348001548222125 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.409956737613001 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.285551138327156 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.159939052341701 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.034595065646702 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.908623325413671 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.783331730594373 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.65766445146937 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.531861253686854 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.40584753023698 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.279887119928995 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.153855259055334 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.0287800086172 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.902786554074755 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.777606217892139 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.651664341649702 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.52557846216055 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.400204114853197 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.274971080731741 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.148919083037466 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.02300089597702 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.897159697846597 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.771878666347927 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.646361854178774 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.520433408458058 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.394614226890333 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.268937573375472 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.143109632823282 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.017518361409505 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.8918442091292884 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.766079243491678 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.640179041533442 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.5137956475102627 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.387683716812575 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.261675560611418 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.135514940534319 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.0096453536640513 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.8839725154941362 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.7587787113832625 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.633386541345266 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.507635672887166 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.3826362994494357 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.2572128667936218 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.1317197116997724 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.0060839031053623 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.8806211561770054 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.7551125608464724 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.6297766371844287 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.5042888103647434 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.378993449387727 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.2536729385978296 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.1282457369160277 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0028423170248666 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.8774823129485925 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.7523472702380308 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.627172739077837 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5023137939219572 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3767498132541095 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2511681956474227 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.12557903845705579 seconds remaining)
    1984 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  3.880 seconds)

**Estimated memory usage:**  1864 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
