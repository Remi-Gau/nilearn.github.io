
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f0fcddf7220>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 188.95864486694336 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 33.14144158363342 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 30.70047426223755 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 29.6659369468689 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 29.081424951553345 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 28.76567816734314 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 28.62785808245341 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 28.406103917530608 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 28.154165267944336 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 27.987380345662434 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 27.824411869049072 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 27.637646913528446 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 27.4830154577891 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 27.3233593243819 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 27.132207257407053 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 26.956263144810997 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 26.80631458759308 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 26.689867173924167 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 26.50850298669603 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 26.3637034642069 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 26.17585587501526 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 26.0044835294996 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 25.82787671956149 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 25.888701127923056 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 25.745678742726643 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 25.576384782791138 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 25.501695211117084 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 25.354080668202155 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 25.24547553062439 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 25.11128289946194 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 24.96222988764445 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 24.8033866113232 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 24.64937299489975 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 24.478936433792114 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 24.320800514782178 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 24.146103756768362 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 23.991937584347195 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 23.827185315054816 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 23.677273599725023 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 23.514584571887287 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 23.356192588806152 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 23.217795715099427 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 23.066476038524083 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 22.919388039167536 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 22.76676938750527 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 22.602438820732967 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 22.449547456658408 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 22.294161116823236 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 22.13687014579773 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 21.988786137833888 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 21.844656944274902 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 21.695612855986052 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 21.546598397768463 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 21.393413071362477 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 21.240180766140973 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 21.085085500370372 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 20.92263732637678 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 20.776551702566312 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 20.625387315092414 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 20.468315556897956 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 20.317015409469604 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 20.161605827143937 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 20.00695979210638 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 19.850705877182975 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 19.701420456171036 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 19.5528724193573 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 19.405278819980044 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 19.257625864512885 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 19.10755571197061 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 18.959097848422285 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 18.819769995553152 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 18.673215332165572 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 18.52498287624783 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 18.37206255899717 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 18.22251455203907 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 18.073724905649822 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 17.926056347395242 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 17.773340630840945 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 17.654667328565548 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 17.506588821169697 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 17.363020420074463 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 17.21500993952339 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 17.064503995383657 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 16.921535718871887 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 16.77379487809681 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 16.632005523232852 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 16.48412699477617 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 16.336305936177574 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 16.190196080641314 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 16.04307936550526 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.89694494671292 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 15.749106249966463 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 15.602989476660024 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 15.457439038061327 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 15.309818551895466 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 15.162647648861535 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 15.014236390590666 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.867292047775898 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.720017287195946 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.577446087442262 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.431300640106201 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.286408854003 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 14.14152647934708 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.997054887049407 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.852154731750488 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.706446193513417 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.56077695792576 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.415648767881304 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.269969277911716 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.12399750893269 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.977831255305897 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.833090457830343 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.684478555406843 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.539189948444873 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.392476521040264 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.245216846466064 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.099206069420124 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.953904151916504 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.809701612440207 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.663823053616436 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.51957909266154 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.375054371258445 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.232844978082376 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.088109933263887 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.94364458514798 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.79885516166687 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.652220374061947 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.507298501457754 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.36145643889904 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.21514114668203 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.06871958879324 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.923060985011908 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.778191349723121 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.632327875696628 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.487324113276467 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.342514011594984 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.196873496560489 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.052065631768999 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.906848838363869 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.771017033419163 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.628639016832624 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.484248780189676 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.339225087367312 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.195387188371244 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.051243556870356 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.908050553552036 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.771447214361739 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.627648418452464 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.483699579496641 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.339587493230833 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.194966793060303 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.050759490752062 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.906628357736688 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.762798317117629 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.618310665155386 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.474194988127678 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.3296748124636135 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.185513956531597 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.0409236557876005 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.896562799717645 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.752519369125366 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.608383867311182 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.464247365056732 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.3201728788621585 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.176373301482782 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.032394481427742 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.888068549604301 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.743471639598915 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.5991165070306685 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.455263247856727 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.311213465297923 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.167113645732054 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.022637905076493 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.8784410443609163 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.7342826799414626 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.5905422823769704 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.4469485824758355 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.303433726736381 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.1594402575760743 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.015464628208949 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.871698458989461 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.727919528497517 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.5839741649208485 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.4403071416531756 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.2965886281884234 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.152868850811108 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.009139991575672 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.8653711877404688 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.721706192544166 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.5780829790408017 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.4345590691817434 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2910627220313586 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.1475350856781006 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0040503363535194 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8606182373676103 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7171544784154648 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5736748296387341 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4303776842688546 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.28692021514430194 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.14345228851740086 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   28.7s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  11.737 seconds)

**Estimated memory usage:**  1899 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
