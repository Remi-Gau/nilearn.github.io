
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fefec2deaf0>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 158.82015228271484 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 25.800325632095337 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 24.009725332260132 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 23.301131327946983 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 22.84009051322937 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 22.537911415100098 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 22.279274304707847 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 22.134084837777277 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 22.03542709350586 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 21.926593091752792 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 21.861213445663452 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 21.70571617646651 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 21.56971820195516 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 21.407355363552387 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 21.26734747205462 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 21.151148080825806 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 21.004763007164 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 20.913840462179746 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 20.788579384485878 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 20.652146239029737 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 20.52860426902771 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 20.39350018047151 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 20.28333785317161 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 20.182944588039234 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 20.05287186304728 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 19.931143760681152 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 19.800010222655075 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 19.700404123023706 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 19.581575666155135 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 19.453216330758455 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 19.33258843421936 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 19.20189381414844 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 19.1022287607193 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 18.979252663525667 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 18.847324090845447 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 18.726860863821848 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 18.618208593792385 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 18.5155904679685 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 18.406981568587454 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 18.29034365140475 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 18.177188873291016 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 18.066943191900485 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 17.980934199832735 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 17.870064441547836 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 17.76527159864252 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 17.687318272060818 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 17.641255482383396 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 17.529095725810272 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 17.418138901392616 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 17.315629093014465 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 17.206943035125732 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 17.099054243050368 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 16.987074870329636 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 16.87294481385429 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 16.757090665675975 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 16.638271591880105 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 16.5172472681318 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 16.396230998792145 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 16.27118103257541 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 16.151930118011215 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 16.041879733403526 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 15.925628787181417 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.803799783029863 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.680871585058787 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 15.56126394867897 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.445640252186703 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 15.328832799738104 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.214644702512826 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 15.097111070857329 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 14.981924174488455 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 14.865303686686925 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.746238124202675 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.627020517985025 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.506840323748655 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.408899320138467 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 14.289218982060751 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.172204946216784 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 14.052858975026515 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.93548609660222 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.820058792452269 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.704500555992126 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.588008771707983 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.471460830874559 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.353751435337296 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.235125144322714 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.117035248700311 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.999250373174977 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.880108203010998 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.763833826238459 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.650241634818945 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.534329917695787 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.416153632677519 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.301826166070027 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.187851916077317 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.070942341013158 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.959501203737762 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.841963668664295 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.725190369124265 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.613410448541448 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.498947165229103 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.385125875473022 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.268954284120314 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.152507637061325 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.0371868286318 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.921800393324633 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.808813219978695 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.69142795958609 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.575800677326239 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.458825102558842 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.342879743751036 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.22708955678073 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.111430621361947 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.996342982564654 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.880748065172043 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.764651248329564 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.650163432826165 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.534978315748017 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.422352536111816 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.309385889667576 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.19545991881555 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.081973552703857 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.967178687576421 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.85368769676959 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.740281196144538 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.626601680632561 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.513816213607788 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.399649218907433 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.286450397311233 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.17306624352932 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.058382028757139 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.944346482937152 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.829879899061363 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.717329697175459 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.604053443535826 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.491294099323785 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.378754350874159 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.266137964585248 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.15331845213897 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.040090439976125 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.926318091454266 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.8135905265808105 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.698486290924938 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.584793822866091 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.4709594299743225 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.356424596574572 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.24259404478402 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.128566444736637 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.015452284391235 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.903169026245942 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.789951687691196 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.675880750020345 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.5614648670550215 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.4471997712787825 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.333406889360715 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.219990968704224 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.1063974134383665 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.992452688706226 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.879521872587264 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.7665025765382785 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.652945573974705 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.5391064286231995 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.42471742778091 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.310891913778987 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.197306580338741 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.083439803704983 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.9695942329637934 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.8557163577481925 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.742164180664245 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.6286264147077287 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.5150072532292653 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.4014961859759163 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.2880387989401116 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.1742468989172647 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.0606794729398166 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.947215877730271 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.833756923675537 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.7203242778778076 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.606714029096614 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.4936956153826766 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.3801244943501563 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.2667110231187606 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.153403508729039 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.0401055786635847 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.9270451355501603 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.8136224539383599 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.7002777731096423 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.5872094579922256 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.4741308548871208 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3608562489773364 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2475109693234558 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.1341902456785502 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.0207707507448047 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9073718190193176 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7939642278641617 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.680565347376558 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5671539551172501 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4537342032607721 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.34030736279366586 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.226862558210739 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11342948165970232 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   22.7s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  59.267 seconds)

**Estimated memory usage:**  1843 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
