
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f92958abdc0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 182.30915069580078 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 32.887988805770874 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 30.667712688446045 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 29.703386465708416 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 29.127874612808228 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 28.692965269088745 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 28.309982935587566 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 28.050028358186996 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 27.770130157470703 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 27.50349916352166 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 27.361056566238403 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 27.19404075362466 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 26.9978658358256 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 26.851585681621845 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 26.72382310458592 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 26.582993666330974 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 26.394935607910156 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 26.230655109181125 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 26.071476221084595 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 25.888868984423187 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 25.75075364112854 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 25.58699345588684 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 25.429676207629118 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 25.272772488386735 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 25.14092715581258 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 24.978732585906982 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 24.82010579109192 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 24.69215057514332 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 24.539704493113927 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 24.38214010205762 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 24.23046143849691 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 24.082734061825658 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 23.9357990026474 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 23.785325310447 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 23.63745218164781 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 23.50353271620614 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 23.369315173890854 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 23.218552402547886 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 23.0957169281809 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 22.948396114202648 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 22.79841423034668 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 22.653246734200454 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 22.509344600495837 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 22.360239145367643 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 22.208896962079134 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 22.058776696523033 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 21.91409374319989 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 21.771641097170242 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 21.63805361588796 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 21.499052188834366 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 21.367253065109253 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 21.228519654741472 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 21.09251979681162 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 20.95294826435593 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 20.80879916968169 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 20.665291677821767 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 20.52203607559204 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 20.38156121237236 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 20.237347372646987 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 20.09455925327236 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 19.95500612258911 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 19.811770998063636 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 19.66522084513018 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 19.52154801383851 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 19.382313579320908 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 19.239607572555542 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 19.100841601689655 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.956404340800955 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 18.80866026878357 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 18.66179114493771 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 18.514665399278915 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 18.37323433580533 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 18.230113559299046 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 18.08682997259375 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.94159099862382 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 17.797582944234215 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 17.651126045929757 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 17.504350522895912 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 17.362049200595955 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 17.21736140492596 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 17.087505340576172 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.946446930920636 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.80432535380852 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 16.65794434892126 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 16.511747700827463 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 16.369935877182904 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 16.22396336599838 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 16.07858205937791 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.93486161665483 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.789821003260236 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.648257652918499 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 15.505231236363505 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 15.379155542539515 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 15.23474851218603 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 15.09378254159968 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.954115102165625 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.812025467554728 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.669365762435284 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.5289430666943 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.387719534864328 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.245076179504395 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.10213283028933 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.960045094583549 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.81696826045953 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.676631193894607 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.537695521400089 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.400998646358275 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.260176549448031 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.118535863028633 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.97695474230915 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.836088115518745 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.693887566660976 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.55042563165937 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.41005317088777 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.268993892167744 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.128954099572223 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.9873552404601 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.846962914507614 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.702894550258831 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.559505823279629 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.417931715647379 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.274443977135272 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.13584638032757 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.994963853339838 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.853223070021599 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.710927629470826 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.568287421786597 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.425974136262427 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.282474234700203 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.139571346977885 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.996825291560246 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.852923968366085 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.710438605510827 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.567686201038217 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.424514186916067 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.281940363071582 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.13973191205193 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.996071554448482 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.852001798325691 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.708053160056794 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.565374033791677 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.421930822074836 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.27852099378344 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.135296158023648 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.99196724096934 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.848321733803584 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.705006501446031 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.561585585276286 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.419167112659764 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.275646625749217 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.132856130599976 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.989796515332152 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.846415344037507 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.703022568833594 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.559442003051956 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.416822156598491 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.273656050364177 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.13104580466155 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.9889927212196055 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.845343288385643 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.70282107591629 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.559837141392395 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.4169770258444325 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.274170120800931 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.1316875946231 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.990052158182317 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.846947394221662 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.703949682726831 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.561774117606027 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.419062203909518 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.276127689024982 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.133540568993105 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.990889732227769 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.8479856493845155 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.7051962737379407 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.5626124995095387 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.4202198006890034 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.277450131831196 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.1348088752017933 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.9922373734372956 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.8496600521935354 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.706864657323005 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.5641010593581983 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.4217582009529157 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.2793317877728008 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.1367917962976404 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.9943661023211736 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.8518739817614225 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.7094460091692334 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.5669925679605472 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.4247563512701737 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2822723900460449 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.1397641499837239 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9973174055623266 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8547988355774241 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7123168003864777 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5698459634975511 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.42740129819376216 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2849215473791566 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.14245284741847358 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   28.5s finished

    1973 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  11.262 seconds)

**Estimated memory usage:**  1886 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
