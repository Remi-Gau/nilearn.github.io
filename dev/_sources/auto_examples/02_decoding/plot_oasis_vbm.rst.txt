
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (:term:`VBM`)
to study the relationship between aging and gray matter density.

The data come from the `OASIS <https://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard :term:`VBM` pipeline (using SPM8 and
NewSegment) to create :term:`VBM` maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the :term:`ANOVA` step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the :term:`ANOVA` step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

:term:`SVM` weights are very noisy,
partly because heavy smoothing is detrimental for the prediction here.
A standard analysis using mass-univariate :term:`GLM`
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 112-123

Prediction pipeline with :term:`ANOVA` and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

In nilearn we can benefit from the built-in DecoderRegressor object to
do :term:`ANOVA` with SVR instead of manually defining the whole pipeline.
This estimator also uses Cross Validation to select best models and ensemble
them. Furthermore, you can pass ``n_jobs=<some_high_value>`` to the
DecoderRegressor class to take advantage of a multi-core system.
To save time (because these are anat images with many voxels), we include
only the 1-percent voxels most correlated with the age variable to fit. We
also want to set mask hyperparameter to be the mask we just obtained above.

.. GENERATED FROM PYTHON SOURCE LINES 123-149

.. code-block:: default


    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 150-152

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 152-165

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-183

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f43e275ad00>



.. GENERATED FROM PYTHON SOURCE LINES 184-186

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 186-231

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 366.29676818847656 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 55.31395745277405 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 53.69640827178955 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 51.99427318572999 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 50.37246131896973 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 50.810006618499756 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 50.90114259719849 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 51.00253217560905 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 50.165754318237305 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 49.72480879889594 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 48.81144857406616 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 48.620005260814324 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 48.32647156715393 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 47.92411314524137 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 47.34270112855094 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 46.7794303894043 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 46.36405527591705 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 45.866152356652655 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 45.20433290799458 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 44.56635354694568 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 44.0154983997345 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 43.46073414030529 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 43.124859268015086 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 42.65573203045389 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 42.33390315373738 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 41.931742429733276 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 41.523286012502815 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 41.370362714484884 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 41.003890412194394 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 40.65504122602528 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 40.243966817855835 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 39.97009120448943 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 39.63082319498062 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 39.29862053466566 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 38.94642580256743 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 38.65656760760716 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 38.368793646494545 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 38.037948975691926 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 37.73750518497668 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 37.39073027708592 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 37.05586242675781 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 36.97207502620976 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 36.6991366318294 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 36.41088609917219 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 36.11832495169206 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 35.880008485582145 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 35.688389093979545 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 35.40051770210266 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 35.145091493924454 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 34.955929546940084 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 34.73611807823181 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 34.49455794633603 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 34.26642394065857 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 33.974203132233534 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 33.79471054783574 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 33.536919593811035 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 33.30378525597709 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 33.03982907847354 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 32.7511835755973 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 32.55508421235165 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 32.29528077443441 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 32.055675455781284 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 31.78546119505359 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 31.581191078064933 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 31.329719632864 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 31.07507784550007 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 30.87152223876028 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 30.602718114852905 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 30.398213709101956 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 30.137929753980774 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 29.885098593575616 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 29.65074314198024 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 29.414864434136284 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 29.162578621955767 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 28.909759031759723 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 28.673280477523804 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 28.428446456005698 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 28.218954693187367 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 27.96777395101694 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 27.75519447688815 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 27.522732138633728 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 27.32812582710643 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 27.081078575878607 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 26.845771197813104 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 26.604481049946376 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 26.350702734554517 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 26.12528559773467 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 25.893508949499022 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 25.665413553064518 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 25.434575429123438 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 25.197772688335846 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 24.969583896490242 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 24.722602750944056 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 24.479492964283114 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 24.239459687090935 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 24.022372597142272 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 23.784159660339355 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 23.552810990933292 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 23.321971017487197 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 23.085522699837732 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 22.855939865112305 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 22.618878180437747 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 22.385700188431088 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 22.161156344182285 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 21.947911702669586 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 21.710305395580473 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 21.486132477814298 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 21.31169030822326 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 21.081990047737403 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 20.84173148925151 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 20.609487013383347 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 20.370676856857163 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 20.133301956312998 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 19.9102710200622 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 19.670148414477968 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 19.438159942626953 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 19.19642780567038 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 18.968728898936867 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 18.740763312679228 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 18.504348716815983 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 18.267195224761963 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 18.042405130449406 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 17.817522279551774 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 17.583322065632515 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 17.348268954984604 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 17.113544797897337 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 16.882734306274898 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 16.6529487343285 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 16.42374448478222 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 16.187652227490446 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 15.968233401958758 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 15.732060670852661 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 15.50491831519387 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 15.270715414133289 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 15.039315013743158 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 14.809383595431292 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 14.591797660378848 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 14.35627012879309 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 14.123579619587332 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 13.891067835924437 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 13.661291599273682 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 13.436248693060367 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 13.206290815917539 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 12.971895523004598 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 12.739209294319153 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 12.518345947923331 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 12.292700391926177 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 12.061960528496982 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 11.85183232539409 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 11.618964912107327 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 11.393659194310505 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 11.163096757914056 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 10.932162560914692 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 10.708141839582158 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 10.485816159805694 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 10.254475316693707 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 10.023979290937765 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 9.792461017134842 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 9.563428057899957 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 9.337131027905446 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 9.108789086341858 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 8.884378825655636 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 8.654603840392312 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 8.427871900102112 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 8.200359489859604 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 7.971378535935373 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 7.74674043310694 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 7.518644181554189 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 7.292556444803873 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 7.061987737226768 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 6.831945797976326 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 6.6059515294972915 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 6.38031536479329 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 6.158325392386817 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.928760492938689 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.703440393720354 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 5.4757807796651665 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 5.250755543089182 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 5.021561054701215 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.792554253306469 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.56311641799079 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 4.3358695190914425 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 4.107192458687248 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.879483130460229 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.6516808426898457 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.4222819805145264 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 3.194650529533304 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.965479869893528 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.7370503658943988 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.5096776485443115 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.2820435950630586 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 2.0534591150533466 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.825124661127726 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.5963640929503762 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.36826309961142 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.140494004274026 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.9125113243959387 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.6840796204387839 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.45582675933837896 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.22791790842410908 seconds remaining)
    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 41.307 seconds)

**Estimated memory usage:**  1921 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
