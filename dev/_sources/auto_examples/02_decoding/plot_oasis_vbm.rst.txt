
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print("")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f2d726f3160>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 205.06858825683594 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 43.93624305725098 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 41.58732461929321 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 40.43758964538574 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 40.00933861732483 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 39.53337049484253 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 39.17884612083435 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 38.90347671508789 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 38.608835220336914 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 38.306633684370254 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 38.128451347351074 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 37.856736855073414 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 37.59018158912659 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 37.39178483302777 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 37.21627746309553 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 37.036897341410324 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 36.83693277835846 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 36.59851758620319 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 36.370053609212235 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 36.17342137035571 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 35.97651243209839 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 35.787057104564845 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 35.59291739897295 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 35.372398573419325 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 35.16832208633423 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 34.94599175453186 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 34.69911399254432 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 34.49525152312385 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 34.29358952386039 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 34.08551734069298 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 33.8882110118866 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 33.69771519014912 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 33.49092757701874 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 33.2907700177395 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 33.10323049040402 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 32.90197379248483 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 32.681694693035546 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 32.481815131934916 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 32.265340729763636 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 32.06155550785554 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 31.855063438415527 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 31.645005051682634 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 31.42447367168608 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 31.219348962916882 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 31.02911522171714 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 30.821704202228123 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 30.596398602361266 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 30.383491485676867 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 30.168027599652607 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 29.94751311321648 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 29.7301082611084 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 29.525529814701454 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 29.318053318904 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 29.12315267436909 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 28.92699909210205 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 28.73085143349387 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 28.530492986951558 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 28.330346542492244 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 28.134766923970187 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 27.930185128066498 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 27.72778638203939 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 27.533816533010516 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 27.3335182128414 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 27.150322217789906 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 26.96129822731018 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 26.764171435282783 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 26.574857068784308 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 26.372774366122574 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 26.148048835642197 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 25.941624254420184 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 25.747346809932164 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 25.54561160651731 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 25.3354615105523 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 25.136013262892423 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 24.939629103686357 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 24.753043254216514 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 24.567967389759264 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 24.37372051895439 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 24.184244296489616 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 23.993721138072917 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 23.806054830551147 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 23.608202074780877 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 23.41018825624047 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 23.212405830980785 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 23.013769251959665 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 22.809540397980633 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 22.613943831865175 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 22.40761106589745 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 22.201840834184125 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 22.003629467460545 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 21.801025337643097 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 21.60356845174517 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 21.40763926506043 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 21.20798896717769 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 21.00921210836857 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 20.813590614419237 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 20.61603941520055 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 20.416720235470645 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 20.22018895830427 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 20.022181946821885 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 19.826639652252197 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 19.62796415904961 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 19.426186098771936 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 19.228013656671767 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 19.02906241783729 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 18.829322372164047 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 18.634099627440833 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 18.433622721199676 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 18.232724913844358 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 18.033772077035465 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 17.838597536087036 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 17.63999998462093 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 17.44148668221065 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 17.242478528908922 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 17.044883623457793 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 16.850254110668015 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 16.654969897763483 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 16.45972190351568 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 16.266071271088165 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 16.069171062036723 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 15.870437145233154 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 15.67474262773498 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 15.475022956973218 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 15.275105315495312 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 15.07684399235633 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 14.877648210525512 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 14.677952649101378 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 14.477236811570295 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 14.272858008742332 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 14.07597897403924 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 13.873976652438824 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 13.670763654563263 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 13.469277974331018 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 13.268075840813774 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 13.067253059415675 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 12.867945423832646 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 12.668961805455824 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 12.468828025525504 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 12.269320111343825 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 12.071045817231102 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 11.871108361652919 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 11.673936882763044 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 11.476177746141461 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 11.278806739753776 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 11.081953869925606 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 10.886168570354066 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.688946952558544 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 10.492247591213305 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 10.294934846259453 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 10.096085546800754 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.898172219594318 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.700792833669295 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 9.502983193648488 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 9.30523439793805 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 9.107019387282334 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.906797078347976 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.707913380402784 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.509669533201084 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 8.311626515811001 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 8.113512799424946 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.914655983448029 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.734109195863239 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.535003977057374 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.335929731649855 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 7.136599058058204 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.937316200949929 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.739385076316006 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.539392369949889 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.34081658862886 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 6.141813111728465 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.942819721558515 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.7450660027955704 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.545878321625466 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.347431826453677 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.148784322300177 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.950615406036377 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.752021887085654 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.553596070930783 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.355254762628105 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.156943473070028 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.9585968653361 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.7600932714030226 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.561790144050514 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.3633092374749523 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.1648528679557466 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.9669379028114116 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.768812079583445 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.5712925482561246 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.373190276166226 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.1750261985435686 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.977319516633686 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.7796091808698564 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.5819280743598938 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.3842910583772807 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.1864922022082143 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.9885439261412009 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.7908502695511798 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5932233164153123 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.39556361689712066 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.19780688669214297 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   39.5s finished

    1977 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  2.770 seconds)

**Estimated memory usage:**  1943 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/nilearn/nilearn.github.io/main?filepath=examples/auto_examples/02_decoding/plot_oasis_vbm.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
