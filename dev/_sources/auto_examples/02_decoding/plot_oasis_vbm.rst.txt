
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f4a27ca4490>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 178.50160598754883 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 30.733829975128174 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 29.039311408996582 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 28.07101329167684 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 27.564077138900757 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 27.248795986175537 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 27.027250528335575 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.8268370287759 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.647790908813477 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 26.64215898513794 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 26.540233612060547 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 26.446026303551417 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 26.405287424723305 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 26.279487133026123 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 26.18155247824533 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 26.05178427696228 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 25.909958124160767 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 25.782951256808115 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 25.64582061767578 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 25.513781020515847 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 25.397641897201538 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 25.264390445890882 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 25.133339686827227 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 24.987938404083252 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 24.860826015472412 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 24.722952365875244 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 24.59105207369878 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 24.45096293202153 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 24.32308854375567 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 24.177523218352217 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 24.110271692276 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 23.97592060796676 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 23.828738808631897 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 23.68556234330842 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 23.54423090990852 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 23.41489955357143 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 23.280438317192925 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 23.137141285715877 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 22.99077603691503 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 22.83247813811669 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 22.704920768737793 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 22.614275816010267 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 22.47169240315755 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 22.319085148877875 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 22.17323957790028 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 22.021599266264175 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 21.87684648969899 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 21.723267332036443 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 21.577873190244038 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 21.421698088548624 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 21.29335856437683 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 21.16521105111814 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 21.04251214174124 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 20.912201872411764 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 20.782932775991934 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 20.654270540584218 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 20.525051185062956 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 20.395997269111767 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 20.26370674988319 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 20.128635515600948 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 19.990652799606323 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 19.834960433303333 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 19.67840649235633 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 19.526767409037028 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 19.375683695077896 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 19.221801005876983 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 19.06585650733023 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.913547063941387 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 18.761631110135248 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 18.616822653922483 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 18.478811502456665 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 18.341321740351933 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 18.20259560479058 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 18.06345612055635 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.924579008205516 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 17.78446356455485 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 17.648061513900757 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 17.50859890974961 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 17.372808804878822 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 17.24039175540586 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 17.10668456554413 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 17.007988541214555 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.873420965380785 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 16.736237138150685 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 16.59350607508705 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 16.45496306699865 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 16.312860006509823 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 16.1687657367224 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 16.02192059430209 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.881046086214901 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.737509542041355 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 15.596181641568194 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 15.45421252043351 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 15.313715921935216 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 15.173262799039799 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 15.03130794826307 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.890953520933786 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.750261704946302 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.610463799262535 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.465771980959959 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.320802688598633 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.173428070427168 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 14.026218956592036 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.877598577332728 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.728758151714619 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.58189944993882 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.432896969453344 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.284781039318192 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.136570091600772 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.989697911323757 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.8432627807964 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.703749931610382 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.568006447383336 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.429940742728984 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.291994521492406 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.154083241587099 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.015012231366388 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.876528648229746 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.73659533161228 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.597810905520657 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.456291516621906 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.313342127918213 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.165715190230824 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.017150148143612 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.87435047857223 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.727031326293945 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.581150970761739 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.434115357286348 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.286624014377594 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.140877668247667 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.995009880799513 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.852934140285463 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.710351279287627 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.568165782699012 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.425221937805858 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.282329974351105 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.13938051111558 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.996978477840006 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.85451955035113 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.713191421769505 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.57022418294634 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.427746153892354 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.285532514813921 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.142741024910986 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.000572986072964 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.858933333692879 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.716639763688388 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.574044003778575 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.431295981278291 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.290521098463327 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.148043076197306 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.005501058717437 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.863638928062037 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.721245263916216 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.5788632306185635 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.436483406251477 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.2944757632720165 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.151143183374101 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.007257428350328 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.863036146703756 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.718370974063873 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.57416129704588 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.429224452854674 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.284906141597069 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.140350894230168 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.996118870648471 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.853118922336992 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.708898301609976 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.564981188092912 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.421289817821345 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.277792804381427 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.134014975954915 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.99049112963122 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.8480116590599107 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.706442035477737 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.564831665584019 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.422740426930514 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.280913460726118 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.1391418301657343 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.9970093479369604 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.8545708656311035 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.712403163066885 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.5704806610778137 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.4282914250274827 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.285334877345873 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.141958765081457 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.9985571984321842 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.8553421905333982 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.7121510607130983 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.5691106193280093 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.4260944190778229 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2831007685336768 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.1402604381243386 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.997758106864178 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8552722390165034 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7127801577250162 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.570239850452968 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4277048825007405 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2851596023097183 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.14257807348241758 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   28.5s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  11.198 seconds)

**Estimated memory usage:**  1873 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
