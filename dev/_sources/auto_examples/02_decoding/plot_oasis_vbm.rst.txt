
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fc63ea73220>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 142.70305633544922 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 24.005422592163086 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 22.437382221221924 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 21.85868295033773 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 21.50079584121704 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 21.318073511123657 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 21.091607650121055 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 20.889713559831893 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 20.745861053466797 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 20.59291307131449 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 20.491482496261597 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 20.364185441624038 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 20.2147319316864 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 20.084371896890495 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 19.977655955723353 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 19.851734161376953 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 19.726600766181946 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 19.606544494628906 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 19.488626771503025 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 19.37974618610583 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 19.260891437530518 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 19.14881341797965 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 19.03746095570651 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 18.925310394038327 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 18.815333048502602 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 18.707504272460938 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 18.60558849114638 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 18.49462631013658 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 18.387437479836603 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 18.285128585223493 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 18.211514155069988 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 18.105286605896488 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 17.991871654987335 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 17.87932749228044 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 17.767486193600824 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 17.65614366531372 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 17.54454067018297 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 17.43067573856663 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 17.321720612676522 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 17.210772239244903 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 17.10075569152832 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 16.986522587334235 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 16.877331075214205 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 16.76914454615393 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 16.659783645109698 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 16.547334962420994 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 16.440631192663442 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 16.335968027723595 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 16.225987394650776 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 16.11700716310618 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 16.01055121421814 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 15.903092253441903 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 15.79614963898292 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 15.701461247678074 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 15.591541051864624 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 15.482027704065496 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 15.374573503221786 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 15.26740014762209 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 15.159447826188185 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 15.050617751428636 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 14.942999442418417 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 14.836857529937244 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 14.72816841833053 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 14.619371448244365 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 14.51124855875969 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 14.40257554787856 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 14.299789190292358 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 14.193992269572927 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 14.08818390790154 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 13.980965714523757 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 13.87199776513236 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 13.765833115913498 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 13.659975263807508 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 13.55212805369129 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 13.443849447611216 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 13.340226411819458 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 13.231570996736226 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.123675643623649 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.01582017311683 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 12.907881338385087 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 12.801187992095947 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 12.692799326814251 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 12.585465855714752 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 12.478152407221048 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 12.37046632312593 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 12.26402637537788 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.158964423246161 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.056498744021887 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 11.950469537214799 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 11.84391347745831 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 11.73611871401469 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 11.628234255444871 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 11.52176822786746 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 11.41419255861672 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.307670004824374 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.200374578174793 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.092992921670277 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 10.984824025753847 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 10.877018524675954 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 10.77019797431098 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 10.662482500076294 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 10.555417639194149 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 10.461930167441276 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.354815325690705 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.248129184429462 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.140391906102499 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.03302150402429 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 9.927328120882265 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 9.822470258783412 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 9.728033433266736 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 9.620142915032128 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 9.512655019760132 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.406465121677943 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.299986288610812 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.192618667033681 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.085387997005297 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 8.977393849142667 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 8.870316315919926 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 8.764009402970137 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 8.656803828327597 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 8.549078146616617 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.441348893583314 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.3350353827242 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.227402532003758 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.119995263315017 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.012797307968139 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 7.905335770712958 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 7.798404438289132 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 7.691768243908882 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 7.584809534309446 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.477956790190476 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.371324247986306 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.263996304887714 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.156765416152496 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.049384284375319 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 6.94219594531589 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 6.8356083140653725 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 6.728074550628662 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.6205743603084395 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.513544470286198 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.407044274466378 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.300096006258159 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.192766145921089 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.086662070734517 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 5.980200012524922 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 5.873109875054195 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 5.767611069222019 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.660933807593625 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.553940541035421 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.446765446822916 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.3401360511779785 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.233262068388478 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.126327088004664 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.019186482709997 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 4.912247738280853 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.805442417821577 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.698307031240219 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.591221036425062 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.4844103221651865 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.377540228501806 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.270910918712616 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.164010945314206 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.057131216849809 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 3.950227324947989 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.843493572095545 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.73652010975462 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.629694938659668 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.522649368126235 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.415642420450846 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.3088634437357882 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.2022390225354367 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.0955606176142103 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 2.9885757912036985 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.8815884576367505 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.774820451078744 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.667923995426723 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.561054771596735 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.454299860754929 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.3475527254383217 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.240974663356163 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.1341986921098495 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.0274933649031497 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.9206858991266607 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.8140276325204987 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.7072882859603218 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.6006651504619702 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.4938734680093746 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.3871027135594005 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.2803937374277317 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.1736838237318412 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.0669455402775814 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.9602375791959114 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.8535585502783457 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7468607956881349 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6401491730483537 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5334152319492438 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.42672878382157303 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3200512404369219 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2133696440494422 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1067023289263548 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   21.3s finished

    1985 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  56.488 seconds)

**Estimated memory usage:**  1972 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
