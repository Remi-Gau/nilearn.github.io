
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (:term:`VBM`)
to study the relationship between aging and gray matter density.

The data come from the `OASIS <https://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard :term:`VBM` pipeline (using SPM8 and
NewSegment) to create :term:`VBM` maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the :term:`ANOVA` step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the :term:`ANOVA` step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

:term:`SVM` weights are very noisy,
partly because heavy smoothing is detrimental for the prediction here.
A standard analysis using mass-univariate :term:`GLM`
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 112-123

Prediction pipeline with :term:`ANOVA` and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

In nilearn we can benefit from the built-in DecoderRegressor object to
do :term:`ANOVA` with SVR instead of manually defining the whole pipeline.
This estimator also uses Cross Validation to select best models and ensemble
them. Furthermore, you can pass ``n_jobs=<some_high_value>`` to the
DecoderRegressor class to take advantage of a multi-core system.
To save time (because these are anat images with many voxels), we include
only the 1-percent voxels most correlated with the age variable to fit. We
also want to set mask hyperparameter to be the mask we just obtained above.

.. GENERATED FROM PYTHON SOURCE LINES 123-149

.. code-block:: default


    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 150-152

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 152-165

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-183

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f6317c85580>



.. GENERATED FROM PYTHON SOURCE LINES 184-186

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 186-231

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 128.7674903869629 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 20.157087087631226 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 29.193984746932983 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 25.256882349650066 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 23.132795810699463 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 21.80751872062683 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 21.010757048924766 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 20.37330276625497 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 20.400352478027344 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 19.915900389353432 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 19.484700441360474 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 19.114845644343983 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 18.794323205947876 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 18.53196118428157 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 18.272380420139857 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 18.04456718762716 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 17.82011353969574 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 17.64039823588203 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 17.450939575831093 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 17.2719869488164 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 17.28842067718506 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 17.117168210801623 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 16.944937771016903 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 16.78874193067136 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 16.635125319163002 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 16.490607738494873 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 16.35314237154447 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 16.218552933798897 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 16.081956250326975 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 15.969103106136979 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 15.84003472328186 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 15.846569192024969 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 15.715207815170288 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 15.588952678622622 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 15.46659327955807 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 15.34400919505528 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 15.225113100475735 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 15.113843073716033 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 14.999559590691016 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 14.891564301955396 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 14.778563499450684 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 14.662459164130977 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 14.551596641540527 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 14.52797446694485 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 14.414784323085438 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 14.303329547246298 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 14.194536001785943 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 14.086609292537608 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 13.980562925338745 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 13.871574508900546 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 13.765103101730347 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 13.65914607515522 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 13.554281253081102 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 13.449316816509894 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 13.410084909862942 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 13.30507213419134 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 13.20120804650443 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 13.096724434902793 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 12.994669231875188 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 12.89272530604217 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 12.791237910588583 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 12.68935197298644 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 12.593759882834648 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 12.494405670771522 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 12.39461013674736 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 12.29464101791382 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 12.245135906970862 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 12.145058151501328 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 12.044879057828117 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 11.947694197944973 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 11.849812303270612 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 11.753418002330081 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 11.654543982611761 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 11.56325970937128 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 11.465930120365039 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 11.369514862696331 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 11.27060153609828 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 11.203308811435452 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 11.114915108069395 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 11.018668096276778 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 10.923779010772705 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 10.826642413198213 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 10.732242450481507 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 10.63647549123649 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 10.544778097243537 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 10.451998177696677 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 10.356821121171462 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 10.26068400514537 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 10.166822997006502 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 10.101257776946163 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 10.005215856764053 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 9.909219678941664 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 9.813773818638015 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 9.718574421380156 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 9.62309505584392 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 9.526971177050942 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 9.432391186555225 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 9.338252340395426 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 9.24298907299431 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 9.150955780588014 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 9.056381464004517 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 8.98664893018137 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 8.894814402449365 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 8.80115380101991 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 8.706674282367413 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 8.612931228819347 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 8.520789263383397 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 8.427265726517295 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 8.333477170379073 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 8.239879662837458 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 8.146303003484553 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 8.051832523431864 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 7.976871115820749 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 7.883456202734888 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 7.790722207019204 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 7.698099488797395 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 7.60554784741895 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 7.512629496745575 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 7.4196208048675025 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 7.327089107337119 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 7.235360463460286 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 7.145376528590179 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 7.053789666441621 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 6.960685815268415 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 6.882710495302754 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 6.790332841873169 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 6.698115076337542 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 6.605249609534196 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 6.513206407427788 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 6.422244753948478 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 6.330517053604126 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 6.240477310792181 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 6.148912039670077 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 6.05717354609554 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 5.965023492699238 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 5.884696686709368 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 5.792953042423024 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 5.700903445264719 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 5.60886790095896 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 5.517013405724395 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 5.426234824316842 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 5.349079899754084 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 5.265073453876334 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 5.174397168459592 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 5.082108881738451 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 4.990292680674585 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 4.907833246335591 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 4.815471962195676 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 4.723480868983914 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 4.6316958193810995 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 4.540403763453165 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 4.448789001300635 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 4.356783440238551 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 4.265058663935443 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 4.173479222632073 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.081753215482158 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 3.990265179903079 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 3.903777298653961 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 3.8143248497685294 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 3.7226567718217956 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 3.6312126517295837 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 3.5393120176303463 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 3.4478148442727545 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 3.3565306678140088 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.265217734546196 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.1740209406072446 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.08262753199382 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 2.995883827437898 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 2.9244551885695684 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 2.832471834837332 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 2.7406109501333797 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 2.6489362423880056 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 2.557046601938647 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.465073608938669 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.3731660322211257 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.281418970652989 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.1896256858652285 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.0978451246595653 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.006143532442243 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 1.917736486349692 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 1.8259838422139485 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 1.7342602969533172 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.6425895874316876 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.5509091635219387 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.4594637000042459 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.3679373650937467 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.2764339370112265 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.184967628774796 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.0936060560510512 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.0025260990889615 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 0.911426167739065 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.8213073982618242 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.7298962374528248 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.6385912845789459 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.5473635663691255 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.45604979686247993 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.3647504096128502 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.27353501561934573 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.1823205129064695 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.0911423165594513 seconds remaining)
    1993 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 44.871 seconds)

**Estimated memory usage:**  1899 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
