
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print("")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f1d8e85aa90>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 203.16600799560547 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 43.750020265579224 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 41.311660051345825 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 40.33031368255615 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 39.87129807472229 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 39.49959897994995 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 39.22225475311279 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 38.96508393968855 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 38.6883487701416 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 38.42036218113369 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 38.15167188644409 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 37.936380321329295 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 37.705256382624306 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 37.469443779725296 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 37.24243835040502 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 37.0140438079834 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 36.791221261024475 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 36.562904750599586 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 36.34862510363261 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 36.123726405595484 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 35.92697310447693 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 35.730878012520925 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 35.544983105226 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 35.362219178158306 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 35.17646265029907 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 34.99306392669678 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 34.80553216200609 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 34.598665449354385 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 34.39402689252581 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 34.188977874558546 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 33.98379158973694 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 33.7717706464952 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 33.55894982814789 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 33.36097751964222 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 33.163196199080524 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 32.95597171783447 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 32.751539309819535 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 32.54618253579011 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 32.344844793018545 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 32.136956227131385 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 31.930978775024414 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 31.730744955016345 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 31.528324853806268 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 31.322467249493265 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 31.114932840520684 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 30.905434926350914 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 30.704780008481897 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 30.50722888682751 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 30.30030071735382 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 30.103655484257914 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 29.902445554733276 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 29.70586543924668 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 29.51316969211285 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 29.31681342844693 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 29.121734804577297 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 28.92282689701427 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 28.721409865788054 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 28.523657514337906 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 28.331596604708967 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 28.140417992058445 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 27.94001587231954 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 27.737063642408028 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 27.5358136469318 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 27.33473635476733 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 27.130663752555847 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 26.926126021605274 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 26.71843952843637 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 26.5192058406659 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 26.324859885608447 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 26.120709249938745 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 25.917742592947825 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 25.71673407353146 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 25.514636993408203 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 25.316751225353922 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 25.129010400256593 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 24.92821256319682 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 24.72467941986887 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 24.52267532224779 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 24.319053527636406 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 24.11545330361475 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 23.911349415779114 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 23.70868206907202 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 23.507909251422415 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 23.307695733495507 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 23.107904922394525 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 22.904721652760227 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 22.70180827517842 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 22.500476176711334 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 22.297079996629193 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 22.093690114074878 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 21.890195343229507 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 21.688250698886073 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 21.488127646238908 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 21.28807528557316 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 21.088946702632498 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 20.89236455214651 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 20.694935699303944 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 20.49521236567153 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 20.296407967197652 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 20.097112470202973 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 19.898665189743042 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 19.699305437579014 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 19.500455253264484 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 19.30201496661288 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 19.102109835698055 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 18.9025978133792 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 18.702869055406104 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 18.504646546372744 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 18.30392595573708 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 18.107029225848137 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 17.909742398695514 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 17.711769808520067 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 17.51399907044002 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 17.315686042329904 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 17.1150938084251 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 16.915133040884264 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 16.716303422533233 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 16.517038895533634 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 16.317657284817454 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 16.118203826311255 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 15.919782479604084 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 15.71974411877719 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 15.525217904419197 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 15.325842091707678 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 15.126391887664795 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 14.927135324478149 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 14.728235547504728 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 14.52881788644265 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 14.330002471804619 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 14.129356140314146 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 13.930600624818068 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 13.73151148730562 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 13.532620560039174 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 13.333589962550572 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 13.135271360625081 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 12.936925905722159 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 12.737615809721104 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 12.538116665652199 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 12.338019554165827 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 12.139447297981317 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 11.941679784229823 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 11.743728047567057 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 11.545599594922134 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 11.35689597029786 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 11.159561898973253 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 10.961117900651077 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.761321887578049 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 10.561837639127459 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 10.361709633389035 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 10.162027483818516 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.962764024734497 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.763472983379238 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 9.564222636975739 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 9.3647089113597 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 9.165043072267013 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.965373892937938 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.765500459915552 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.565681753644517 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 8.365986821017687 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 8.166849832114933 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.967505097389221 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.7681996837165785 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.569146065064418 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.369923414628198 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 7.170478838246043 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.971682404026841 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.772490291710359 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.573494675630581 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.374594052632649 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 6.17529869361742 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.976439139422249 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.777157755623087 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.577852653902631 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.378268436200357 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.178934264457089 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.97992832320077 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.78082182190635 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.581813763763945 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.382889616355468 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.1838130138439835 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.98495692676968 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.785719741115254 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.586546992207621 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.387307514909838 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.188313152479089 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.989011448782844 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.7897867797523417 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.5906594169331107 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.391455457565632 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.192220450709106 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.9929860767565275 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.7937764572223445 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.5944610635439553 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.3951188517358017 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.1958771096062415 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.9966646952506824 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.7973269199838443 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5980040712404977 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3986573604622273 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.19932889099696174 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   39.8s finished

    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  3.505 seconds)

**Estimated memory usage:**  1931 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/nilearn/nilearn.github.io/main?filepath=examples/auto_examples/02_decoding/plot_oasis_vbm.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
