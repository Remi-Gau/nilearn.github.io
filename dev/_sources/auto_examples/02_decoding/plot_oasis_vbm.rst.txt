
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fbc35ac4be0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 151.5030860900879 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 26.11697554588318 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 24.22876524925232 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 23.612203439076744 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 23.275065422058105 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 22.91666007041931 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 22.654634475708008 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 22.44329105104719 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 22.229169845581055 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 22.04204191101922 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 21.863704919815063 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 21.691059025851164 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 21.56724174817403 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 21.412760349420402 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 21.288063321794784 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 21.193517684936523 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 21.07513165473938 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 20.948239340501676 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 20.823153310351902 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 20.713581298526968 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 20.595333337783813 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 20.46610379219055 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 20.334524479779333 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 20.219697195550673 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 20.096615155537922 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 19.984666347503662 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 19.861707742397602 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 19.73027569276315 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 19.611744369779316 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 19.519292568338326 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 19.396023750305176 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 19.27644968032837 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 19.16414523124695 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 19.046735792449027 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 18.926688586964328 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 18.8041227885655 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 18.687038766013252 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 18.567130185462332 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 18.451513804887473 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 18.331261494220833 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 18.216612815856934 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 18.104882257740673 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 17.98561426571437 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 17.86468994340231 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 17.74778483130715 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 17.630908701154922 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 17.517596037491508 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 17.408620393022577 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 17.303611874580383 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 17.190854057973745 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 17.086560487747192 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 16.97326733084286 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 16.852041647984432 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 16.732099366637897 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 16.613027351873892 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 16.491673621264372 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 16.373916762215753 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 16.26188804392229 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 16.150071958015705 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 16.038251032263545 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 15.923200448354086 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 15.808138147729343 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.694950134523452 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.582929247901552 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 15.464489728212357 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.349998785899237 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 15.234201590220133 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.118403484572225 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 15.000034290201524 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 14.884210669476053 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 14.790431363242014 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.674158630236773 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.557948218451605 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.447999621090824 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.33122248907347 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 14.221469958623251 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.105555070073981 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.990719033526135 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.875000660236065 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.758297853832003 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.642481803894043 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.529476324717205 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.412882304773097 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.296998271022934 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.190385069165911 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.080247850979076 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.966133466986722 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.85134418531396 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.736475207588889 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.62009207050452 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.50397268931071 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.387720886167589 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.271197484887166 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.158834629161385 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.04707527667918 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.933427685185483 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.822216868400574 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.709391031068625 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.5963848804941 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.486254913638335 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.372976541519165 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.259089682361868 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.14560510597977 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.037575041206138 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.927391492403471 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.81288651057652 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.698520305021754 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.584877693764517 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.471355394080833 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.35666711177301 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.242358055981724 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.12838939288715 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.013313293457031 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.89832515210177 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.78507017252738 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.67098217425139 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.557411843332751 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.444426455049435 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.329898321022423 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.215752511465249 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.102532068888346 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.986999405317071 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.871547644255593 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.757475992528404 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.642877217262022 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.529240703582763 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.416519823528471 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.30213176547073 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.18719545006752 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.073874959649965 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.959944559977604 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.845262729484616 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.730466091271603 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.616126698658879 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.501701806908223 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.387728611628214 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.27352030137006 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.160095051257279 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.046590321305869 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.932007751876502 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.817719289234706 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.703471787432407 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.589098020338676 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.474551714383638 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.360486957761976 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.246206908390439 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.132444081241137 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.019435089461657 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.9054833876120085 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.7927475215604645 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.681135177612305 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.568642647850592 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.455411358883506 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.341752479278964 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.228100398918251 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.114378906065419 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.002008988307073 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.889327158593828 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.777355523049076 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.664573344044715 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.551339328289032 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.43862980048849 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.325389776700808 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.21186019452803 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.098384339634965 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.9848514397939048 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.8712879893291428 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.7579399939782605 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.644513629731678 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.5306461647417415 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.4167988721062157 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.3030035021709416 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.18941890916159 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.0761086802951176 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.9622852911894353 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.8487308025360107 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.7349588329141787 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.621342085175595 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.507519775562072 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.3939228723835013 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.280140691333347 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.1662717036779413 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.0523678837241706 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.9385679224149779 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.8247907680013904 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.710780955649711 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.5969738832084082 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.4831455391358563 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.369092099210049 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2550312249118059 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.1410271368528666 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.026950335627451 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9128720760345459 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7988119421845272 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6847530517381492 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5706214476854373 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4565068507681087 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3423859359044109 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.22833855224378183 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1141708556132101 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   22.8s finished

    1973 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  59.645 seconds)

**Estimated memory usage:**  1875 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
