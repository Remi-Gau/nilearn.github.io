
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f4658debf40>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 241.4870262145996 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 38.66934061050415 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 35.86840009689331 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 34.98782356580099 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 34.2838454246521 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 33.842758655548096 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 33.50103402137756 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 33.204229967934744 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 32.922712326049805 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 32.651599672105576 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 32.41838216781616 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 32.16922168298201 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 31.936254580815632 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 31.750464586111217 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 31.55060342379979 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 31.35732968648275 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 31.16636312007904 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 30.985327973085294 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 30.78598610560099 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 30.59891368213453 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 30.43734097480774 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 30.241499514806836 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 30.056094624779444 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 29.886891634567927 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 29.700302124023438 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 29.54194450378418 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 29.36488410142752 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 29.19128957501164 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 29.01240703037807 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 28.848500687500525 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 28.685781478881836 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 28.517061864176103 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 28.332749605178833 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 28.152077732664164 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 27.97783221917994 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 27.80106261798314 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 27.62713125016954 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 27.465273876447934 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 27.292246718155713 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 27.118371437757446 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 26.940753936767578 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 26.768000224741492 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 26.599262067249843 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 26.444593972938005 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 26.278230103579435 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 26.116155597898697 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 25.938797370247222 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 25.77258463108793 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 25.591853976249695 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 25.425561131263265 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 25.255735158920288 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 25.081488459717992 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 24.907315712708694 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 24.735495382884764 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 24.561881586357398 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 24.394627289338544 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 24.241657325199675 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 24.065801398795944 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 23.89444041252136 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 23.72517002639124 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 23.554947217305504 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 23.38393660060695 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 23.215928792953488 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 23.04603963049631 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 22.876967310905457 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 22.719201344710132 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 22.54555674755212 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 22.378844278961864 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 22.207635599024155 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 22.03371368974879 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 21.86984007699149 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 21.705533084735066 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 21.538680606418186 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 21.376273249926633 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 21.204608975230034 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 21.0355011622111 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 20.860606005317287 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 20.689070416735365 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 20.518768603985126 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 20.349034430105473 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 20.178330659866333 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 20.013091522970317 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 19.84181155809542 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 19.67156540342124 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 19.500668661934988 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 19.333099379259 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 19.16410502722097 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 18.996483649330578 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 18.829209327697754 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 18.66575753286983 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 18.499106115765045 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 18.33311921423608 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 18.170561251433 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 18.00127496514269 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 17.83278526651098 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 17.662119514063786 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 17.493736406167347 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 17.325256844156797 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 17.153889364125778 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 16.985455007264108 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 16.816282749176025 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 16.647310155453066 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 16.478512576982087 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 16.310753780661276 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 16.142303906954254 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 15.977966319947015 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 15.81016510837483 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 15.64079222055239 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 15.46728210096006 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 15.295285537702227 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 15.125205646861684 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 14.955478429794312 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 14.78514231954302 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 14.61399732226819 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 14.444105821743346 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 14.274836809738822 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 14.104443829635095 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 13.936691793621096 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 13.769553447173815 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 13.602056060518537 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 13.433897813161213 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 13.26754158193415 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 13.09983651755286 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 12.932733898240375 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 12.764125293300998 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 12.595795297622681 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 12.42688170690385 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 12.258087090619906 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 12.091654792428017 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 11.923836924308954 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 11.756675445116482 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 11.589169263839722 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 11.421931743621826 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 11.255512302083181 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 11.086417554029778 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.918705154348302 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 10.751047919778262 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.583051319539981 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 10.415579042572906 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 10.247455924534968 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 10.078874383653913 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.910233566947017 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.742308643502248 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.575770464810457 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.408091849750942 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 9.242220401763916 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 9.075768245409613 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.90800776935759 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.740517004116162 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.573003226478628 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.404918591181437 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 8.235965022977615 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 8.06718695791144 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.899258506064322 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.730360517254123 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.562281285562824 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.3942930820660715 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.225928400732149 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 7.0574047927615 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.889446450479375 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.720886170864105 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.552777964135875 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.384781351795903 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.216749353642844 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.050389295671044 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.881943095814099 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.713790649391083 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.545386430032239 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.376774742489769 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.208334860717051 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.040282221401439 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.871986118673581 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.703855059867681 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.5359099724389225 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.367861753222586 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.199675798416138 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.031491918997331 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.863572594809667 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.6957670356450456 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.5282409444201592 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.3603514035542803 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.192384044109787 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.0242883556491726 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.8561992853717078 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.6883043206256367 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.520105658350764 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.351977022745276 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.1837025619445636 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.015517468148089 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.8475271318324658 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.6794340986954537 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.5113004602062765 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.3434788783391316 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.1755908795588992 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.0076697438033586 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.8397390659038837 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6718033041272844 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5037889625820412 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.33584741390112677 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.16790053473046077 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   33.6s finished

    1972 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  17.082 seconds)

**Estimated memory usage:**  1902 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
