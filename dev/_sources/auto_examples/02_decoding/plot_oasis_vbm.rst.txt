
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f5aca799f70>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 176.18894577026367 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 31.071545600891113 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 28.719343185424805 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.804467280705772 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 27.24394130706787 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 26.990023612976074 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.758172512054447 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.478781189237324 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.265586853027344 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 26.040612803565132 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 25.843268632888794 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.640526164661757 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.505438248316445 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.344918434436504 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.17584548677717 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 25.013771613438927 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 24.86812925338745 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 24.697193510392136 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.535012112723457 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.374946406013088 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.22577404975891 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.071039960497902 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 23.919773925434463 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 23.768376029056054 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 23.627067248026528 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.474297285079956 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.31550515615023 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.178367455800373 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.04103946685791 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 22.896850988782685 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 22.75709708531698 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 22.65048313140869 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 22.510271966457367 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.382905454346627 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.24575069371392 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.11558641706194 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 21.982456498675877 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 21.846750401161813 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 21.702775654039886 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 21.584773791142002 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.44485855102539 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.309396813555463 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.194914284206572 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.058488513148106 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 20.918937856500797 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 20.778071668412952 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 20.661292967589006 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.52167828032311 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.382537881533302 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.23863382242164 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.108046770095825 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 19.968864562464695 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 19.828743329414955 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 19.684653498091787 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.54707133328473 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.404560695994984 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.263203961508616 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.126011869363616 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 18.997532622567537 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 18.862885212494152 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 18.72575068473816 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.589659401627838 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.450018075204664 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.312375855824303 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.17974752187729 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.045092472663296 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 17.908502109123 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 17.77406098237678 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.63968373747433 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.508461720701575 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.38117527961731 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.25017088567707 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.118177625868054 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 16.985972228115553 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 16.851209125003297 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.71831568082174 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.582170749965467 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.445252245122735 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.308437708096626 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.171278021003626 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.038283467292786 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 15.901188085108629 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 15.766684532165527 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.63267567933324 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.497604869660877 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.362233554615695 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.226290414499681 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.097435984118233 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 14.970249479467219 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 14.835775948642345 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.698237869474625 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.564105670530717 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.433114580486134 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.298736305647 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.162832873932858 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.029687981856497 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 13.894598782062529 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.76059053116238 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.625591886286834 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.494952526959505 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.36083197593689 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.225355967436686 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.090554789000867 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 12.956460848595333 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 12.821380101717436 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.686822800409226 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.555128043552616 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.420048042992565 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.287675539652506 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.157755541145255 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.026498339392923 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 11.891584531680959 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.759922095707484 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.625762950002619 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.494656278375993 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.359117435372394 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.223644675879642 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.089559298295242 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 10.9549627950636 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.820179404330855 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.685108025868733 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.550822933843314 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.416848249122745 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.282453759898983 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.14692098094571 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.01428484916687 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.879637585745918 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.746967167366208 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.612285688519478 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.478028735449147 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.346569959933941 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.212566732450295 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.078874602462307 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 8.947981300210595 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.8143275851634 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.67968730573301 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.54615940767176 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.412091062016732 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.277406975842904 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.142480992584778 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.009154796600342 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.875345498957532 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.7417539039128265 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.608476150285948 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.474397169219123 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.340570244295844 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.206924872855617 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.073338795681389 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.941983461380005 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.808381832686047 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.6744450728098546 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.540743562559419 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.406908085471705 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.273443271911223 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.142868497154929 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.015603488491428 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.888093129182473 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.768923328180981 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.639348030090331 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.506220733594595 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.371283531188965 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.2365008407498 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.101807223425971 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.9670181055010465 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.832613962452586 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.697595278422038 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.562608865370233 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.427925833684956 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.2933026268368675 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.158922504391191 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.024319424348719 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.890024964572393 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.7558049434839296 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.621705901416051 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.491808666580025 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.3577596800667897 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.2234082438729024 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.089774752740806 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.955307430095887 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.8210676089345412 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.6871849430931936 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.552542523125917 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.4179923036596276 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.283420528870463 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.149084298507027 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.0144887292707288 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.8803482106936875 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7458940483032064 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.611665832235458 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.4771494272524717 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3428846409446313 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2085690386008219 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0742528637250264 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9399521807932483 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8056215084705156 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6713140744429368 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5370164501423738 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4027359618753346 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.26846538649664986 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13422755979413364 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   26.8s finished

    1961 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  6.076 seconds)

**Estimated memory usage:**  1868 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
