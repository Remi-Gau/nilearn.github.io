
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-90

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 148-150

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 150-163

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-166

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f57ae546490>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-229

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 153.95164489746094 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 25.65666127204895 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 24.0069637298584 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 23.381885766983032 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 23.120505809783936 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 22.88005256652832 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 22.6000402768453 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 22.380270515169418 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 22.55573272705078 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 22.340639299816555 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 22.176674842834473 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 22.01556047526273 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 21.939860264460243 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 21.74765684054448 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 21.58555432728359 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 21.425272862116497 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 21.27266561985016 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 21.268313421922574 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 21.103322161568535 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 20.947719988070038 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 20.82432532310486 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 20.76340344973973 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 20.61597472971136 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 20.491008903669275 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 20.391144116719563 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 20.284175872802734 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 20.265085513775166 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 20.134455415937637 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 19.99904877798898 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 19.864340963034792 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 19.739826599756878 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 19.599750826435702 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 19.457163870334625 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 19.335145300084893 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 19.21742478538962 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 19.202877044677734 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 19.090444485346474 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 18.975099557154888 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 18.934316509648376 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 18.85302329063416 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 18.76116180419922 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 18.650173693168455 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 18.546180861336843 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 18.49498347348945 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 18.372202829881147 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 18.252662234836155 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 18.129815091257512 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 18.00622153789439 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 17.882184267044067 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 17.761069069103318 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 17.640767812728882 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 17.532064947427486 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 17.49025997748742 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 17.384537593373715 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 17.264730647758203 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 17.140601374886252 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 17.017650604248047 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 16.895531942969875 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 16.775258738419105 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 16.65606632879225 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 16.572166681289673 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 16.452344179153442 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 16.335067749023438 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 16.21969235132611 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 16.09367161989212 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.968894334939812 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 15.844862699508667 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.73258053010969 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 15.610539099749397 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 15.538995262505352 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 15.427703993661064 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 15.307691443134361 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 15.182528601752386 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 15.059475634196033 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.935467636263049 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 14.816811879475912 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.699968476044504 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 14.610363108771187 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 14.487999775470831 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 14.36722343179244 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 14.242796659469604 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 14.121031034139941 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 14.006630345088679 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.893221407051547 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.772988512402488 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.650077371036305 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 13.563357519548992 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 13.451962986211669 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 13.331163536418568 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 13.208400635237103 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 13.085475471284655 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.96193231331123 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.840268103972726 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.722997750005415 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.616777932390253 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 12.490042297463669 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 12.364492575327555 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 12.239431772035422 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 12.114987752875503 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.989209189559473 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.864043474197388 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.738778407030766 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.613753991968492 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.503799482456689 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 11.380250490628757 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 11.258987869535174 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 11.136316443389317 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 11.012926066033193 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.88888649587278 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.765565371294635 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.64175633950667 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.51928226153056 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.413072756358556 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 10.290813522001283 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 10.171465493085092 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 10.048225050387174 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.92631093386946 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.804160077347715 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.682345754009182 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.560150637346156 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.438150723775227 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.324748594898823 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 9.203886379961109 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 9.084867273888936 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.963862234546292 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.842841005325317 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.72177199333433 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.602505079404576 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.481444507837296 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.361484124678974 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 8.249290814766516 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 8.129753607830018 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 8.009496956160573 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.889000856786743 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.769063013703075 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.649414689452559 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.529562220853918 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.409124461403728 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.289500530215277 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.175547169266845 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.056961808885847 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.9377271723239975 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.8192179908215165 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.7003515933777065 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.581601924366422 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.4634764769981645 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.344715601777377 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.227088349206107 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.114784485584981 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.996773375760789 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.8784769376118975 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.760162086676288 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.64171710767244 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.5237698913399695 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.40587254623314 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.294999968621039 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.180982302396726 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.062003926866374 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.942759209041354 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.823608278478466 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.704551100730896 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.586053870479513 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.466906067765789 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.347844343243932 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.229142892651442 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.113387122298732 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.99567425681884 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.876936050232299 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.7582241694132485 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.639747859458246 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.5214223160463223 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.403003500218977 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.2847486595774806 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.1668717682017067 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.0509267182185735 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.932958228247506 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.8147794875231655 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.6967205839642023 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.578772753811954 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.4610671171262943 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.3433151510026717 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.2255422094250252 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.1079410144260953 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.9920894278854622 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.8749912510747495 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.7583574475468817 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.6412501130052792 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.5238094661325057 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.4065857136503177 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2890618616941745 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.1715328442422968 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.054122230769452 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9373425741990407 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.8200161222349176 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.7027056536723658 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5853984172527606 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.46818698668966485 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.35105339040611 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.23397318040481724 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11695292127791362 seconds remaining)
    1979 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 59.169 seconds)

**Estimated memory usage:**  1894 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
