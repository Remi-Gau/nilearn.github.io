
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (:term:`VBM`)
to study the relationship between aging and gray matter density.

The data come from the `OASIS <https://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard :term:`VBM` pipeline (using SPM8 and
NewSegment) to create :term:`VBM` maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the :term:`ANOVA` step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the :term:`ANOVA` step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

:term:`SVM` weights are very noisy,
partly because heavy smoothing is detrimental for the prediction here.
A standard analysis using mass-univariate :term:`GLM`
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 112-123

Prediction pipeline with :term:`ANOVA` and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

In nilearn we can benefit from the built-in DecoderRegressor object to
do :term:`ANOVA` with SVR instead of manually defining the whole pipeline.
This estimator also uses Cross Validation to select best models and ensemble
them. Furthermore, you can pass ``n_jobs=<some_high_value>`` to the
DecoderRegressor class to take advantage of a multi-core system.
To save time (because these are anat images with many voxels), we include
only the 1-percent voxels most correlated with the age variable to fit. We
also want to set mask hyperparameter to be the mask we just obtained above.

.. GENERATED FROM PYTHON SOURCE LINES 123-149

.. code-block:: default


    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 150-152

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 152-165

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-183

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f25ea50a400>



.. GENERATED FROM PYTHON SOURCE LINES 184-186

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 186-231

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 134.17720794677734 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 20.803149700164795 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 20.893717288970947 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 19.698697408040367 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 19.069151401519775 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 18.67736792564392 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 18.40427335103353 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 18.175938980919977 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 18.001333236694336 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 17.841414080725777 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 17.670762300491333 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 17.550159996206112 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 17.460553010304768 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 17.582789421081543 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 17.427867446626937 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 17.287492434183758 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 17.17163622379303 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 17.05014808037702 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 16.91749056180318 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 16.801831245422363 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 16.698036432266235 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 16.58686879702977 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 16.479065201499246 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 16.366319044776585 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 16.39317433039347 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 16.292479038238525 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 16.17674886263334 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 16.0687933144746 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 15.95143805231367 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 15.839121259492018 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 15.73339589436849 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 15.619929029095557 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 15.518155574798584 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 15.414203094713615 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 15.31509067030514 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 15.211416312626431 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 15.19870278570387 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 15.088836805240527 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 14.98990465465345 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 14.88535866370568 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 14.783256530761719 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 14.682460087101633 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 14.582650286810738 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 14.484339531077895 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 14.382512374357743 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 14.281280623541939 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 14.180961287539938 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 14.140131894578325 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 14.042818069458008 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 13.94541665485927 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 13.848694324493408 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 13.748619420855652 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 13.650523002331074 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 13.55271695244987 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 13.45643130938212 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 13.357952724803576 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 13.25895186832973 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 13.163108164804022 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 13.11275291442871 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 13.015900914951905 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 12.922920942306519 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 12.825143055837662 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 12.727499185069913 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 12.637410981314522 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 12.539503961801529 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 12.444715316479023 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 12.347748330145171 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 12.249950430286464 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 12.15346506062676 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 12.099036289298017 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 12.00361943244934 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 11.90726816150504 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 11.811961279975042 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 11.715944652688014 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 11.620704889297485 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 11.524068911870321 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 11.428688676733719 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 11.332617063026923 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 11.237166930467655 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 11.140004414546338 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 11.061432480812073 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 10.975146776364173 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 10.879094984473252 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 10.784088298498865 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 10.688450608934675 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 10.593972192091101 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 10.498137008312137 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 10.403359552909588 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 10.3080942847512 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 10.2140293924996 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 10.119448052512276 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 10.02458817094237 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 9.957746308782827 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 9.86221634188006 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 9.766347717731557 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 9.670632061205414 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 9.576247890790302 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 9.482044873778353 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 9.38777662783253 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 9.292218952467946 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 9.198737859725952 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 9.10472571967852 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 9.010455907559862 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 8.93602567506068 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 8.841060931865986 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 8.746495383126396 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 8.657261254652491 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 8.562752262454167 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 8.46856795416938 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 8.375362195006204 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 8.280730052427813 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 8.187030710615554 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 8.092976995876857 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 7.999410348655903 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 7.921016839512608 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 7.827805187391197 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 7.734050569863155 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 7.640335889963004 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 7.546500913167404 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 7.453094905164062 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 7.359494050343831 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 7.268264449332372 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 7.174623376033345 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 7.08143282324318 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 6.988312175196986 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 6.901172018051147 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 6.812700877113948 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 6.719402805088073 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 6.641562849283218 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 6.561450442602468 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 6.469792476067176 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 6.376445608284637 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 6.282725167996955 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 6.1892011882667255 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 6.095372840539732 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 6.002480171344898 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 5.917184605317957 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 5.823338103120344 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 5.732772149901459 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 5.63888120479721 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 5.545775413513184 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 5.452220108492154 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 5.358872705781963 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 5.265676450062465 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 5.172425813145108 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 5.079044596902255 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 4.986145137107536 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 4.899036083091684 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 4.805421893661087 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 4.712302337556878 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 4.618796110153198 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 4.525355013790509 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 4.4319252716867545 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 4.338946895661697 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 4.245860824337253 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.152722043375816 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.0595544546078415 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 3.9668091345744525 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 3.874114543576783 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 3.785096201506801 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 3.6923550963401794 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 3.625157846427112 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 3.5314913531880316 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 3.4377350031963885 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.344081221557245 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.2505219632929023 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.1571737570934983 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.0637131394026524 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 2.9702459971110025 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 2.880889899631929 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 2.7872561426723705 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 2.6937076766588532 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 2.6004829905753915 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.507209804016731 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.4138278550115126 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.320462158748082 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.227132136171514 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.1339743905148265 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.040802251087146 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 1.947565823293931 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 1.856894466612074 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 1.763773015849498 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.6705721603645072 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.5774553890436727 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.4844075285870095 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.3913157695048566 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.2982726584198654 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.2052838878835586 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.1124122599337962 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.0195439151985934 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 0.9267333055797375 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.8348904305103562 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.7421122093995411 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.6492590854822662 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.5563889287181737 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.4635860002957857 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.37080069950648714 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.2780671010767748 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.18534248284619265 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.09266983803792216 seconds remaining)
    2006 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 49.103 seconds)

**Estimated memory usage:**  2447 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
