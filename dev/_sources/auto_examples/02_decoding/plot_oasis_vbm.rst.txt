
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f98423b9790>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 186.9487762451172 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 32.88661289215088 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 30.645973920822144 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 30.122032006581627 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 29.660842418670654 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 29.221723794937134 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 28.955269098281864 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 28.665364367621287 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 28.495771408081055 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 28.30022605260213 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 28.09230875968933 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 28.079147490588102 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 28.135379870732624 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 28.14564767250648 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 28.080666916710992 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 27.94306707382202 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 27.763994455337524 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 27.588739661609427 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 27.40189014540778 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 27.195612618797707 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 27.000678062438965 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 26.823352121171496 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 26.6418279951269 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 26.465134154195372 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 26.283373832702637 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 26.10188579559326 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 25.915176134843094 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 25.746103392706978 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 25.586360352379938 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 25.411290752476656 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 25.24157468477885 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 25.07377819092043 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 24.914367377758026 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 24.749725594665065 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 24.652405121747186 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 24.487295968191965 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 24.338072803285385 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 24.16648512917596 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 24.015024586727748 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 23.848371138939495 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 23.696526527404785 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 23.537823427014235 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 23.37726272855486 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 23.21701284342034 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 23.06680772521279 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 22.910679472817318 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 22.772009776986167 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 22.62363623050933 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 22.472733696301777 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 22.324351904343587 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 22.17238998413086 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 22.02351252705443 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 21.87721485358018 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 21.727089373570568 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 21.572921717608416 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 21.425232843919233 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 21.27402755192348 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 21.12291059577674 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 20.98220320405631 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 20.833188420635157 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 20.68364429473877 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 20.532389597814593 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 20.388733287011423 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 20.239523600018213 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 20.091531336307526 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 19.941555701769317 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 19.797338514616996 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 19.648365209351724 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 19.499743980519913 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 19.351941716843758 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 19.203702688217163 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 19.05077551452207 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 18.904733445909287 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 18.756653096577892 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 18.61110696277103 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 18.463121255238853 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 18.316670593462494 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 18.16539380457494 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 18.016723742851845 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 17.87177363226685 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 17.722187876701355 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 17.574684990776912 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 17.427276198456926 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 17.281916934323597 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 17.143508695420763 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 16.998241508708283 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 16.852585997692373 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 16.706350258027 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 16.556766856800426 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 16.409929146927393 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 16.262769990497166 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 16.112347566164456 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 15.998599446338158 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 15.849277060518984 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 15.701504788500197 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 15.55113082183035 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 15.402335027853647 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.252984302560078 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 15.103386129651751 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.957126860666754 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.807373046875 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.660284294940457 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 14.510565986820296 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 14.363491632405994 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 14.215082315298227 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 14.065054314477104 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.921531555787572 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.773006945012886 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.623500152870461 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.47492640171576 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.326047919013284 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 13.179305710234084 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 13.032254253114973 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.884714367115391 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.739568555564212 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.590402924496194 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.441960737623017 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.293681588947264 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.146870964664524 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.999821636857105 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.850902080535889 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.702922933357806 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.554237146846585 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.40676105507021 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.25843817956986 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.113259410858154 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.96606495266869 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.817891030799686 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.670257687568665 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.522103025007617 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.372778232281025 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.225262179629492 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.078514337539673 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.930879410048178 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.782500388017342 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.634228397298742 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.486407223869772 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.339152823399454 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.191118520239126 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.042467479225543 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.895921094076973 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.747436565710297 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.598661980158846 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.449855872801134 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.301344222492641 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.152575221554986 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.004411132368322 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.855138854915594 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.706912478885136 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.557981371079515 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.409451484680176 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.260882514991508 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.112456447199771 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.964616153754441 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.816159226677634 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.667817669530069 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.518884151409834 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.370062213035146 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.221551976626432 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.073074186373057 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.924782633781433 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.77625968885718 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.627624034881592 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.479478334356671 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.330863150154672 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.183267275492351 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.034550207207002 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.8866657439820065 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.738502048310779 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.590244466736472 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.442479680566227 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.29427723298993 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.145860677541688 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.9978180868777238 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.849580907273567 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.701348304748535 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.5531630190936 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.4050076681341825 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.2567432703596824 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.108781071348563 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.960923221376207 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.8133002328609233 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.6650498568356693 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.5167636128722646 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.368840383446735 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.220510160600817 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.072329128942182 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.924751332736908 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.777207739809726 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.628917960262803 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.4808702343388607 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.3327131982873248 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.184527446826299 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0364271297356007 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8883126076963759 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7402696303832225 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.592207670211792 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4441637048866543 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.29609263063681246 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.14804246677226157 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   29.6s finished

    1955 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  13.088 seconds)

**Estimated memory usage:**  1841 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
