
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fa90c97da00>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 156.2190055847168 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 26.313209295272827 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 24.656978845596313 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 23.89496922492981 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 23.488808631896973 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 23.210459232330322 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 23.01009805997213 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 22.822827577590942 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 22.62066078186035 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 22.43509512477451 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 22.266698598861694 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 22.20101152766835 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 22.03181028366089 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 21.876279042317318 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 21.74857602800642 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 21.599773645401 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 21.45391321182251 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 21.322674582986274 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 21.195848756366306 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 21.073095296558584 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 20.950929880142212 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 20.82077546346755 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 20.70214997638356 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 20.592500116514124 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 20.504312992095947 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 20.400516986846924 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 20.26921006349417 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 20.16001902686225 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 20.05114211354937 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 19.925699176459474 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 19.791187683741253 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 19.66581792216147 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 19.543561041355133 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 19.41994352051706 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 19.29321683154387 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 19.17082020214626 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 19.037018881903755 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 18.91889637225383 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 18.78620131392228 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 18.660027448947616 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 18.536388397216797 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 18.409982320739 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 18.289831104732695 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 18.17031817103541 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 18.048571261492643 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 17.925429238213436 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 17.820914714232735 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 17.699900667718115 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 17.58161433537801 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 17.46936746519439 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 17.353668451309204 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 17.230851739060643 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 17.107112921201267 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 16.985973101741862 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 16.865871720843845 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 16.753392631357364 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 16.632662568773544 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 16.52017891616152 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 16.417723129535542 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 16.299458123869815 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 16.181472937266033 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 16.06111454572834 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.953699158084007 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.837982276129344 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 15.716381251811981 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.591760562016415 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 15.472946759426232 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.356417695088172 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 15.242723002153284 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 15.128221484198086 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 15.012729951313565 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.896842009584669 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.783877478705511 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.66877990552824 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.555082843110368 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 14.445240894953411 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.334872546948885 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 14.218574626105172 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 14.102831076353024 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.988398322576208 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.872634291648865 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.758834394407861 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.64226929152884 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.525639591446842 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.412695373807635 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.298293969210457 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 13.18107541771822 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 13.067068434309686 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.950888720425692 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.83754490734486 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.7205814520518 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.605997517868712 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.49230312264484 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.376987800803237 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.26375734552424 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 12.14773806772734 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 12.03803511460622 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.923237667870275 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.814280636456548 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.700334409270623 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.58659029006958 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.472381110238556 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.357474990919524 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.242069663353337 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 11.127029272226187 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 11.011267173857917 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.895518788751566 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.77879963411349 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.663166990986577 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.547217506881154 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.43230897730047 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.316630170151994 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.200124400002615 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 10.083710223172618 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.968426453439813 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.854753089987712 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.738009008867987 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.622849026296894 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.508634833966271 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.393471208941035 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.277597109476725 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.161607332466064 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 9.045452989515711 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.928988433465724 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.812600235785208 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.694990062713623 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.577747628802346 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.462724017345998 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.346223756670952 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.230044584865718 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 8.113486766815186 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.997703885304109 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.881530017563791 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.764834966874661 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.648780591452299 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.532547376773975 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.416923635146197 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.300344964883624 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.183978281159332 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.068252513734556 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.951607091086251 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.835194824435186 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.718837744753126 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.602809287451364 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.486515376302931 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.372266095260094 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.257961674912335 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.1419636165203695 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.026807507953128 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.91276346437083 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.796783685684204 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.680433982255443 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.5644536771272355 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.4487187597486715 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.33252646706321 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.216812710608206 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.100818230555608 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.985018271549492 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.868913110298446 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.753575515447173 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.6385233998298645 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.522876606224487 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.406993300826461 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.290640406813358 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.174593041582805 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.058468247904922 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.9424315992608125 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.826228607200577 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.710512978690011 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.594542944925071 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.4791625247282143 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.363170135788053 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.2471002756163134 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.1311371161069483 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.0151292017136497 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.8992807865142822 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.78319776058197 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.667090191005987 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.5508952649791587 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.4352051159523054 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.319531546698676 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.203259145357332 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.0873811690361945 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.9715073291069825 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.855521948441215 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.7394789489539895 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.6234957659116356 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.5076350719533502 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3916846234747704 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2756811260546326 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.1596864148190147 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.0437933724588124 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9277622898419697 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.8117791136311743 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6958261027778547 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5799017930642152 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.46393902447758884 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.34795114836717017 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2319677815292821 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11598053529633949 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   23.2s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  1.401 seconds)

**Estimated memory usage:**  1874 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
