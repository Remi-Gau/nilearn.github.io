
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (:term:`VBM`)
to study the relationship between aging and gray matter density.

The data come from the `OASIS <https://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard :term:`VBM` pipeline (using SPM8 and
NewSegment) to create :term:`VBM` maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the :term:`ANOVA` step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the :term:`ANOVA` step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

:term:`SVM` weights are very noisy,
partly because heavy smoothing is detrimental for the prediction here.
A standard analysis using mass-univariate :term:`GLM`
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 112-123

Prediction pipeline with :term:`ANOVA` and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

In nilearn we can benefit from the built-in DecoderRegressor object to
do :term:`ANOVA` with SVR instead of manually defining the whole pipeline.
This estimator also uses Cross Validation to select best models and ensemble
them. Furthermore, you can pass ``n_jobs=<some_high_value>`` to the
DecoderRegressor class to take advantage of a multi-core system.
To save time (because these are anat images with many voxels), we include
only the 1-percent voxels most correlated with the age variable to fit. We
also want to set mask hyperparameter to be the mask we just obtained above.

.. GENERATED FROM PYTHON SOURCE LINES 123-149

.. code-block:: default


    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 150-152

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 152-165

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-183

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f2d84632fd0>



.. GENERATED FROM PYTHON SOURCE LINES 184-186

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 186-231

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 130.34820556640625 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 19.82615613937378 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 20.14140486717224 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 19.020848592122398 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 18.5161714553833 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 18.08120584487915 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 17.72576967875163 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 17.440543821879796 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 17.212303161621094 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 17.039293474621243 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 16.86024045944214 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 16.73014608296481 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 16.578767379124958 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 16.441685786614052 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 16.544770411082677 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 16.418437719345093 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 16.280653715133667 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 16.151611804962158 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 16.03970530298021 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 15.930699862931906 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 15.813499689102173 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 15.691277254195441 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 15.585989258506084 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 15.486922409223475 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 15.389800866444904 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 15.290194749832153 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 15.332822909721962 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 15.228831476635403 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 15.120519399642946 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 15.023025389375357 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 14.92340366045634 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 14.816652967083838 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 14.735956013202667 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 14.641382455825806 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 14.557320370393642 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 14.454292161124094 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 14.355584224065144 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 14.344419266726518 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 14.247212497811569 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 14.157520465361769 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 14.05634593963623 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 13.963945976117762 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 13.87068562280564 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 13.770684696907221 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 13.672171094200827 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 13.577607976065742 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 13.483852977338046 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 13.416586038914133 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 13.322112361590067 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 13.284158268753364 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 13.18933653831482 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 13.094378971586039 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 12.998200471584614 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 12.903568564720874 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 12.806792709562513 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 12.710900588469071 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 12.615519046783449 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 12.519404783583523 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 12.42520967023126 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 12.329859592146791 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 12.235423008600872 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 12.180511091576248 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 12.08569243646437 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 11.993602964613173 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 11.898227572441101 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 11.805165437551645 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 11.712225314342614 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 11.620616162001197 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 11.52951924941119 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 11.435413709585218 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 11.345095259802683 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 11.254157207381558 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 11.162412855360243 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 11.200051650609057 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 11.179586242985081 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 11.084546248118084 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 10.989746005911575 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 10.896598893326598 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 10.802724740444086 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 10.711022096344188 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 10.619710564613342 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 10.526106475312034 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 10.434068290198722 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 10.340883209044675 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 10.272319543929328 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 10.17827808155733 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 10.084144708722135 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 9.989596005143792 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 9.896380467848344 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 9.804621484842192 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 9.711627827750313 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 9.61959616430513 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 9.527027855748717 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 9.435774992871028 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 9.348615078215904 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 9.256125437585933 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 9.187328934669495 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 9.095713627707099 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 9.002957845220761 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 8.911126929100114 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 8.8195960521698 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 8.72761333578884 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 8.637484891741884 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 8.545933334572801 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 8.454599453852728 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 8.362744728724161 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 8.271677633501449 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 8.180084620680764 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 8.105415141140973 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 8.01457929611206 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 7.923928954384544 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 7.832731687270844 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 7.741568054471697 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 7.651715685835981 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 7.561036603492603 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 7.4711972526882 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 7.381077042941389 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 7.290631777200944 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 7.200647738020299 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 7.124682005713968 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 7.035799980163574 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 6.946419995678358 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 6.857133912258461 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 6.7680032001278265 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 6.677991397919193 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 6.588219022750854 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 6.499032868279351 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 6.409259779246773 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 6.3207394033670425 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 6.231211113375286 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 6.142493853202232 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 6.062176122010209 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 5.9728709712173 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 5.884138609233656 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 5.7952421921402655 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 5.706036382251315 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 5.633419597850127 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 5.552633092351203 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 5.464381819186003 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 5.3743700123519345 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 5.284932477133615 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 5.1956871671879545 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 5.106969887102154 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 5.024831456737918 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 4.93564858701494 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 4.845861155411293 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 4.758703894811133 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 4.66963208127184 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 4.580540740812148 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 4.49164420966334 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 4.403005838394165 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 4.313857863280947 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 4.224905415585166 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 4.135899437798394 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 4.053601503372192 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 3.965551337888164 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 3.8843479401026015 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 3.8141562179395345 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 3.7246001279806786 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 3.635212539876782 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 3.5459383726119995 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 3.4576530915609798 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 3.3680679297741545 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 3.278731101861029 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.189601578363558 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.104750936681574 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.015922865235662 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 2.9267022880965365 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 2.837348211379278 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 2.7481686137837067 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 2.6587520346922036 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 2.5695515780421028 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 2.480409333872241 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.391510284015898 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.3026515642801924 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.2139396326882497 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.125095345757224 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.038654324698583 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 1.9497636087824788 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 1.8608151840764051 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 1.771857049730089 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 1.6828910803926582 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.5939593341324354 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.5053187641289718 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.4165078246075173 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.3277212993518728 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.239016309861214 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.1502896846934436 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.0625918976804043 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 0.9740507905445401 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 0.8853020668029785 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.7966762375457125 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.7080395817756653 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.6194635648183872 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.5308615694340971 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.44228329413976425 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.3537921662233314 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.2652937119382287 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.17682811708161328 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.08840178604701057 seconds remaining)
    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 47.529 seconds)

**Estimated memory usage:**  2313 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
