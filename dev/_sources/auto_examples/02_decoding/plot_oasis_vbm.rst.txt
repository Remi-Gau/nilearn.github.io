
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print("")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f81b7da1130>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 349.3237495422363 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 65.84624409675598 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 61.971986532211304 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 60.37327424685161 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 59.343098878860474 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 58.685994386672974 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 58.16324257850648 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 57.765174048287534 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 57.4496955871582 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 57.05380262268914 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 56.71943736076355 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 56.44513763080944 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 56.082429726918534 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 55.76300941980802 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 55.419541699545725 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 55.04937489827474 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 54.72054123878479 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 54.39727693445543 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 54.06122435463799 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 53.72371602058411 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 53.39588713645935 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 53.05656974656241 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 52.717221520163804 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 52.38848155477773 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 52.06651210784912 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 51.750877380371094 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 51.43047517996568 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 51.10376638836331 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 50.79759127753122 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 50.46575492003868 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 50.132065773010254 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 49.819633268540905 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 49.503497421741486 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 49.20018641876452 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 48.90834628834445 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 48.60558812958854 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 48.29728857676188 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 47.99677627151077 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 47.68549531384519 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 47.36518107927763 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 47.0560245513916 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 46.75008264402064 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 46.45609815915426 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 46.1483276722043 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 45.84712477163835 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 45.53874034351773 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 45.237551243408866 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 44.94308982504175 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 44.64558827877045 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 44.40356572306886 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 44.10090637207031 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 43.79937005510517 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 43.49943714875442 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 43.19918415231525 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 42.90535178890935 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 42.60829106244174 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 42.30697938374111 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 42.00777967770894 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 41.71046552164801 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 41.41896184420181 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 41.11916430791219 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 40.82591888552807 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 40.52592144473906 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 40.226655975220694 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 39.933398336172104 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 39.63429781106802 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 39.33816194534302 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 39.03309100777356 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 38.736232322805066 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 38.443565005841464 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 38.149995871952605 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 37.85384353113846 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 37.55813217163086 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 37.26588439614805 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 36.972522187877345 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 36.67386929194133 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 36.37797051981876 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 36.083710874829976 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 35.78846427721855 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 35.49790431276152 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 35.20159041881561 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 34.909072652275185 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 34.61324885996376 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 34.32187051370919 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 34.031162318729216 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 33.73289408403284 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 33.43526096122209 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 33.13993441373452 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 32.845656481656164 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 32.55411584189768 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 32.26260232925415 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 31.98394605877635 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 31.688200857328336 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 31.393817883665847 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 31.099593274136804 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 30.80600011976142 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 30.508998056252796 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 30.213691863817036 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 29.918408369531438 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 29.624098064923526 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 29.33186626434326 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 29.038743991662958 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 28.745090746412092 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 28.45351860361192 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 28.16639988238995 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 27.87284008661906 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 27.57840942436794 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 27.294633190208504 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 27.00618640581767 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 26.712533001506 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 26.416128158569336 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 26.11831809378959 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 25.825295516422816 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 25.530006915067148 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 25.23513198317143 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 24.94072305637857 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 24.64660963518866 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 24.351630380011013 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 24.05781541840505 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 23.765108465146618 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 23.47302754720052 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 23.18042902118904 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 22.88886112854129 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 22.595722151965628 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 22.30408561614252 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 22.011389636993407 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 21.717573128049338 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 21.42334766650763 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 21.12970420718193 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 20.836566973102183 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 20.54308097179119 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 20.249953825055186 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 19.95637991211631 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 19.661782635782 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 19.366851899161265 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 19.07202922856366 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 18.77738380432129 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 18.483425987898 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 18.19008173458818 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 17.89607891247427 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 17.60193075452532 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 17.308075187899544 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 17.013237936395996 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 16.71988455398933 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 16.427018536461723 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 16.13423893369477 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 15.840821831193688 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 15.547438464197173 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 15.254897156277218 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 14.962649201386727 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 14.670170307159424 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 14.376978572630724 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 14.083202512640701 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 13.789330649220087 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 13.496782414324871 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 13.204002141952516 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 12.911086693788185 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 12.617244424333997 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 12.324178300326382 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 12.030508086366474 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 11.737024486064911 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 11.44378159357154 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 11.150515780036832 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 10.856809256266962 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 10.563859061497014 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 10.270910017418139 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 9.97807920122721 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 9.685151488481168 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 9.39222799028669 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 9.099127495782614 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 8.805790985331816 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 8.512361667309587 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 8.218733454859535 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 7.925230363889926 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 7.631792816622505 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 7.338498864855085 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 7.0449156761169425 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 6.7514150331249345 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 6.458391427993774 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 6.164923911654084 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 5.871506293614705 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 5.578082691898662 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 5.284501948199429 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 4.991064458596902 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 4.697369326715884 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 4.403717724052636 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 4.110118045601793 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 3.8164239006246476 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 3.52281624205569 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 3.2291952768961587 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.9355753346493367 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 2.6417524277851845 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 2.348109483718872 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 2.0545772184362066 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.7610732181785034 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.4675055528298402 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 1.1739216823967136 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.8803671362436363 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.5868738998066296 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.29343818659758447 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   58.7s finished

    1981 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  42.788 seconds)

**Estimated memory usage:**  1944 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
