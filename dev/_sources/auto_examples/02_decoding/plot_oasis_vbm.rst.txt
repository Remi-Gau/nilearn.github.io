
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (:term:`VBM`)
to study the relationship between aging and gray matter density.

The data come from the `OASIS <https://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard :term:`VBM` pipeline (using SPM8 and
NewSegment) to create :term:`VBM` maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the :term:`ANOVA` step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the :term:`ANOVA` step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

:term:`SVM` weights are very noisy,
partly because heavy smoothing is detrimental for the prediction here.
A standard analysis using mass-univariate :term:`GLM`
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 112-123

Prediction pipeline with :term:`ANOVA` and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

In nilearn we can benefit from the built-in DecoderRegressor object to
do :term:`ANOVA` with SVR instead of manually defining the whole pipeline.
This estimator also uses Cross Validation to select best models and ensemble
them. Furthermore, you can pass ``n_jobs=<some_high_value>`` to the
DecoderRegressor class to take advantage of a multi-core system.
To save time (because these are anat images with many voxels), we include
only the 1-percent voxels most correlated with the age variable to fit. We
also want to set mask hyperparameter to be the mask we just obtained above.

.. GENERATED FROM PYTHON SOURCE LINES 123-149

.. code-block:: default


    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 150-152

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 152-165

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-183

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fc3f4044a90>



.. GENERATED FROM PYTHON SOURCE LINES 184-186

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 186-231

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 330.10244369506836 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 53.81810212135315 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 51.14138317108154 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 47.49959508577983 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 46.123170137405396 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 45.19297242164612 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 45.336512088775635 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 44.672310965401785 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 44.094194412231445 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 43.643878592385185 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 43.17643618583679 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 43.1914194280451 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 42.76273528734843 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 42.31061005592346 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 41.85210452760969 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 41.5938454469045 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 41.6355015039444 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 41.25541170905618 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 40.97361209657457 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 40.69521345590291 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 40.632076263427734 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 40.35912963322231 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 40.13817602937872 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 39.86531723063925 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 39.589099407196045 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 39.52150535583496 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 39.26334071159363 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 38.991553686283254 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 38.80194704873222 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 38.65049390957273 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 38.47376171747844 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 38.32233390500468 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 38.04390478134155 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 37.77676020969044 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 37.64988953926984 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 37.40114113262722 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 37.14449265268114 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 36.88010034690032 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 36.636891264664506 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 36.523821806296326 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 36.25879669189453 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 36.02125452204449 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 35.784386453174406 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 35.66516185915747 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 35.41314931349321 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 35.157577541139396 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 34.9228644474693 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 34.69694629121334 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 34.52650527159373 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 34.2886273666304 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 34.03038024902344 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 33.79137188313054 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 33.56079858999986 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 33.398048832731426 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 33.15020822595667 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 32.90600568597967 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 32.63024854660034 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 32.53198433340641 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 32.686803957511636 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 32.583067247423074 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 32.33201003074646 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 32.13865032352385 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 31.893091886274274 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 31.635907366162254 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 31.379289746284485 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 31.122696546407848 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 30.909670678052034 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 30.689147319366683 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 30.441284894943237 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 30.200482783110246 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 29.988604886191233 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 29.732429336494125 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 29.48097695244683 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 29.214558398886904 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 28.981710665934795 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 28.77460281054179 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 28.556812537343877 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 28.33309747956016 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 28.08847744648273 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 27.887101085880133 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 27.64857566356659 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 27.394009725547132 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 27.13876369522839 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 26.882673559418645 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 26.676316647302535 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 26.429841476328235 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 26.19000461489655 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 25.955795685450237 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 25.72735058177601 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 25.51798635922121 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 25.283935149510704 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 25.040869094513273 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 24.82693545714669 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 24.610284579697478 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 24.360988596652415 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 24.119759145535923 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 23.887976229190826 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 23.651366029818032 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 23.44910915530458 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 23.2204272193138 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 22.98474645614624 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 22.750266141230515 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 22.510819874557797 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 22.316964304562912 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 22.078821108891415 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 21.846322195870535 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 21.61251598034265 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 21.40184978458369 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 21.167077868073076 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 20.927545698410874 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 20.69271586158059 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 20.465002938433813 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 20.248921717916215 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 20.011964479378893 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 19.771402011837875 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 19.53404873350392 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 19.323698167143196 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 19.079438454065567 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 18.842677657887087 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 18.6073047012842 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 18.375401973724365 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 18.16257784386312 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 17.92442587946282 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 17.690343982805082 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 17.455642138758012 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 17.21585612297058 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 17.00068655468169 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 16.770648348049853 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 16.539653062820435 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 16.30693989576295 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 16.088499711110043 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 15.852982941474624 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 15.624739719159676 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 15.407683359949214 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 15.175654115961558 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 14.957973921740496 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 14.723050958970013 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 14.488569880924086 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 14.274763210960057 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 14.056432518170034 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 13.828349385942731 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 13.595223709201136 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 13.366263634721998 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 13.138263717397942 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 12.909297837151422 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 12.672225450647288 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 12.437875652966433 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 12.203777116983115 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 11.97633060893497 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 11.74192749733893 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 11.515160957972208 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 11.282567834222553 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 11.048898922769647 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 10.820858241685855 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 10.589652631189916 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 10.358548695041288 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 10.124810830140724 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 9.896898064643715 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 9.663856473150132 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 9.432932654266837 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 9.199966132640839 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 8.967200850848085 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 8.740879591600393 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 8.51055997719794 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 8.278407690001696 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 8.047584916606095 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 7.815446215939809 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 7.588567886523858 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 7.3571260088966 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 7.124772153662506 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 6.893377598594217 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 6.664383522948326 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 6.434047150057416 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 6.203495975174656 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.973938273287368 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.742989471980503 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 5.516687035560608 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 5.285439950598161 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 5.05412257387397 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.823358711583654 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.5939992268880205 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 4.366892239006843 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 4.136550892840375 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.907736337901465 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.6768830548162046 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.4487612311904496 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 3.220681908310101 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.989374193915709 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.7589505073872016 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.5282858036182545 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.2996214565477873 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 2.0695610982585326 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.8387127916018167 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.6084539692636597 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.3789134935005425 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.1494182317684858 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.9193629926564741 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.6893877184330509 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.4598670246625188 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.2300868345864454 seconds remaining)
    1980 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 39.463 seconds)

**Estimated memory usage:**  1902 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
