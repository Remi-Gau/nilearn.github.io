
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fba32c451c0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 239.99691009521484 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 42.798742055892944 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 39.510292768478394 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 38.07881792386373 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 37.367035150527954 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 36.86390519142151 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 36.41148606936137 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 36.0445123400007 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 35.90098571777344 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 35.75549154811435 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 35.65518307685852 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 35.80365839871494 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 35.58195312817891 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 35.332385760087234 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 35.228860923222136 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 35.016685565312706 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 34.87083852291107 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 34.66647505760193 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 34.390145513746475 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 34.142350912094116 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 33.88863801956177 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 33.71550490742638 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 33.485615968704224 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 33.29124433061351 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 33.08021148045857 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 32.8585524559021 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 32.69678631195655 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 32.51715904695016 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 32.288755484989714 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 32.07221721780711 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 31.852313359578453 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 31.66541567925484 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 31.499924898147583 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 31.308636650894627 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 31.09809313100927 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 30.891808237348286 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 30.704853958553738 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 30.494381865939577 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 30.29610781920584 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 30.09088101753822 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 29.873123168945312 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 29.664559556216727 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 29.469285113470896 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 29.31015991055688 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 29.103781309994783 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 28.906471570332847 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 28.719512970551204 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 28.516883657333697 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 28.324244618415833 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 28.13691477386319 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 27.95294165611267 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 27.752407592885632 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 27.556386672533478 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 27.390650713218832 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 27.215595536761814 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 27.069456165487114 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 26.868126051766534 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 26.66932613807812 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 26.47110952180007 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 26.307483042700813 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 26.109250783920288 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 25.920607320597917 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 25.75590251338097 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 25.5780435743786 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 25.381468653678894 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 25.194150209426883 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 25.000955733385954 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 24.80696406293271 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 24.605709398494046 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 24.409275338269662 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 24.23257579122271 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 24.05173220097179 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 23.867089589436848 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 23.676431678745846 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 23.477069648536474 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 23.29486926396688 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 23.121427360333893 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 22.92780690378957 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 22.739949495364456 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 22.554494586171984 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 22.3727924823761 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 22.189244446931063 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 22.008340428515176 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 21.81485218599618 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 21.62990206763858 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 21.43687074324664 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 21.254492715347645 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 21.06596253384119 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 20.87272344936024 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 20.679043582316194 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 20.488664786020916 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 20.294453830509394 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 20.105676536974702 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 19.91459942376742 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 19.724440397100246 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 19.532451566896942 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 19.356460213661194 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 19.181642483190164 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 18.995321799297724 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 18.80772141735963 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 18.629579782485962 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 18.44068124742791 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 18.25208555950838 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 18.065519971754945 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 17.873217289264385 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 17.68471606572469 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 17.494327684618394 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 17.305752192702247 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 17.116033562907468 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 16.933383379507504 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 16.743870410052214 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 16.55247787527136 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 16.36449452808925 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 16.189761064748847 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 16.013551059522126 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 15.829322690549104 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 15.644931817876882 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 15.45934653078389 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 15.27687626369929 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 15.088520969663348 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 14.896961212158203 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 14.71242928504944 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 14.522791291846605 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 14.341049289315697 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 14.1567428804213 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 13.974081373214721 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 13.787571498325894 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 13.599787477433212 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 13.416997835040092 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 13.228894651398178 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 13.039772748947144 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 12.850764922513306 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 12.66955498493079 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 12.47995322270501 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 12.291352346761903 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 12.105189279273704 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 11.921642415663776 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 11.739587942179101 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 11.553880923036216 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 11.368767889283543 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 11.18358073915754 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 10.999349512952438 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 10.814177489616501 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 10.626309331480439 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 10.43823308414883 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 10.252436300803875 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.06858719211735 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 9.882171476779341 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 9.694270533484382 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 9.505855801921562 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.318360805511475 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.133869772715284 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 8.948048114776611 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 8.767550382738799 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 8.584517085707033 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.397189409502092 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.212965934704512 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.025944506286816 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 7.837707905829706 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.6492154868143905 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.460743546485901 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.274959429450657 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.092618218174687 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.907199976634394 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.7288641929626465 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.586365952636257 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.444083650428128 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.288657274074898 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.126496996198381 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.962247645361184 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.792922608992633 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.619246184477332 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.44500093127406 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.268192029412772 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.090595941433961 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.911556788853236 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.716031031175093 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.518024090319703 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.320715180943521 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.123615592551631 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.9272266493903265 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.729501022159724 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.5314565648089395 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.334345073647838 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.137382693912672 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.940134447974128 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.7431221854302192 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.54615833160074 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.349511963255862 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.1532434016939193 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.957393031371267 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.7612919794951434 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.5651385883490243 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.3692373784712557 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.1734099314384854 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.977649266903217 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.7819544052591129 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5862804778336269 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3907372710680721 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.19530164536519268 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   39.0s finished

    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  31.669 seconds)

**Estimated memory usage:**  1851 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
