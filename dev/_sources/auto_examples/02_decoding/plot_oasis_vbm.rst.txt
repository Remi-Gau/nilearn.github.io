
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f38fe75a1c0>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 281.95858001708984 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 50.84266519546509 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 48.59851384162903 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 47.46515154838562 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 46.305545806884766 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 45.435593605041504 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 44.74060122172038 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 44.32062653132848 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 43.842973709106445 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 43.265129354265 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 43.09430813789368 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 43.06812403418802 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 42.937992016474404 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 42.8669189123007 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 42.505135263715474 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 42.233506202697754 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 41.99622821807861 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 41.75665800711688 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 41.68405058648851 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 41.35577037459926 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 41.13305711746216 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 41.00065730866932 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 40.77646467902444 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 40.49087482949962 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 40.226939519246415 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 40.04473829269409 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 39.766998492754425 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 39.4989181889428 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 39.219140427453176 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 38.947884074572855 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 38.709559837977096 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 38.44132486466438 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 38.216900646686554 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 38.15872984943968 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 37.91006377164056 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 37.62698783193316 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 37.348816341824 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 37.09309266708993 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 36.83914281192579 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 36.57959184279809 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 36.326791763305664 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 36.08839981730391 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 35.841967049099146 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 35.617956982102505 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 35.36179635741494 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 35.1103204621209 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 34.88943650411523 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 34.67218856608614 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 34.435056845347084 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 34.20033036932654 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 33.977269649505615 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 33.7560467299293 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 33.520846073444076 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 33.27297874216764 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 33.04149163210833 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 32.837516112761065 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 32.58785615648542 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 32.39058634272793 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 32.15804388605315 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 31.90136707839319 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 31.648238261540733 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 31.408587315043466 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 31.19225990387701 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 30.95030167367723 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 30.730551064014435 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 30.54818965838506 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 30.29941472862706 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 30.066034772502842 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 29.828398452085608 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 29.600658472033516 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 29.367646387645177 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 29.12531592476536 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 28.88598463270399 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 28.645274113302364 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 28.41975719864304 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 28.18068265914917 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 27.949184844368382 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 27.726959504090345 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 27.50396351936536 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 27.27298859403103 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 27.045843601226807 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 26.80569745876171 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 26.57313944072258 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 26.35361311809126 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 26.131484485807874 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 25.902851343154907 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 25.66631181295528 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 25.438091056100255 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 25.212451674721457 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 24.984946296456155 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 24.76706295543247 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 24.552534774109557 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 24.328945802605674 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 24.113383531570438 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 23.90211280863336 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 23.673817521647404 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 23.466040988763172 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 23.23978829875435 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 23.01238087731965 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 22.784443597600916 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 22.564924240112305 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 22.340362503977104 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 22.1081631417368 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 21.87864064938814 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 21.651271599989673 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 21.42147904350644 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 21.207404042189978 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 20.978476998961973 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 20.752353571079396 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 20.528421030132048 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 20.309115691618487 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 20.080080135448558 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 19.85259074824197 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 19.6307546607161 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 19.428675170530354 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 19.200941645580787 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 18.97595811712331 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 18.753004548896072 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 18.52124996104483 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 18.292456224185077 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 18.071672598520912 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 17.858207351905257 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 17.634114046565823 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 17.408957084019978 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 17.18023254025367 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 16.959392309188843 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 16.737804409057375 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 16.517989282532938 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 16.29248884320259 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 16.06375273992849 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 15.840048148081852 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 15.616962389181587 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 15.386918234102653 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 15.154891098352303 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 14.924374719164264 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 14.69539290887338 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 14.46859494377585 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 14.243366827929977 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 14.014345708100691 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 13.787428943373316 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 13.56575632095337 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 13.337423667840078 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 13.107991823008364 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 12.879914225398243 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 12.652736001544529 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 12.425841265711291 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 12.199120985318537 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 11.973792366430063 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 11.74567452636925 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 11.518629648541443 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 11.296336730321247 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 11.068077717395807 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 10.840206572884007 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 10.615684781978334 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 10.39048215940401 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 10.163431590603244 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 9.939383690173809 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 9.71637903960647 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 9.490469618688655 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 9.267966840252187 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 9.041375577449799 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 8.815045608496815 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 8.58869582046697 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 8.361472347762687 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 8.134180208531822 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 7.9056550589474766 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 7.678101013941937 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 7.450445836175701 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 7.222120239621117 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 6.9947535596655666 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 6.767890607609469 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 6.5417223339192345 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 6.314545703488728 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 6.0887301615896945 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.862507400841549 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.637477500098092 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 5.411251252347772 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 5.1849011135640115 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.958132719725705 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.731949715640958 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.507687621646457 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 4.281645506126446 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 4.0557478076809055 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.82952012781237 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.6034488056017002 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.378735664728526 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 3.153038073611516 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.9270591761339158 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.7014859331415053 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.4766574915123996 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.251485034039146 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 2.026759479682483 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.8015751640001931 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.5762358280043527 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.351729808394442 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.126703726939666 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.9013517924717493 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.6760596793315132 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.4507353570726183 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.2253602317829228 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   45.1s finished

    1976 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  34.171 seconds)

**Estimated memory usage:**  1854 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
