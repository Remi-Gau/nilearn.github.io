
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f92aa689d30>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 208.68778228759766 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 32.849653005599976 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 30.052913904190063 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 29.01465662320455 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 28.776604890823364 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 28.274847507476807 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 27.92875631650289 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 27.558978285108296 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 27.297203063964844 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 27.020837386449177 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 26.773064136505127 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 26.531646511771466 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 26.329593102137245 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 26.12084256685697 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.944846970694407 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 25.78620457649231 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 25.619482159614563 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 25.546917410457837 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 25.385245747036404 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 25.253307179400796 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 25.098901748657227 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.92389564287095 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.792724370956424 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 24.64164447784424 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 24.495782216389973 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 24.34609627723694 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 24.209050160187942 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 24.05829706898442 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.91739058494568 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.773176176794642 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 23.62674983342489 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 23.47078482566341 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 23.326566517353058 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 23.178119522152524 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 23.035742885926194 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.893207345690048 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.75449768702189 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 22.61568370380917 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 22.47293950382032 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 22.331086189318928 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 22.200020790100098 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 22.061418387948013 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.918856257484073 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.775987497595853 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.63386152007363 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 21.4999877081977 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 21.375381044719532 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 21.232246490235024 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 21.093456625938416 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.944177364816472 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.800299167633057 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.662659654430314 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 20.523574572343094 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 20.374179286776847 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 20.225537035200333 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 20.085924560373478 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.939194202423096 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.801137823807565 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.66402770733011 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 19.52482370198783 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 19.384408394495647 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 19.256669138298662 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 19.121222019195557 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.97908554379902 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.8390172123909 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.697317893688496 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.55910317103068 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.417751212618242 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 18.275195696774652 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 18.133447926977407 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.99338494028364 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.851466215832133 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.707121955023872 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.567760977026534 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.425736672169453 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 17.286221981048584 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 17.147589746274445 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 17.00732468010543 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.866999259361855 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.72851193403896 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.58999812602997 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.449616941404933 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.310210350083143 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 16.17106110791126 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 16.034789335160028 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.89598371000851 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.760672430659449 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.624110517830685 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.486425573175604 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.347477923618273 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.209524207644993 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 15.070677592204166 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.933985347333163 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.794024962250905 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.654474826569253 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.51525492417185 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.374399820963541 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.233921048567467 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.093198951409788 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.952818552652994 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.811733961105347 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.671075370052073 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.532639994340785 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.3919134371489 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.25179701585036 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.115097284317017 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.976849960830977 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.836965191030057 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.699329411541974 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.560433790224408 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.422652808102695 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.282286044713613 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.141528640474592 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.003260977500307 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.863997488691096 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.724318151888639 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.585138551120101 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.446446724427053 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.305995314808216 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.171012451668748 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.031951109568277 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.89415072803655 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.754936093189677 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.61565519736065 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.477408232227448 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.338132333755492 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.198489548668029 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.059001808091411 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.920534938573837 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.780881902044133 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.641506873644316 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.503113670203522 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.364034883903734 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.226537894485588 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.088926358009452 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.950741502973768 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.812565523035387 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.67357268820714 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.535262487936711 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.396411398331896 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.257628406797137 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.118850684335046 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.979657344415155 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.841578250164752 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.703445487552219 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.565187265133035 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.42746356415422 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.289357553533956 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.151449667440879 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.014187276763404 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.876645962397257 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.738434771038839 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.59982196908248 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.462006115445904 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.323733837573559 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.185445600940335 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.047273849829649 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.909343324649106 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.772068340567094 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.633867070360004 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.4956700801849365 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.35816762758338 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.220191337444164 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.082055118186342 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.943917995545922 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.805945201353594 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.667919167553086 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.529907390742959 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.392013640630813 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.254336199111487 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.116795595954446 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.979377350611993 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.8421861238257833 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.704809195733484 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.5670363519383574 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.429544653211321 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.2920773137699473 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.154639403025309 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.017169775587789 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.8796710528474945 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.742503934436374 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.6051219629319333 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.467782214447692 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.330475166195729 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.1931247296540635 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.0558292543565906 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.9185600152579687 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7814694215907132 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6442849788259952 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.5071107395111567 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.370164582603856 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.233044187435929 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0959603985150654 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.959288456279379 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8222094688218894 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6851029640589005 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5480214479018231 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4109761000889812 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2739839674246432 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.136979510436705 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   27.4s finished

    1989 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  9.347 seconds)

**Estimated memory usage:**  1929 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
