
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-90

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 148-150

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 150-163

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-166

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f539c234250>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-229

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 207.28111267089844 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 38.551581382751465 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 35.38098907470703 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 34.37291248639425 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 33.83974647521973 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 33.477845907211304 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 33.150434732437134 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 32.88858168465751 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 32.69191932678223 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 32.472084018919205 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 32.192052125930786 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 32.032289158214226 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 31.850254774093628 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 31.70352763396043 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 31.52735035760062 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 31.320588191350303 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 31.132408499717712 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 30.97196161045748 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 30.80348279741075 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 30.627272518057573 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 30.47815775871277 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 30.346318108694895 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 30.18735114010898 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 29.996788004170295 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 29.809404214223225 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 29.68009352684021 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 29.486816002772404 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 29.320713184497976 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 29.151104858943395 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 28.986768599214223 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 28.820030132929485 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 28.6407202828315 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 28.453774988651276 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 28.26321598255273 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 28.08258567136877 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 27.8906477860042 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 27.68983565436469 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 27.524534573426116 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 27.38364894766557 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 27.222653719095085 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 27.047755241394043 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 26.877232336416476 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 26.71781895274208 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 26.568233545436414 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 26.414590878920123 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 26.26034696896871 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 26.093526124954224 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 25.927683835333966 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 25.749438206354775 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 25.56519290865684 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 25.378036737442017 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 25.200005414439183 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 25.044607235835148 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 24.88708190648061 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 24.72842836380005 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 24.568975470282815 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 24.38869939531599 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 24.20615862963492 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 24.027138553816695 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 23.857339042728228 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 23.683588345845543 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 23.516040430694332 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 23.35056493359227 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 23.18027457358345 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 23.000325918197632 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 22.820247668486378 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 22.645989923766166 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 22.471586547680754 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 22.302891675163718 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 22.130788958590962 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 21.949746336255757 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 21.773268619053802 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 21.597301907009548 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 21.416065872532048 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 21.23754337027266 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 21.06718977292379 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 20.896694195897954 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 20.72505926156973 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 20.55657545114175 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 20.397199986856194 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 20.23027217388153 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 20.066479214915525 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 19.901155175232304 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 19.7321223666869 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 19.56911139261155 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 19.407310598036823 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 19.23948323449423 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 19.07049201822829 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 18.89910958030007 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 18.723331416590828 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 18.551147911283707 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 18.377279043197632 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 18.203014767688256 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 18.030490852171376 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 17.861629374483798 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 17.68886157086021 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 17.514090180397034 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 17.340786307128436 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 17.171416939521322 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 17.002717403450397 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 16.83696436882019 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 16.669302017381874 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 16.50374794473835 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 16.33072281578212 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 16.158588189345142 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 15.989651441574097 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 15.819496897031676 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 15.650523441974247 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 15.479084491729736 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 15.308294235019508 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 15.139123873277144 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 14.972748034709209 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 14.804332477705819 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 14.633350547436065 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 14.465863621025754 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 14.301111397535903 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 14.135436033380442 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 13.968211707905827 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 13.79993382146803 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 13.631435472424291 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 13.464167594909668 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 13.292950555312734 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 13.121602980816952 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 12.952440339375316 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 12.784015586299281 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 12.61426420211792 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 12.44437905720302 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 12.273191367547343 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 12.103959560394287 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 11.934222276820693 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 11.765836844077477 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 11.596776227004655 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 11.430443901004214 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 11.260704587276717 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 11.091757450530778 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.922330697377522 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 10.751798741957721 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.583879303758161 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 10.416217665741408 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 10.248043106614256 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 10.08062308175223 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.913804811788788 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.746228181140523 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.578493473413108 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.412178688579136 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 9.244632112568821 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 9.075995843704431 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.908071895845893 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.740512564375594 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.572096824645996 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.403795639673868 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 8.23712422200386 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 8.07038987310309 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.903893626593297 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.7354445519385395 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.568053676236061 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.400188831182627 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.232547731156561 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 7.06424330759652 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.8963598260339705 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.727653920650482 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.558689619443432 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.39018502647494 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.2223797356424155 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.054774197136483 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.886958180051861 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.719832233635776 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.552751127117408 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.384794780186244 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.216597447028526 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.048209569033455 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.8797534055877145 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.7118936361268515 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.543940301575413 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.3759577438749115 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.208045891353062 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.039597489617087 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.871132812931039 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.7025715447543712 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.534316082906457 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.366317378150092 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.1983420335126844 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.0307936615996307 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.8625497870106518 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.6941102483998174 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.525544752945771 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.3570571381558656 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.18891966789164 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.0203429333707117 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.8521444141549408 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.684029779936138 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.515789596198117 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.347469002008438 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.1791912632285004 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.0108894490704095 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.8426048327714969 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6740517518958267 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.505481192303188 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3369616185775911 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.168463868711462 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   33.7s finished

    1972 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  17.392 seconds)

**Estimated memory usage:**  1915 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
