
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print("")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fd867bf90a0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 215.04878997802734 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 42.89016914367676 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 40.63190460205078 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 39.98576871554057 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 39.376765727996826 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 38.91015028953552 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 38.56024805704753 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 38.14137325968061 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 37.76210975646973 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 37.495096842447914 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 37.3225953578949 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 37.03870563073592 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 36.76614626248677 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 36.486134180655846 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 36.23956315858024 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 36.03683177630107 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 35.81273376941681 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 35.58326432284187 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 35.38061303562588 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 35.17075959004854 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 34.955049991607666 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 34.745532830556236 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 34.53390303525058 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 34.33836797009344 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 34.138143857320145 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 33.93667459487915 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 33.71782697164095 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 33.484433288927434 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 33.2744163445064 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 33.082581528301894 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 32.88510537147522 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 32.699960370217596 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 32.49082624912262 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 32.30778053312591 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 32.12944162593168 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 31.941520622798375 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 31.745484007729424 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 31.53519741908924 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 31.341118699625923 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 31.14487496400491 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 30.94643783569336 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 30.748238447235853 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 30.545562142417545 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 30.330297808314477 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 30.140219059857454 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 29.951352728737728 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 29.763037101082183 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 29.582998691721166 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 29.390567620595295 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 29.201647486005513 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 29.013165950775146 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 28.81009272033093 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 28.59943798872141 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 28.392071755427235 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 28.18298783125701 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 27.981966603885997 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 27.785255772726877 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 27.58792828676993 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 27.382625168767465 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 27.171407400551487 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 26.974507013956707 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 26.77470207996056 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 26.57812077768387 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 26.38260605978587 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 26.185897648334503 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 25.98644933333764 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 25.795803387959797 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 25.60166237247524 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 25.410071106518014 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 25.212825992833015 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 25.0103474344526 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 24.812859081886184 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 24.614367167154946 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 24.41626395264717 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 24.22198381295075 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 24.026023944218956 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 23.831217790904798 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 23.6383729321616 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 23.447139244813187 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 23.251604638522185 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 23.05669140815735 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 22.86283081843529 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 22.663532483868483 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 22.46765943607652 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 22.277094432285853 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 22.079156076206882 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 21.880747867185015 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 21.687661817704125 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 21.493637345053934 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 21.3014698939377 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 21.104632960425484 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 20.91588191671686 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 20.720722084460053 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 20.52673681577047 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 20.330457834487266 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 20.13233064350329 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 19.93932956457138 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 19.74966472448762 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 19.556328286930007 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 19.362430045098968 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 19.16850733757019 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 18.973785256395246 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 18.78212975988201 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 18.588742955217086 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 18.397823040301983 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 18.20280873207819 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 18.00376909184006 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 17.810954686637235 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 17.623635274392587 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 17.435416785948867 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 17.245396288958464 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 17.050844160286157 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 16.858379074505397 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 16.66434479814715 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 16.469914473985373 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 16.27869499248007 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 16.08951026817848 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 15.898673856360281 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 15.706344018548222 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 15.515382876917094 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 15.325358072916666 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 15.13258189603317 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 14.940507853617435 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 14.74900185964941 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 14.559743719716225 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 14.368502140045166 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 14.176794986876232 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 13.982556290513887 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 13.787945464253426 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 13.5966162810954 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 13.40485325226417 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 13.21133447421416 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 13.018012776519313 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 12.82501601097279 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 12.63280099185545 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 12.440708072097213 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 12.24985189998851 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 12.057675314645698 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 11.867259695910025 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 11.67572004160435 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 11.484994207109724 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 11.293884980763103 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 11.102791269060592 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 10.911032843423056 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 10.718063142564562 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 10.524700526533454 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.329722064815154 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 10.1365518002283 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 9.94391815082447 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 9.768922959398104 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.576738119125366 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.386152269034985 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 9.196607690108449 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 9.006909055647508 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 8.817936014819454 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.626875654343637 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.43617310279455 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.245219874533879 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 8.053826700283002 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.862858901233793 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.6721190214157104 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.480928580953468 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.289981112068082 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.098162828047583 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.906494623277245 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.7143940275365654 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.522763223533171 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.3315422263687955 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.138948304312569 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.946819529730893 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.7553770682391 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.564176928927327 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.3726514550142515 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.180539721009359 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.988418968244531 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.798349005835397 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.606384504925121 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.414283651416585 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.22274313883835 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.0309571087693365 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.8390230602688256 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.6471231760899663 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.4554270807203356 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.2637757421191274 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.07204010175622 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.880207635260917 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.688461334474625 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.4966214327888694 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.3045758998140373 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.1123889148550687 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.9203020396985504 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.7283883244579374 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.5365929702917733 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.3447668169446558 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.1527717949188863 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.9606622671469663 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.7685550913518788 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5764405848411134 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.38430537599505804 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.19214862674923996 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   38.4s finished

    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  1.622 seconds)

**Estimated memory usage:**  1899 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/nilearn/nilearn.github.io/main?filepath=examples/auto_examples/02_decoding/plot_oasis_vbm.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
