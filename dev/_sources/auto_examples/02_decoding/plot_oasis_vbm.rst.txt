
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f8391719130>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 210.3590965270996 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 36.821393728256226 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 34.7080078125 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 33.56358329455058 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 32.84336853027344 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 32.5524115562439 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 32.3421368598938 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 31.89687102181571 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 31.528135299682617 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 31.331581036249794 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 31.01470375061035 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 30.83072642846541 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 30.613013982772827 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 30.3281267789694 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 30.134117603302002 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 29.906450827916466 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 29.68129539489746 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 29.53360188708586 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 29.341908772786457 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 29.16060330993251 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 28.982096672058105 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 28.79497121629261 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 28.653536688197747 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 28.49431990540546 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 28.333065032958984 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 28.16282081604004 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 28.008922026707577 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 27.845006616027266 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 27.69222491128104 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 27.51597236764842 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 27.372958342234295 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 27.204341296226744 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 27.05060201883316 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 26.87851782278581 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 26.71371224347283 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 26.543489353997366 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 26.371159818437363 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 26.20648638622181 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 26.02833437919617 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 25.862816786154724 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 25.69963264465332 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 25.551021913202796 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 25.39627256847563 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 25.26107185385948 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 25.09865309975364 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 24.942084285948013 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 24.77303695678711 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 24.60306521172219 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 24.43366201718648 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 24.25853430008402 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 24.11782479286194 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 23.962538424660178 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 23.813909989136917 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 23.65229853144232 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 23.51426589047467 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 23.36392907662825 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 23.212162358420237 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 23.064597610841716 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 22.912571413763636 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 22.76358423798771 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 22.60694487889608 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 22.459443401117795 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 22.302179944130682 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 22.153203676617334 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 22.00438365340233 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 21.850735077491176 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 21.694292639241073 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 21.543876107059308 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 21.392316341400146 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 21.240655909413878 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 21.08874229022435 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 20.950916945094793 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 20.80777867635091 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 20.667158146427102 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 20.504118165454347 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 20.341456731160484 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 20.170100964997943 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 19.99894196646554 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 19.839060538854355 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 19.671508958068074 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 19.51617443561554 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 19.34599949401102 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 19.175946311252872 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 19.00896500104881 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 18.840624559493293 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 18.671036860522104 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 18.503927691038264 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 18.342848087179252 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 18.181175318631258 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 18.020112967223263 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 17.854551553726196 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 17.685040675676785 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 17.523232076479044 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 17.362964053307813 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 17.196115940175158 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 17.03369013886703 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 16.875155806541443 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 16.71037254136862 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 16.549109721670344 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 16.3821713539085 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 16.216344833374023 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 16.055472142625565 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 15.893130386576933 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 15.730754090744314 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 15.571238884559046 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 15.408308982849121 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 15.242782547788801 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 15.076749200018767 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 14.91070306742633 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 14.74484078818505 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 14.578922575170344 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 14.415367182310638 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 14.25436110155923 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 14.08833786660591 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 13.923666874567667 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 13.758910230968308 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 13.59385033311515 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 13.428268946134128 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 13.267398252325544 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 13.103913587682388 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 12.943320274353027 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 12.777953882847937 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 12.613508685690459 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 12.449136313384141 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 12.285644915796096 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 12.12509136199951 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.9646126618461 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 11.803303705425712 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 11.644022673368454 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 11.484252796616664 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 11.324423716618464 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 11.165013537152122 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 11.006626526514689 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.849753668433742 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.692353437195962 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.538952050385651 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 10.382630292107077 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.224944088580834 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 10.06823370076608 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.910767478050944 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.755591256277901 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.59976133048957 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.443495535514725 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.28615213274122 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.129922747612 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.97432724360762 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.819314437369778 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.664251812461282 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.507238710248792 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.343609382642196 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.180652856826782 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 8.014661526837886 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.850359289269698 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.686990976333619 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.524703982588532 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.35979873134244 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.195528922936855 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.032209437364226 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.8682966171940665 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.703238779643796 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.538860738277435 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.375379387636363 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.210515346056149 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.0461389725925 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.88152678419904 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.717266581275246 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.552882634013532 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.388329898525855 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.224001021612258 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.060100397414709 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.896052206263823 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.731823020511203 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.567909994790721 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.404614917115669 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.240615535056454 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.077009337288993 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.9134648062966084 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.7505998651860124 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.587698202454642 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.424256402021014 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.2608424292670355 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.097352362469415 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.9343731167552236 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.7709708747967996 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.6077380802320396 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.444436414821728 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.2811500897971535 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.117993920882118 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.9549632934813803 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.7918603559019703 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.6288313614694694 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.4657465637666394 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.3026960591475167 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.1397573429068135 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9767473432206616 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.8138321424141908 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.651084549573003 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.48829452277440105 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3254592972572404 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1627048260003478 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   32.5s finished

    1985 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  15.490 seconds)

**Estimated memory usage:**  1899 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
