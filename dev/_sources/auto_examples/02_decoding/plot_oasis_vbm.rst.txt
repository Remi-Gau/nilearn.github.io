
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fbf4461a2e0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 198.92215728759766 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 33.5896098613739 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 30.998868942260742 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 30.119370460510257 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 29.64535140991211 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 29.231208086013794 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 29.05338756243388 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 28.885130984442576 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 28.749801635742188 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 28.52187442779541 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 28.303409099578857 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 28.131938630884346 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 27.927058935165405 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 27.751104281498836 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 27.614018644605366 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 27.45125150680542 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 27.657321453094482 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 27.55862684810863 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 27.382161166932846 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 27.208186262532287 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 27.024624824523926 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 26.853955541338237 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 26.680103670467034 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 26.50229224951371 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 26.33152135213216 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 26.154605627059937 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 25.993078268491306 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 25.82446394143281 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 25.672420024871826 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 25.52417468202525 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 25.3673415184021 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 25.201975391757102 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 25.034083485603333 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 24.87899335225423 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 24.736854160533234 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 24.598347902297974 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 24.45906106630961 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 24.31025751861366 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 24.156759738922123 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 24.027021670952823 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 23.871444702148438 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 23.717710611296862 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 23.561599742798577 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 23.40041868076768 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 23.23827052116394 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 23.08730819490221 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 22.926051295321923 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 22.766654217496832 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 22.605905254681904 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 22.44971912247794 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 22.298367977142334 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 22.14972224890017 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 22.00953037922199 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 21.862732576874066 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 21.714553550437646 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 21.568180149251763 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 21.42021008900234 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 21.266638931475185 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 21.1163086808961 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 20.965842889527142 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 20.806918700536094 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 20.650778825165798 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 20.500168377353297 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 20.34279317326016 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 20.189796596765518 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 20.03747941897466 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 19.882253632400975 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 19.726593441037988 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 19.57302108932944 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 19.422053544417672 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 19.269411291394917 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 19.115429384607665 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 18.96534262763129 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 18.81805674343893 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 18.674539205190296 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 18.528906504313152 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 18.381496843538788 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 18.228981358664377 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 18.083537480770012 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 17.945091558408134 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 17.800673604011536 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 17.65150324503581 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 17.501124980973035 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 17.351659409971123 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 17.19712191536313 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 17.045775848276477 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 16.891024755877115 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 16.74258692511197 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 16.59298294240778 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 16.442994857102295 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 16.292331112755672 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 16.141377742473896 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 15.989943794582203 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 15.83803201490833 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 15.685939697509117 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 15.535488818821156 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 15.386219998200733 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.23465532863263 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 15.08522626818443 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.9375649196933 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.787464380264282 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.639123928428877 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 14.491456606808832 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 14.340639181507445 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 14.191097039442797 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 14.042492775689988 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.892384542609161 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.740243232138804 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.591213570700752 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.442338674440297 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.294036973606458 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 13.144189566105336 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.994009000914437 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.844935919331238 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.693863885444507 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.543876326602437 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.395197490165973 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.246483409506643 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.096504526623226 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.947004875215162 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.799680709838867 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.656519864216325 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.506063594192756 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.356653682584684 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.207523991984706 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.057774019241332 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.908435855593 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.760359653337733 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.61137180030346 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.462769532388494 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.31440124144921 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.165892955911069 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.018117507298788 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.871185845898507 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.72372242230088 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.576924659587718 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.430323544670554 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.28419350707618 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.136870577715445 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.992327863363911 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.845100334712436 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.698653961749788 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.550842043379664 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.403661281078845 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.254808518621656 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.10674629540279 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.958971807401474 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.811693502932179 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.664314089594661 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.516795457609548 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.369671662648519 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.221911749302946 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.0739096591347135 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.925946620554706 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.778334660963578 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.630770929398076 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.483088157115838 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.335912086401775 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.188341430470913 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.04057300315713 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.8930811285972595 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.745544723842455 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.59942161006692 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.451755863025876 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.304733776464695 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.1571478626944804 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.009470014687044 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.862195855843093 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.714356331598191 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.5670270059235705 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.420074084225823 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.27264390354268 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.124918399855148 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.9774172733284834 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.8298788975025047 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.682165248053414 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.5349573547189883 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.3876130446202337 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.240359035770545 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.093029010229271 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.9456922478146024 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.798184080018523 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.6507993923438775 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.503416525210188 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.356260237486466 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.208837902223742 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.061548576560072 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.914239469059011 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.7676751917981086 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.62097872628106 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.4738282278964394 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.3265791126570776 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.1792210241158803 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0318926208377501 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8845113552722734 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7370077952360495 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5895769742070411 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.44216017916722955 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.29474237470915826 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.14736225377375156 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   29.5s finished

    1960 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  13.716 seconds)

**Estimated memory usage:**  1933 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
