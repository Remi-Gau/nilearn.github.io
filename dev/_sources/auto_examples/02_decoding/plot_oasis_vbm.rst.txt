
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fcc1b3079a0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 142.6243782043457 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 23.726918697357178 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 21.9932599067688 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 21.313159942626953 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 21.351271390914917 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 20.973933219909668 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 20.753566106160484 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 20.51763142858233 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 20.349449157714844 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 20.17637745539347 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 20.01291561126709 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 19.886779351667926 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 19.78993980089823 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 19.67049950819749 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 19.536832809448242 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 19.39812739690145 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 19.29485011100769 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 19.164738472770242 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 19.041974173651802 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 18.921305593691375 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 18.81359338760376 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 18.709946269080753 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 18.601156451485377 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 18.498924369397372 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 18.38114341100057 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 18.26465368270874 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 18.166678960506733 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 18.052507524137145 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 17.94288444519043 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 17.8266999968167 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 17.7178541024526 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 17.611721338764312 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 17.503320336341858 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 17.389109271945376 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 17.27471275890575 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 17.16867082459586 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 17.057977649900646 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 16.947441784111227 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 16.842503823732077 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 16.73316053243784 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 16.6325740814209 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 16.526691826378425 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 16.42066050711132 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 16.315297165582347 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 16.216338937932793 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 16.11044534047445 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 16.002601416214652 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 15.896703319346651 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 15.790150801340738 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 15.682603393282209 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 15.578342199325562 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 15.476511459724575 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 15.368250498404871 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 15.263121114586884 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 15.161774856072885 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 15.055183974179354 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 14.955320017678398 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 14.84820660791899 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 14.744268080283854 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 14.641895189123638 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 14.538086970647177 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 14.430909309230868 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 14.337634032772431 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 14.231131814775011 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 14.128051280975342 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 14.03135319856497 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 13.927640900467381 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 13.821105469518633 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 13.713109984117395 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 13.60781799537548 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 13.503820419311523 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 13.399488475960744 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 13.29374059041341 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 13.190087609095118 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 13.0854012966156 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 12.981634934743246 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 12.876150633159437 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 12.771296423751037 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 12.665504492246187 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 12.562286585192137 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 12.457013368606567 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 12.351754397521786 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 12.245892379342056 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 12.14160963138902 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 12.03627339998881 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 11.932083704892328 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 11.828027969182923 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 11.723428723455847 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 11.620509321039373 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 11.51605328281274 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 11.412447955873278 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 11.307271092802614 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 11.20200422535772 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 11.098774981755083 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 10.993963277086298 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 10.89007296060261 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 10.784636457761128 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 10.68027455044776 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 10.575804437909808 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 10.471322582225605 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 10.367607831954956 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 10.262641746218842 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 10.15777715514688 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.05369439171356 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 9.951483799861029 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 9.849404335021973 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 9.748095273971558 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 9.647067286143793 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 9.542563376603303 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 9.439374311254658 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 9.336497458544645 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 9.232323064460411 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.127813032695226 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.02349813849525 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 8.920254171940318 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 8.81647627250008 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 8.711442478771868 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 8.608443435440716 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 8.504588870678917 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 8.400816252251634 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 8.299569924672443 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.195196973390816 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.09145067949764 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 7.987095830886344 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 7.883654171420682 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 7.779874992370605 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 7.675812709899176 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 7.571899213190154 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 7.46754589676857 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 7.363332506298095 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.259241709342369 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.155267531635197 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.051337299924908 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 6.947169253700658 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 6.843283984198499 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 6.740290403366089 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 6.636407627778895 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 6.532766317799143 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.429137800050818 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.326621040165853 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.222856112888881 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.118841338664927 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.0146505295390815 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 5.911249872687813 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 5.807690130339728 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 5.7038072882027455 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 5.600132674387056 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.496666759049812 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.392539301434079 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.288388068243961 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.184047142664591 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.080059948346473 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 4.976409485465601 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 4.872797545264749 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 4.7689760815013535 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.665397813243251 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.561683935996814 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.45793956556138 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.354410346550277 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.250704123538995 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.146854341030121 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.043064460991332 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 3.9403110551245417 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 3.836425699339322 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.732740425482029 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.629133513479522 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.525667618556195 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.42174570146435 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.3178394408453076 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.2139939260200636 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.1101965062758503 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.006410803711205 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 2.9025568851204806 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.798958509643643 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.69520972789019 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.5916435718536377 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.4881334738297896 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.3843836124333957 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.2812244677811524 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.177490018599526 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.0738072130415173 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 1.970036717409587 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.866300745324774 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.762640568728004 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.6589802866396697 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.5553034576209817 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.4516566081713604 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.3478783362689504 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.2441688040469554 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.1405226011124867 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.03681522921512 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.933088579727093 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.8295357922712961 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7258571207214513 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6221778269895574 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5184892385433881 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4147992572005914 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3111367395081496 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2074221071570811 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1037149513187121 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   20.7s finished

    1978 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  56.491 seconds)

**Estimated memory usage:**  1837 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
