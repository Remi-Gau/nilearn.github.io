
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7ff2ef5b9fa0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 197.26991653442383 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 30.477340698242188 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 28.33227038383484 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.44041474660238 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 27.296839714050293 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 26.929937839508057 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.59617066383362 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.473890474864415 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.241313934326172 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 26.027432097329033 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 25.82144784927368 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.617516322569415 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.4340394337972 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.25616486255939 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.094847781317576 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 24.934237082799278 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 24.777037978172302 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 24.6183196516598 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.465738905800713 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.31205093233209 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.174067497253418 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.031368709745863 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 23.885703520341355 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 23.75427936471027 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 23.607691446940102 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.473878383636475 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.33221556590154 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.19679085413615 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.044123853955952 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 22.899630349257894 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 22.758725086847942 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 22.616573541395123 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 22.48474359512329 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.3622301419576 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.225857187719907 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.085431337356567 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 21.945682340198093 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 21.80322575569153 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 21.674896378266187 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 21.53707059224447 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.389577865600586 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.25265418029413 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.11965114729745 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 20.9778040120768 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 20.839121883565728 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 20.69939308696323 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 20.56726689960646 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.42889909541353 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.29699424902598 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.167155265808105 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.03006887435913 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 19.906864091461777 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 19.78363295701834 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 19.648723165943938 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.514781369103325 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.377300132404674 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.253984519413542 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.12095102510954 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 18.979834400374312 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 18.8431668362375 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 18.708226919174194 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.573739618551535 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.43632457333226 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.299708180957367 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.167077481746674 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.035713819357067 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 17.902402928381257 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 17.767355096873953 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.635921071557437 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.499013562133346 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.361658096313477 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.22401529298702 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.09133572048611 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 16.957358837127686 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 16.822596537100303 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.689380009969078 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.554591128700658 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.417864527021134 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.283341909066223 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.150744721859315 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.01757538318634 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 15.884155541290472 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 15.750688983172905 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.619854073926627 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.487212589808873 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.351504031349632 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.216978200646333 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.08447814809865 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 14.949656703255393 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 14.816070034262838 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.683736032909819 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.553548126430302 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.420261248298315 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.289830846171226 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.156213663993997 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.021134539654382 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 13.887843032677967 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.760029515040289 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.627257468749066 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.494037476452913 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.36143970489502 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.226915664011889 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.101910418155146 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 12.97043358237998 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 12.83587514437162 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.703383877163843 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.57027219376474 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.435606599968171 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.304470468450475 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.17100309450692 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.037438435987994 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 11.904282247697985 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.77064573764801 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.638732283516267 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.504696582493029 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.37126092288805 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.237825804743274 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.103718396944878 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 10.970194153866526 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.836317665436688 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.703559080759684 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.569401626744547 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.435393223997023 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.301321991090852 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.168022671053487 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.034439182281494 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.903851868614318 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.770369169280285 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.63658033311367 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.50322361140288 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.369928690103384 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.236369526113263 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.102910070708303 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 8.968647390379942 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.835234830628579 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.70198181823448 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.56771873025333 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.434292485244082 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.300212421279022 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.166202123216587 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.032027346747261 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.898133846039467 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.766079402305711 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.63130739852265 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.497032218509251 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.362821685856786 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.228390628344392 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.094125663342119 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.959478971120474 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.825192497880667 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.69117792447408 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.556866123186832 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.422828247672633 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.289224082348394 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.1560402411919135 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.022447447622977 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.888296280151758 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.754046110590552 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.62011694908142 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.485914648703809 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.351726055145264 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.2181790985676075 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.084187104378217 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.949936133952228 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.81592983734317 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.682234395634045 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.548342190593122 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.41427776913443 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.280695597330729 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.147129655589719 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.012942356221816 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.8789143882996853 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.7450411596963575 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.611213657897332 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.4773167467665402 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.343321187155587 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.209862503138455 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.0761490851472324 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.9421003775650196 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.808125252164276 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.67439693874783 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.540690564318915 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.409836289646861 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.276022772971398 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.1421010390571924 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.0081596632261536 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.874210621721001 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7405817381200943 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6065910623428667 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.4726337604421786 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3387536626113088 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2049302218472147 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0710651179154713 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.937139402399409 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8032258146816923 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6693468827467698 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5354769424516327 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.40161549379377803 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2677435417367955 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1338656236178911 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   26.8s finished

    1965 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  7.755 seconds)

**Estimated memory usage:**  1862 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
