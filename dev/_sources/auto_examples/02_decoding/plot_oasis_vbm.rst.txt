
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fb039ad6790>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )  
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 205.70039749145508 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 37.19958019256592 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 34.62747287750244 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 33.61048913002014 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 32.85832214355469 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 32.917277812957764 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 32.37126096089681 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 31.922218595232284 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 31.594717025756836 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 31.304324044121635 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 31.075210332870483 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 30.89923160726374 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 30.674932797749836 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 30.453878439389744 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 30.25029424258641 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 30.05913019180298 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 29.86430323123932 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 29.686827421188358 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 29.476839171515568 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 29.27606006672508 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 29.094079971313477 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 28.892018545241584 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 28.713191725990992 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 28.535329217496127 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 28.363637606302895 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 28.180506467819214 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 28.03540849685669 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 27.879496256510418 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 27.70182664053781 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 27.542854983231116 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 27.38018774986267 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 27.250893708198298 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 27.07968270778656 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 26.900169228062484 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 26.73033245872049 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 26.560375928878784 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 26.39957621362474 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 26.237371354489714 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 26.073453087555738 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 25.919283665143528 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 25.761435508728027 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 25.592424526447203 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 25.4278849874224 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 25.252529587856557 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 25.08175550807606 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 24.914955298105877 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 24.750616768132087 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 24.59905262703591 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 24.433695991834004 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 24.271233908984126 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 24.098272562026978 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 23.930324788187065 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 23.76599777661837 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 23.605515367579912 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 23.455654435687595 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 23.29204528981989 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 23.133753572191512 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 22.968943407661033 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 22.807539586363166 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 22.643715062383876 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 22.491753657658897 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 22.329362752007658 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 22.159781109902166 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 21.99585397281344 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 21.830843925476074 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 21.67383802854098 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 21.512356982086644 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 21.350727768086674 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 21.19631662088282 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 21.041574657827184 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 20.881360871451243 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 20.720089291183044 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 20.55874845716688 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 20.40106655146978 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 20.24196155006821 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 20.081749757130943 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 19.91852536954378 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 19.759212980022678 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 19.59903667523311 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 19.441382562057882 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 19.27746820449829 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 19.114959081014 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 18.953001871341613 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 18.795043152498913 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 18.63977541242327 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 18.48094853232889 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 18.317809515221175 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 18.15553576096721 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 17.994106466119938 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 17.83421082443066 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 17.66973196135627 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 17.505308832441056 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 17.343653191690862 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 17.180989567951492 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 17.01912950454874 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 16.85757076112848 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 16.69779155651728 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 16.53561576617133 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 16.373088525266063 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 16.20946639475196 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 16.04750657081604 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 15.887575036228293 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 15.73027115242154 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 15.5738151721584 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 15.412062791677622 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 15.251257237933931 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 15.093974590301514 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 14.930396478866863 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 14.771708956471196 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 14.6094997782226 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 14.446745655753396 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 14.285148828953236 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 14.122948953083583 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 13.95981693689802 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 13.797452357777379 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 13.637436763100002 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 13.482331160841317 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 13.320618358432737 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 13.159758147546802 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 12.999218720347942 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 12.839202086130777 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 12.677911187006423 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 12.517256545238808 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 12.357170384104657 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 12.196068017713486 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 12.035823440551757 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.875548404360575 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 11.714427818463543 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 11.553235530853271 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 11.392823298772175 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 11.234223824280958 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 11.072422573584637 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.911344528198242 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.751292178505347 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.59008936383831 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.435725494667334 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 10.27573854783002 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.117464457115117 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.956897538641226 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.797343089426164 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.637340784072876 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.477329994769807 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.318588015059351 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.161216187310385 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.001248425907558 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.842734361517017 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.683060394574518 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.522831759485259 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.363735991555291 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.203474860863398 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.04279899597168 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.882443825930159 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.721883322063245 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.562443360783696 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.402096698810528 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.242101876966416 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.082275519004235 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.922085795432898 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.761703765844996 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.601816558238095 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.441532135009766 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.280992094774424 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.120622846815321 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.960496400762921 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.800429501184603 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.639723640499693 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.479412682085152 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.318640107880095 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.15780716850644 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.997024015562069 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.835599843193504 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.674196180544401 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.513573513474576 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.352248361344971 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.191213572162321 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.030274288994925 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.8691178451884873 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.7081170890290855 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.547524971908398 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.3865246999197165 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.22606529129876 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.065493102890352 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.904494015725104 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.743199523029432 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.5824822964875596 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.4217206078606686 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.2605180407083165 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.099317382363712 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.937977795905255 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.7765979085649761 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.6153642754805715 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.4538841222593297 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.2923814058303833 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.1308996220326792 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9695138071001191 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.8080488412808149 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6464613359801623 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4848813841185594 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.32329807136998034 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.16165293880443476 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   32.3s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  13.261 seconds)

**Estimated memory usage:**  1852 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
