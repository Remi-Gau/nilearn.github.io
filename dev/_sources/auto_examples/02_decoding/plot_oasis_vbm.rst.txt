
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-60

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 61-63

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 63-86

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 87-89

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 89-105

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 106-108

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 108-143

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 144-146

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 146-159

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 160-162

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 162-177

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f78333f6850>



.. GENERATED FROM PYTHON SOURCE LINES 178-180

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 180-225

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 178.6041259765625 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 30.735348224639893 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 28.479012966156006 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.759346246719364 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 27.25660514831543 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 26.871683835983276 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.567532221476238 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.35281242643084 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.164770126342773 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 25.982875744501747 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 25.9227557182312 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.73428604819558 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.58790079752604 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.42467627158532 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.247714281082153 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 25.101354281107586 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 24.96252989768982 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 24.822436430874994 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.702079243130154 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.5765698708986 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.437715768814087 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.28231716156006 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.129296692934904 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 24.004516715588778 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 23.861440658569336 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.70432424545288 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.66381340760451 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.551861374466508 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.4672897543226 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.34551456056792 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 23.23562820752462 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 23.126292297917026 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 22.9859858751297 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.840948805664524 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.699483268401202 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.55036738940648 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.42335973845588 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 22.288853413349873 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 22.140857069115892 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 22.004659774975902 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.862479209899902 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.724086807995306 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.58506118683588 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.446615374365518 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.30587833577936 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 21.167586776945328 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 21.029539916826334 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.889829432710687 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.756826758384705 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.608045130359884 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.4622642993927 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.321932900185676 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 20.18470866863544 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 20.051525763745577 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.927386672408492 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.78824385729703 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.65100969587054 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.517435663624813 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.383183421759767 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 19.253810696682688 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 19.119471867879234 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.98343105003482 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.847098850434826 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.713315827505927 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.577564388513565 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.44054383497972 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.30181939674146 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.167781982848894 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 18.03699858048383 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.905164428379226 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.770795004708425 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.632293351939026 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.497943454318577 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.361069627004127 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.226587669269456 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 17.088661988576256 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.956761749167192 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.82598044965174 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.688404297217346 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.549383009536356 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.409337401390076 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.26951723922918 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.1297065048683 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.993397683982389 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.853053172429403 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.715065942091101 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.576198627782421 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.437337017607415 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.299958142367275 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.162976910558978 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.025507132212322 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.889165453858428 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.75339440677477 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.615592087468794 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.476311881491478 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.339425676747373 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.2030753493309 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.069908390340117 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.93853428412457 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.802008402467976 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.663908004760742 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.525543106664525 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.388027237910851 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.253872095959858 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.119529504042406 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.982440630594889 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.846259256578842 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.71333205365689 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.57666066840843 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.443622037905072 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.308956211263483 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.174066704672736 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.03823811667306 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.901629378310346 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.765821649317155 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.629102354464322 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.492396223134008 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.355601345371996 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.219157582622463 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.082102875749605 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.9496431350708 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.813258937567719 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.676448478073372 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.539199137106174 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.402262303137011 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.266383457183837 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.13065315049792 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.994282485931876 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.858008220791817 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.72065911366958 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.583238748403696 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.445584182520859 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.309965335961543 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.174437526473426 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.036819475800243 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.900246664329812 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.764189776252298 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.627505979398741 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.490530694740405 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.353599002893022 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.216808353151594 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.080358616849209 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.945664711401497 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.808692692043064 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.672190599971348 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.536060711433147 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.4000218763743355 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.263327184988528 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.126626826621391 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.989652732874723 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.8534351984659825 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.715952979018357 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.578569236554597 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.440789967580558 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.304195602218826 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.167610399184689 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.030377284074441 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.8930770591565755 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.755038029030908 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.617444368278456 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.479699611663818 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.341981092595166 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.204051953774911 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.066485679954107 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.928708797547875 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.790725115573768 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.65284479957029 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.515991208082188 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.378300893874395 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.240967235621616 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.103571989957024 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.9662192188508327 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.829088593638221 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.6917322825834242 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.554277910583321 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.417062963758196 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.279944365674799 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.142941431810627 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.005875014187245 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.868733314162526 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.731634908252292 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.5946411282976687 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.4581285492404477 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.3213321563324643 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.1847725743832793 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.047915606885343 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.9113983313242595 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7747211418049857 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6380013810827376 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.5012431132099615 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3646224548942163 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.228050077148757 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0914894441763558 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9549556198515422 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.818594817033748 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6820939504183255 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5456310437650096 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4091718765684796 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.27274793567079486 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13636251909648953 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   27.3s finished

    1993 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  7.680 seconds)

**Estimated memory usage:**  1837 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
