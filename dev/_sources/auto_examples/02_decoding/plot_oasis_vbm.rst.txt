
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f613ece0d00>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 170.0282096862793 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 29.855949640274048 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 27.751672983169556 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 26.89750631650289 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 26.68461775779724 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 26.829134702682495 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.4687507947286 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.128030197960992 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 25.86170768737793 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 25.626035319434273 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 25.405027389526367 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.191631468859587 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.01707633336385 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 24.85195354314951 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 24.67007466724941 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 24.50931779543559 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 24.35267925262451 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 24.194817949743832 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.05038653479682 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 23.898621985786843 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 23.755035638809204 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 23.608458666574386 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 23.4623215415261 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 23.31527734839398 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 23.180380026499428 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.03827929496765 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 22.893368262511036 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 22.75055964787801 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 22.619138956069946 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 22.489524956407216 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 22.361438671747845 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 22.23269551031051 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 22.107665956020355 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 21.979227701822918 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 21.845117134206436 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 21.71611956187657 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 21.58342787954542 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 21.452592875506426 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 21.31824716768767 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 21.185568675016746 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.05644416809082 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 20.92306426676308 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 20.782000269208634 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 20.64957137994988 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 20.52032459865917 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 20.3926043510437 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 20.26509840592094 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.138727908438824 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.00319735209147 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 19.868580370533223 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 19.738816738128662 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 19.622106327730066 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 19.486171043836155 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 19.351306510421466 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.223241514629787 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.091651287945833 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 18.959563187190465 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 18.823836820167408 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 18.697334700617294 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 18.571892301915053 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 18.44802737236023 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.32438038997963 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.20307388613301 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.076386815025693 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 17.947271943092346 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 17.819974092336803 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 17.69691959294406 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 17.569579512325685 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.441625889609842 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.31419258877851 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.20510928971427 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.07240685610704 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 16.938245985243054 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 16.80847496529148 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 16.674032082428802 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.539808114369713 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.405987388209294 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.273316163521308 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.140564313301674 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.007029521314404 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 15.878536105155945 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 15.748584520669631 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 15.616069671584338 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.481599526232984 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.346726837612334 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.21587683172787 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.082626326139582 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 14.950767240305057 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 14.81653525612571 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 14.683102465747448 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.549296379089357 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.416715569548554 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.286732020585434 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.154279960099087 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.021449560814714 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 13.888736825240287 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 13.762063821156818 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.628610982108363 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.49394287868422 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.361387260032421 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.229869365692139 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.09699812738022 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 12.96369532510346 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 12.831056736047985 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 12.697075256934534 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.564062368302118 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.431524393693456 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.299124561737631 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.165559627391675 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.032644337470378 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 11.900636998089878 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 11.767932485889744 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.634132249014717 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.500851567867583 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.366835615091157 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.232857766358748 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.099561740612161 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 10.96598993611132 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 10.832304065510378 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.699578343319292 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.56665007273356 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.432812050354382 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.299123381004959 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.165921234503024 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.031973569623887 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 9.89899492263794 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.76717594313243 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.636182644235806 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.504488781094551 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.373375802077064 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.240836693690373 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.108074999947585 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 8.975273153998636 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 8.843562572522272 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.710791626972938 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.578192878652501 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.445678486543542 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.312980298578305 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.180843232334524 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.048171724346902 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.915408372879028 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.782793920936314 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.652699211953392 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.5200978759285455 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.387806587749058 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.255862293572261 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.125839827811881 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.993555472821606 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.861148769791062 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.729687759540226 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.5968559583028155 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.464722837043913 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.332622829236482 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.20039854174346 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.068208839986231 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.936116033984769 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.804949711530637 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.672487867865593 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.540325191956532 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.40825492331067 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.276165187358856 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.143919444232254 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.011856170348179 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.879941798426622 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.747950466667733 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.615674380100135 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.483814926032561 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.351990507034484 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.220349584306989 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.088346249958467 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.956484486075009 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.8246913262975144 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.6927859505941703 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.5609948910729736 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.42877703425528 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.296540226255144 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.1644007834521206 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.032347078377244 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.900310797637768 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.768250308223277 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.636249754163954 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.5044520665268872 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.3729791536435973 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.241306396130004 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.1096388775369395 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.9780396448599327 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.846385286700341 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7148982407574984 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.5831461358577645 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.4511873785150113 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3193550862764056 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.1874090214674387 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0554242332776387 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9234381438536965 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.7915216573734873 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6595917298243595 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5276144232068742 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.39572191359427983 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.263830977256852 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1319308053308995 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   26.4s finished

    1952 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  5.964 seconds)

**Estimated memory usage:**  1952 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
