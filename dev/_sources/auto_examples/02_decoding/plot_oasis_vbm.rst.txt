
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fd7d7133850>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 269.91844177246094 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 50.29865741729736 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 47.199301958084106 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 46.46306379636129 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 45.31359553337097 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 44.98118448257446 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 45.0412933031718 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 44.50968156542097 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 44.1049919128418 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 43.68475649091933 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 43.46258878707886 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 43.114008535038344 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 42.82565887769063 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 42.51873630743761 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 42.20721346991403 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 41.90457646052043 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 41.62456440925598 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 41.35677072581123 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 41.12192416191101 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 40.8663567367353 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 40.61938190460205 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 40.358141967228484 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 40.11227889494463 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 40.01473490051602 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 39.77039829889933 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 39.54098844528198 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 39.274131554823654 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 39.006851523010816 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 38.74518758910043 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 38.49195789468699 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 38.23807032903036 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 37.99713250129453 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 37.746999621391296 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 37.49963308103157 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 37.26665377616882 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 37.00958704948425 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 36.76597992579142 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 36.521319002718535 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 36.27791039567245 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 36.03346614959913 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 35.81526279449463 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 35.590229639192906 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 35.36257421402704 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 35.1581910377325 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 34.939359101382166 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 34.713840590582954 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 34.479180335998535 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 34.26666139034515 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 34.02176809310913 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 33.78790570278557 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 33.57954454421997 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 33.33558518278832 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 33.11711916556725 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 32.880264543137464 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 32.64314839575026 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 32.42944552681663 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 32.193400382995605 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 31.97793284215425 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 31.75515191308383 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 31.519415629112114 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 31.306594928105675 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 31.078823484358242 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 30.854695235529253 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 30.62898975326901 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 30.40131241083145 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 30.166196217903728 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 29.948429143790044 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 29.720252641991003 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 29.490608243381274 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 29.27541965678118 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 29.04710214478629 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 28.825458385574986 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 28.60296207004123 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 28.373614056469645 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 28.14812963073318 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 27.946437199910484 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 27.722777856023686 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 27.506840888555946 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 27.288412693219307 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 27.064774754681164 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 26.8518226146698 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 26.623652010788152 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 26.399722465654698 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 26.17106639333518 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 25.941999219712756 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 25.72994741271524 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 25.507304457731024 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 25.28287386894226 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 25.074813495982777 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 24.843785746713703 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 24.615512265099422 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 24.394301550728933 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 24.163378684417065 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 23.939894263462357 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 23.71033316470207 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 23.490681259255663 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 23.265231788158417 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 23.03470728569424 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 22.80700453446836 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 22.576382954915363 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 22.35151481628418 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 22.123414646280875 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 21.89997164408366 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 21.685736496471666 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 21.46387371650109 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 21.234854902539933 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 21.00834012031555 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 20.784310120288456 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 20.5643857938272 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 20.34280400757396 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 20.121178085153755 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 19.8981496965563 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 19.67391346182142 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 19.451951360280535 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 19.229276489793207 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 19.0046198160752 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 18.77959232494749 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 18.55181240831685 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 18.33237130359068 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 18.106156387248962 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 17.88020372390747 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 17.65547773463667 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 17.42868616151028 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 17.206808039812536 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 16.981178514419064 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 16.753966426849363 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 16.535298763759553 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 16.30882762923954 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 16.091648250818253 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 15.86562376059303 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 15.63822340965271 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 15.420415665357167 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 15.192991133892175 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 14.96875672412098 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 14.74464580194274 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 14.517934498963532 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 14.294329923741957 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 14.070272188117034 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 13.84908155772997 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 13.624414768150384 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 13.401009423392159 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 13.175652471839959 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 12.949543620499087 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 12.725493132651268 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 12.499657379256355 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 12.276423626932605 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 12.051783584568598 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 11.827841166736318 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 11.603004887297347 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 11.378240106889866 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 11.15762734413147 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 10.936127940550545 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 10.711915894558555 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 10.488123060051912 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 10.26461325682603 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 10.042432746579571 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 9.818299727562147 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 9.595057276403828 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 9.372903657864919 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 9.148978284319991 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 8.92562872171402 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 8.702558289403502 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 8.479614831783152 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 8.256204347668982 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 8.032154525198587 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 7.809613141146573 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 7.586106857621526 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 7.363523037847645 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 7.139806520371209 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 6.916429594423644 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 6.693934636957506 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 6.469752133241173 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 6.245574296906938 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 6.022207942312163 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.798680245191202 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.575184890202113 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 5.352525147524746 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 5.129910741148695 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.907120059045513 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.685580629210232 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.462598509258694 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 4.2393774656959655 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 4.01747081043956 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.794278617765083 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.5709833891495415 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.3480482165877885 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 3.124779265414002 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.901227784029303 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.6782204141008092 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.4550534619225393 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.232002722589593 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 2.0090908280217836 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.785786579052607 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.5628661417590521 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.3393962629062615 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.1164398804689064 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.893028045187191 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.6697555060314043 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.44648769407561334 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.22325120619193992 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   44.6s finished

    2005 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  35.572 seconds)

**Estimated memory usage:**  1954 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
