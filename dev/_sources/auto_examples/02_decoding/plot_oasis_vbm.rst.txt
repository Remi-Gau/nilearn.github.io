
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fa0a7eb3100>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 142.8818702697754 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 25.5692195892334 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 23.493518114089966 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 22.679315884908043 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 22.326282024383545 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 22.084738969802856 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 21.841472307840984 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 21.62366911343166 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 21.44974708557129 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 21.277323140038384 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 21.030773401260376 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 20.835876963355325 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 20.650005102157593 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 20.49826486294086 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 20.35249880381993 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 20.21051875750224 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 20.0710027217865 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 19.897658123689542 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 19.77267199092441 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 19.65010678140741 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 19.50125813484192 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 19.367880174091884 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 19.24075104973533 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 19.13607965344968 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 19.040794849395752 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 18.917554140090942 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 18.804454014851498 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 18.67819882322241 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 18.548213720321655 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 18.441631744647847 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 18.31493345896403 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 18.186788420523364 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 18.06609606742859 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 17.94841894236478 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 17.835204432992377 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 17.704752138682775 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 17.59180900785658 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 17.480772301957412 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 17.368449324055725 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 17.259125037071033 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 17.14833354949951 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 17.064332206074784 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 16.960269950685046 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 16.85464903365734 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 16.73528942194852 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 16.611220094892715 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 16.498435673506364 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 16.40363790126557 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 16.286268989245094 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 16.173911843981063 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 16.063093185424805 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 15.959729241389853 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 15.846816869882437 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 15.745836051005238 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 15.63681803809272 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 15.529508352279663 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 15.428547518593925 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 15.324022267994126 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 15.214934554593315 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 15.105968459177824 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 14.999774217605593 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 14.887223544667979 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 14.773940078673823 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 14.663033527041238 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 14.550503998994827 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 14.442677956361038 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 14.33454145084728 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 14.231143698763491 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 14.13385887706981 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 14.03547515730927 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 13.934625523430961 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 13.829511457765607 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 13.720232645670572 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 13.611696285744236 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 13.504327954472721 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 13.398494720458984 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 13.295835532640156 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.192498748952692 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.085687307211069 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 12.97847434538829 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 12.876123905181885 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 12.771594150566761 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 12.663093090057373 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 12.554726126682327 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 12.447914554959251 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 12.339288192636827 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.245735989060512 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.138879973312905 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.038701924410733 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 11.945140045680356 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 11.85310901535882 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 11.755864337250426 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 11.66194718817006 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 11.56244864002351 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.468598538256705 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.374430631336415 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.281722048918406 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.18396500213859 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.088275773184641 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 10.985150197539665 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 10.882609128952026 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 10.792060113189244 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 10.692090969459684 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.584668379385494 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.486228135915903 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.386060101645333 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.28672724849773 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.184088138776405 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.083990944756401 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 9.988585170255888 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 9.8866360837763 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 9.7854225979195 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.685147370610919 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.584775260064454 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.483616439919723 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.380075599836266 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.277986164750724 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.17756647330064 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.076491170010325 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 8.97330371672366 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 8.870235919952393 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.769217144359242 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.66585894881702 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.561562179549922 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.451907111752417 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.339218282699585 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.2290312903268 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.116965239442239 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.005899712443352 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 7.893343459728152 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.783109738276555 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.672641615831215 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.566068764888879 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.461158046148774 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.355416614617874 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.247603319309375 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.141982920029584 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.035793481952083 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.929687468901925 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.821919900907887 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.715428216116768 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.609084555443297 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.510406843373474 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.401851195555467 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.292188498708937 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.184159254205638 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.0779639629468525 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.969412388444758 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.8606212332442 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.75144972577191 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.639965216318766 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.530291596785286 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.419847714273553 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.309428579667036 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.1982656206403455 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.087293024986021 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.976887868000911 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.865204335777623 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.753950743735591 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.643015177744739 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.533031105995178 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.421273813484619 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.30949271755454 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.1964308718230825 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.085290240078438 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.9738532918872256 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.8617685875260683 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.7497412144780875 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.637372198558989 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.5246349834126125 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.412587867063635 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.300664016377856 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.188656945561254 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.075978631918141 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.963493574624774 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.851198502949306 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.738730799068104 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.6258924424985035 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.5130966111515343 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.3997054912524516 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.285370137956407 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.170686580858178 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.0557642559428793 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.9407650434254298 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.8264312951461128 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.7122667351284544 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.5975986731949674 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.4831044176683068 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3687003521209067 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2547861571034427 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.1412316999937357 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.0274917430278518 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9137517213821411 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7996692793356939 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6854683590918472 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5714431603749592 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4574438698437749 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3432133742395391 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.22889985701050422 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11447665439778237 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   22.9s finished

    1993 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  0.942 seconds)

**Estimated memory usage:**  1841 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
