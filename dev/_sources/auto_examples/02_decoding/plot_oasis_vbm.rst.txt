
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-60

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 61-63

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 63-86

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 87-89

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 89-105

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 106-108

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 108-143

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 144-146

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 146-159

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 160-162

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 162-177

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f3a1fd7de50>



.. GENERATED FROM PYTHON SOURCE LINES 178-180

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 180-225

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 204.2078971862793 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 36.2552764415741 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 33.53779649734497 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 32.44600009918213 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 31.921560049057007 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 31.446599006652832 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 31.607134898503624 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 31.356512819017684 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 31.086793899536133 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 30.846556345621742 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 30.565749168395996 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 30.438997897234835 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 30.334104776382446 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 30.188804351366485 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 30.06208409581866 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 29.916136821111046 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 29.688297986984253 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 29.471466779708866 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 29.332989268832737 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 29.12168315837258 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 28.929993152618408 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 28.74356990768796 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 28.551526091315534 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 28.367246264996737 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 28.173257509867348 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 27.990638971328735 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 27.834963358365574 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 27.66722846031189 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 27.491609403065276 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 27.30984279205059 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 27.134855349858604 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 26.96356618019842 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 26.793840050697327 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 26.622981772278294 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 26.45360668967752 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 26.284870965140207 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 26.119173526763916 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 25.952675071922506 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 25.785039951926787 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 25.644847802626785 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 25.47298240661621 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 25.3215207530231 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 25.15685733159383 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 24.995830707771834 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 24.836547699841585 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 24.67625141143799 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 24.508738300074704 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 24.344547652183696 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 24.17771816253662 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 24.0172057297765 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 23.858002424240112 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 23.685566766589293 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 23.52030510168809 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 23.357731967602135 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 23.184867903038306 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 23.017943057146937 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 22.875874042510986 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 22.715095503288403 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 22.554608525901003 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 22.389774944822666 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 22.220569213231407 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 22.060609997295945 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 21.89716347571342 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 21.735070860575114 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 21.64369535446167 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 21.487139445084793 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 21.32856639948758 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 21.167386236475473 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 21.001372575759888 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 20.839753064556398 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 20.677941867283412 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 20.525079377940003 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 20.366717868381077 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 20.20917258523915 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 20.05057036554491 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 19.889341592788696 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 19.728735610058433 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 19.569940585594672 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 19.41019560740544 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 19.247662794740894 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 19.088496208190918 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 18.926839263350875 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 18.768879454310348 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 18.609768433743213 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 18.451424394335064 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 18.291359536788043 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 18.133934930313465 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 17.973391519195733 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 17.8144737590443 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 17.660570945632593 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 17.502558708190918 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 17.34784438583877 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 17.189104494841203 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 17.030366195145476 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 16.87640379844828 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 16.718629435489053 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 16.559649964173634 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 16.400957719566897 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 16.23835625453871 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 16.077148194264883 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 15.915186405181885 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 15.754926511556794 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 15.595430014180202 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 15.43927560269254 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 15.279847438518818 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 15.122813656216577 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 14.966545788746961 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 14.809752335058194 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 14.652712415765833 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 14.495840925689137 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 14.334571578285912 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 14.17461066417866 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 14.017033202307564 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 13.855883113050883 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 13.696299301950555 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 13.538471833519313 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 13.381919466215988 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 13.221143227357132 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 13.061781204352945 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 12.905896130730124 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 12.75229771931966 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 12.5912127475108 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 12.430065088584776 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 12.270226251788255 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 12.110256971851472 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.949882316589354 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.79029026864067 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 11.630926102165162 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 11.472619459033012 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 11.31198779741923 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 11.151629888094387 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.992351107924948 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.833455432545055 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.671992095789516 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.51069432230138 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.349479171964857 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 10.1900115293615 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.030200928667165 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.871300182480743 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.711982697891674 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.554682663508823 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.39552078348525 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.236483103792432 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.077256802912359 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.917474720213148 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.759967409331223 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.600605879744437 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.440134377706618 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.27976257092244 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.120396894096528 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.960389216740926 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.800538828830845 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.641972541809082 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.482194774291095 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.322372733772575 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.162333396173293 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.00192719239455 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.842475824295335 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.683553538744962 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.524232943852742 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.365151405334473 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.204867288933038 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.0446162194381525 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.884666407766518 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.724828993401876 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.5653618827010645 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.406141723494931 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.246632327576598 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.087516103472028 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.927871333071466 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.769194280399996 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.610059496952079 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.450813010681507 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.291156954848009 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.131679000525639 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.972306864602225 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.8128927946090694 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.6536353617738193 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.494714471731293 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.3364184222407847 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.177117480172051 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.017912553818845 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.859379896750817 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.7008211182766275 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.541899411574654 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.38295316696167 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.2239706977721183 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.0650452496533727 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.9060039773900457 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.7470856722069794 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.5882537364959717 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.4293755848370298 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.2706447641054788 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.1117318479508316 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9527863350111185 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7938671723390237 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6350401275011958 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4762146158266794 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3174593785796503 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.15871641863530606 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   31.7s finished

    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  20.304 seconds)

**Estimated memory usage:**  1873 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
