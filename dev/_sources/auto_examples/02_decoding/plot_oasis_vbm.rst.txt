
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fdf6cea69a0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 151.61514282226562 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 25.77532196044922 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 23.603203296661377 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 22.82483983039856 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 22.30105948448181 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 21.958198070526123 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 21.75807007153829 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 21.554213081087386 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 21.34841537475586 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 21.208763228522407 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 21.06108331680298 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 20.906119043176826 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 20.738212426503498 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 20.594858407974243 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 20.465732778821675 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 20.33728059132894 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 20.254539728164673 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 20.120199848623837 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 20.016798814137776 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 19.900382706993508 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 19.7660071849823 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 19.63337739308675 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 19.505488243970007 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 19.387175684389863 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 19.25512631734212 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 19.14616084098816 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 19.019337470714863 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 18.901806328031753 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 18.79143214225769 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 18.684351312703097 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 18.592085520426433 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 18.496301651000977 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 18.38817662000656 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 18.307097485571198 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 18.21918169189902 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 18.10709973743984 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 17.992294126086765 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 17.895949041521227 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 17.80027673118993 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 17.69134158965869 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 17.5761661529541 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 17.46917799624001 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 17.363975411369687 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 17.25366765399312 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 17.141679460352115 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 17.03664795557658 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 16.93027074440666 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 16.812496220811884 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 16.70122702916463 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 16.60085087406392 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 16.485737085342407 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 16.39008885271409 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 16.279587507247925 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 16.16751405877887 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 16.052533600065445 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 15.939904603091152 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 15.821316719055178 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 15.713225176459863 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 15.60075521469116 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 15.488574015892157 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 15.371522267659506 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 15.25852125980815 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.148633326253583 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.037903482951814 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 14.92703440785408 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 14.813868614343498 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 14.702331730813691 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 14.592984174614521 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 14.483686377020444 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 14.37312336589979 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 14.265630381447929 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.158391395085294 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.051667531331379 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 13.944782802503404 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 13.832855933421367 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 13.722375631332397 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 13.611909063238846 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.501922607421875 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.394776173127003 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.284095462364487 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.171804547309875 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.061408346081958 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 12.951087765577363 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 12.842507144054734 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 12.73495272227696 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 12.624068442512963 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.513333270716112 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.402972835233843 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.299092639576305 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.189381757479035 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.07730089293586 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 11.96621617118081 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 11.857000786325207 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 11.746089007264825 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.634325595612221 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.523624282134207 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.411434710025787 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.299343436034684 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.188227595115196 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.077064369664047 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 10.966367483139038 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 10.857268470348698 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 10.745652759776396 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.634421783743553 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.522527034466084 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.411506357647124 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.301916855686116 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.191998278983286 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.08055677237334 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 9.970008937590713 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 9.86092316020619 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 9.750431475338635 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.639505062784467 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.529745629403443 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.41841210817036 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.308140899824059 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.199326728952341 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.089460059108898 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 8.97844629772639 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 8.868282981279517 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 8.758352438608805 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.649215658834159 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.539072177449212 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.42896381432448 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.318579927567512 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.208660364151001 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.098496940400866 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 7.988019952623863 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 7.878187134861946 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 7.769524017969767 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.660579974834735 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.551835129279216 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.444313901843446 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.335088962899115 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.226241449811565 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.116123861736721 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.005974264705882 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 6.896309716858132 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.788557854251585 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.678547552163653 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.568403414317539 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.45964566190192 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.349722452566658 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.242095845562595 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.133418175909254 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.02381367518984 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 5.913973174683035 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.806260332769277 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.697998059762491 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.588166988936047 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.478031396865845 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.367880331759421 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.25792172080592 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.148618160509596 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.039111242665872 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.929787205111596 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.820346159812732 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.710209718935049 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.600319162199768 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.490310736422269 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.3805349469184875 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.2708306179283575 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.16130475644712 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.051503196084426 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.9415146781177057 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.8318826213027495 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.7222889561250985 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.6125398867144556 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.5027563004266646 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.392908417966944 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.2833114511826462 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.173941640128866 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.064316455707994 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.9545988816057327 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.8452488115464134 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.735936198915754 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.626752669161016 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.517831958619888 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.4086246061860845 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.299321698076898 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.1897822750939264 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.0801266886252723 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.9704499428088849 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.860900123262666 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.7517667231352432 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.6422284680443842 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.532643969340991 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.4232421189068474 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3137229351287192 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.204312068444711 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.0947794161344828 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.9852507089445104 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.8758232295513153 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7663457961897775 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6568491630947467 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5473577120365241 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4378835717026068 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3284081650264372 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.21900283688246602 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.10951717534855981 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   21.9s finished

    1965 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  57.920 seconds)

**Estimated memory usage:**  1853 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
