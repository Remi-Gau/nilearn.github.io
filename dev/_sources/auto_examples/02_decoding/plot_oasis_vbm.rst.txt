
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f394d276a00>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 239.96591567993164 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 37.556036710739136 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 35.08129620552063 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 34.3909170627594 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 33.658363819122314 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 33.20615816116333 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 32.87337803840637 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 32.54908459527152 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 32.27593231201172 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 32.02832682927449 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 31.79427695274353 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 31.558819770812992 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 31.391225576400757 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 31.189549831243664 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 30.983483280454365 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 30.810444513956707 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 30.617347836494446 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 30.478450761121863 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 30.329442501068115 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 30.144179770821022 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 29.98626208305359 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 29.798380931218464 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 29.626319863579493 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 29.443137521329135 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 29.27264626820882 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 29.13405966758728 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 28.99199289541978 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 28.842977356027674 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 28.69859334400722 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 28.56235308482729 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 28.397155046463013 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 28.22643293103864 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 28.06821709871292 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 27.917828711596403 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 27.77827323184294 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 27.617758308138168 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 27.521055539449055 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 27.38805882995193 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 27.247496968821476 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 27.09238255940951 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 26.933975219726562 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 26.77892805890339 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 26.838727530978975 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 26.683084499004273 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 26.517153934998944 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 26.358067168129818 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 26.203109596086588 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 26.04170488296671 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 25.876123627026875 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 25.712822831406886 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 25.551771640777588 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 25.40364293491139 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 25.25121257855342 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 25.09344705995524 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 24.941335722252173 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 24.777255101637405 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 24.603261402675084 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 24.43613006775839 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 24.278456227532747 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 24.118786011712025 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 23.951423803965252 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 23.795592538646012 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 23.66114431811917 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 23.509816101619172 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 23.358880758285522 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 23.19231627537654 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 23.023827877911653 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 22.856035072412062 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 22.697486568899716 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 22.540125573890798 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 22.37968226841518 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 22.21287490952183 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 22.0562138027615 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 21.885070559096665 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 21.711289914878638 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 21.53976877530416 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 21.372430312006095 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 21.199659486869713 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 21.028045849922375 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 20.856930581829214 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 20.683597326278687 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 20.515043500029012 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 20.350678065928015 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 20.18020067444767 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 20.009526559284755 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 19.843166070825916 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 19.670145866482756 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 19.50601174913604 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 19.336206002668902 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 19.165897808717876 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 18.993910259670685 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 18.82394349182045 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 18.652194562165636 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 18.486072378773844 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 18.322351658597906 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 18.151534569890877 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 17.981547951698303 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 17.81381150619271 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 17.64919815258104 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 17.480179423033587 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 17.31293797492981 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 17.142561258655963 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 16.97668070419162 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 16.805423044463964 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 16.636049564068134 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 16.464008921668643 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 16.294989342959422 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 16.12032509518561 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 15.94609030087789 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 15.774155282099313 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 15.602792371403089 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 15.43207108437478 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 15.26084097794124 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 15.087571285467233 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 14.915013944893554 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 14.74528954340064 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 14.570848086784626 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 14.399489582094372 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 14.232045343366721 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 14.058677288664489 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 13.887365500132242 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 13.716754523190586 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 13.5602958006937 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 13.389504735062761 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 13.216607247629474 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 13.042078828811645 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 12.86821092121185 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 12.69442287955697 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 12.520301029086113 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 12.345555484756943 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 12.171811012121347 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 11.998474992868553 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 11.825757308439774 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 11.653266738231917 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 11.479037398722634 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 11.305689829367179 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 11.133800170000862 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.95914560860961 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 10.785851406014483 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 10.61181496030135 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 10.437633889062063 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 10.26332639633341 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 10.088345416834656 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.913544794896266 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.74018899599711 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 9.566752228243598 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 9.393460280274692 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 9.22259469908111 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 9.052530578664832 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.881835719883043 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.711395025253296 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 8.540014192758017 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 8.368551003305535 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 8.197942576377221 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 8.026584213430231 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.854935207674581 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.68296314508487 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.5115079515299215 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 7.340394149852703 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.168794321564008 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.9953983426094055 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.821156603949411 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.647497653961182 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.473436345351986 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.299133225185115 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.125041824398619 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.9507144617747105 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.775963293578097 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.600881440298898 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.425605587705353 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.251467536477482 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.077775270618193 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.902083585428637 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.727036323161483 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.55210944427841 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.37694525718689 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.20173839005557 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.026241765857416 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.8506448188524565 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.67535143191588 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.500183343887329 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.3250631390355565 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.1497845885517832 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.9747514177541268 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.799780161484428 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.6248234478203027 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.4496677357663392 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.274500900411351 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.099423936072816 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.9244266792579932 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.7494331410056665 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.5744983600696345 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.3994797964890797 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.2244883596588292 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.049511784130765 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.8745518280909611 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6995646856269058 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5246348477862208 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.34975496205416595 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.17486121187258005 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   35.0s finished

    1978 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  19.844 seconds)

**Estimated memory usage:**  1872 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
