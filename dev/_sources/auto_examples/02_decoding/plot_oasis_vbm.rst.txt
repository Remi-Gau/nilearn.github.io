
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fc2b041e430>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 181.11705780029297 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 30.59851598739624 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 28.28194785118103 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.36953934033712 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 26.89905023574829 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 26.484073877334595 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.232073148091636 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.031169073922296 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 25.796648025512695 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 25.59129492441813 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 25.426191329956055 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.23655739697543 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.05950848261515 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 24.881526635243343 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 24.755690676825388 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 24.60803023974101 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 24.469669699668884 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 24.362382552203012 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.21201999982198 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.06048493636282 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 23.91483736038208 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 23.768354881377448 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 23.62281625921076 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 23.4813273574995 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 23.354473749796547 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.220977067947388 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.17083477973938 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.023016655886615 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 22.87745124953134 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 22.773520206582955 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 22.640799681345623 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 22.498394935361798 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 22.354411840438843 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.219438249414615 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.085031186833103 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 21.94529547010149 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 21.809433963563706 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 21.66614082052901 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 21.53949959654557 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 21.39846684993842 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.267638206481934 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.134131699073606 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 20.99309832709176 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 20.85503581512806 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 20.732397404584017 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 20.60168766975403 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 20.466731641603555 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.329944255504202 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.196217894554138 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.05978791567744 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 19.922853469848633 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 19.78701601776422 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 19.655422137333797 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 19.518552667689775 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.389311922921074 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.262200463901866 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.133232389177596 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.001949109529193 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 18.87191318643504 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 18.73948055202678 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 18.611021757125854 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.475370864399146 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.342575773116078 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.212355507744682 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.079760193824768 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 17.94592435543354 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 17.813210639086638 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 17.68329891162132 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.554078691145953 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.417020583498307 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.28105047770909 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.146128547023718 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.013577779134113 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 16.888971073986735 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 16.763870948069805 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.632721026738487 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.50703642242833 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.36947823809339 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.238853613535564 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.103692576855043 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 15.967698097229004 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 15.833391366181552 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 15.702128346373394 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.56722667705582 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.434160073598227 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.301243683871101 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.16537276534147 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.030956934238302 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 14.894859357313676 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 14.7616796172067 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.627500110202366 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.492643985119495 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.358243164808854 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.224486745813843 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.089577685011193 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 13.954989571320384 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 13.819657385349272 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.686296907896848 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.552005748359525 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.416768733901206 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.282456636428833 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.148746915382914 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.01366050570619 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 12.879760013043303 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 12.74676770430345 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.613523630868821 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.480330174823978 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.347278358780335 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.213896989822388 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.079441013686154 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 11.945567998019133 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 11.811941408896232 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.681170906339373 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.55148582542892 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.417597038704052 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.28460953546607 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.151879417485205 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.019404148444151 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 10.886849799398648 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.755536454064506 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.62506357828776 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.491585089155466 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.358189387399642 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.225941752999779 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.093913370563138 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 9.96252851486206 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.829817465373448 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.697264414133988 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.564201056957245 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.43084527725397 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.2981363259829 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.16523377767956 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.032665888468424 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 8.899941222111982 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.767154878644801 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.633738888634575 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.50112948698156 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.3695467945433 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.237518628438314 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.104093493317528 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.970760686056954 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.8381106549120965 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.706039942486186 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.57339587745133 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.440231018596226 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.30762951949547 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.174887745347741 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.041553633553641 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.909407912073909 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.776242881813306 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.643355846405029 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.51056624564114 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.3773302279020605 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.243977478127075 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.110856433967491 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.9777060554873565 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.844408677174495 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.711955712859038 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.579293483420263 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.446320017928597 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.313091516494751 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.180121749084188 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.04696805977527 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.914007568651913 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.781141089230049 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.64988390604655 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.517544858426933 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.384545303390412 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.2517150697254 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.118734181985347 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.985938675263349 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.852841251774838 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.720138549804688 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.5874608706876723 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.454525448810095 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.321543250765119 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.1886337453668765 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.055747575005569 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.9228760392478343 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.790041117694791 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.657465934753418 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.5247862246813693 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.391892488186176 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.259007770507062 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.1260536649952764 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.9932221270896293 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.860301345907232 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.72745817230347 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.5946102243788698 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.4617458171945399 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.328940567217375 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.196051823531146 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.063168297211329 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9302289424164925 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.7973494505144887 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6645180812248817 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5316127952264279 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3986953769238467 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.26579754521148374 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13291209187339897 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   26.6s finished

    2004 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  6.518 seconds)

**Estimated memory usage:**  1887 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
