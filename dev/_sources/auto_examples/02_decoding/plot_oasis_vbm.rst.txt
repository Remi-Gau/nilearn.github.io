
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-90

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 148-150

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 150-163

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-166

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f4d757b9340>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-229

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 366.03689193725586 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 57.667054414749146 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 53.46627473831177 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 46.29654494921367 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 42.01922106742859 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 39.50161671638489 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 37.831127961476646 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 36.53561500140599 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 35.781789779663086 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 34.923280477523804 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 34.179736614227295 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 33.57964676076716 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 33.03206483523051 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 32.55861286016611 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 32.34820798465184 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 31.965956449508667 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 31.609004259109497 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 31.250494227689856 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 30.90603298611111 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 30.65497950503701 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 30.370307207107544 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 30.19534746805827 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 29.93165527690541 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 29.663834810256958 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 29.40899896621704 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 29.160151720046997 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 28.896201225427482 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 28.761977036794026 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 28.520136799131123 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 28.2864794155647 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 28.05300498008728 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 27.823048014794626 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 27.604521989822388 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 27.39371388608759 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 27.244185559889853 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 27.060201236179896 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 26.84214448928833 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 26.631251592893857 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 26.42793326628836 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 26.21835999611097 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 26.050341606140137 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 25.852054665728314 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 25.647795166288102 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 25.443814366362815 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 25.24866381558505 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 25.05439345041911 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 24.854399038397748 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 24.7052836722516 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 24.51650579770406 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 24.32714745463157 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 24.13328504562378 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 23.946069048900227 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 23.762414895571197 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 23.57837072408424 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 23.43269524750886 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 23.255878058346834 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 23.07832043511527 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 22.894155841124682 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 22.729136228561398 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 22.554469282344236 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 22.404550393422447 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 22.228406347212246 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 22.049464679533433 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 21.874074133615643 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 21.705723732709885 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 21.52815050345201 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 21.350552009813715 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 21.20963535024159 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 21.03423365424661 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 20.859409380650174 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 20.688813822610037 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 20.518249380756433 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 20.346098158094616 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 20.17623259270028 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 20.0341279313371 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 19.86260255177816 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 19.6962756106728 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 19.531124687814092 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 19.36515652216398 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 19.197102069854736 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 19.05163013935089 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 18.88536352875792 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 18.71916191752364 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 18.55329388308238 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 18.384436925252277 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 18.21682833222782 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 18.05115909909093 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 17.90482405410416 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 17.74065607244318 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 17.575545088628704 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 17.4103782441881 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 17.247757474144738 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 17.08118117373923 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 16.93210248024233 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 16.767291419049528 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 16.604599789569253 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 16.442639331022896 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 16.285982832466203 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 16.1285350128096 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 15.972145297310568 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 15.820833683013916 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 15.658413450316628 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 15.493867766623405 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 15.330880095657793 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 15.167357518122747 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 15.004336833953857 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 14.858832417793995 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 14.696556015549419 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 14.534631031530875 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 14.372369070665552 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 14.20855671709234 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 14.046279677399644 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 13.887774212019783 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 13.739553217339305 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 13.576885637484098 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 13.414252643999845 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 13.254246144459165 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 13.094965641315166 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.934852551605742 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 12.774109095084567 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 12.621678352355957 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 12.458891259737252 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 12.29678640990961 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 12.136551765891594 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.97405852810029 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.814126205444335 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.661886657987322 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 11.502306842428492 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 11.343361526727676 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 11.183562572612319 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 11.024898785811203 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.865972167662992 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.706838304346258 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.563075893803648 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.403151885787052 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.245899739088834 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 10.087789086734547 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.928144418410142 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.767562586328257 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.615389048624381 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.45587600980486 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.296257894935337 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.136973357536423 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.97822778541725 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.81965947151184 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.660779879010956 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.506944728224244 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.344366195250531 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.182184277354061 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.020544821784 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.859514872233072 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.700753788284908 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.54271303979974 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.388992429558749 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.231083941150021 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.072763050756147 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.915603631582016 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.758966306212601 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.6009162136271025 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.446019477064505 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.289043188095093 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.131521469317608 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.973735485547854 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.8173382721064275 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.660128459697816 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.50392745480393 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.349565939730908 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.192143434535957 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.034717650640578 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.877413839983516 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.720026465023265 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.562065871835451 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.406349065691926 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.248493012665325 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.090775563799102 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.9324518612452914 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.7745499502528794 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.617050304251202 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.459378030862701 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.30297907770679 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.1449083222283254 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.987306864880725 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.8298929052038506 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.672314402835617 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.5147736798162046 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.3583653424237228 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.20080223391133 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.0433406562091196 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.8858430030498097 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.728261353477599 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.5709478353199204 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.4137117538152566 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.2570192317167916 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0997965508792067 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9426162095413995 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7854397541437393 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6282807612905696 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.47116408614337746 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3141809762126268 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.15709091191315772 seconds remaining)
    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 21.268 seconds)

**Estimated memory usage:**  1941 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
