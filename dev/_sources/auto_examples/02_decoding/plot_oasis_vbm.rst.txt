
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f3acf2d75e0>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 196.6714859008789 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 30.428234815597534 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 28.265425443649292 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.65579644838969 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 27.405019760131836 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 27.239534854888916 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.934697866439823 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.666699000767302 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.531272888183594 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 26.4469276799096 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 26.231653213500977 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 26.165107141841546 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.969573497772217 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.789907217025757 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.6328707081931 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 25.456607341766357 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 25.312799334526062 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 25.149037136751065 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.999858087963528 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.856435650273376 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.721394777297974 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.59173300152733 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.457471739162102 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 24.33149217522663 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 24.203982512156166 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 24.071510553359985 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.93346641613887 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.786136424099958 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.640117951801848 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.494527364599293 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 23.360923528671265 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 23.239240646362305 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 23.107246577739716 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.966559532916907 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.823859004413382 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.684349502835957 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.54371478822496 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 22.406216292767912 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 22.26313191966007 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 22.120085630661404 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.982548713684082 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.8472914579438 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.708033550353278 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.56440167094386 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.431273850527678 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 21.290324608484905 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 21.14639883456023 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.998310474639243 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.85179797808329 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.70793084222443 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.56363320350647 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.411170809876683 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 20.263049584168655 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 20.115072227873892 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.967450671725803 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.83397837118669 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.69005959374564 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.542397750051396 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.39748851184187 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 19.248221154940328 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 19.098087310791016 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.953349000117818 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.811509755349928 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.66533855786399 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.52349430322647 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.3812275666457 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.236661268003058 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.097092133849415 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.949209984611063 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.80351377570111 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.660052844456263 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.521105225657074 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.379881964789497 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.239828968701296 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.098793139328826 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.958712339401245 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.823046157234593 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.68475195959017 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.54552676127507 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.40558235856551 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.268364429473877 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.128732810785742 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 15.990459936421091 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.84875283471073 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.708318188076927 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.566660923116348 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.425805662953575 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.28382889977817 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.14371715892445 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.0041583200519 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.864760425355701 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.7259523161165 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.588987122411314 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.451967539325839 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.314924412585318 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.177383548335026 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.04047683874766 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.903382805204883 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.76699219431196 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.630688667297362 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.498818397521973 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.360456445429584 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.2238169557908 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.087856771876512 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 12.952767518850473 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.81877537000747 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.68712453122409 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.55060680113106 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.41426588870861 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.299993121295893 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.163719762455335 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.028393661653674 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.890627826963152 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.753719245438027 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.61874989041111 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.483987766763438 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.348349834310598 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.212184889703735 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.076138847965305 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.940103899531005 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.806016127268473 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.671502793130797 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.53642653246395 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.400753302302787 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.266832782376197 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.132073879241943 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.997420825655498 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.861431178145521 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.725238338112831 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.589517842891604 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.454540105966421 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.320157132985937 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.184323780464403 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.050320759751743 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.91565480161069 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.780335585276285 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.645793466007008 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.511323632985135 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.377650461335113 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.2433389313787 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.107832499912806 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.973198824740471 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.8387363863662936 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.704201596600193 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.568577395545112 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.4349655529548375 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.300662919266583 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.166196099754905 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.031126750482096 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.8951098886912305 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.760294516881307 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.625765701003422 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.490424131092272 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.355273982278662 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.219600182075005 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.084638218725882 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.949922506625835 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.814695042409714 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.679082677334169 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.543806845287107 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.417803466320038 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.282383567798212 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.146563550572337 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.01066417343046 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.875086545944214 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.739516727852099 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.603795700762645 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.468379867291023 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.33290467943464 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.1969592655904195 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.061418308931239 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.9258313485753464 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.790392548538918 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.6549089078958326 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.519078764422187 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.3833746910095215 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.2479335178028452 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.1124881539641125 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.9771074311117105 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.8414812714027957 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.706341875924004 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.570677526747983 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.4352923749567386 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.2997733230799273 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.1641305425892705 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.028733298585222 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.8934130258457635 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7580845496233772 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6227669056425702 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.4878169329708846 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3525288983395225 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2172881670647266 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0819916327794392 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9467214475641595 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8114620434869196 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6762478779523801 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.541071453872992 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4058201446145924 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2705327139960395 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13526744459142637 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   27.0s finished

    1963 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  7.787 seconds)

**Estimated memory usage:**  1902 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
