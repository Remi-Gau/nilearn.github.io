
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print("")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f30eb86e340>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 195.97768783569336 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 41.12330627441406 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 39.153573989868164 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 38.08955804506938 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 37.50180459022522 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 37.083717584609985 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 36.76766657829285 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 36.4541951247624 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 36.20679473876953 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 35.964181847042504 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 35.783339977264404 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 35.55128340287642 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 35.40238221486409 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 35.255388718384964 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 35.06009643418449 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 34.88275774319967 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 34.69016671180725 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 34.54668596211602 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 34.39548998408847 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 34.20157377343429 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 34.00247526168823 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 33.80238293466114 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 33.569574767893016 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 33.33861301256263 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 33.10592699050903 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 32.850383043289185 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 32.62709338848408 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 32.41385663880242 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 32.19517230987549 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 31.9703354506657 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 31.736988703409832 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 31.54168057441711 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 31.341427445411682 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 31.13883630434672 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 30.932188973707316 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 30.74755188396999 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 30.55931266148885 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 30.345834674061955 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 30.136326200083683 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 29.94958439240089 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 29.759522438049316 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 29.5540441012964 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 29.363059815906343 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 29.15651577018028 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 28.959870295091108 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 28.772204637527466 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 28.579362247301187 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 28.401207903598216 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 28.212854584058125 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 28.02741747486348 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 27.84068727493286 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 27.668184191572898 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 27.49289707037119 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 27.31578455781037 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 27.133839889808936 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 26.950566291809082 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 26.771858351571222 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 26.58627290474741 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 26.399449817065534 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 26.214811175556505 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 26.03818996747335 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 25.86215292821165 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 25.677957173316706 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 25.49078163268074 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 25.303211599588394 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 25.11660597874568 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 24.93416002302459 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 24.75095389850104 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 24.58161260099972 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 24.40747424485027 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 24.225809267589025 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 24.044537896841344 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 23.867985195583767 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 23.68884654894267 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 23.505057470218553 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 23.317797581354778 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 23.139884961278813 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 22.948972287116113 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 22.76276046801836 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 22.57938622221162 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 22.38424801826477 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 22.18826824647409 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 21.991327617226577 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 21.795532059956745 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 21.604365848359606 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 21.411569286795224 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 21.218154696531073 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 21.02942115136947 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 20.84304683858698 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 20.64787617694126 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 20.45453829235501 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 20.263092478553016 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 20.071083877397623 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 19.876754306977798 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 19.687287056699713 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 19.49947342119719 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 19.306169966856636 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 19.11393421704007 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 18.927683815664174 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 18.743744257724643 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 18.555155515670776 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 18.368263091191206 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 18.179284965290744 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 17.99168661034223 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 17.805218256436863 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 17.61703770501273 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 17.459945930624908 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 17.276456988860513 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 17.098687224917942 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 16.917877442246184 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 16.73587820746682 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 16.55224446348242 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 16.370993903705052 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 16.19075890346966 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 16.008364986955073 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 15.825907852338707 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 15.644266087433387 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 15.461237116756603 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 15.276007102707686 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 15.091427167924513 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 14.905662377675373 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 14.720855720772231 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 14.534952128519778 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 14.34870780580412 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 14.163892753662601 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 13.978141736984252 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 13.794471581776937 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 13.610125920903965 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 13.424586743116379 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 13.237871197767035 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 13.05175913297213 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 12.86522085248059 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 12.677439277822321 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 12.488516992196105 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 12.299746951060508 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 12.110336188916806 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 11.92100356606876 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 11.731523538157887 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 11.543682661609374 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 11.356337667369155 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 11.169026919773646 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 10.980551418683207 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 10.792216626691147 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 10.603624530605503 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 10.416011187765333 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 10.226493588809308 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.037679061497727 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 9.848468967035515 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 9.660870951575202 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 9.472791434934475 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.286470731099445 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.098476176230323 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 8.911729837718763 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 8.726414722554825 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 8.5419574434107 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.354374154921501 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.168438483507206 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.983366779461028 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 7.798205789131454 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.614082325929366 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.427897870540619 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.241784682185013 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.055737577838662 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.8697568214744145 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.684118195277889 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.498283769145156 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.312676507306386 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.127197028634077 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.941782088506789 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.756141184349737 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.571335834615371 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.3864859070694235 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.200840733772101 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.0152351732198905 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.829290505113273 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.644037927900041 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.458161538297479 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.272447771945242 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.086868452222159 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.9011331656791643 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.716495487425062 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.530694048707656 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.344922120754535 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.159777285622769 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.973959321561067 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.7881542025385677 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.6022026487576064 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.416255797931855 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.2302997416638313 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.044244828047576 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.8581769466400146 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.6723364135981855 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.486240247885386 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.3002531923778315 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.1143571494780866 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.9285279359572973 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.7429486391495684 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5572385461197287 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3714586123071536 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.18570229396149143 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   37.1s finished

    1949 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  58.935 seconds)

**Estimated memory usage:**  1884 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn.github.io/main?filepath=examples/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
