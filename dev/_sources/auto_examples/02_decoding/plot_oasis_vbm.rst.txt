
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f4931e77160>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 199.1748809814453 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 34.84477519989014 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 31.929953813552856 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 30.782439867655437 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 29.904340982437134 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 29.350375413894653 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 29.032303810119632 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 28.90510140146528 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 28.837406158447266 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 28.514654133054943 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 28.298879146575928 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 28.106601996855304 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 27.887906312942505 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 27.776668218465954 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 27.671693597521102 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 27.48319999376933 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 27.331026434898376 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 27.684632020838123 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 27.502316527896458 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 27.291625198565033 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 27.075303554534912 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 26.883099817094347 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 26.677823565223004 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 26.485120483066726 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 26.39208952585856 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 26.235328435897827 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 26.064934785549458 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 25.93203000669126 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 25.812409605298726 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 25.61339679257623 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 25.44991159439087 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 25.303518295288082 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 25.13170462846756 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 24.977888815330736 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 24.808767613242658 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 24.648154531206405 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 24.48684967888726 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 24.311146098214227 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 24.15851204018844 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 23.99858990693704 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 23.82706928253174 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 23.665720416278372 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 23.519279139382498 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 23.358348912970964 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 23.193458513780072 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 23.027814944585167 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 22.84596950074901 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 22.690264539515717 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 22.526495933532715 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 22.362677759053756 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 22.20695471763611 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 22.07537531852722 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 21.917809302990253 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 21.754768326597393 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 21.59282930692037 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 21.45790654962713 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 21.295265129634313 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 21.133066378141702 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 20.969205634347322 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 20.82778975519083 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 20.678389390309654 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 20.52004080522256 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 20.376440232799897 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 20.217729371691505 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 20.05563795566559 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 19.89667186370263 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 19.743381579717 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 19.590079521065327 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 19.44162722194896 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 19.293088646902554 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 19.144824811390468 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 18.995496592051545 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 18.84015401204427 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 18.693537225461988 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 18.549797464061427 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 18.39415192604065 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 18.248307177894993 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 18.103776770752745 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 17.952087805821346 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 17.802416369884828 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 17.666908979415894 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 17.515135011555238 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 17.369543732666386 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 17.222144055079266 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 17.070669230960664 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 16.92145975898294 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 16.78186373932417 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 16.628602622569293 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 16.47565594586459 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 16.336227998304903 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 16.193827841016983 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 16.043474076868414 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 15.888065379598867 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 15.750103460845128 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 15.603333731915088 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 15.449960984681784 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 15.296246568361918 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.145545917687956 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 15.00111857239081 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.853440108925405 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.702770709991455 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.550950593287402 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 14.401144616744098 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 14.2561154921078 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 14.109234149639423 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.957090434573946 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.813621979839397 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.668936132270598 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.520871833518699 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.376923766704873 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.232161630283704 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 13.088132695034817 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.936710153307233 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.787830762103596 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.635332345962524 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.485489783079727 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.339081386039997 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.19707751681662 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.059458651785123 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.90825561916127 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.758069356282551 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.611020567003361 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.462643467012 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.312102137542352 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.167701467390984 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.01927924156189 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.871658514416408 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.722252034765528 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.573265388607979 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.43174640337626 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.285640569833609 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.140449469326107 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.993970885421291 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.849466069300373 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.70353420100995 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.556458473205566 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.410637462840361 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.26546277617016 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.117950536202693 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.970879499860805 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.821983984538486 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.68679214538412 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.54131367844595 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.396287024437964 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.249191734525892 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.100844712092957 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.955040115199677 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.8072721276964465 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.659634184192967 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.512579999514074 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.367489496866861 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.218606759380821 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.069574983496414 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.920879239350363 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.773007281414874 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.625450326550392 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.477046214617215 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.328831350727445 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.181269180925586 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.033124145471825 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.884599804878235 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.739016722448124 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.591266408378695 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.4448569186626035 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.296521087972129 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.147545142607256 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.999291468815631 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.852244909651979 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.707219714210146 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.560324659008951 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.412504616905662 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.26518908718176 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.1179588450941935 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.970435219693046 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.8225104918425115 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.6747475011008124 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.528202804652127 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.3813124807540977 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.2341790895783498 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.0872662506955963 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.940555307600233 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.7931001713262735 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.6462389767824948 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.498776925717547 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.3519856411477793 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.204839525996028 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.0580609793304117 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.9111253093270695 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.764067563604801 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.6167447466068166 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.469652778223941 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.3227961587656232 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.1757300396760304 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0287189384816222 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.881791104975435 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7346989069229517 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5877619324898232 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4407281173667327 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.29379082689381614 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.14689964385487925 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   29.4s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  16.524 seconds)

**Estimated memory usage:**  1857 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
