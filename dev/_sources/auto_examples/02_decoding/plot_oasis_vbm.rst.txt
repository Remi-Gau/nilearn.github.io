
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (:term:`VBM`)
to study the relationship between aging and gray matter density.

The data come from the `OASIS <https://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard :term:`VBM` pipeline (using SPM8 and
NewSegment) to create :term:`VBM` maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the :term:`ANOVA` step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the :term:`ANOVA` step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

:term:`SVM` weights are very noisy,
partly because heavy smoothing is detrimental for the prediction here.
A standard analysis using mass-univariate :term:`GLM`
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 112-123

Prediction pipeline with :term:`ANOVA` and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

In nilearn we can benefit from the built-in DecoderRegressor object to
do :term:`ANOVA` with SVR instead of manually defining the whole pipeline.
This estimator also uses Cross Validation to select best models and ensemble
them. Furthermore, you can pass ``n_jobs=<some_high_value>`` to the
DecoderRegressor class to take advantage of a multi-core system.
To save time (because these are anat images with many voxels), we include
only the 1-percent voxels most correlated with the age variable to fit. We
also want to set mask hyperparameter to be the mask we just obtained above.

.. GENERATED FROM PYTHON SOURCE LINES 123-149

.. code-block:: default


    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 150-152

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 152-165

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-183

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f080dfbf3a0>



.. GENERATED FROM PYTHON SOURCE LINES 184-186

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 186-231

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 211.1983299255371 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 37.570934534072876 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 34.47544312477112 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 34.34080171585083 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 33.26973342895508 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 32.725341796875 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 32.23332619667053 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 31.879299947193694 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 31.524078369140625 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 31.65769346555074 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 31.364878177642822 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 31.052226370031185 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 30.799185037612915 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 30.574053635964027 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 30.368935244424005 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 30.337321678797405 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 30.10104787349701 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 29.868417978286747 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 29.66589167382982 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 29.483375285801138 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 29.301496267318726 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 29.14288570767357 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 28.988409302451398 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 28.793140566867333 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 28.630464871724445 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 28.44971489906311 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 28.286343867962177 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 28.12702820919178 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 28.047065632683893 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 27.89320482878849 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 27.709318319956463 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 27.544889034763457 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 27.368842363357544 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 27.199289213527333 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 27.078825010972867 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 26.90835244315011 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 26.735111898846096 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 26.560107456671226 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 26.439521425648742 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 26.267088773923046 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 26.226152420043945 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 26.068699278482576 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 25.89419821330479 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 25.713561246561447 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 25.533728469501842 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 25.35386429892646 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 25.21329925371253 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 25.032966705078774 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 24.869170943895973 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 24.717631957968887 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 24.55685806274414 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 24.403386779859954 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 24.291564354529747 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 24.144432657169848 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 23.988730209845084 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 23.81143476746299 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 23.64484405517578 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 23.465852996759246 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 23.291526424473727 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 23.150905293933416 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 22.983602364857994 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 22.812231509411923 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 22.63768188415035 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 22.520269166855584 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 22.35238265991211 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 22.2086223088778 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 22.03505531946818 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 21.86926418631824 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 21.69446905921487 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 21.52162059839221 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 21.356156791959492 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 21.198211186368702 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 21.02793460422092 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 20.860111053675823 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 20.68551633809064 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 20.52545507748922 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 20.35828026972319 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 20.21111299465229 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 20.037837823232014 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 19.86778018746195 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 19.69681406021118 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 19.52408865057392 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 19.352465507460803 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 19.181400301944777 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 19.028471503938945 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 18.864201181075153 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 18.697998146678124 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 18.529711082063873 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 18.378731727600098 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 18.214466194088537 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 18.06420954068502 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 17.893578801836284 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 17.72910845797995 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 17.563631088502948 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 17.394657018336844 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 17.22568394008436 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 17.07110430796941 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 16.90311727572962 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 16.734477237779267 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 16.56657665185254 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 16.400956392288208 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 16.265175614026514 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 16.108777616538255 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 15.943442041434132 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 15.77502778860239 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 15.608379965736752 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 15.445368645326147 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 15.278717012048881 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 15.12123739277875 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 14.952226155394808 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 14.787492708726363 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 14.622805457931381 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 14.458653926849365 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 14.295152607217299 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 14.141462137824611 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 13.973768192788828 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 13.804884466631659 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 13.63830783835843 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 13.470353474051267 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 13.30494029381696 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 13.137954711914062 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 12.98126038243948 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 12.81588062302011 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 12.648709981422114 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 12.48035559346599 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 12.313426208496093 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 12.146534836481488 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 11.98431903921713 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 11.81798592209816 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 11.650230001109515 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 11.483491494105412 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 11.331616767490184 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 11.164572152224453 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 11.005847830521434 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.840350289842975 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.672441094009963 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 10.506308611701517 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.340051985135043 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 10.173203768937483 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 10.010387437806713 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.844719069344656 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.6788826056406 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.51307660425213 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.346712535911507 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.181317541334364 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 9.015547801708353 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.854879999813967 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.689827880080866 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.52794850839151 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.361726565649045 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.195884545644123 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 8.030606992986819 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.867918215299907 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.70261212423736 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.538862352247362 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.373922309567852 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.208432472669161 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.042976844082972 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.881727933883666 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.716446068301891 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.551222026348114 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.386751585125183 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.222376496703536 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.057711519346647 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.893600335935267 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.730834274580984 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.566268805997917 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.401740044176935 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.237359591892787 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.073607340366882 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.909294366836548 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.747421236763223 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.583480879317883 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.418817837114279 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.254275557638585 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.090239695140293 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.9260964827104043 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.763093550999959 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.5990471250555487 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.4350114907632325 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.2711984316507974 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.107623117404748 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.943734132326566 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.780254481268711 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.6177365676216455 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.454201801403149 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.2907468862431024 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.1270545829426157 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.9631255028095649 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.799118753463503 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.6357944513622082 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.4722277581379677 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.3086323936780293 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.145091044470436 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9813504047000532 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.8176734264080341 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6544038519567372 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.49072898462944226 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.32713381931035207 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1635626428690388 seconds remaining)
    1947 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 12.594 seconds)

**Estimated memory usage:**  1903 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
