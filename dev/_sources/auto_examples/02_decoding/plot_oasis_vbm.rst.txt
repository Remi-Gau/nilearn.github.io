
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f635ce69400>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 201.64251327514648 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 36.30514144897461 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 33.997544288635254 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 33.43135142326355 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 32.9768762588501 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 32.856029748916626 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 32.71664134661357 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 32.63538203920637 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 32.50800132751465 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 32.367711040708755 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 32.22522950172424 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 32.03412847085433 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 31.839549620946247 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 31.680302656613865 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 31.521794455392023 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 31.361149390538536 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 31.230217218399048 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 31.075866601046396 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 30.888538704978092 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 30.7102572039554 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 30.52510929107666 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 30.36806911513919 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 30.163045449690387 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 30.1115025230076 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 29.92839002609253 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 29.755227088928223 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 29.60292726296645 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 29.427550563105832 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 29.260356017521453 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 29.0619603518782 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 28.860105991363525 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 28.668124545005057 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 28.48388957977295 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 28.29140081550136 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 28.09848999977112 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 27.916158608027867 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 27.719700945748222 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 27.643563277012593 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 27.453619028392595 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 27.282927641501797 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 27.11100673675537 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 26.925329045551578 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 26.741826488858177 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 26.55851870913838 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 26.37198426506736 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 26.1878998014662 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 26.00840459699216 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 25.83517319090823 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 25.637260715166725 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 25.45143938551144 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 25.26684880256653 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 25.083417920505298 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 24.904906768065235 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 24.722014647609782 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 24.54620072576735 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 24.373170830986716 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 24.19873952865601 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 24.016428709030148 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 23.84015204988677 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 23.663785348504277 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 23.48859445254008 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 23.314187925370014 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 23.14935101232221 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 22.973539965493337 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 22.797797799110413 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 22.61964797973633 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 22.44970424969991 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 22.277318904648965 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 22.105380408904132 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 21.937158062838126 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 21.769574914659774 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 21.60378531670906 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 21.432343377007378 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 21.263775387855425 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 21.088029384613037 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 20.917970339457195 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 20.742403682909515 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 20.57152777832824 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 20.401453005961883 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 20.234769317168222 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 20.061535477638245 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 19.886209982412833 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 19.72446546321962 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 19.556088278092535 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 19.39125439098903 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 19.22682442384608 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 19.060425464497055 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 18.888097253339044 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 18.7160476771268 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 18.547422730520868 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 18.374047226376007 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 18.20174120284699 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 18.032088176063873 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 17.865300545128445 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 17.693676197782477 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 17.523879402562194 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 17.356009364128113 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 17.18567826084255 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 17.01777241667923 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 16.84926644961039 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 16.682339906692505 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 16.513458790165362 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 16.345317527359608 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 16.1778575471304 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 16.008385144747223 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 15.838440316064018 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 15.671867860938018 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 15.5041019225789 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 15.33791845816153 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 15.168006317331157 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 14.999283833937213 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 14.831282712317803 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 14.663445796285357 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 14.494533118948471 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 14.329735960876732 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 14.167015645814978 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 14.00124663320081 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 13.833379676199367 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 13.665613158274505 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 13.496149087152562 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 13.328976949055988 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 13.159700856721107 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 12.990870213899457 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 12.822708693946279 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 12.653312852305751 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 12.484858846664428 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 12.316811387501065 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 12.14835602279723 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 11.981042638421059 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 11.814380061718845 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 11.645935773849487 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 11.476508601021221 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 11.3104035059611 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 11.14265015071496 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.97488061705632 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.810106922079015 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 10.643671708948473 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.477280830814891 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 10.310737191766933 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 10.142504661203288 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.975368193217685 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.80848905380736 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.641500499886526 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.474489427113033 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.309189014964634 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 9.142173199818052 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.9750285311921 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.809468652115388 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.643157933209395 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.477903418892982 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.312541166941324 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 8.144340641451198 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.976540791360955 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.812628471773435 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.646691189183817 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.479502708681169 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.314798446801992 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.148050756211493 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.982060522972782 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.815250329251559 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.648706793785095 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.482536860874721 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.31726978443287 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.151296677033594 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.9852867184615715 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.818311041051691 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.6519629064812715 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.484734118341686 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.318620409284319 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.152782229982184 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.98557820039637 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.819452168648703 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.652772332346717 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.486044066489777 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.319369102346486 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.152999537331717 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.9869573658162896 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.82064474639246 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.6549306692702044 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.489526233193595 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.323665486441718 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.1574597832906313 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.991341349842784 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.8247430090044365 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.6586051194564155 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.4922089447846285 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.326039857761834 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.1597758180954876 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.9935821117238794 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.8272688174373888 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.661004769174676 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.494946714471148 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.3287387788295746 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.1626197649407262 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9964284528162062 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.830281043664003 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.664196880496278 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4981695903739348 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.33209461876840307 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1660410986473812 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   33.2s finished

    1960 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  15.747 seconds)

**Estimated memory usage:**  1829 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
