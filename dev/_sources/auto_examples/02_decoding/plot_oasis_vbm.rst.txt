
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-90

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 148-150

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 150-163

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-166

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7faa9af280d0>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-229

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 283.3294868469238 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 32.382601499557495 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 29.17536163330078 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 28.07830905914307 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 27.503456592559814 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 27.005784273147583 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.694327672322594 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.470432792391097 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.51751708984375 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 26.27441981103685 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 26.422984838485718 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 26.28456824476069 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 26.24471012751261 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 26.025377346919132 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.834134374346053 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 25.776239236195885 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 25.584784507751465 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 25.389221023110785 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 25.193724711736042 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.996115295510545 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.82683777809143 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.644729614257812 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.4632279439406 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 24.396201423976734 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 24.241356372833252 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 24.06299901008606 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.898770735814022 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.73119620040611 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.571718079703196 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.413232828008717 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 23.308138449986778 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 23.148090670185702 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 22.984851837158203 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.87060924009843 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.728724044912003 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.565557888575963 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.411014795303345 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 22.25585833111325 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 22.34302628667731 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 22.191627141756893 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 22.037175178527832 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.883215822824617 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.72628562791007 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.571624251299124 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.4163762439381 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 21.31603206528558 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 21.17214186295219 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 21.025686857548166 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.88105014959971 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.732252962735235 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.580461740493774 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.436234296536913 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 20.295064119192272 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 20.18789769118687 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 20.041133183020133 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.893386537378483 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.745696885245188 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.605311682349754 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.460632990146504 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 19.316511566356077 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 19.202702522277832 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 19.061055136508628 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.985115912652784 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.841340068786863 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.70183292031288 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.559365034103394 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.41780645197088 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.300400819351424 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 18.15731826950522 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 18.020860803300057 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.877307312829153 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.73761747924375 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.597279442681206 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.454666242207566 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.31201419959197 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 17.195123036702476 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 17.05074345438104 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.914919314446387 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.774703386502388 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.63248647013797 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.489113450050354 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.345815693890607 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.220152959591005 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 16.080201128879224 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.93852839015779 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.795942348592423 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.654761918755463 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.513990278901726 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.371743072162975 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.230317667628942 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.104761944876778 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.964843131683685 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.826339669849563 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.687641136107908 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.548571231517386 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.406277129524634 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.265176276365915 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.1382521034516 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.998057019953826 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.860215295444833 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.720605373382568 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.581424366129507 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.441091948864507 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.301403550268377 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.162978539100061 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.041141703015283 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.901785904506468 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.762630346779511 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.624609302591395 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.488098625743062 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.349285125732422 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.212300167427408 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.084684814725604 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.945725552803648 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.804940219511066 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.664902116941368 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.52561955616392 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.384882087381477 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.245796389498954 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.11527699582717 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.975938161214192 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.84047856803768 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.701992957318415 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.564220659131925 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.426011969966273 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.288734912872314 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.151345979599727 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.019653806536216 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.879512831568718 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.740760845731394 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.602447748184204 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.464799314964818 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.326593919233842 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.18954044535644 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.056505096492483 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.918694769894635 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.780256832347197 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.643161700589813 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.505840298058331 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.367317844637864 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.229528767721993 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.09294531700459 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.9606803705994515 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.823383424665544 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.687067442470127 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.549699881981159 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.411648613132842 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.272915298435964 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.135759121662862 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.002857702690483 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.865301609039307 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.727985887337994 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.590564527009662 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.4529336215623845 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.3156744721647975 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.178218656970609 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.043754718242547 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.90531344018924 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.766989744162257 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.628781957446404 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.490754306316376 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.352586380443218 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.214911257779156 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.077735187085859 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.942850345518531 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.806927594271573 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.669895281274634 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.532570857487753 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.395142827715192 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.257313712814151 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.120247840881348 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.9845293139853672 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.846959574278011 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.7097399083176104 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.572224247044531 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.434652464730399 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.2970598177476362 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.1591337158181574 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.021916247485729 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.8852171218595024 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.7474020322163897 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.6096526167010734 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.471754312515259 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.333949483808924 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.196212229521378 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.0586176498516187 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.92225403939524 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7849596413699063 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6476348866807653 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.5102248948717873 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3727878143912866 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2354674663843286 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0982181032498677 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9611828302472366 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8239056867422517 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6865645005152775 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5492044273687868 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.41187010803803575 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2745736030617146 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1372818671279217 seconds remaining)
    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 8.136 seconds)

**Estimated memory usage:**  1895 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
