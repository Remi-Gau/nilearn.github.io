
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fc373669250>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 159.06095504760742 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 27.904287338256836 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 25.72711157798767 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 24.987956603368126 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 24.590644598007202 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 24.271509647369385 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 23.9706768989563 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 23.815728051321848 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 23.63071060180664 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 23.50283352533976 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 23.33015489578247 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 23.208065921610054 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 23.07791964213053 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 22.91522981570317 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 22.750060660498484 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 22.59531672795614 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 22.450998425483704 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 22.31204463453854 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 22.16397171550327 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 22.022995923694815 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 21.915834188461304 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 21.813040404092696 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 21.70282875407826 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 21.582211452981703 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 21.462806701660156 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 21.33894634246826 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 21.21755174490122 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 21.07113703974971 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 20.935174907956807 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 20.803154665848304 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 20.68623995780945 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 20.583832110128093 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 20.46913629770279 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 20.343416676376805 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 20.217124097487506 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 20.089470556804113 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 19.97624357541402 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 19.851286308185475 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 19.74701635461105 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 19.628742835460567 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 19.52287197113037 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 19.398168639438907 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 19.27616889136178 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 19.150037649065947 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 19.022045829079367 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 18.888169553544788 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 18.757993832878444 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 18.6284275105659 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 18.498457193374634 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 18.37426951953343 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 18.247366905212402 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 18.120600639605055 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 18.00357350936303 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 17.8862793715495 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 17.767445140414768 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 17.65222376043146 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 17.53144598007202 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 17.413535461091158 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 17.287588415474726 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 17.163629766237936 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 17.053293069203697 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 16.939154445147906 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 16.81934934277688 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 16.693468472314258 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 16.572204262018204 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 16.448704554484443 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 16.323603854034886 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 16.198778006567885 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 16.077208715326645 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 15.955616823141126 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 15.837100812367032 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 15.718908215912295 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 15.600073920355902 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 15.486606731806717 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 15.366731701670465 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 15.246602694193523 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 15.130350062721654 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 15.016791483024498 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 14.900290672595684 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 14.781162458130076 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 14.661049246788025 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 14.547114687201418 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 14.427031743817212 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 14.307024185916028 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 14.18602138473874 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 14.066916914547193 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 13.945787213569464 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 13.827498997765026 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 13.705698143352162 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 13.588366382577446 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 13.469402313232424 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 13.348758398831546 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 13.228382255720057 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 13.106129187409596 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.984681256273959 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 12.864606593784535 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 12.743079543113708 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 12.623729081497979 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 12.5019766067972 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 12.379789571569422 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 12.25801396369934 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 12.136576985368634 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 12.014087737775316 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.895154804859347 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 11.777462592491737 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 11.659570103599911 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 11.5414277472586 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 11.420913533629658 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 11.298951943715414 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 11.176347010726229 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 11.053091330961749 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.930419636202288 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.808293802397591 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 10.686866834100368 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 10.564836669386478 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 10.442757285159566 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 10.321842177160855 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 10.20313088506715 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 10.079910528861872 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.956888244933442 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.832390467325846 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.708875169438764 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 9.584260412904083 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 9.46200518104119 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 9.339245411657519 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 9.217662477493286 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.094170805007693 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.971326950028187 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.848159343004227 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.725863776465719 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 8.602651706108679 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 8.47897305561386 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 8.353642232490309 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 8.229232277188983 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.106710448193905 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.983718156814575 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.863237941966338 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.739565814498567 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.616231368935626 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.492885078457619 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.3696015221732 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.26035552836479 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.136793150028712 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.013208584351973 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.89070983727773 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.7686005789658115 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.646228757623123 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.5235042734211 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.400717097359735 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.278944500340711 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.156690835952759 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.034999100577752 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.911963161669279 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.789613282758427 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.6664091518947055 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.542954237230362 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.419860607538467 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.297632735246306 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.174259686771827 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.051005283991496 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.927997052669525 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.804884684011803 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.682449228969621 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.559966100505524 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.4372197186074605 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.3143299926411025 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.191103490002184 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.067638318695708 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.9444292613438194 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.821336179089969 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.698690456502578 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.5755051576603223 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.4521079950554427 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.328386084881821 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.2048953949720014 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.081067289624895 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.95721330425956 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.8335979941201073 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.710413908690549 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.5867955897773443 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.4632124635908337 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.3397275835110993 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.216592621017288 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.09351537396999 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.9706947907157566 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.847524591394373 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.7243448303591822 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.6010780296223686 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.4777036829197658 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.3543144786168657 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.2310292720794678 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.1078041698296033 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.984599341948827 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.8614288401727231 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.7382938149049111 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6152985034844815 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4922487638434585 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.369160862743552 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.24613904953002932 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.12306017612093058 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   24.6s finished

    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  2.772 seconds)

**Estimated memory usage:**  1859 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
