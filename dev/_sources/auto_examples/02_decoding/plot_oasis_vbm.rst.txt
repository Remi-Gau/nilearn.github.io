
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-142

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 143-145

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 145-158

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 159-161

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 161-176

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fc2cefb8850>



.. GENERATED FROM PYTHON SOURCE LINES 177-179

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 179-223

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 217.15402603149414 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 35.128355741500854 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 32.69364309310913 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 31.663505554199222 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 32.02108335494995 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 31.776577949523926 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 31.780376275380455 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 31.35738709994725 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 31.015451431274414 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 30.613847308688694 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 30.309770584106445 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 30.0450245033611 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 29.753292322158813 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 29.542723343922543 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 29.279389245169504 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 29.01209314664205 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 28.769039154052734 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 28.54332072594587 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 28.355312797758312 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 28.19426109916286 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 28.0152268409729 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 27.850329660233996 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 27.709603981538255 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 27.54071533161661 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 27.38494634628296 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 27.226973295211792 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 27.07786356485807 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 26.90142309224164 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 26.722681658608575 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 26.554551231450045 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 26.37586212158203 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 26.20185012971201 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 26.03665816783905 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 25.854532436891034 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 25.686564782086542 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 25.521951607295446 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 25.362567318810356 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 25.196554751009554 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 25.042638490074562 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 24.895601382622356 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 24.73749351501465 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 24.577803925770084 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 24.424491598492576 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 24.261651105658952 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 24.11672889102589 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 23.96951150894165 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 23.813386792721957 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 23.65725631409503 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 23.4989462296168 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 23.347390812270497 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 23.195990324020386 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 23.045215648763318 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 22.892522591810962 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 22.729782046012158 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 22.580059572502417 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 22.4312010678378 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 22.278598512922017 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 22.11878138676024 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 21.958181356561592 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 21.829570103499847 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 21.669001181920372 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 21.52839768128317 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 21.374555041713098 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 21.223476288810605 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 21.062773913145065 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 20.908890504103443 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 20.751864657257542 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 20.58833877364201 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 20.428872543222763 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 20.27022052847821 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 20.11059750829424 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 19.954099497324982 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 19.791467030843098 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 19.628296773727627 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 19.465530588820172 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 19.297498067220054 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 19.140471496080096 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 18.980679236449205 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 18.82727289199829 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 18.665420390382597 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 18.501684308052063 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 18.33915152667481 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 18.18021601002391 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 18.02292943575296 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 17.861235811596824 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 17.70246667020461 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 17.542381009390187 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 17.380802773881232 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 17.22631458802657 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 17.071450308467565 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 16.9166009955936 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 16.759181840079172 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 16.599517355794493 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 16.442596268910236 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 16.28540056817075 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 16.128155218927485 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 15.97235435247421 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.815883221085539 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 15.660657216091545 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 15.502488449366405 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 15.344412803649902 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 15.197182147809775 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 15.044044158037972 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 14.889699519259258 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 14.736097702613245 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 14.580791189557031 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 14.426241843205577 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 14.27246520006768 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 14.117777056164211 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.961411473947928 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.807271718978882 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 13.650976644979941 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 13.496863228934151 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 13.341005859121811 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 13.185771519677681 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 13.031909714574399 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.877746746457856 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.723104226283539 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.5677327665232 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 12.412119608967245 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 12.256789048512776 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 12.102169397448707 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.94738814479015 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.793256286683121 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.639735137262653 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.487385368347168 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.33291560884506 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 11.17806078129866 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 11.026306852698326 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.873852367548979 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.721398335236769 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.568686772848814 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.414224220044686 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.261232024744938 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.108048652535054 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.955514669418335 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.80221871768727 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.649164170244314 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.49604148104571 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.342618594066701 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.189777476446968 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.039667888736048 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.886147586392685 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.732827148237428 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.585196587774488 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.431715102031312 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.278160823534613 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.12486423440531 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.971616010408145 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.818849073960477 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.665568033854166 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.51217540210446 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.3593192853425675 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.206012721155204 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.053722781020325 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.900492898879513 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.74786219230065 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.594407162089257 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.441143899024286 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.289470938016783 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.136390447616577 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.984427634233274 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.83132125713207 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.680932748537122 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.532263656941856 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.378401864658703 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.224374176507973 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.071083608501685 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.917915344238281 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.764820805668125 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.61117026385139 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.457520009481419 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.303842139798542 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.150088661667929 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.996470958337017 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.8429531710488454 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.6891074180603023 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.5349409472470903 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.380976982331008 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.2275833071277127 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.074126084645589 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.9209827217607867 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.767264491909153 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.613238246063066 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.459007387575896 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.305130249745137 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.1513904909933768 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.9975030154467903 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.8435833961405652 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.6897847501058427 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.5359441606621993 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.3822550648794125 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.2284123599529266 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0749462774998164 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9213287240451145 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7676722575456668 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6141244051407794 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4605245989591337 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3070091262008205 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1534978876161815 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   30.7s finished

    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  17.911 seconds)

**Estimated memory usage:**  1902 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
