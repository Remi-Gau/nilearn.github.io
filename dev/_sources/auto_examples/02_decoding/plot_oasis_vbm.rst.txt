
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f10c4f2b2b0>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )  
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 206.8805694580078 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 37.864763259887695 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 34.972862005233765 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 33.89837447802226 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 33.26539921760559 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 32.61912703514099 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 32.257084925969444 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 31.863891567502705 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 31.509647369384766 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 31.35573132832845 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 31.090748071670532 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 30.869565010070804 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 30.612576961517334 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 30.444844979506275 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 30.20247990744455 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 30.03102787335714 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 29.806615471839905 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 29.59972277809592 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 29.379238102171154 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 29.23760325030277 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 29.07430672645569 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 28.904813494001115 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 28.746718146584254 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 28.539042825284213 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 28.354561646779377 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 28.17558479309082 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 27.99198185480558 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 27.810136591946637 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 27.671880551746916 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 27.48973222436576 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 27.30670205752055 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 27.180732350195605 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 27.07181078195572 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 26.91849298910661 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 26.765968491049374 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 26.608365092958724 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 26.458391189575195 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 26.29220175743103 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 26.137666187788312 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 25.994896980432365 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 25.850773811340332 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 25.69321689954618 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 25.551830496106827 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 25.396594690722086 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 25.224472110921685 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 25.057298103968304 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 24.90631531632465 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 24.741678669097574 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 24.570825219154358 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 24.39660259655544 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 24.239234447479248 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 24.092788172703163 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 23.934014540452225 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 23.770365067248076 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 23.607948815381086 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 23.433845476670697 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 23.2667886870248 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 23.097761363313907 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 22.93557676775702 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 22.77327619568776 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 22.595325231552124 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 22.427484312995535 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 22.258962946553382 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 22.09292269509936 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 21.933362424373627 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 21.77053372676556 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 21.607935016805474 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 21.44270569175037 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 21.284126043319702 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 21.126695446346115 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 20.979423216411046 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 20.832295397637594 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 20.66797171698676 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 20.503300193237934 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 20.33932602727735 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 20.177683035532635 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 20.02533975400423 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 19.866963953166813 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 19.699105880199333 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 19.53464074678059 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 19.370842695236206 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 19.21072515146232 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 19.046758802925666 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 18.884452928979712 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 18.72707036563328 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 18.56018339886385 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 18.393225331639133 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 18.226995854542174 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 18.059762174432926 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 17.90077311001467 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 17.740567339791195 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 17.577105501195884 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 17.415040907652482 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 17.252478202184044 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 17.091725461026456 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 16.93051310589439 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 16.773036181926727 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 16.61892640713564 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 16.48581336955635 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 16.324434634410974 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 16.166090965270996 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 16.00393017683879 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 15.843681298050226 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 15.687812705641813 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 15.522886496323807 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 15.360111577170235 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 15.193233386525568 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 15.028351915216891 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 14.86928340240761 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 14.706016927684118 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 14.539607633243909 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 14.373870351293066 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 14.213300858225141 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 14.053562563077538 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 13.891085662339863 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 13.72987423772397 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 13.566575584740475 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 13.402134783247599 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 13.239901385064853 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 13.075535311418422 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 12.915600299835205 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 12.75565487491198 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 12.59318132869533 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 12.429078230043736 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 12.267354426845428 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 12.108332633972168 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.947380096193344 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 11.785799792432408 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 11.623485535383224 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 11.460739538651104 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 11.298259643407969 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 11.136907268116492 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.977046887079874 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.818086505832529 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.655859114518806 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.492365951891298 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 10.32947977851419 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.166261145668308 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 10.003646425578905 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.84081705868673 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.678805487496511 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.516607103618323 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.353413071430905 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.192180158375026 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.030642363760206 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.86773971853585 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.707219940342315 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.545287892931984 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.382657663242238 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.219800131432962 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.057228724161783 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.89677168991392 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.735337056611713 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.5727844394110395 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.410518909429575 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.248641206372169 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.087534647721511 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.925940873516593 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.7643675049649 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.603341852344057 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.441910445690155 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.282154212086838 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.120942404240737 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.959835492760126 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.798235218699386 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.637272740855361 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.475196123123169 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.313256073854641 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.151904696509951 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.990521531133257 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.829137675902423 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.668372049666288 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.506820129793744 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.345615633650322 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.184443893103764 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.024531023842948 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.863438389518044 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.703428370804436 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.543233153525363 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.382584607800958 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.2215537495083275 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.060843919522196 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.9002455145448116 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.7399261557990737 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.5784849705903428 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.4169218797941467 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.2555275271015782 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.094690844336933 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.934049291813627 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.7730845484153304 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.6121366525951184 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.450880475069216 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.2898065447807312 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.1287897139633256 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9675672717930116 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.806404437774267 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6452012694611841 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.48389444012327243 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3226105420276372 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1612989818630506 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   32.2s finished

    1982 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  15.404 seconds)

**Estimated memory usage:**  1910 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
