
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f4b9798cbe0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 147.5358009338379 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 25.277478456497192 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 23.4569091796875 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 22.827094316482544 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 22.418608903884888 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 22.060405254364014 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 21.744826237360638 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 21.40870775495257 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 21.18277931213379 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 20.953816493352253 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 20.73252582550049 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 20.54805525866422 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 20.388311545054115 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 20.24648031821618 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 20.09051615851266 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 19.987940867741905 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 19.847904086112976 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 19.70323503718657 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 19.5772094991472 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 19.47415526289689 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 19.354517698287964 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 19.231663556326 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 19.112085212360732 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 19.027330025382664 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 18.918717861175537 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 18.812655210494995 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 18.693644835398747 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 18.580962693249738 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 18.461944614137924 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 18.352101753497944 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 18.239869753519695 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 18.143903947645615 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 18.034394323825836 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 17.91625131260265 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 17.800271483028638 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 17.684482404163905 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 17.57621219423082 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 17.4585798688837 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 17.348853839071175 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 17.239604589266655 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 17.135698318481445 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 17.036290046645373 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 16.92442861057463 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 16.8102497943612 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 16.70378669825467 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 16.59805923038059 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 16.495383418124657 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 16.38545476122105 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 16.281310200691223 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 16.166893078356374 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 16.053741216659546 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 15.945799509684244 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 15.842151660185595 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 15.741919324083149 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 15.636834798035798 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 15.531912586905738 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 15.424107619694302 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 15.318725159293725 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 15.215573721918565 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 15.106486389192483 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 14.997498909632366 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 14.893335463570768 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 14.785892971100344 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 14.678874731063841 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 14.57377141714096 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 14.470372218352098 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 14.366870981274229 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 14.257555015051542 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 14.14762014501235 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 14.039139357166015 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 13.928901297705515 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 13.818438865769078 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 13.712350633409287 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 13.607017118636877 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 13.50141928002641 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 13.390591144561768 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 13.282953450554295 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.174269341803216 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.067365065599098 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 12.964070836199989 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 12.855547785758972 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 12.748549935258465 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 12.643110147336634 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 12.534675017896905 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 12.428684030260358 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 12.321494467118209 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.213639270427615 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.104105878150326 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 11.995665680278432 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 11.88856645916285 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 11.786300791634455 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 11.677187801717402 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 11.56834714309029 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 11.459168626416115 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.349398719503524 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.239718462291517 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.13122014204661 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.021319187793535 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 10.915324191657865 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 10.808099356564608 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 10.699071168899536 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 10.591884952960628 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 10.48381150937548 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.375537434827935 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.269821680509128 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.164348886126565 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.055440250432717 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 9.949226477435817 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 9.841627209274858 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 9.732987705720674 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 9.624101660468362 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 9.515502031858977 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.408731801169258 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.301942133270533 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.1956129701514 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.089922552523404 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 8.98291616604246 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 8.874762863175482 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 8.766570661027552 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 8.659767800018567 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 8.551441351572672 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.443590422307166 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.335725897648295 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.228640742418243 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.12232102886323 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.01582555770874 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 7.907996219301981 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 7.801074324630377 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 7.693634927272797 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 7.585972429245941 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.479027344630315 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.372214856038567 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.266084396477901 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.160291956779653 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.054089119185262 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 6.95008310565242 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 6.851067374734318 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 6.747838069052592 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.640088786249575 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.533382686779653 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.4259567601340155 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.317854362176665 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.210227657371844 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.103002023029994 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 5.9962044027116566 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 5.88921990065739 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 5.782434234880421 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.674281486848585 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.56695048873489 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.459364734240026 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.351889769236246 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.245075794245233 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.1392687747353 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.033680764678257 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 4.926536361892502 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.819789155837029 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.713448536701692 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.606862452379457 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.500772892674313 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.394676824785629 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.287708878517151 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.180601928545081 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.073794621008414 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 3.9671893134438916 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.8608348776654497 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.7533651265231045 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.645824825907328 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.5386903785659882 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.4316019784836542 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.324373559838921 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.2174687946543976 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.1104870302635326 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.003505224405333 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.8963286876678467 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.789075495182783 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.682022741862706 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.574586304751309 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.4673805735205527 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.3600963474659435 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.2526371838660215 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.145208915074666 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.0379876642595995 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.9307452086563948 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.8239237910411399 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.7168224998142407 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.609405498246889 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.5020881570795532 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.3947947318541174 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.2873874775906826 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.1799227358802915 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.0725784427241274 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.9652805141129419 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.8581970036029816 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7509130616262168 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6436689170365482 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5364026901049491 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4290931662734674 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.321788327948091 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.21451438316191088 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.10725897520630803 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   21.4s finished

    1935 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  58.074 seconds)

**Estimated memory usage:**  1933 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
