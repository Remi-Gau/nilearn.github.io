
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f1a3feb3910>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 174.6368408203125 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 31.00369882583618 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 28.953158855438232 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 28.247395515441898 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 27.815601587295532 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 27.52543044090271 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 27.34813213348389 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 27.168214150837493 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.973461151123047 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 26.753554926978214 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 26.564926385879517 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 26.37743919545954 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 26.221409797668457 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 26.05707333638118 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.882699421473912 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 25.73037632306417 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 25.580392122268677 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 25.441138870575852 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 25.287982172436184 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 25.136206037119816 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.986538648605347 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.880023763293313 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.728404955430467 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 24.56803467999334 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 24.429849942525227 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 24.2882661819458 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 24.15088204237131 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 24.02091712421841 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.890455654689244 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.759414335777016 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 23.621580759684246 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 23.48587510662694 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 23.35800415277481 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 23.245098316308223 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 23.098946964039524 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 23.043612957000732 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.931579086515637 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 22.81500912357021 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 22.680135915153908 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 22.542484381260017 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 22.40687656402588 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 22.26736724085924 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 22.128431365603493 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.986472135366395 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.839807575399224 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 21.694087876213924 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 21.555986922720205 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 21.407435782412264 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 21.256099303563435 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 21.111668197476135 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.96757173538208 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.822311041401882 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 20.67412750537579 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 20.530494581978278 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 20.383842432940448 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 20.23879554054954 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 20.09761619567871 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.956124908045716 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.812694524896553 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 19.665631152815738 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 19.524210214614868 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 19.372531562555032 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 19.231058720619448 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 19.0883942066677 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.94666036963463 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.80399140944848 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.657747254227147 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.515870400329135 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 18.373204581877765 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 18.227329299069833 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 18.08285519054958 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.941051503302347 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.79798846774631 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.657272394389324 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.512774441693278 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 17.371093432108562 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 17.241410795011017 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 17.10099218418072 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.96227916693076 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.82123075859456 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.680947184562683 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.5388413829568 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.399178429347714 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 16.255642365260297 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 16.1155678771791 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.973108992857092 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.833468880764272 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.695746813697378 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.554964889179576 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.421808272265316 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.285634809070164 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 15.149071976378723 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 15.012942770253058 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.876399022276685 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.739840857526088 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.600380106976159 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.46240226427714 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.350482021410441 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.208135804351496 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.067727686178804 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.926559925079346 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.78700564875461 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.64740164607179 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.517836438799367 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.38865404862624 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.256510121481758 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.113406946074289 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.972530679167988 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.830107627091584 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.689394557147944 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.55006358840249 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.40728885848243 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.267265660422188 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.125873255518686 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.987111765041686 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.84500972084377 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.705168403428177 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.56409654658065 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.424093848567898 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.287316857265825 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.144760131835938 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.004846911785032 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.86351323909447 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.723210547997699 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.5836739155554 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.443327713012694 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.303592250460671 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.162860277130848 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.023090675473213 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.883840095165164 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.74467371060298 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.60493910403652 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.465820045182198 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.326527367857166 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.186363704168974 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.046229556754783 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.90629353242762 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.765660606161521 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.625344988228619 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.485815624538944 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.346085003444125 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.206967062983953 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.067503035908015 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.928521701505968 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.789017187224494 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.650427152370584 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.51099293199304 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.371912498863376 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.232645569620906 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.09319904346594 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.9542841116587315 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.813775125718275 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.67451484579789 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.535199741912044 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.396246476606889 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.257206286153486 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.11766905662341 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.97870763092284 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.839036123662055 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.699338460118516 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.559777557849884 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.421393000561259 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.28324285848641 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.143775547940307 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.007035267062304 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.868077545455008 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.72876547043582 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.589130021854789 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.450143995739165 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.310914426160282 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.171538745655734 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.032429780179297 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.8931906445081848 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.7539579937223757 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.6147576337573173 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.475914546421596 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.337090860713612 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.198615119955634 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.059376762154397 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.9207887156715606 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.7815998395284014 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.642367236522021 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.503340925489153 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.364644726768869 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.2252867740133535 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.0859033223744987 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.9469230149381904 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.8077411664360985 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6686697056952942 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.529530537822259 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3905257174843235 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.251510199451946 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.112485259771347 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9734876180559859 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8344411161757007 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6953444847693809 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5562990003702591 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.417221273867612 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2781461946892016 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13908354481260982 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   27.8s finished

    1965 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  8.713 seconds)

**Estimated memory usage:**  1914 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
