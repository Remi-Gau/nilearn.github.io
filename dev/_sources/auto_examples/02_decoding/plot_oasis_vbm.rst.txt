
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f8a8558dcd0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 251.312255859375 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 47.049034118652344 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 44.353010416030884 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 43.5693682829539 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 42.8522424697876 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 42.675544023513794 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 42.21802083651225 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 41.79334330558777 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 41.502153396606445 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 41.229674127366806 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 43.555575132369995 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 43.12419234622609 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 42.7997887134552 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 42.31840544480544 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 42.04224371910095 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 41.701370557149254 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 41.405386567115784 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 41.062638885834644 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 40.70627286699083 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 40.483358006728324 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 40.25130772590637 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 40.03798373540243 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 39.789705731652006 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 39.61192404705545 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 39.39750417073567 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 39.19142270088196 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 38.87941932678223 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 38.6176411928954 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 38.431633131844656 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 38.21053534540636 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 37.90808725357056 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 37.62411141395569 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 37.364419519901276 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 37.163039091861606 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 36.95597983809079 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 36.708603858947754 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 36.48220046361287 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 36.24533731228596 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 35.98569688044097 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 35.72168326989199 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 35.46025085449219 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 35.2141721597532 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 34.94653537159874 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 34.7090034706648 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 34.45142191106623 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 34.23630717065599 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 34.01126336014789 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 33.787537823332116 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 33.537306229273476 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 33.30180640609897 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 33.0525426864624 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 32.830297713186226 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 32.6150401372176 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 32.390280219743836 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 32.170776490811946 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 31.96505173769864 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 31.719650541033065 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 31.475467748809276 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 31.261205738988412 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 31.03918396820456 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 30.839671134948734 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 30.625856950634816 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 30.378202869046117 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 30.135046349631413 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 29.913723081350327 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 29.704654070047233 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 29.474416306524564 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 29.23547803110151 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 29.005927815156824 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 28.77716768997303 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 28.635399784360615 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 28.420359890225907 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 28.198127322726776 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 28.005431090315728 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 27.812174281558473 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 27.57635792096456 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 27.35748587156597 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 27.143946006700588 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 26.906302983944233 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 26.72952059854435 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 26.51322305202484 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 26.28591502448659 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 26.069082370618492 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 25.844577570995654 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 25.630795149576095 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 25.409779380349555 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 25.178436506626216 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 24.958379852360693 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 24.733511231162332 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 24.508441164252464 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 24.28998761706882 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 24.07485680789738 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 23.849027053169586 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 23.64387640645427 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 23.42390177605 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 23.202985299260995 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 22.981325527032215 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 22.75805367882719 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 22.534104853260274 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 22.30979215978372 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 22.108286380767822 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 21.903247372938853 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 21.688509043525247 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 21.46733649957527 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 21.264564514160156 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 21.03893292517889 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 20.82170434717862 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 20.59382519098086 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 20.36629361576504 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 20.160452943329418 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 19.937401121312924 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 19.716481726448816 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 19.49612692424229 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 19.27158228274995 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 19.04760135684097 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 18.82366246762483 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 18.597373477343854 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 18.374217750679733 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 18.148555185835242 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 17.92649173135517 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 17.70232343673706 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 17.479926030497907 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 17.258824215560665 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 17.03822410978922 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 16.823162209603094 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 16.604885673522947 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 16.38674813603598 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 16.165170695838025 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 15.94630752503872 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 15.728140237719513 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 15.513838566266573 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 15.291607520052494 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 15.069750865300495 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 14.845726913079284 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 14.624664822621131 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 14.409239495242083 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 14.18855723212747 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 13.965694667649094 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 13.743755008863365 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 13.520301902894493 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 13.299390077590942 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 13.07980759093102 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 12.859059454689563 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 12.635528075945127 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 12.409128771887886 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 12.189186309945994 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 11.966809968425803 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 11.743209159293142 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 11.518574927304243 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 11.299593120613354 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 11.076725562413532 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 10.853063512322128 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 10.62982524068732 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 10.407199423297559 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 10.183763937516646 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 9.959490676080028 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 9.735894472171099 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 9.512041617350972 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 9.290094834339769 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 9.067797902245191 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 8.84476774930954 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 8.621290701516667 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 8.398963268892265 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 8.17956450965507 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 7.959168608595685 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 7.737666375709303 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 7.515197547085314 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 7.293721354650167 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 7.071749005998884 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 6.859211894887439 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 6.637659241171445 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 6.416315059215702 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 6.1941334480463075 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.9722242300221 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.751866422850511 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.53087374142238 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 5.308843536810441 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 5.087108985178888 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.865301365263006 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.64367614511671 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.422514994939168 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 4.2015457258698685 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.979844923857804 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.7581049796662045 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.5366869180098823 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.31490657136247 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 3.0944607283479426 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.872983236363865 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.6522590048769685 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.4307800234940946 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.209464060632806 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.9887497524940532 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.767538676659266 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.5464248978412212 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.3252613126617117 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.1042328858986878 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.8832483194312271 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.6622590558783052 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.441468930003619 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.22070974441029917 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   44.1s finished

    1972 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  38.145 seconds)

**Estimated memory usage:**  1875 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
