
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fe3791a6d30>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 235.7625961303711 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 37.3241240978241 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 34.902830600738525 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 34.04679481188457 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 33.75123977661133 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 33.32228493690491 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 33.175473133722946 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 33.02600812911987 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 32.74851036071777 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 32.45913100242615 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 32.259865522384644 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 32.0410965572704 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 31.778762578964233 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 31.591370747639584 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 31.497391564505442 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 31.294988234837852 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 31.105799198150635 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 30.913707059972428 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 30.72743558883667 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 30.53439199297052 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 30.36116623878479 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 30.1572105543954 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 29.981379704041917 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 29.829446305399358 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 29.652612686157227 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 29.476537466049194 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 29.295149693122276 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 29.117660142757273 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 28.949226890291488 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 28.78535142438165 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 28.628762245178223 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 28.456239323462206 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 28.267295837402344 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 28.093749848279085 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 27.931062109330124 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 27.756693771907262 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 27.582349061965942 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 27.5255996085502 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 27.355607045324227 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 27.191726904649002 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 27.027690887451172 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 26.861961661315544 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 26.6903950940995 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 26.50961199472117 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 26.32714943452315 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 26.154345591863 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 25.966266870498657 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 25.78580520508137 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 25.612385233243305 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 25.443032736680948 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 25.29946231842041 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 25.135145580067352 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 24.970047345528236 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 24.796696307524197 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 24.61785979624148 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 24.4454832944003 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 24.25729996817453 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 24.082277703703493 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 23.90236083392439 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 23.720553668878846 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 23.54873824119568 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 23.3753619858476 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 23.20412714250626 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 23.04441320328485 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 22.879581063985825 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 22.709660273331863 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 22.550486918651696 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 22.378445305041414 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 22.214778647703284 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 22.048879267512888 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 21.882008041654316 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 21.71247614269525 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 21.54264662000868 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 21.369331026730475 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 21.19744263468562 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 21.030701796213787 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 20.866829596067728 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 20.70164229033829 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 20.536523647797413 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 20.368663196322284 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 20.20004439353943 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 20.029444544403642 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 19.862104997402284 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 19.69170423013618 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 19.523835307075863 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 19.352197885513306 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 19.189074338868604 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 19.024680041718756 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 18.855146624825217 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 18.688614502381743 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 18.523714595370823 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 18.353516358595627 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 18.179341450981475 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 18.00947270598463 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 17.84167334373961 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 17.67319453390021 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 17.50226891040802 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 17.33464880087941 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 17.166119930695515 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 16.998348171060734 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 16.82977843284607 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 16.661346723537633 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 16.488804868623323 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 16.31963596760648 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 16.148062485914966 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 15.975986083348593 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 15.806330865284183 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 15.638911458933464 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 15.469483269585504 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 15.299595296929736 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 15.13095259666443 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 14.964932085157516 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 14.798795223236084 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 14.63091413953663 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 14.463845955698114 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 14.29654406464618 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 14.129743140319299 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 13.964575653402216 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 13.794510760549771 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 13.625255013714318 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 13.45605691274007 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 13.284880117936568 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 13.117365383711018 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 12.948664066268176 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 12.78037218893728 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 12.610016298294067 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 12.445192874424041 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 12.276117251613947 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 12.106515437364578 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 11.936997766642607 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 11.769819296323336 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 11.60117539376703 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 11.433102253711585 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 11.264458007382272 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 11.09555783912317 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.927647043157506 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 10.758869283339557 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.589291570830518 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 10.42042580894802 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 10.251810404894163 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 10.082991600036621 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.914685925693377 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.74530100486648 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.576354258543962 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.407286405563354 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 9.238751962267118 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 9.068430779731436 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.899972703181156 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.730896002537495 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.562029700951289 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.393227020899454 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 8.224185106770092 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 8.055858662253932 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.88792363802592 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.719565533972405 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.550511475532286 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.382339049608279 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.214015969804898 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 7.047578364987916 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.881114569849938 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.712681710720062 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.544152353120887 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.376615859844066 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.20843215222739 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.040448845886603 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.872098836031827 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.7037179240261215 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.535105883718251 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.367288589477539 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.19922882847532 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.031335466048297 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.863697562301367 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.695986287538395 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.527621034941921 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.360033205185814 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.192004476274763 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.0239678838036275 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.8557639095069325 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.6878933290417275 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.5197659031638886 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.3516712453630233 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.183875916412522 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.0163484746283227 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.84874662414926 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.682109853495722 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.514149549845103 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.3465425199077976 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.178785770334662 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.011193686343254 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.8433407336946517 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.675790372647737 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.5083232250513208 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.3407363295555115 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.1729973276662085 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.005670921089723 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.8380678250239445 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6704496461517956 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5028088371160672 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3351866307884756 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1675715745992996 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   33.5s finished

    1971 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  18.087 seconds)

**Estimated memory usage:**  1909 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
