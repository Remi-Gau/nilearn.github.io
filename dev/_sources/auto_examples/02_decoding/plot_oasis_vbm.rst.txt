
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f26f0198790>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 168.65015029907227 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 31.434359788894653 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 28.899319410324097 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.941270748774212 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 27.532674551010132 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 27.149833917617798 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.822179238001507 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.55498824800764 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.352699279785156 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 26.174256563186646 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 26.015855312347412 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.873844406821515 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.710285425186157 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.551014386690582 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 25.421920640128 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 25.31193494796753 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 25.187764406204224 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 25.08019061649547 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.957165002822876 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.884519664864793 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.771597146987915 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 24.74530490239461 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.756047855723992 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 24.621599435806274 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 24.50057284037272 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 24.393789291381836 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 24.278548424060528 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 24.13639944571036 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.995995589665007 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.857532649204646 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 23.718470493952434 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 23.581601558193082 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 23.442963123321533 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 23.30083334084713 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 23.18843514779035 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 23.045964309147426 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.904390017191567 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 22.771386797363693 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 22.632106191233586 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 22.504074384004642 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 22.440999031066895 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 22.34273961695229 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 22.20622378303891 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 22.077887352122815 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.955952102487736 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 21.80863568517897 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 21.66052188044009 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 21.508368197907792 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 21.361884276072182 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 21.216785839625768 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 21.07028317451477 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.926233749763636 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 20.78292019550617 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 20.646404041434234 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 20.50961420271132 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 20.37271989475597 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 20.232172352927073 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 20.097189137810155 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.958295090445155 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 19.813306731692816 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 19.667224725087486 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 19.525535982163227 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 19.374718435349003 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 19.231599126543315 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 19.08300617337227 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.93591152704679 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.78967640616677 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.64699651590034 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 18.503674212624045 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 18.36445637716763 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 18.227472475596837 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 18.091091817533467 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.955796983506943 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.815792919838266 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.674496740908236 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 17.533916632334392 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 17.393717803453143 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 17.25432638688521 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 17.11405995564583 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.97324414494671 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.83484447002411 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.696671315181405 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.559913420095675 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 16.41912136307682 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 16.278879506247385 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 16.13936063822578 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.998088531715924 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.861453456440191 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.720190178264271 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.58864975779244 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.456354406144886 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 15.321304533507798 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 15.185844214066217 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 15.049685849938342 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.909899168826163 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.770196199417116 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.634768923123676 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.495839121415443 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.360994932602864 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.227975845336912 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.093488216400146 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.960009511154476 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.825636896432615 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.692070238798568 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.555752534132738 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.414271127609979 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.276369783113587 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.13771318943701 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.999207461321795 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.86291690485193 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.725517511367798 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.585619288521844 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.444574322019305 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.305916328345779 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.164662356962237 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.023148391557775 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.882313128175406 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.740727982969366 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.598362615553 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.455790020838505 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.313269138336182 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.170001969849768 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.026651276916756 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.883997603160578 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.743195333788472 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.60099582672119 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.458390591636537 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.31537750011354 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.173990279436111 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.035894185073616 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.896706049258892 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.757528443372886 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.617817293513905 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.478966956748103 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.33784247512248 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.197830473935163 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.057054070865407 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.91713884973178 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.77701863344165 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.63843337065882 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.498437745230538 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.35723120270046 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.217087702012398 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.074544831589385 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.934010492430793 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.792458632896686 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.651259706444936 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.511310676328179 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.372736975953386 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.231827193458608 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.090605656305948 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.948963124230997 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.806117835797761 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.663377116708195 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.52104073066216 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.3789732456207275 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.236420448009785 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.093991358568714 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.9512317633327045 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.808838592385346 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.666095018386841 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.523159293654543 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.380457886943111 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.23760619192767 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.094923327608806 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.9524773612166895 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.810018820934985 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.668261894922771 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.5265443438575375 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.384723336033567 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.242664870093851 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.101556167267916 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.9596716193265697 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.817944064994768 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.6761552903844024 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.5348464080265587 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.3929716131903906 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.2511371784964522 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.109546476535583 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.9677084651073264 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.8258114125993514 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.6840734626706793 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.5422768619034315 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.4005379025401967 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.2589917182922363 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.11732537681992 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.9758115660759712 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.8343990320827872 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6931062201236156 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.5517503382667661 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.4105268779553863 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2693530963977595 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.1282032231489816 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9870572127208808 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8459170479135415 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7048885088700514 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.563856012967168 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4228373239488166 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2818856793220597 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.14093942378633587 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   28.2s finished

    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  9.023 seconds)

**Estimated memory usage:**  1869 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
