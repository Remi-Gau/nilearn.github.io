
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-142

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 143-145

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 145-158

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 159-161

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 161-176

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f1565ed0a90>



.. GENERATED FROM PYTHON SOURCE LINES 177-179

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 179-223

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 193.4957504272461 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 36.14420700073242 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 33.62616777420044 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 32.13401993115743 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 31.11086392402649 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 30.865267753601074 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 30.216755867004398 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 30.062471866607666 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 29.714269638061523 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 29.352269040213688 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 29.003472566604614 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 28.81624486229637 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 28.653388261795044 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 28.554331137583805 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 28.38073948451451 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 28.165380318959556 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 27.945746541023254 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 27.750480862224805 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 27.577623658710056 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 27.39684315731651 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 27.25682258605957 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 27.075125660215104 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 26.96023253961043 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 26.791616056276407 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 26.6148780186971 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 26.43329358100891 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 26.3069780423091 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 26.165652751922607 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 26.00457160813468 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 25.82623928990857 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 25.66464432080587 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 25.517175097619333 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 25.346654891967773 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 25.2037366809267 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 25.08277068418615 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 24.97811600140163 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 24.831949816809757 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 24.666305902841927 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 24.505924061725015 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 24.339345883100464 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 24.176365852355957 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 24.01658535003662 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 23.855935346512567 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 23.756927928259206 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 23.596272923729636 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 23.451332648595177 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 23.302894685579385 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 23.150752483530248 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 23.02356692155202 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 22.865443409705648 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 22.698221683502197 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 22.540631004408294 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 22.383340230354897 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 22.214639546736233 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 22.04241606924269 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 21.87572921406139 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 21.71109029224941 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 21.560881476653247 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 21.41485702580419 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 21.262711941185643 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 21.104335387547813 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 20.941215581581243 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 20.786726820853445 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 20.630496585179888 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 20.47453659772873 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 20.312941954686092 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 20.156442786708023 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 20.004090451482515 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 19.84958258797141 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 19.692305824031 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 19.538491078785487 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 19.395177266967128 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 19.239071316189236 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 19.07774657745884 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 18.917568393655724 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 18.763814767201744 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 18.60901870225605 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 18.45940769183171 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 18.307451584400276 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 18.153071322018587 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 18.001567482948303 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 17.84495556207351 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 17.68923925190437 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 17.539169759635467 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 17.382889021010627 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 17.229055446736954 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 17.072778058606524 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 16.915845492790485 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 16.760387247258965 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 16.61179203665658 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 16.460097074508667 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 16.310818771739584 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 16.161098770473316 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 16.009439822166197 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 15.862422567732791 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 15.712094118720609 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 15.562208612759907 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.407418926966558 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 15.257786269090614 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 15.105849567085805 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.959009408950806 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.806682640963261 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 14.656135334688075 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 14.50919528840815 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 14.356676981999325 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 14.20473347391401 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 14.052374704828802 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.901502791966234 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.747527413898045 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.596237604771185 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.44459746100686 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 13.30245709634042 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 13.154170138495308 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 13.003636330629872 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.852271657241019 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.702111555182414 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.55443810594493 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.404186660407955 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.253642405493785 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 12.10360251554922 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.95332892735799 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.803257339256854 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.652781095661101 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.503440571994316 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.352449901642338 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.201663732528687 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.05098325108725 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.899567187301756 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.747516974806786 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.59907100182171 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.454651832580566 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.308113718760833 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.16091725320527 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.01246978645038 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.8689661275095 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.721370458602905 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.576089971205768 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.428697474681547 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.281612023063328 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.134923754836159 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.988613843917847 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.840779370449958 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.692602631071924 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.544779707501817 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.396979106797113 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.24932779936955 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.100984325147655 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.951937445166971 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.801630658072395 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.651479980289536 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.501075188318888 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.350741057995928 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.1988959312438965 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.046750735613256 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.894672663180859 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.743353036142165 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.592213312784831 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.4417720721785425 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.290259714368023 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.142393301118095 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.992361605167389 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.843172165177624 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.693860672138355 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.544615548081193 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.3958546708269814 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.2477967088872735 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.098731784935457 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.949892526615166 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.801105499267578 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.65220752270264 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.502332280663883 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.353530634216398 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.203781981800878 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.054402303144422 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.9049144174860815 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.754854815346854 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.604500434615395 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.4543941761814265 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.304959498094709 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.154824268884499 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.004733191596137 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.8543732166290283 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.7052584925850667 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.5553379137007917 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.4054061848184336 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.2551279970117517 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.104808750972953 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.9543407894073324 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.8038895789613114 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.6533843751937622 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.5029512079138505 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.3526550712385728 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.202221026023229 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0518896975047847 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9016119548954915 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7513345388265756 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.601076349920156 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4507455825805664 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.30049441318319303 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1502378286428787 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   30.0s finished

    1944 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  17.908 seconds)

**Estimated memory usage:**  1861 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
