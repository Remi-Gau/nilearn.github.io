
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-142

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 143-145

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 145-158

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 159-161

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 161-176

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f38f3a062e0>



.. GENERATED FROM PYTHON SOURCE LINES 177-179

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 179-224

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 178.79486083984375 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 31.335294008255005 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 31.02705144882202 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 30.46781380971273 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 29.898873567581177 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 29.19613480567932 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 28.613141854604088 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 28.254406315939768 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 27.883546829223633 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 27.62254042095608 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 27.360146045684814 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 27.115167422728106 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 26.854201634724934 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 26.655908731313854 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 26.468641213008336 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 26.267972469329834 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 26.08202338218689 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 25.884538692586563 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 25.682829327053494 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 25.521376082771706 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 25.33110809326172 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 25.132726033528645 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 24.937215913425796 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 24.755861769551817 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 24.56439654032389 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 24.374418020248413 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 24.205115483357357 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 24.106255955166286 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.93534915787833 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.75667433903135 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 23.5766925017039 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 23.398941570712672 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 23.221746861934662 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 23.04855978127682 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.878715725506055 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.712431975773402 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.542900191413032 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 22.400863808554572 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 22.25528722060354 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 22.102916534130394 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.94728183746338 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.803036457154807 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.661066066651117 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.518830731857655 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 21.3747831474651 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 21.233774609035915 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 21.08043930841529 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.945130921424703 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.805963913599648 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.673263885536972 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.529069900512695 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.382254670648013 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 20.247304586263805 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 20.114838136816925 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.978517391063548 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.84079948338595 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.703345571245467 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.564836891073927 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.42076354191221 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 19.2762868081109 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 19.141937891642254 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 19.00541820291613 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.861758178280244 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.72159935557653 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.58526986837387 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.447855619283825 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.31160325715036 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 18.16958659442503 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 18.024204590741327 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.887808025747105 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.75083637237549 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.616873768013967 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.482646942138672 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.347914369138955 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 17.216521585309827 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 17.084784905115765 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.949933265384875 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.81561788955292 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.67968339797778 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.543368979345395 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.40491497516632 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.27045806248983 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.1376559036534 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 16.003580021570965 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.86559542020162 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.728133425993079 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.588762610457664 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.451149233456317 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.313603921370072 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.175329272666673 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.038896401723227 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.904355934688022 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.772593798844712 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.639717886524817 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.505722198080509 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.368882994902762 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.232322454452513 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.096143235865327 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.960063029308708 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.822882110422306 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.686222791671753 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.59130579410213 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.456446432599835 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.321869919600996 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.184422126183144 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.047445240474882 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.910946859503692 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.773958019007033 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.637418649814746 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.501098365958677 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.370185288515959 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.233385414690584 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.095407894679479 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.957123051702448 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.820475235319975 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.683576407639876 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.547091780037716 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.409840596027864 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.272437018863226 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.136738364436045 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.999281088511148 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.861126160818683 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.722224587299785 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.582891128896698 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.444905527176395 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.307735109329224 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.170804220532615 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.033172624317679 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.895916417241096 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.75907611292462 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.621758167560284 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.48494323155352 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.34877613096526 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.212863031186556 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.075164261148936 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.940566725201077 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.804263283224667 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.665715170602729 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.527567303698996 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.389444941239391 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.252204622541155 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.11434634864753 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.976195990199774 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.838784441247687 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.7008781168195934 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.563051560829425 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.425424085904473 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.288428149255766 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.150547311112688 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.013142715364495 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.875681161880493 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.738409936033337 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.600815195786325 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.463591681586372 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.32632894639845 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.188526991874942 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.051418506182157 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.9139616216064255 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.776398580285567 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.639142829667097 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.501451134681702 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.364056181463396 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.226899638588046 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.089759415644078 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.952859721532682 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.815660296064435 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.678485201065799 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.5415183041623965 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.404110681442987 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.266635395366059 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.129181342966416 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.9917589962831017 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.854223961053893 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.7158995129469505 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.578495557280793 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.4408332620348245 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.303064779801802 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.1654992157456565 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.028335970439268 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.8907895674252644 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.752795378367106 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.614954713958403 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.477822259232238 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.340178259083482 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.2025675773620605 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.064842984483049 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.9272498648653749 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7897718309718658 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.652130679881319 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.5145351937208225 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3769442784158805 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2393509680063937 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.10172368089358 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9640809489037706 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8263885974884033 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6886764611953344 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5509796969744624 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4132422009095323 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.27550808107010044 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13776020668259817 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   27.5s finished

    1974 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  9.339 seconds)

**Estimated memory usage:**  1899 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
