
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7ff76e74a5e0>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 146.47245407104492 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 24.87262773513794 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 23.00263738632202 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 22.474611679712932 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 22.035083770751953 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 22.233298301696777 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 21.903366804122925 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 21.801036391939437 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 21.622020721435547 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 21.428762118021645 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 21.21807336807251 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 21.044731118462305 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 20.86995752652486 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 20.71831226348877 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 20.567978484289988 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 20.43008852005005 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 20.299132585525513 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 20.160183443742643 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 20.020752323998344 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 19.879973248431558 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 19.794533014297485 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 19.66687674749465 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 19.53655901822177 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 19.414954351342242 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 19.285032749176025 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 19.157335996627808 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 19.03857845526475 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 18.926984972423977 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 18.80409336090088 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 18.687507440303932 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 18.566209077835083 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 18.44824021093307 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 18.33526486158371 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 18.211803551876184 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 18.094525421366974 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 17.977815832410542 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 17.930243571599323 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 17.811215729326815 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 17.706439168829668 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 17.588680352920143 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 17.469508171081543 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 17.355581777851757 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 17.242832740147907 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 17.126161298086476 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 17.01476916399869 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 16.90695521566603 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 16.797032294066057 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 16.68167198972499 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 16.56763418515523 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 16.4530769464921 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 16.384499073028564 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 16.2722189987407 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 16.18216367868277 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 16.07028228831741 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 15.959345093479863 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 15.850621700286865 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 15.733064992087229 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 15.618227728626183 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 15.505477839502793 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 15.396087897025932 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 15.282444794972738 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 15.167839398149585 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.054862768419326 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 14.949740966161091 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 14.841553181409836 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 14.730583300957313 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 14.617957310243087 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 14.50459796279224 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 14.394647261675667 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 14.287048391673876 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 14.177573033741544 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.063811507023557 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 13.953748491075302 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 13.84226254567708 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 13.7311428559793 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 13.625431458155315 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 13.519452622062282 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.40812866099469 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.29668787198189 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.186872962154919 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.076976656913757 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 12.968421662295308 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 12.859240473770514 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 12.74882775616933 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 12.641547645841326 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 12.529527159298167 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.416886989460433 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.306963024468258 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.198035890405828 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.09099402320519 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 11.983203305138483 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 11.878597607979406 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 11.772474817607716 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 11.663795594246158 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.552803922206797 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.442581741433395 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.331889609495798 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.222587265919165 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.115263072811828 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.00615306334062 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 10.89863896369934 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 10.79114542149081 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 10.682535592247458 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.573787425328227 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.463904234079214 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.356825942084903 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.246531864382186 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.135225844160418 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.02530069704409 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 9.915234668539204 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 9.806107781150125 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 9.697380091692951 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.592852115631104 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.482504684313207 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.373135503969694 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.265009579451187 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.15582221129845 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.056367362666334 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 8.94899622060485 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 8.838624439319643 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 8.729825814565022 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.621133351128949 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.511317288289305 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.400866318524368 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.290376732426305 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.180011653900147 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.070007456673517 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 7.9600064285158165 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 7.849938780069351 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 7.740582473518312 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.63085363461421 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.521519921208156 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.411190242478342 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.301394177558727 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.191990980461462 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.084974244788841 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 6.976374009076286 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 6.866900927829046 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.757677714029948 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.648105216540879 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.539027043751307 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.4288720205320535 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.319619655609131 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.209986620016031 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.101984434657627 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 5.992396502659238 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 5.8825123179448795 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.772758540653047 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.664235843194498 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.554998981872661 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.4453502496083575 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.336822029770604 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.2273080976385815 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.118057140337876 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.008707449033663 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.899442111292194 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.790152586423433 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.681160908595771 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.572108624856683 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.462899338524297 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.353643417358398 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.244285114063239 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.1350026189545055 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.025702564262905 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.9164868680442253 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.807323000647805 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.6981304812144082 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.5893182012135396 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.4802333286830356 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.371103158363929 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.2620540927438175 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.1530207500123137 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.045031658438749 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.9366352006879155 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.827867891596652 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.718813623700823 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.6100907867605034 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.5012821854844605 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.39230770475409 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.2833953503123876 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.1745067967308893 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.065641400563783 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.956721347766918 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.8479254792948239 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.7392373085021973 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.63051480215949 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.5218293205384286 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.413082696537283 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3043895021398015 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.1956255309796207 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.0868641828235825 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.978143489797702 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.8693955540657043 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.760690596437207 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6519861762056646 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.543382296195397 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.43470789461719744 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.32603703416543567 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.21735770052129574 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.10867457653409872 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   21.7s finished

    1973 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  57.490 seconds)

**Estimated memory usage:**  1922 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
