
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print("")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f0a8bb76df0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 237.65087127685547 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 41.4594087600708 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 39.19192957878113 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 38.263184785842896 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 37.64910936355591 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 37.16777443885803 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 36.772199392318726 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 36.42553448677063 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 36.22647285461426 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 35.94761615329318 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 35.73888301849365 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 35.51309615915472 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 35.30140042304993 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 35.09495735168457 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 34.86799335479736 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 34.66850733757019 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 34.45457637310028 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 34.2193255704992 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 33.974115742577446 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 33.74055304025349 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 33.50753903388977 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 33.291387716929115 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 33.10334532911128 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 32.90752809980641 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 32.6986714998881 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 32.513789892196655 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 32.30972484441904 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 32.10459408053645 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 31.902064732142858 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 31.709687109651234 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 31.527406136194866 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 31.330323057789954 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 31.136590898036957 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 30.94760655634331 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 30.770655800314515 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 30.582714455468317 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 30.39592409133911 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 30.210933376002956 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 30.025538883711164 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 29.8374321216192 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 29.65928077697754 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 29.466923771834953 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 29.284366902850923 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 29.108116560204085 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 28.927236557006836 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 28.748053391774498 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 28.562696166660476 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 28.37881348995452 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 28.19384463628133 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 27.9990228098266 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 27.80097270011902 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 27.605489253997803 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 27.407055854797363 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 27.21641621049845 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 27.02944349359583 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 26.838534615256567 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 26.65367685045515 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 26.469441033246223 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 26.27709918186582 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 26.082679764699126 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 25.898168961207073 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 25.712209900871652 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 25.532722419308076 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 25.344982309946936 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 25.151816576719284 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 24.96036325968229 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 24.772127541628752 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 24.587444636359145 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 24.402286627713373 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 24.21929325228152 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 24.031643867492676 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 23.844276505456843 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 23.65578672620985 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 23.465977417279596 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 23.278781678225542 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 23.08974107106527 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 22.902432353873003 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 22.715063457365158 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 22.52880946183816 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 22.34995730617378 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 22.163227915763855 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 21.97386212113463 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 21.786215974063406 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 21.598450373454266 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 21.4124082837786 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 21.227329408421237 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 21.040489096974216 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 20.853199660092937 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 20.665655959736217 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 20.478263356712425 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 20.29090613789029 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 20.104800140464697 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 19.917702571205474 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 19.731312367223925 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 19.54543297848803 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 19.357715380819222 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 19.174209435780842 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 18.99121877581803 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 18.810803452316595 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 18.626135457645763 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 18.442415714263916 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 18.258660170111327 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 18.07494663257225 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 17.890097733840204 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 17.706343504098747 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 17.522543101083667 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 17.34049725982378 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 17.157637241844817 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 16.9757185070603 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 16.791330713744557 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 16.60761477730491 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 16.425322741001576 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 16.2422137260437 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 16.054922692543638 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 15.8669548494774 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 15.679876379344773 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 15.492525988611682 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 15.305925090088804 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 15.118840229713312 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 14.932466334655507 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 14.745550155639648 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 14.558894374153832 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 14.372320620740048 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 14.186091494754077 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 13.999991455385763 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 13.81404776573181 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 13.628194665151929 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 13.442742191900418 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 13.257075548171997 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 13.071211766827014 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 12.885349732178907 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 12.69987592624344 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 12.514521584366307 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 12.33026297110364 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 12.144553632878544 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 11.958648257785372 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 11.773269765517291 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 11.587775413137283 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 11.402822656907897 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 11.220156520390681 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 11.03635607446943 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 10.85145406520113 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 10.668815706817197 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 10.48444802444298 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 10.299705584843954 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 10.115904873815076 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 9.93209981918335 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 9.747319661030152 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 9.56304068178744 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 9.379296416404264 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.195535898208618 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.01278086213876 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 8.829427468149285 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 8.64665977160136 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 8.463003109027813 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.279572086949504 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.095700080578144 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.911765643745471 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 7.728074792065197 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.544715995308738 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.361521244049072 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.177836523292968 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.9942234445501255 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.810449203830555 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.626835840504344 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.443166696664059 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.259029661316469 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.074355900644543 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.889734767732166 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.7053689406468315 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.521495047737571 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.3376655369474175 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.153061478636986 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.968641983980389 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.785028342542978 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.600885186876569 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.416654532605951 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.2325205520047975 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.0485691756344915 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.864769995545542 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.680952893363105 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.496723530700852 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.312467698212508 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.1282057723060985 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.9441222729890244 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.760253700050148 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.5764311385411087 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.3923699435065773 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.2082334934396943 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.0240663157569037 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.840014106348941 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.6559797469233968 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.4719341893990834 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.2879238029835753 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.1039011945429538 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.9198624782073191 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.735861247899581 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5518773884942689 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3679100744652026 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1839482963983737 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   36.8s finished

    1973 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  57.888 seconds)

**Estimated memory usage:**  1901 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/nilearn/nilearn.github.io/main?filepath=examples/auto_examples/02_decoding/plot_oasis_vbm.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
