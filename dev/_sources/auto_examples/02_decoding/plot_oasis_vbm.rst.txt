
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f755c1e4880>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 204.88977432250977 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 36.4090940952301 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 33.72336673736572 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 32.63913440704346 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 32.23049235343933 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 32.05983281135559 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 31.56112066904704 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 31.34122933660235 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 31.313810348510742 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 31.023931715223522 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 30.730793476104736 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 30.49823687293313 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 30.427029689153034 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 30.540330776801476 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 30.6731288092477 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 30.647535165150963 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 30.712170720100403 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 30.690254225450406 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 30.585562441084118 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 30.537998739041782 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 30.389052629470825 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 30.300007547651017 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 30.247864593159072 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 30.168261642041415 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 30.112220605214436 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 30.069066047668457 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 29.96122059455285 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 29.863351009510183 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 29.717252458844868 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 29.640667627597676 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 29.574608167012535 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 29.47999075920351 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 29.37001258134842 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 29.235276605143692 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 29.073104171191947 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 28.954686335154943 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 28.837212642033894 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 28.70550832877288 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 28.56909701698705 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 28.4079473568843 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 28.212621688842773 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 28.06899498730171 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 27.869638953890117 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 27.648179492285085 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 27.46136836572127 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 27.27766389316983 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 27.1201678669971 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 26.993319222267637 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 26.85434810320536 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 26.694263448520584 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 26.54116415977478 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 26.347030845342896 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 26.168888165400578 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 25.96853894557593 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 25.76290684276157 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 25.58694349635731 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 25.39143480573382 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 25.19522021946154 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 25.00359768703066 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 24.783934641692596 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 24.60574285189311 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 24.42506368433843 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 24.261038464884603 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 24.070335180040388 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 23.916773408651352 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 23.730290981439445 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 23.559082782629766 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 23.361657135522186 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 23.16696823344511 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 22.971906375193942 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 22.796021836144586 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 22.611271196687724 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 22.445819007025822 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 22.2648305337723 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 22.08703625524366 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 21.90171480178833 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 21.721261426022178 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 21.515282448236043 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 21.316321800916622 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 21.15010661113111 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 20.960274696350098 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 20.796125132360576 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 20.601393594974425 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 20.40210115765951 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 20.21516786302839 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 20.02100881408243 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 19.831764686939326 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 19.65283254097248 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 19.47717081416737 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 19.286628388286974 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 19.1052450603909 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 18.928920075133608 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 18.754648415938668 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 18.603241233415503 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 18.439168615544094 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 18.264742575193708 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 18.09162074327469 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 17.90361206064519 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 17.719574967209173 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 17.553063366148205 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 17.37066388130188 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 17.190221744008582 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 17.00440719548394 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 16.819168104708773 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 16.640111116262585 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 16.46441812742324 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 16.276324285651153 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 16.089992322654368 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 15.914665663683856 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 15.736756197903134 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 15.561388427560981 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 15.399575995969343 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 15.222599284989492 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 15.039705314467438 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 14.859113931655884 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 14.673855138861613 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 14.497018649660308 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 14.330323869346554 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 14.15753011380212 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 13.980917173273424 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 13.804282983144123 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 13.626900509369277 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 13.442642270541583 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 13.262963093393216 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 13.086001250051684 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 12.908955430984497 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 12.731862090882801 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 12.55844615200373 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 12.382931560277939 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 12.206282610117002 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 12.028660719211285 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 11.851686410321534 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 11.679420052152691 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 11.510278739427266 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 11.335399431968803 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 11.165147145589192 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 11.000827003927792 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.829458852754023 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 10.65632905130801 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 10.481143615228666 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 10.32209699494498 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 10.151131624871113 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.983652111510157 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.811701821280526 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.636870450443691 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 9.469278795965787 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 9.29770383116317 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 9.12590493474688 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.952542427423838 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.783467904033277 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.613075017929077 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 8.441369318804204 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 8.2757342991076 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 8.10976908877005 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.939807876363977 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.7710000622657045 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.601684197401389 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.431289455693238 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 7.260058744044243 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.0870164250427825 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.914640367031097 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.742870948329475 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.5715978999196745 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.399391323510854 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.22796241830035 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.057025540958752 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.885634850306683 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.712231321963007 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.541264806474958 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.370404837399545 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.19883186676923 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.027443332281726 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.856640638307084 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.685649162083003 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.515425558747917 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.343203748975481 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.170403718948364 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.9968560913861806 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.8239075441039008 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.650662977602229 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.476984182993571 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.3046948936104115 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.131229620713454 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.957645164812849 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.7846186472022016 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.6121426401911556 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.437872653366417 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.2637516725509563 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.0888865298413215 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.9145966862875317 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.7416213311647113 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.5677081864541738 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.3939399421215057 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.2201096665673923 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.0461537469293654 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.8719256291022667 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6977698462350027 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5234917275191564 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3491224471968834 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.17480908206958867 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   34.9s finished

    1984 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  26.017 seconds)

**Estimated memory usage:**  1841 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
