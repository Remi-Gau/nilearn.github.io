
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fb8f887a340>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 147.64785766601562 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 24.694565534591675 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 22.80722451210022 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 22.168064196904503 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 21.761502742767334 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 21.49838662147522 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 21.323837280273438 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 21.208878687449864 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 21.08712387084961 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 21.504167901145088 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 21.314429998397827 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 21.1862803589214 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 21.002087354660034 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 20.81315673314608 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 20.643075023378646 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 20.47228757540385 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 20.33392345905304 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 20.20082919737872 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 20.063517729441323 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 19.940309022602282 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 19.804804801940918 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 19.669071560814267 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 19.55632764642889 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 19.41757809597513 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 19.283224900563557 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 19.1534640789032 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 19.046171775230995 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 18.92257007846126 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 18.8163298538753 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 18.69972284908952 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 18.573156118392944 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 18.456272763590658 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 18.33514094352722 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 18.21581530570984 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 18.094809448017795 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 17.972750084740774 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 17.860252327389187 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 17.745237118489033 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 17.63305189735011 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 17.516010901866817 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 17.40181541442871 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 17.29317135345645 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 17.20009238379342 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 17.096903623536576 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 16.98232561891729 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 16.881138536665176 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 16.773177768873133 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 16.659723073878187 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 16.546658237775166 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 16.437497241156443 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 16.322572231292725 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 16.207941485386268 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 16.093359121909508 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 15.980902487376952 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 15.893194242759987 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 15.78865530274131 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 15.683525357927596 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 15.569198369979857 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 15.455804907042403 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 15.342107510162611 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 15.23079530398051 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 15.121466503768671 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.013525947447745 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 14.89955451374962 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 14.787904620170593 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 14.690012950163622 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 14.580433794946382 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 14.46800168948387 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 14.35560161927167 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 14.243405711823616 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 14.131181035723005 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.020046156896672 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 13.907989501953125 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 13.796397914625194 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 13.686835198789028 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 13.585937420527141 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 13.478933346898932 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 13.372752223696027 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 13.2632534076006 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.150881169717522 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.043167233467102 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 12.93474887624199 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 12.824837108937706 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 12.716740470334708 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 12.607624576205298 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 12.49705860194038 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 12.38938869986423 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 12.278482045250378 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.166005784815008 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.055929502744352 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 11.945451498031618 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 11.835279663840492 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 11.725500148275625 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 11.615243352869506 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 11.506539892643056 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 11.395750334388332 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 11.284818132718403 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.175139124860468 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.070147674910876 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 10.961125378656869 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 10.8501877784729 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 10.744579808546765 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 10.635029236475628 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 10.525687011700231 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 10.415616548978367 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.30512817700704 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.195258509437993 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.086046497398447 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 9.976172067500928 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 9.866451307174263 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 9.756644920869308 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 9.648057944065815 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 9.539844223431178 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 9.43098933295866 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.321000132644386 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.212240125821983 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.105299382374204 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 8.999563186596601 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 8.889928563166473 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 8.7805330933643 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 8.671645005544026 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 8.563633158187237 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.455655230850471 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.347273121035196 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.237862156283471 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.128706789016723 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.019568431945075 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 7.918364314582404 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 7.80940443277359 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 7.700370611146439 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 7.592429857987623 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.4846033886188765 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.375621203220252 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.26679535736715 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.157509056489859 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.048265836856983 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 6.939579458797679 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 6.830069225199901 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 6.720868404360785 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 6.6122789485849065 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.5034421512058795 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.394834805887641 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.286076831146025 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.176828694510293 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.067974050839742 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 5.95904909331223 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 5.850204823768302 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 5.743327663058326 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 5.634490670384587 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.525708582577289 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.4172492027282715 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.308235700556774 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.1996846199035645 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.0914490861830375 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 4.982999705649041 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 4.874111121700657 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 4.765699759507791 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.657977743513265 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.549732709232765 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.440907806720373 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.3331338763237 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.22555921240623 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.118375062942505 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.010297054162055 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 3.9022437363136104 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 3.793663566762751 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.6849877891770326 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.576489048803638 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.468034244719006 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.3595563109809827 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.251317262649536 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.1426203083573725 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.034054484478263 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 2.92545249145155 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 2.817036554731172 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.7085864884512763 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.600084066390991 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.4915562443814037 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.3829816941464883 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.2744578662531336 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.165937927034166 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.057463784244179 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 1.9490635054452077 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.8405585315058142 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.7322793421537979 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.6241895057059623 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.5159130711709299 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.407536187911416 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.2991205174872216 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.1907734908754863 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.0824120421158638 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 0.9741432854018286 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.8658937116463978 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.7575998417454062 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.649336581377639 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.541140446296105 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.432906724968735 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.32466435311409425 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.21642608112759062 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1082098016786815 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   21.6s finished

    1982 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  57.095 seconds)

**Estimated memory usage:**  1849 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
