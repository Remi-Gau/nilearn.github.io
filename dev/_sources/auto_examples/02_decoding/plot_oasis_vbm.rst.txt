
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-90

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 148-150

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 150-163

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-166

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fbb9ba2fbe0>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-229

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 194.61393356323242 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 33.45737981796265 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 30.87280297279358 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 29.72295665740967 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 29.03190279006958 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 28.634581089019775 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 28.38518293698629 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 28.66521317618234 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 28.385404586791992 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 28.131128470102944 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 27.938109159469604 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 27.823310982097283 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 27.611264387766518 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 27.357648060872005 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 27.433195250374933 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 27.193037748336792 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 26.977935671806335 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 26.78854675853954 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 26.613275819354588 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 26.450006447340314 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 26.259703874588013 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 26.318313382920763 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 26.140808625654742 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 25.97157292780669 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 25.809460481007893 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 25.657902002334595 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 25.494374733704788 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 25.334309887003016 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 25.276511260441374 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 25.103750368644448 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 24.915385325749718 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 24.744242068259943 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 24.57587832212448 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 24.417781620314628 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 24.26328162585988 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 24.200738974979945 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 24.026541656917995 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 23.84847236324001 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 23.699496520193 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 23.53776836395264 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 23.374262809753418 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 23.21417683508338 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 23.12607198669797 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 22.965721540672835 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 22.799826622009277 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 22.628414816326565 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 22.46262011320695 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 22.317749216201456 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 22.165834665298462 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 22.082969699587142 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 21.928707361221313 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 21.759416014540427 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 21.59526722247784 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 21.43549788223123 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 21.272892951965332 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 21.10933715646917 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 20.945644242422922 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 20.844710705573096 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 20.69989729749745 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 20.540326061895335 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 20.390828291575115 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 20.2406696100704 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 20.09969288303006 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 19.947443818289134 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 19.836290419101715 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 19.675013285416824 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 19.51574708476211 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 19.35963208995648 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 19.204426541047937 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 19.047863825507786 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 18.89116961615426 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 18.777859362078384 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 18.626912434895832 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 18.47299419690485 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 18.31991597124048 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 18.166158199310303 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 18.01764726638794 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 17.86482395754232 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 17.74055211360638 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 17.586183336716662 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 17.443068981170654 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 17.28986003075117 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 17.137151276193013 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 16.987170575613 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 16.834446032842 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 16.695755916483265 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 16.55987686889116 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 16.4136166271122 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 16.26942747289484 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 16.123473049549574 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.977455112669205 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 15.828058939713697 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 15.675590763921324 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 15.546784949559038 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 15.397291330581016 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 15.247322747581885 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 15.096797506014505 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.950832057244998 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.801179691236847 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.652328207035255 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.5241379737854 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.372904007977779 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 14.22307887731814 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 14.073687689975628 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.924985372103178 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.775228784197854 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.62432454217155 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.491946848753457 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.342385247901634 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.193137177633583 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.043720353733411 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.89428869668428 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.745284012385778 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.597339385378676 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.46638354083948 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.318586349487305 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.17213877316179 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.024038836487339 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.87569952819307 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.726232314310154 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.577391783396402 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.428818216008588 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.293059403779077 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.144662537225862 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.997681810009864 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.851850032806396 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.706858566829137 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.561918795578123 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.416149228811264 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.280110913653706 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.133722231938288 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.993774410422521 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.846648599162245 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.69915150879021 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.551162257123348 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.403634539356938 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.26720002118279 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.120577488502446 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.973479986190796 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.826549056622621 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.680700642721993 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.534162306616492 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.386482252201564 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.249791765546465 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.104301717546251 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.958840271522258 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.811724176145579 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.665423561926602 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.519272372529314 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.3729667791584195 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.230203787485758 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.088545293997455 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.943272565540514 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.797314646976447 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.6513296505073445 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.5055185517957135 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.360142817864051 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.21552221030946 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.077273776259603 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.932136949503197 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.786159694194794 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.640195341584105 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.494238058725992 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.349355658139188 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.20526249815778 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.065806713971225 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.921124053288655 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.775598747287682 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.630366734095982 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.485056228186251 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.339795421151554 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.194631715964156 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.053185845530311 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.90807934854761 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.762675274377582 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.617344924381801 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.4721426530317823 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.327112989910578 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.18208671151922 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.0395605470881115 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.8944731288486056 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.7490862469646813 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.603828383016062 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.4588212875720585 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.3139473666315493 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.169094465874337 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.025776711843347 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.8808910196477717 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.7359826970607675 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.5910069513573217 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.446099795793232 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.3013151078948175 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.1565327843030293 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0118877961845594 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8681015525896525 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7233545107719226 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5786044548968879 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4338962777617014 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.28922476672162917 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1446032847591381 seconds remaining)
    1978 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  16.521 seconds)

**Estimated memory usage:**  1896 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
