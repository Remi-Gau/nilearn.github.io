
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f51c7d0edf0>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 198.2712745666504 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 36.55826210975647 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 33.63896083831787 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 32.67503396670024 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 32.02713489532471 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 31.732299327850342 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 31.85535271962484 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 32.03172063827515 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 31.935178756713867 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 31.67341923713684 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 31.30910086631775 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 31.023018576882105 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 30.74245444933573 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 30.474606697375958 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 30.219318662370956 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 29.980263153711956 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 29.914692282676697 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 29.907924203311698 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 29.661383708318073 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 29.441032359474587 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 29.219806909561157 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 29.008575325920468 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 28.797856547615748 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 28.610168322272923 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 28.403453985850014 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 28.21136164665222 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 28.016173894588764 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 28.003347017146922 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 27.93965836933681 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 27.807965484158743 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 27.620980660120647 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 27.420498847961422 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 27.221881806850433 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 27.030585614117708 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 26.844278363620536 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 26.667823280606953 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 26.48748207092285 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 26.300484663731343 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 26.18002735941034 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 26.074669697345833 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 25.8878173828125 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 25.71715014155318 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 25.537545442581177 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 25.363088081049362 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 25.196384408257224 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 25.02343511581421 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 24.84558948226597 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 24.673844256299606 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 24.59575581550598 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 24.493971162912796 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 24.322949409484863 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 24.145942379446588 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 23.968332840846134 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 23.78961012948234 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 23.612454661616574 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 23.433789535002273 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 23.2605494090489 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 23.08861763017219 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 22.927776007816707 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 22.808184336807766 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 22.657223622004192 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 22.488024363752274 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 22.315805519780803 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 22.15102456486414 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 21.982151806354523 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 21.81412515273461 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 21.646712736649945 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 21.481987821522043 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 21.31432271003723 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 21.170786249464836 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 21.05126030104501 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 20.92541329289826 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 20.754654778374565 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 20.588769550192847 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 20.418247519312676 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 20.25986075401306 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 20.093786415300873 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 19.92419854077426 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 19.75867022612156 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 19.5916876702369 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 19.441195249557495 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 19.30211565818316 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 19.136405514507757 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 18.970549253096063 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 18.804268371491204 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 18.638291541267844 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 18.468743230021275 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 18.301750838071452 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 18.13436304439198 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 17.96626670708817 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 17.80659227901035 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 17.66915938094422 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 17.527379378028538 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 17.363312975052867 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 17.196986223788972 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 17.030937985370034 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 16.864476680755615 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 16.698358796306493 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 16.532078942474055 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 16.368026745439778 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 16.20556330680847 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 16.058751384810645 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 15.898392097622741 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 15.730833574406152 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 15.56476064828726 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 15.399823302314395 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 15.23671139861053 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 15.07135516906453 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 14.90688666590938 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 14.742532642609483 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 14.580196575684981 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 14.43916180327132 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 14.294452479907445 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 14.128482702559074 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 13.9640521961346 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 13.79758858680725 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 13.631418524117306 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 13.466326925489637 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 13.300569683818495 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 13.133972648812943 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 12.968931198120117 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 12.811655578534467 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 12.65577597305423 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 12.491413975149635 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 12.325483368289087 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 12.160405397415161 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.996130576209417 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 11.832234737441295 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 11.66688421368599 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 11.502377266107603 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 11.338550439247717 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 11.17442005099231 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 11.014174779256185 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.865876884388745 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.711272004824965 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.546137129818952 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 10.380793627570657 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.216076039919887 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 10.052254089410754 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.887816945425898 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.723684413092476 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.562067772479768 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.397746139848737 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.24002824629937 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.081589513354832 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.91812302326334 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.754089757187725 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.590337610569131 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.426814485240627 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.263380538697211 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.100596984227497 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.937483768589449 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.775233268737793 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.6625383663800815 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.541249439313814 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.42899723206797 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.288722429520044 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 7.122041369699368 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.955362099635449 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.788261906905744 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.624913275241852 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.461848435194597 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.294883204095157 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 6.127973097233684 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.961156676455242 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.794302217888109 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.627544055502098 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.4606162559486435 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.2943510328020364 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 5.129593720802894 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.966792302973131 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.8033084632360445 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.636703175167705 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.4701961740593 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.303871894704884 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.1380647250584195 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.9714881073344834 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.8053407480487715 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.63922082708123 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.473398215277901 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.3093055884043374 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.1440090514019707 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.978132360584133 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.812693516413371 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.6466973138892134 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.4804705349174707 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.3142296293730378 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.148059481605489 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.982068472720207 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.8158912936215676 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.6500836673535797 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.484578872850428 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.3189196288585663 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.1536099811909728 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9883432388305664 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.8232551599160218 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6584045886993408 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4936376791920154 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3289550482624709 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.16441309152536057 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   32.9s finished

    1952 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  22.215 seconds)

**Estimated memory usage:**  1874 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
