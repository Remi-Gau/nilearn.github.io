
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (:term:`VBM`)
to study the relationship between aging and gray matter density.

The data come from the `OASIS <https://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard :term:`VBM` pipeline (using SPM8 and
NewSegment) to create :term:`VBM` maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the :term:`ANOVA` step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the :term:`ANOVA` step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

:term:`SVM` weights are very noisy,
partly because heavy smoothing is detrimental for the prediction here.
A standard analysis using mass-univariate :term:`GLM`
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 112-123

Prediction pipeline with :term:`ANOVA` and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

In nilearn we can benefit from the built-in DecoderRegressor object to
do :term:`ANOVA` with SVR instead of manually defining the whole pipeline.
This estimator also uses Cross Validation to select best models and ensemble
them. Furthermore, you can pass ``n_jobs=<some_high_value>`` to the
DecoderRegressor class to take advantage of a multi-core system.
To save time (because these are anat images with many voxels), we include
only the 1-percent voxels most correlated with the age variable to fit. We
also want to set mask hyperparameter to be the mask we just obtained above.

.. GENERATED FROM PYTHON SOURCE LINES 123-149

.. code-block:: default


    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 150-152

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 152-165

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-183

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fdeaa465df0>



.. GENERATED FROM PYTHON SOURCE LINES 184-186

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 186-231

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 272.9964256286621 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 51.20400857925415 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 49.917946100234985 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 49.4125578403473 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 47.64151096343994 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 46.481738805770874 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 45.68566211064657 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 45.01332654271807 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 44.97005081176758 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 44.415372398164536 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 43.9926974773407 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 43.58051802895286 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 43.147474606831864 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 43.04292047940768 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 42.784637689590454 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 42.47502676645915 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 42.09492802619934 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 41.983552526025214 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 41.64616921212938 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 41.393048411921455 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 41.076932430267334 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 40.84543929781233 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 40.72911295023832 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 40.55362452631412 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 40.2546010017395 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 40.21012091636658 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 40.05897512802711 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 39.829263775436964 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 39.56588060515268 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 39.30525894000612 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 39.10371859868368 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 38.90608212255662 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 38.64123487472534 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 38.38882112503052 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 38.147221368901874 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 37.956356968198506 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 37.68406420283847 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 37.43231790774577 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 37.16775520224321 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 36.90388836004796 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 36.72736835479736 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 36.470811140246504 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 36.23025466146923 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 35.985922075981314 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 35.79299686171792 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 35.583691120147705 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 35.34974997976552 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 35.14329084436944 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 34.91219679514567 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 34.768328000088125 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 34.52337884902954 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 34.26944211417553 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 34.018206963172325 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 33.82913412687913 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 33.577304433893275 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 33.325103694742374 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 33.10585600989206 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 32.896783816187 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 32.69610953330994 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 32.451625840138576 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 32.20947774251302 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 31.96888186110825 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 31.788513098993604 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 31.5502459283859 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 31.310222625732422 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 31.06986115528987 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 30.864151911302045 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 30.622042083028536 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 30.37026584849638 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 30.122200627257858 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 29.88509239469256 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 29.691918490638194 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 29.453197055392792 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 29.209803326489176 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 28.96537053262865 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 28.72420072555542 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 28.521044103722822 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 28.277639178486613 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 28.036558897067337 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 27.805589048168326 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 27.606926321983337 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 27.371681460627805 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 27.129339351886657 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 26.89444927135146 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 26.661913837705338 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 26.455891286625583 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 26.219248095224067 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 25.982918761242395 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 25.749493338844992 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 25.53562001699812 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 25.349220222897003 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 25.107182374367348 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 24.86497627133909 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 24.632048573545234 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 24.41639799767352 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 24.178439516770215 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 23.97889963785807 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 23.748650934278352 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 23.527609902985244 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 23.2908153269026 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 23.056323766708374 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 22.816487343004432 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 22.59693761432872 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 22.360689299777874 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 22.121798955477203 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 21.88373939196269 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 21.651573037201505 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 21.436818149602303 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 21.200896616335267 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 20.965547496025714 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 20.7369621666995 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 20.51644070298822 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 20.282645974840435 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 20.047492383855634 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 19.813016853834455 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 19.575600396031916 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 19.353111505508423 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 19.119878186119927 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 18.881602683309783 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 18.64527531431503 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 18.430421352386475 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 18.200273819206178 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 17.964517206442164 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 17.736222096574984 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 17.506061538573235 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 17.282357597351073 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 17.04780239907522 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 16.81557046710037 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 16.583258539438248 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 16.360244102256242 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 16.126925413425152 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 15.893052769071273 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 15.66065990563595 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 15.425200761708998 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 15.199757807290375 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 14.963876865528247 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 14.729472216437845 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 14.493856503145539 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 14.278701101524243 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 14.042069785028911 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 13.806640659059797 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 13.573147974961193 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 13.344312899549243 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 13.118501306413771 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 12.888325876659817 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 12.656431584522641 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 12.422716777618616 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 12.19723973955427 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 11.96439331931037 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 11.737874272685723 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 11.504327297210693 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 11.270343441047416 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 11.04462462977359 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 10.81559325978647 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 10.583502992407068 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 10.351310260834234 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 10.133062686675634 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 9.900113013139956 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 9.667835033392603 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 9.436042016407228 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 9.204289436340332 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 8.97657188717623 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 8.744287066989475 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 8.511725333570702 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 8.281549982908295 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 8.053703214182999 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 7.822978125997336 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 7.591436811549935 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 7.360043389456612 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 7.128210225754235 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 6.899253887288711 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 6.668863642285442 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 6.437849322030711 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 6.206959131825177 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.975662132789349 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.747705663953508 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 5.517578504302285 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 5.286816062226807 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 5.056346070900392 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.827890807689902 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.597527450985378 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 4.368341098174206 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 4.138126451890547 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.9074371382186976 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.6786992860876992 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.448236136823087 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 3.217899981365409 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.9874655180436407 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.7585783156942814 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.528400615409568 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.297942512913754 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 2.067861212485748 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.8377011319001515 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.608330926746902 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.3785500698482869 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.1486103045634735 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.918723914088035 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.6892440863672247 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.4594065733630248 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.22965534128735413 seconds remaining)
    1989 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 35.609 seconds)

**Estimated memory usage:**  1912 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
