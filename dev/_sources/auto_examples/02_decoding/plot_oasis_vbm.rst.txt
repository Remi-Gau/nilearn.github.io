
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f62adba77c0>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 154.5095443725586 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 25.75544238090515 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 24.122974634170532 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 23.59091107050578 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 23.248522758483887 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 23.039769887924194 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 22.915764649709068 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 22.70298535483224 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 22.458417892456055 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 22.261519643995495 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 22.125726461410522 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 21.98890887607228 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 21.833884477615356 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 21.69452267426711 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 21.55543715613229 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 21.426560799280804 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 21.31353783607483 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 21.193168696235208 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 21.09452560212877 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 20.965008748205086 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 20.82699465751648 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 20.70089801152547 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 20.57741741700606 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 20.451401368431423 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 20.327605406443276 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 20.200120210647583 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 20.082659152837902 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 19.968837314181858 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 19.853096927915303 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 19.774943121548354 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 19.660746256510418 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 19.542381763458252 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 19.411819875240326 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 19.294257987629283 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 19.18421694811653 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 19.066333396094187 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 18.974758704503376 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 18.85635654346363 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 18.75588365605003 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 18.63141261614286 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 18.510801315307617 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 18.380816773670475 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 18.25959364573161 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 18.136325819547785 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 18.00959014892578 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 17.88253940476312 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 17.761933710264124 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 17.644686105403494 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 17.525604486465454 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 17.412669974930434 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 17.303179264068604 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 17.18955082986869 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 17.073618412017822 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 16.955270141925453 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 16.842509004804825 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 16.729166117581453 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 16.614040987832208 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 16.498854704070506 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 16.38675882898528 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 16.272139452271542 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 16.159350713094078 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 16.040970747588112 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 15.928203475090763 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.8168796811785 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 15.70135635137558 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.579843631157509 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 15.463745709621545 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.347066655087826 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 15.225765550837798 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 15.107359761777131 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 14.990135908126831 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 14.876889165018646 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.76309585571289 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.651120518984861 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.537422541025522 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 14.420578479766846 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.300669055236012 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 14.179080814510197 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 14.064993277574196 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 13.953624381294732 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.840181350708008 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.730776424761173 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.613071976638421 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.494817661951823 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.378546113059635 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.26045145707972 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 13.146609322969303 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 13.030765188151394 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.916298476132479 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.81063857775056 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.695562971962824 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.576045494813185 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.461807385734891 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.348540529128044 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.233577028233954 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 12.117820915422943 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 12.004360973834991 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.889050621347328 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.773999447725258 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.656841538169166 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.54880666732788 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.433059182497534 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.31960578993255 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.205672208545277 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 11.090716068561262 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.976194336300805 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.860427694500618 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.744845421514778 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.629334229010123 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.512166974741385 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.395565249703148 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.280002106417408 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.163201877049037 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 10.049098656240817 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.934736766313252 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.819250438524328 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.703625136408313 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.589504826782097 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.475116798433207 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.360789785865977 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.249300797780354 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.133752913514446 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 9.019101537641932 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.904968106649754 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.79020853196421 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.676540756225586 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.561282392532107 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.444808561970868 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.327637121081352 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.210092052932858 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 8.09250022814824 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.976693220720946 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.8612415935053965 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.747446438423673 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.6312668394686565 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.5149799717797165 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.39784184624167 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.282070655892365 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.166303351305533 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.0505272947627 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.934420824050903 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.819393634796143 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.703347347152065 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.58830843271909 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.4726841184828015 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.357608359435509 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.242754387528929 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.127853640082742 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.013497752112311 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.898938775862623 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.783756256103516 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.667879538820279 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.551660914170114 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.435427000320036 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.3194557784439676 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.203836010348413 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.087355124644744 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.97200992152949 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.856765369825725 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.741003981176412 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.62523627281189 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.509640643315286 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.393498626756079 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.277625249207385 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.162277436837917 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.046700571522568 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.9314009224075868 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.8160413439402325 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.7007721946353 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.585707011307485 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.4703306310317097 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.3546259584482647 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.2386614278305412 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.122859490400105 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.0073354956747473 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.892347880772182 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.7769566991112447 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.661477868839846 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.5461039435997437 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.4307106966412935 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.3153566254509816 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.19987224215302 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.084225948040302 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.968383594940269 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.852667352427607 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.7372066008078086 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.621267528944118 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.5054427391705028 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3898272869434762 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2739677189519165 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.1581173821499473 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.0424697374174108 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9267107645670573 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.8108249958315044 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.6949254925718013 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5790091294508714 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.46315289516838226 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.34736453700186637 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2315684593085087 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1158012624961048 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   23.2s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  1.144 seconds)

**Estimated memory usage:**  1861 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
