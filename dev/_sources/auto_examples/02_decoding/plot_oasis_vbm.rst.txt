
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (:term:`VBM`)
to study the relationship between aging and gray matter density.

The data come from the `OASIS <https://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard :term:`VBM` pipeline (using SPM8 and
NewSegment) to create :term:`VBM` maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the :term:`ANOVA` step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the :term:`ANOVA` step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

:term:`SVM` weights are very noisy,
partly because heavy smoothing is detrimental for the prediction here.
A standard analysis using mass-univariate :term:`GLM`
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-92

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 95-111

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 112-123

Prediction pipeline with :term:`ANOVA` and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

In nilearn we can benefit from the built-in DecoderRegressor object to
do :term:`ANOVA` with SVR instead of manually defining the whole pipeline.
This estimator also uses Cross Validation to select best models and ensemble
them. Furthermore, you can pass ``n_jobs=<some_high_value>`` to the
DecoderRegressor class to take advantage of a multi-core system.
To save time (because these are anat images with many voxels), we include
only the 1-percent voxels most correlated with the age variable to fit. We
also want to set mask hyperparameter to be the mask we just obtained above.

.. GENERATED FROM PYTHON SOURCE LINES 123-149

.. code-block:: default


    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 150-152

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 152-165

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-183

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f8391e65df0>



.. GENERATED FROM PYTHON SOURCE LINES 184-186

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 186-231

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 199.20110702514648 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 37.05321145057678 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 33.16040110588074 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 31.927186489105228 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 30.985814332962036 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 30.303844213485718 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 29.886847178141277 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 29.61121143613543 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 29.592573165893555 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 29.227373626497055 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 28.913611888885498 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 28.622211716391828 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 28.33595021565755 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 28.094989648232094 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 27.857306344168528 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 27.8012646039327 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 27.612525701522827 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 27.440531646504123 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 27.2430120839013 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 27.046473214500832 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 26.913604974746704 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 26.8817321232387 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 26.706184062090788 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 26.556745041971624 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 26.369891802469887 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 26.19190287590027 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 26.015669951072105 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 25.841817988289726 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 25.761354650769917 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 25.58371513465355 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 25.42049272855123 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 25.257498787295432 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 25.10598850250244 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 24.946422186764803 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 24.84920998180614 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 24.834739719118392 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 24.67849498324924 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 24.509483156977474 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 24.3342971299824 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 24.159418790768356 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 23.993122100830078 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 23.822396470279227 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 23.72978075345357 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 23.572029174760328 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 23.412961526350543 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 23.252904653549194 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 23.08514292343803 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 22.92441399046715 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 22.752699891726174 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 22.62379597157848 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 22.46101140975952 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 22.30257733662923 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 22.13118886947632 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 21.966137341733248 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 21.8059577676985 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 21.63902555812489 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 21.517608915056503 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 21.362881104151406 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 21.211532938069308 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 21.05509493714672 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 20.903104146321617 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 20.75038463170411 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 20.59683959714828 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 20.479556155583214 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 20.326639413833618 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 20.178878710820126 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 20.017273035916414 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 19.86018391865403 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 19.703480075387393 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 19.540456312290136 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 19.412673234939575 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 19.260589458573033 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 19.10728327433268 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 18.952051564438705 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 18.803702212668753 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 18.64814599355062 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 18.487935066223145 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 18.35848803334422 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 18.207553545633953 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 18.05336856842041 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 17.896381616592407 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 17.74444229220167 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 17.586539675549762 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 17.42894092238093 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 17.299636863526842 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 17.146394603392658 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 17.00096229065296 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 16.846813832206287 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 16.69363156231967 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 16.544394782419953 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 16.411721388498943 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 16.25521610595368 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 16.10114538151285 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 15.947801095183179 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 15.806604507121634 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 15.65390151425412 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 15.499584913253782 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 15.36394422816247 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 15.214174163584808 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 15.065150251292218 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.911986112594604 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.761009518462833 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 14.606263843237185 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 14.45197199154826 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 14.319286713233362 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 14.16605824515933 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 14.017819580042138 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.866176551747545 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.716384472670379 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 13.563311299052806 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 13.412150729786267 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 13.272532787408915 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 13.120102882385254 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.966891782473674 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.81521859503629 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.66471363150555 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 12.512847218020209 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 12.360465548996233 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 12.223218125812078 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 12.07425296406786 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.925020058949787 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.77461527201755 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.621988093266722 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 11.470967847157299 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 11.320343786670316 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.180208349227906 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.0308232118213 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.881389019057506 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.731506064534187 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.580535936725232 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 10.428834511683537 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.27808231979836 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.136848500280669 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.989287964383463 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.839762566694572 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.706756591796875 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.556624917423024 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 9.406490350291676 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.264242908228999 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.11587423729382 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.966600213732038 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.8183504723488 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.668077693858617 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.517935269362443 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.370134459601509 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.224888291852228 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.073938575509477 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.92379219191415 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.772703905363341 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.62160642195068 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.471926848093668 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.321162102238231 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.1763394757321 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.025308570051505 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.875479611483487 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.725051718373453 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.575129667917888 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.425557458476655 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.2757103624223145 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.1296405267415555 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.979016959667206 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.829220635550363 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.678980223926497 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.528999242314532 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.38596603347034 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.235980886401553 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.08920647437314 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.938969081033489 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.789012182326544 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.638677707085242 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.487813683117137 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.337842089390894 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.1876465719799665 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.057858278296586 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.925280669639851 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.7920504978724887 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.662507057189941 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.524465762962729 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.386148080397188 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.247853842527507 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.10103342268202 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.945031191104025 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.788853008668501 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.632960309096373 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.4775732911151387 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.322070308633753 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.166687527010518 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.0132250900574546 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.8577730046941878 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.7023446522061787 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.5471346252842952 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.3921355027802953 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.2371476689974465 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.0829425623997504 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9280086374774422 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.773168771694868 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6183528072979985 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.463616446190074 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.30898957782321507 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.15446258789330872 seconds remaining)
    1977 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 14.830 seconds)

**Estimated memory usage:**  1897 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
