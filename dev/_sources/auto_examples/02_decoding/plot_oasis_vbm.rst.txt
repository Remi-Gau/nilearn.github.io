
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f258a8be280>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 240.10896682739258 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 46.19525599479675 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 43.25568652153015 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 42.235244830449425 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 41.71302247047424 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 41.42728114128113 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 41.10717304547628 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 40.553685256413054 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 40.34424591064453 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 40.29079294204712 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 39.81874895095825 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 39.31985066153787 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 38.77581278483073 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 38.56841184542729 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 38.1605179309845 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 37.799432595570885 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 37.485196232795715 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 37.34705699191374 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 36.982881387074784 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 36.62593626976013 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 36.27747988700867 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 35.95763474419003 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 35.72178771279075 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 35.481456445611045 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 35.328958352406815 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 35.03889441490173 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 34.73248056265024 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 34.45419453691553 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 34.20243460791452 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 33.93074899706347 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 33.660986582438156 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 33.476790097451975 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 33.31127768754959 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 33.15385640028751 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 32.90982114567476 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 32.749204465321135 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 32.577972624037 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 32.352392357748904 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 32.17255210876465 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 31.97870605419844 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 31.75990104675293 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 31.560060303385665 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 31.33431737763541 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 31.126434736473616 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 30.933458284898236 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 30.714443895551895 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 30.486381717350174 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 30.263064272860262 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 30.037620067596436 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 29.840482264148946 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 29.632787704467773 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 29.40382959795933 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 29.176467767128578 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 28.951883986311138 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 28.727681469034266 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 28.52087343822826 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 28.31672981807164 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 28.10539826593901 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 27.885315969072536 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 27.665285862098305 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 27.487439314524334 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 27.298217542835925 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 27.0966398408336 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 26.89712322325933 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 26.68667834997177 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 26.476080399293167 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 26.263418862313934 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 26.04976261907549 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 25.863554267322314 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 25.65585151962612 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 25.471205609185358 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 25.268962715713073 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 25.053539276123047 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 24.846452415805974 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 24.646966115848436 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 24.457398653030396 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 24.272087950455514 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 24.06778144217157 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 23.87607502937317 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 23.67585212671304 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 23.4886736869812 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 23.288680491624056 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 23.08065050985755 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 22.88070905064962 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 22.667869374865578 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 22.461786817101874 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 22.29976430604624 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 22.11992319973036 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 21.950500878420744 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 21.785945289590384 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 21.58167303933038 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 21.36870371902382 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 21.155880876209427 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 20.940258459378317 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 20.741542227724764 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 20.530786288411996 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 20.335078398386635 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 20.13240430281334 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 19.926583397145176 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 19.72458183644998 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 19.523969173431396 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 19.322652502815323 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 19.118862086651372 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 18.915664196014404 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 18.71646550985483 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 18.51240729150318 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 18.311909882527477 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 18.128160385327917 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 17.919926016419023 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 17.7161522567819 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 17.512278426777232 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 17.308653311686474 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 17.103855967521667 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 16.90212337738645 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 16.705609727324102 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 16.502749121707417 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 16.29999071976234 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 16.10786132527213 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 15.909193535982553 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 15.706847268994116 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 15.507813930511475 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 15.313909272517055 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 15.148698103232462 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 14.957940613351216 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 14.758940366006668 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 14.561279439926146 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 14.37645199185326 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 14.179919710309486 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 13.980238661170006 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 13.788691960563956 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 13.592782607445349 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 13.397026001952076 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 13.199870189030964 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 13.001634058199432 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 12.808901085782406 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 12.614474243587917 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 12.41581277286305 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 12.21646255820337 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 12.023102922716003 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 11.826698867537134 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 11.633835860661097 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 11.439091794034267 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 11.24278359010186 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 11.048041905556525 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 10.852479881710476 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 10.65926979328024 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.461492394747799 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 10.264652111092392 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 10.0701505300161 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 9.876308685981188 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 9.680811166763306 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.485717585544712 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 9.291358144659744 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 9.101544188518151 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 8.909538157574541 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 8.71550476935602 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.522007648761456 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.328988565760813 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 8.13466234146794 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 7.939653985905197 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 7.743457615375519 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.548177991594588 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.352913512123955 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.160988974424959 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 6.967634387132598 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 6.774092768177842 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.5782715728484 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.387216049753977 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.196277936299642 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 6.002697494608411 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 5.80815881841323 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.6131845873001724 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.4183058128800505 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.227964364035281 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.035536428977704 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.842938695635114 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.649476679888639 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.455777980513492 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.263314740041668 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.070974508477323 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.8778538968827987 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.686132853861013 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.4922609198224412 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.2981499075238174 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.104850416598113 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.9105178343283167 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.7177960821377334 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.5231370556163277 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.3290657844949276 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.1410587679141413 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.9464493676235801 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.7525494273420403 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.5576338271299996 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.3632448127232684 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.1689405564180355 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.9740190689380352 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.7790972505296979 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.5842658202660266 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3895615905222267 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.19481297713428286 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   39.0s finished

    1995 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  33.220 seconds)

**Estimated memory usage:**  1868 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
