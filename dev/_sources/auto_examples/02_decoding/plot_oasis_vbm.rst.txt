
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f5359e46d00>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 158.80823135375977 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 27.32844376564026 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 25.712619066238403 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 24.98144364356995 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 25.99008083343506 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 25.179128408432007 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 24.577426433563236 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 24.140395232609343 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 23.8527774810791 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 23.61445715692308 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 23.365737676620483 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 23.153427275744352 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 22.9363583723704 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 22.704562260554386 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 22.46154969079154 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 22.297082821528118 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 22.155033349990845 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 21.99398269372828 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 21.805991040335762 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 21.640562735105817 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 21.461171865463257 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 21.28967903909229 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 21.10457119074735 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 20.968196495719578 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 20.801009972890217 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 20.625697374343872 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 20.48082419542166 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 20.341252715499312 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 20.242765154157368 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 20.118149856041217 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 20.03192114830017 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 19.948879618798532 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 19.85148113965988 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 19.725039511015922 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 19.596812220180738 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 19.497437851769583 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 19.35478115081787 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 19.217914961479806 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 19.095434715873317 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 18.985815091010853 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 18.868491172790527 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 18.74619328684923 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 18.615235601152694 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 18.506992090580074 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 18.376019369472157 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 18.233695348103844 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 18.095475621845413 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 17.96920486206704 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 17.839087804158527 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 17.706301684282263 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 17.57200312614441 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 17.452516831603702 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 17.331864063556377 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 17.209668267447995 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 17.084010115376227 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 16.95815296606584 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 16.842806134905135 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 16.73011931620146 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 16.596440734534426 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 16.473595425234002 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 16.358894109725952 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 16.241130930478455 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 16.11591069159969 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 15.992573741882564 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 15.877977967262268 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.759907337335441 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 15.641453085523663 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.526107030128365 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 15.412902874105116 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 15.291371397350146 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 15.163655928203038 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 15.045433759689331 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 14.92903603447808 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 14.80971736450718 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.680683587048504 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 14.546293020248413 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.413810504110236 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 14.28858826996444 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 14.173283307980268 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 14.054276584069939 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 13.934513926506042 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 13.812690046098497 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.694502365298387 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.570513529949878 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.444389456794376 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.322310644037584 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 13.2066673345344 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 13.097292546568246 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 12.992251482876863 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 12.882449450117818 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.773654222488405 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.661692425444885 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.55029929202536 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.439541624438379 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.32018973979544 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 12.1972705063067 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 12.071146965026855 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 11.944884383801332 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 11.818943622160932 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.695289712963682 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.576186895370483 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.457465138765844 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.343446815715117 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.230928478889096 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 11.114951793964094 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 10.99528744107201 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 10.881366446333113 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.762238322017348 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.63997937131811 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.517713411138692 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.3985088521784 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.277865461401037 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.157526186534337 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 10.037458672987675 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 9.917311965373525 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 9.794974389283553 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.675138572166706 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.558378150320461 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.441377082113492 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.32368025659513 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.20601733525594 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.090785609789132 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 8.976226048391373 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 8.862222086123333 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.746755469229914 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.63405728340149 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.521144764763969 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.409630116515272 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.298306494951248 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.18625034472739 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 8.075190727527325 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 7.96327394747552 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.850464481295961 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.734524397025432 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.619949753604717 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.504111607869466 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.389712838565602 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.2756675925568075 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.161521068517713 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.046522905500672 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 6.9301064014434814 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.81897382871479 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.703564606921773 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.589504530379822 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.476070562998454 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.361420269670157 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.24439898582354 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.127828195792477 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.012016470367844 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.897597820166774 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.783697843551636 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.670284279134889 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.556372341356779 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.441508604810129 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.326742664560095 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.211651448280581 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.097699214250613 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 4.983461534901029 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.869213517708114 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.75392483915173 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.638196408748627 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.52158246425368 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.403894365569691 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.287624324026283 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.170350127103852 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.053776936097579 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.937136764985969 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.820507623478324 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.7043213163103372 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.588286243246857 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.4714171886444096 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.3551359065094886 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.239688984183378 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.12462122729748 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.0095872577579543 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.894483191626412 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.7794620448892764 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.663811167754696 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.5478809201315546 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.431713956694363 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.315654118855794 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.199531269336932 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.083229628238049 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.96663696778928 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.8501014709472656 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.7338257802499308 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.6175412029348395 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.5013875425818133 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.3854257553181748 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2696563932630751 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.154025818172254 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.0386064352165343 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9231325288613637 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.80758377801569 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.692159325806136 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5767765167431953 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4612481837369957 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.34592131793801556 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2305456339710891 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11523574560730901 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   23.0s finished

    1993 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  0.868 seconds)

**Estimated memory usage:**  1850 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
