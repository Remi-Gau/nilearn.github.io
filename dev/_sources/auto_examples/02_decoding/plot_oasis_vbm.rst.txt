
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-90

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 148-150

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 150-163

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-166

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fd57c0830d0>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-229

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 198.52161407470703 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 35.575764894485474 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 32.622809171676636 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 31.883224010467533 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 31.976210832595825 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 31.53157639503479 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 31.072864135106407 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 30.713245834623066 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 30.66196632385254 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 30.37388761838277 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 30.37397813796997 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 30.117888320576064 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 29.85080782572428 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 29.752420333715587 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 29.505169834409443 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 29.305028279622398 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 29.69419288635254 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 29.610704856760364 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 29.440488576889038 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 29.357191412072435 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 29.25822901725769 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 29.145978768666584 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 28.892224355177447 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 28.759479574535206 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 28.526866753896076 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 28.2983295917511 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 28.11856484413147 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 28.054089272463763 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 27.873508078711374 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 27.726498028327676 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 27.53503704071045 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 27.331299820253925 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 27.125637531280518 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 26.919355666998662 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 26.71680277936599 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 26.521088566098896 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 26.45630039109124 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 26.27426421320116 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 26.076831654498452 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 25.9093713760376 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 25.765175819396973 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 25.581790714729124 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 25.440012080328806 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 25.24764170203098 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 25.06745299425992 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 24.883546113967896 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 24.698199230691664 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 24.516742640353264 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 24.330516497294106 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 24.192428004984954 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 24.01067090034485 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 23.843597963744518 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 23.663636629398052 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 23.500551979496795 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 23.33408941162957 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 23.21538257598877 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 23.046769687107634 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 22.881897604256345 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 22.706521963251046 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 22.522565021353252 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 22.36084222793579 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 22.188894013889502 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 22.042664627875048 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 21.87796988562932 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 21.708153575658798 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 21.5508187183967 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 21.377643021670256 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 21.22105556459569 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 21.07837949079626 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 20.908555829006694 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 20.73951360157558 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 20.570885453425664 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 20.402875688340927 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 20.239580742300372 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 20.075728674192685 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 19.937551021575928 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 19.771503297906172 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 19.609499903468343 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 19.449754390961086 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 19.291182258461095 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 19.12972855567932 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 18.99474561655963 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 18.822132878187226 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 18.65547216369445 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 18.49675052506583 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 18.330223938998056 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 18.164566472519276 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 18.0099455981419 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 17.850327838550914 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 17.685769574026043 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 17.52300948566861 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 17.36155614224109 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 17.211890303570293 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 17.0648938122616 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 16.914906253205967 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 16.755839109420776 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 16.593495349089302 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 16.42947814882416 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 16.261126742071035 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 16.094919924784186 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 15.983334064483643 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 15.819948144478372 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 15.654577189800786 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 15.50375638656246 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 15.339644798865686 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 15.196479104814076 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 15.046350479125977 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 14.892599925816615 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 14.730102441929004 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 14.564872113936538 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 14.400856083089655 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 14.240268004907145 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 14.07899785041809 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 13.926205411421513 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 13.780458680370398 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 13.620517647784688 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 13.463600586200583 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 13.300614984626444 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 13.138979632975692 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 12.98760041869989 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 12.823923269907633 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 12.66166695287405 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 12.498126842936532 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 12.345374847815288 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 12.19681151451603 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 12.047579669952393 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.890002901591952 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 11.728372705264354 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 11.567106038331985 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 11.409454979637797 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 11.252443918815025 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 11.1023940712441 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.95326050122579 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.795010616904811 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.63572690736002 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.474636687172783 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 10.31080986471737 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.15443375510891 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.992694070373757 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.837331842175491 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.673541000911166 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.50942131644445 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.345474179361908 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.183177019332673 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 9.026269117991129 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.863066599286835 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.700550807665472 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.538215583684494 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.37495823164244 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.21186611636373 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 8.053878148396809 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.891540401029271 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.729075858467503 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.567497925041549 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.4052793391339184 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.2430568125940145 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 7.08010151447394 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.922616744497019 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.761224571662613 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.6005214415256335 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.4415395855903625 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.281532206150316 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.12063761110659 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.961754518052551 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.798582885323501 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.63630147413774 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.474256142076239 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.312152695513057 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.150430997212728 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.991670499891924 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.830117954927332 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.668503903506095 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.506649976552919 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.344950954349055 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.183345479526739 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 4.021691152027675 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.8625315102663906 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.70166158945547 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.5401387455758084 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.3780872795168913 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.2162345515357122 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.054567757232413 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.8944605261414913 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.733144739286496 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.571857162143873 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.4106752034780143 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.2496621531824914 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.088682933287187 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.9275163894004008 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.7673305821797203 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.6066047392393412 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.4457556639666334 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.2850083510080972 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.1241987122155224 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9634056410838648 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.8030425524100279 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.642355237688337 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4816997886309164 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3211077608243384 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1605585196509433 seconds remaining)
    1978 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 18.718 seconds)

**Estimated memory usage:**  1887 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
