
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-60

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 61-63

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 63-86

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 87-89

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 89-105

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 106-108

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 108-143

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 144-146

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 146-159

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 160-162

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 162-177

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fe36c6a5be0>



.. GENERATED FROM PYTHON SOURCE LINES 178-180

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 180-225

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 169.28672790527344 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 29.67110276222229 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 27.60408067703247 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 26.929883241653446 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 26.46109628677368 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 26.375106811523438 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.135866483052574 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 25.87588231904166 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 25.631183624267578 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 25.408313327365452 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 25.23834776878357 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.069159464402635 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 24.912871042887367 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 24.778180287434505 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 24.612447227750508 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 24.522382418314617 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 24.3750661611557 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 24.203754523221185 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.056352959738838 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 23.919967199626722 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 23.755398273468018 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 23.602392446427118 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 23.468137546019122 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 23.322785294574242 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 23.170763810475666 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.031081199645996 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 22.8877215385437 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 22.746645821465385 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 22.608610153198242 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 22.464770793914795 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 22.322734117507935 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 22.183214725986602 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 22.03785502910614 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 21.901741128979307 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 21.768483484492585 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 21.623427731650217 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 21.491185108820595 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 21.35398049612303 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 21.21472417680841 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 21.085292253738796 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 20.95468521118164 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 20.824030480733732 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 20.685323454084852 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 20.555125935133113 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 20.421515529805962 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 20.2883554564582 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 20.15270452914031 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.019809489554547 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 19.893354296684265 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 19.762833809366033 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 19.630268812179565 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 19.494107849457684 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 19.362282752990723 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 19.23139832604606 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.1000778498473 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 18.967929059808903 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 18.837737560272217 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 18.70868691226892 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 18.57328779121925 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 18.44257674378864 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 18.31652569770813 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.198609051157216 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.073922787943193 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 17.938480097150045 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 17.80546659231186 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 17.67043260427622 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 17.534962141152583 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 17.398999940103558 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.262739125420065 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.133958768153537 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.039949791772024 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 16.907297403040065 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 16.772645738389755 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 16.640019142464418 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 16.503658861727327 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.370147466659546 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.236589331375924 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.103346793682544 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 15.968337554198046 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 15.837270199498043 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 15.702294945716858 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 15.569323012858263 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 15.441103644487335 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.306808276348804 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.173519100461688 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.040901380426744 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 14.911511038624962 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 14.794812418948645 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 14.675021214918656 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 14.545450984761956 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.41132844818963 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.280346220666235 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.15015347107597 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.01949796368999 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 13.887601446598135 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 13.756665079217209 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 13.623943924903868 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.490865321503472 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.357696148813988 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.226960697559393 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.094182252883911 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 12.96258775786598 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 12.830537155562757 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 12.698212818034644 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 12.567005891066332 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.434896798360915 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.302875230897149 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.174758474403452 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.042809645334879 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 11.912631516062886 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 11.780972437425094 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 11.647671506211564 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.515621066093445 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.383542923800713 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.251669515643204 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.119943950487219 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 10.988636131944327 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 10.857139338794937 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 10.72515901468568 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.594330246708974 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.462948004404703 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.330722247273469 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.198712755422124 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.067352461621043 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 9.934787081133935 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 9.803673219680785 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.672364136529348 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.541408668352863 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.41003693640232 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.278279419093169 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.147314603512104 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.015955712049061 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 8.884995279890118 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 8.755227786257752 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.624353483541688 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.492558064284147 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.361612544340245 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.231009312789805 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.099389321562173 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.969161102240034 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.838417734418596 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.7067991435950525 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.575526029291288 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.44394353719858 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.3128451108932495 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.182054610087953 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.051420035427563 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.921809279188818 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.793815329268172 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.664295114926844 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.533630530039469 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.402625807073732 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.271264502876683 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.141855197794298 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.011183887333065 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.880379246127221 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.749736626942952 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.618588865182962 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.488623302194136 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.357491032882306 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.226374328136444 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.0965477146717335 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.966088712951283 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.835771474370196 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.705251216888428 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.58050208380728 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.450114830430731 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.318934526272162 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.187982831682477 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.05743399597484 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.9264420200796692 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.7955691354316574 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.664275463237319 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.533184929390174 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.402157213496066 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.271217550550188 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.1399751251394097 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.0089439173876227 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.8781559494104276 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.747186742015391 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.616151306364271 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.485240460759368 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.354424916780912 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.2235331509282683 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.0926578563192617 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.961723752923914 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.8308921603746313 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7000883301311636 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.569313348607814 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.4384661099267384 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3077019766757363 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.176892122048982 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0461173752943673 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9153220159402164 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.7845351794331344 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6537460302695249 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5230035635889793 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3922203591632359 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2614641454484728 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13076935820843108 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   26.1s finished

    1941 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  6.458 seconds)

**Estimated memory usage:**  1936 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
