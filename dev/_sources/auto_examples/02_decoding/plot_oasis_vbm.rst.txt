
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f0af516dee0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 232.30791091918945 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 33.277087688446045 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 31.340929985046387 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 30.356576840082806 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 29.76637053489685 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 29.68468737602234 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 29.434860865275066 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 29.206366777420044 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 28.942663192749023 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 28.830894947052002 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 28.54910922050476 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 28.29015228965066 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 28.111679871877033 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 27.88373906795795 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 27.60945418902806 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 27.36185161272685 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 27.112117290496826 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 26.8868644658257 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 26.65892439418369 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 26.438722873988908 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 26.241578578948975 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 26.046504043397448 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 25.838287656957455 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 25.65915099434231 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 25.465081055959065 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 25.28619122505188 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 25.105856510309074 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 24.959445670798974 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 24.879796981811523 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 24.74291290085891 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 24.57588013013204 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 24.410540196203414 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 24.25874572992325 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 24.129562746394765 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 23.984661957796884 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 23.847226892198837 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 23.68452286720276 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 23.539117471591844 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 23.38198949161329 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 23.224475658856907 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 23.06626605987549 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 22.916308059924987 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 22.77755237760998 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 22.63252267726632 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 22.495271834460173 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 22.345388889312744 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 22.200901985168457 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 22.068557617512155 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 21.94219617048899 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 21.80922167641776 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 21.65978193283081 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 21.515125382180305 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 21.372455450204704 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 21.229806567138098 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 21.07926275112011 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 20.928698994896628 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 20.77862324033465 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 20.622543171832433 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 20.47400856018066 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 20.321692361670024 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 20.17738215128581 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 20.03551286556682 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 19.890131465850335 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 19.751848447890506 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 19.602709859609604 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 19.454048945353584 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 19.307820204532508 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 19.15598453692536 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 19.009535719366635 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 18.86839905683545 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 18.728254999433247 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 18.574973747763835 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 18.43058692084418 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 18.27326332053093 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 18.11945613654884 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 17.977065642674766 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 17.824689501210262 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 17.674025876181467 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 17.52108497497363 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 17.370265812813482 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 17.220164895057678 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 17.07243038106848 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 16.924912278245134 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 16.78031623794372 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 16.63559507188343 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 16.493418777690216 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 16.346541681955024 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 16.197040785318134 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 16.048889593644574 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.900747540291775 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 15.753558423784046 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 15.607256367966368 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 15.458792520606002 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 15.309284999806396 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 15.166824528511533 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 15.022693634033205 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.877212663491566 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 14.731271714279332 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 14.582916177048975 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 14.438941445013487 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 14.293388605117798 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 14.146097858353416 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 14.000150236428953 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.852895324669996 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.70657752110408 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 13.561145793823968 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 13.41644598403067 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 13.271883026461735 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 13.127833048502604 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.982367021228194 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.835591858083552 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.690021648063317 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 12.545901451792036 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 12.40102067457891 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 12.256144720211363 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 12.114879742912624 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.970642747550174 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.825143035660442 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.682865906569917 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.538420793389072 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 11.395175139109293 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 11.262255820361052 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 11.119287283694158 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.975053979129326 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.83595956525495 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.692496490478515 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.548289669884577 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 10.404424280632199 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 10.260051503777504 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 10.115373500557833 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.971394392160269 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.826778619343997 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.681878877408577 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.537113800980991 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 9.41096945307148 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 9.267801055201778 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 9.12347277473001 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.981833668520851 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.838530727054762 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.696152783126282 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.553504467010498 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.41191623227816 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 8.269130424714424 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 8.127338867921095 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.983859207895067 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.8389694361851125 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.695395786468296 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.5515331994919555 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.408420092350728 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 7.264362343205701 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.121225277582804 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.9770534496433685 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.833474259627493 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.6903737806806385 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.548018111811055 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.405052000476468 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.261301095669086 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.117538828758677 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.974583939660953 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.832049129893945 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.690298855304718 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.547512010017537 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.405023318749887 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.261587919633081 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.118598414630425 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.975915106860074 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.832981919667807 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.690121412277222 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.547472454252697 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.404685181273511 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.262146711349487 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.119596368388126 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.9769295592640725 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.8345330285199117 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.691958060209779 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.5495200838361467 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.407169992273504 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.265104999649996 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.122948132204206 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.9809142517643936 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.8388367229037814 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.696584091660726 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.5544699129167494 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.4124777395217145 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.2704151816990064 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.128252010087709 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.9862865427488923 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.8443182062975225 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.7022779292248664 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.560263506319157 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.4183896466305381 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2764850087190798 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.1345709363619485 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9926786188016901 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8508391724419349 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7091974172836695 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5674072528372005 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.42553698956058716 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2836565561968871 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.14181471110588342 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   28.3s finished

    1970 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  15.486 seconds)

**Estimated memory usage:**  1885 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
