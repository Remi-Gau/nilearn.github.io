
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-90

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 148-150

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 150-163

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-166

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7efbe228cb20>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-229

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 161.91482543945312 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 27.770633935928345 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 25.415853023529053 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 24.518913904825848 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 23.951377630233765 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 23.631831407546997 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 23.41763504346212 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 23.252375602722168 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 23.14328384399414 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 22.984429518381752 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 22.836480617523193 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 22.646891225468032 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 22.509530544281006 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 22.37576695588919 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 22.27320967401777 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 22.181665420532227 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 22.094266533851624 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 22.011327140471515 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 21.8757054011027 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 21.756146681936166 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 21.61769700050354 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 21.476949453353882 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 21.32698947733099 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 21.204135355742082 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 21.072285175323486 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 20.94226837158203 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 20.800734483278717 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 20.658827190045958 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 20.54613058907645 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 20.43911608334245 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 20.32742706934611 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 20.219789804950835 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 20.088583946228027 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 19.983361468170628 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 19.86789936177871 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 19.741709845406668 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 19.630182213253445 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 19.51638527818628 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 19.399097141466644 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 19.283071560737415 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 19.154223442077637 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 19.031206439181073 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 18.94949347632272 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 18.827911609827083 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 18.719457214528862 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 18.599838548236423 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 18.470366654188737 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 18.3474472380699 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 18.217674096425373 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 18.09799333007968 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 17.97375798225403 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 17.849037044188556 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 17.72694048514733 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 17.608819309270608 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 17.487429680647672 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 17.36081669547341 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 17.24055167606899 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 17.112552500607674 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 16.982586523582192 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 16.870762279478168 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 16.75700847307841 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 16.646927032314363 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 16.534934289993778 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 16.417851535100784 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 16.30185028910637 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 16.18157584850605 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 16.06057862079505 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.931155009056205 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 15.806418026194853 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 15.691402891407842 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 15.579032455171857 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 15.457138729767061 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 15.334243774414062 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 15.237587605437188 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 15.12142347645115 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 15.005114873250326 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.88728420357955 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 14.768021487570428 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 14.652138092578985 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 14.540249954296064 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 14.422352313995361 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 14.303314314948189 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 14.180833339691162 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 14.061203594667365 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.943573486237298 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.823507084566005 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 13.704533399537551 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 13.582402229309082 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 13.461105823516846 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 13.338346497396405 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 13.214226404825848 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 13.09137267594809 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.970456931902016 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.851454168237666 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.730786698929807 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 12.607225430639168 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 12.487134118874867 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 12.364276087161192 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 12.242558912355074 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 12.122426630270601 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 12.003961324691772 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.885426809292028 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.765679083618464 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.646940351689905 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 11.524955969590408 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 11.402530431747437 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 11.278731881447559 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 11.157852052528167 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 11.035775405389291 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.916578124422546 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.79806533726779 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.680978134945706 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.56253216947828 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 10.442556779996483 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 10.323498140301622 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 10.201996388642684 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 10.083062656994525 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.962179778987526 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.841609813399234 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.725403905916615 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.606623808542887 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.486843187946919 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 9.36793824492908 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 9.251461947836527 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 9.132021250263337 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 9.01204833984375 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.890992626311288 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.771305566697608 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.65276001393795 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.532075248023336 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 8.411200009859526 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 8.290796565645524 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 8.172406420563206 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 8.05284579355914 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.934002321157882 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.814311636818779 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.6943499621223 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.572512323838951 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.449221127275107 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.32679437047286 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.205446345465523 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.08493165597848 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.963846680144189 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.843166376327301 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.722834202978346 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.602427211301079 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.48264228481136 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.362411314127397 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.241985900982007 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.122077410653134 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.001468976338704 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.880705942381296 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.759532526919716 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.639985173356299 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.521188457290847 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.400950131877776 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.280153867525932 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.159758564772879 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.040301811845996 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.9204126888850945 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.800877571105957 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.681032444379345 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.561579960363883 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.441573837783439 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.321265703294335 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.201143915002996 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.0812701058675005 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.9611017689733448 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.8411420186360674 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.72053179515184 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.600278083015891 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.480427581664414 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.360086801440217 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.239269978738245 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.119783839960208 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.999382972717285 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.8791906725276597 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.7589335441589355 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.6386208507452116 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.5187477173085986 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.398918999565972 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.278895119935768 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.158884475519369 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.0391450618785587 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.919080526932426 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.7990793150824471 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.6790857622700353 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.5588694536749692 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.438794729557443 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.3188206228629622 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.1988052317970677 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.0789453533931552 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9589907030264536 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.8390812700894211 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.7191115851254808 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5992778020027356 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4794591397655253 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3596382237933009 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.23980349001258314 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11989805207180618 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   24.0s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  1.291 seconds)

**Estimated memory usage:**  1924 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
