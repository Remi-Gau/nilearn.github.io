
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-90

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 148-150

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 150-163

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-166

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fdbd2e3fcd0>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-229

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 153.5344123840332 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 27.193177223205566 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 25.237080574035645 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 24.761709531148277 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 24.785941123962402 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 24.581645965576172 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 24.38583795229594 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 24.129233360290527 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 23.805267333984375 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 23.537503083546955 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 23.35374689102173 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 23.160215117714625 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 22.956278324127197 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 22.786076032198395 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 22.624197619301935 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 22.469922224680584 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 22.357022762298584 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 22.225047784693103 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 22.063535690307617 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 21.93521435637223 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 21.77262568473816 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 21.625914278484526 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 21.478037769144233 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 21.353613573571913 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 21.231307665506996 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 21.09377884864807 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 20.954416641822228 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 20.8144621319241 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 20.703462157930648 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 20.56885190667777 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 20.43430773417155 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 20.295442673467818 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 20.16138392686844 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 20.026620843193747 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 19.89158997816198 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 19.766287769590107 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 19.629575067096287 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 19.501559863219388 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 19.37029394350554 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 19.24164191270486 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 19.105639457702637 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 18.980372917361375 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 18.858116490500315 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 18.73209163754485 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 18.598983894694936 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 18.473229487737022 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 18.33821293582087 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 18.206264795141017 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 18.07986537615458 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 17.95153675273973 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 17.826752185821533 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 17.701255672118243 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 17.5775960958921 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 17.451224448545926 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 17.325758112801445 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 17.20109883221713 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 17.073933465140207 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 16.949377507494205 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 16.82470518967201 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 16.70218717041662 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 16.577980677286785 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 16.45575979107716 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 16.339294564339422 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 16.228869714434182 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 16.109677881002426 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 15.985766007350042 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 15.86382195443818 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 15.741923997651284 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 15.622001577826108 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 15.498942095300425 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 15.376405136925834 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 15.25812663830502 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 15.137637668185763 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 15.017597067846012 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 14.895905198277653 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 14.77298657099406 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 14.64973745848003 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 14.530927986293644 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 14.412707530535185 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 14.29266063171097 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 14.179733991622925 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 14.056481661619964 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 13.935895791867884 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 13.815752695841962 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 13.693939163571311 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 13.572261151145486 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 13.452078065206837 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 13.334479101772967 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 13.216614853252064 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 13.096020931608221 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 12.974981652365791 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 12.855818842793559 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 12.737158764963565 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 12.619101088534121 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 12.500347051214664 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 12.383451687662227 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 12.266092280546824 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 12.149053239330803 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 12.029606303390192 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 11.909289913948134 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 11.790894746780396 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 11.672968980109337 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 11.55829138849296 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 11.438992905385286 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 11.324553196246809 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 11.204762606393723 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 11.0856410062538 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 10.96702458256873 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 10.849457996862906 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 10.729452526897465 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 10.609286785125732 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 10.488431569692251 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 10.368682367461068 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 10.250277517116174 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 10.130159470072964 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 10.009793053502621 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 9.890058147496191 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 9.771465861899221 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 9.651759769956945 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 9.531589628267689 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 9.412885824839273 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 9.296822415895699 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 9.178326505129455 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 9.058404556134851 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 8.939688359537433 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 8.820944595336913 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 8.703238748368763 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 8.584452854366752 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 8.465510711073875 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 8.346445224081823 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 8.227396249771118 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 8.109411024865302 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 7.993000037742384 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 7.8738955357917275 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 7.755721433838802 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 7.637909447705304 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 7.519239650053136 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 7.401514725093424 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 7.284810795300249 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 7.1670580356241125 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.0488639899662555 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 6.931058859994225 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 6.813065575881743 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 6.694985879884733 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 6.576621929804484 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 6.4582763047053895 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 6.339937183954944 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 6.223016145277997 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.106059641451449 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 5.987650682462142 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 5.871116399765015 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 5.755225491050063 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 5.637549651296515 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 5.51975884624556 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 5.402360603406832 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.285510693826984 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.168308465908735 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.050328010206769 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 4.933071006702471 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 4.815281131732389 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 4.697320640087128 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 4.579305770234292 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 4.46142996976405 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.343851618971561 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.226076800648759 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.108730908596154 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 3.991246740502047 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 3.8732610277073114 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 3.755405062720889 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 3.6380444363024105 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.5204177183263443 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.4028015750193457 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.285553898922233 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.168168344938686 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.0504291687888663 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 2.9327062198093956 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 2.8150737502358174 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 2.6974650870608743 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.57976551270217 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.462404461546317 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.3449625174204507 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.2277835600942537 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.1103614162612745 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 1.9932536023562073 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 1.8758335528166397 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.7584043064632933 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.6410536996779903 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.5236291349890398 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.406418298153167 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.2892614571505752 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.172051517586959 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.0549362180120658 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 0.9377007981141408 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.8204527506556535 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.7032284834950241 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.5860837606283334 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.4689266827641701 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.3516861194281409 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2344468530982432 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.11721466414293452 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   23.4s finished

    1985 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  59.948 seconds)

**Estimated memory usage:**  1908 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
