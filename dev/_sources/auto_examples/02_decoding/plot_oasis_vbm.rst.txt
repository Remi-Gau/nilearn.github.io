
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fbd1a935af0>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 170.00675201416016 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 29.745354652404785 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 27.726157665252686 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.077880859375004 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 26.798662424087524 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 26.542913675308228 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.41384824117025 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.198886394500732 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 25.956893920898438 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 25.769545634587605 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 25.579204082489014 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.39112110571428 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.217519680658974 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.08551340836745 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 24.955585956573486 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 24.809277772903442 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 24.65708088874817 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 24.514263237223908 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.36235703362359 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.20668761353744 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.067261934280396 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 23.92708662578038 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 23.79805835810575 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 23.676524784253992 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 23.54254420598348 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.417139768600464 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.275727583811832 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.12464018221255 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 22.99816853659494 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 22.869993678454694 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 22.73822577794393 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 22.614831855220178 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 22.482733368873596 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.3423559737928 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.200728977427765 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.06346665109907 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 21.915002452002632 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 21.778031478057034 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 21.646945953369144 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 21.536611936031246 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.412741661071777 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.293400328333785 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.16615044502985 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.04055959124898 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 20.91262091289867 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 20.7818500995636 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 20.655989035316136 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.522192077433807 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.393519242604572 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.26331375083145 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.133577823638916 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 20.006142859365426 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 19.872797837624184 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 19.740002146307027 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.612221744325424 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.487422249533914 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.358049324580602 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.223729049950315 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.103962446081226 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 18.97716883481559 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 18.84212017059326 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.71095898894013 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.58231553723735 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.452160456823922 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.31986677646637 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.18745042727544 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 18.059375510071263 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 17.923786003198195 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.78635365822736 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.65316751383353 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.524669681276595 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.393302796592174 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.259425693088108 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 17.12715855689898 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 16.998159092825812 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.8673042456309 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.73997197653118 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.61013383369941 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.47873726257911 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.347102132024645 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.217121362686157 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 16.088505786142232 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 15.955438666227387 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.820405491863388 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.687744344983782 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.559594140333289 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.424610071404034 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.289637382003084 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 15.154884728518399 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 15.02141255475162 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.887363195419313 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.754806861772641 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.62112241205962 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.48456895479592 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.350512210358964 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.222499470961722 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 14.087658087412516 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.953263113179158 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.816598361852218 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.682445208231607 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.551990032196045 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.423951099414637 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.297912247040692 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 13.164815368004216 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 13.030544867882362 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.897615534918648 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.765578409410873 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.634336335636744 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.501573968816686 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.3682946043277 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.23422343080694 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 12.098054750545606 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.96237141745431 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.825624759218334 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.687992790289092 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.551184550575588 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.414236085168247 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.278988976763864 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 11.142802634481656 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 11.006539935825252 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.870155493418375 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.733416618394457 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.598552449804838 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.46367113764693 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.328855875999697 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 10.194249057769776 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 10.059257912257362 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.924511731140257 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.789375588297844 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.652328341506248 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.51653636418856 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.379942777502627 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.243765672047934 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 9.108460757965432 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.974089636731502 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.838082198743466 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.701275769401999 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.567592791397207 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.434446255366007 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.300075242845274 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 8.166922330856323 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 8.032616150294634 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.899523741762403 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.765279554820561 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.631263706419203 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.495941918471764 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.363406504670234 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.228981863073751 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 7.093852577982722 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.95936967382495 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.8245796362558995 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.689208540695392 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.553778322119461 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.418658543256374 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.283391005033022 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 6.147990403636809 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.012192885080974 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.876044048625193 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.740307165097586 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.604211258438398 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.46777868270874 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.3313231912458905 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.1948918295495305 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.059062262985604 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.922236116921029 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.784780386722449 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.647509043475232 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.511361023623072 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.374074390956333 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.237068299005723 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.100980408051435 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.9640581259253427 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.827434295831725 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.6910812592919853 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.5546818711291785 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.4180782522474016 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.2821211814880367 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.1454386818880415 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.0091033517644648 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.8722636606440197 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.735685719384087 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.5988490041448267 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.462174098570268 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.3252745977516383 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.188473369764245 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.0517921769941174 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.9147274340352705 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7777825447327313 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.6408609735204818 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.504924250658227 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.368003531506187 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.2311585973070553 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0943325261274972 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9574594645920195 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.8206023997867231 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6837713290483524 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5469580231880654 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.41020846366882324 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2734588926488703 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.1367140834654995 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   27.3s finished

    1955 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  7.472 seconds)

**Estimated memory usage:**  1878 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
