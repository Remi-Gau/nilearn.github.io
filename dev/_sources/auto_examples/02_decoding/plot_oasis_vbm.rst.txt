
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-141

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/joblib/memory.py:349: FutureWarning:

    The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 142-144

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f1a4d035520>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 178-222

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 174.92055892944336 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 30.57142472267151 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 28.345110654830933 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 27.504542350769047 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 27.00297784805298 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 26.82213306427002 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 26.479905525843304 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 26.23460044179644 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 26.050809860229492 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 25.84167268541124 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 25.67809295654297 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 25.485786307941787 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 25.305510361989338 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 25.152081159444958 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 24.978534936904907 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 24.8117036819458 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 24.64153754711151 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 24.496030779445874 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 24.356272485521103 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 24.199387813869276 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 24.055691957473755 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 23.90480317388262 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 23.761700131676417 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 23.621919704520185 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 23.482654412587483 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 23.351232051849365 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 23.21825353915875 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 23.127302867394906 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 23.097960029329574 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 23.016932857447657 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 22.889246225357056 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 22.74502029726582 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 22.631423771381378 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 22.48581146471428 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 22.35091621735517 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 22.209568568638392 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 22.06537702348497 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 21.922696648417293 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 21.775375203082437 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 21.636917884533226 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 21.494802474975586 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 21.353206157684326 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 21.21367759931655 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 21.074773921522983 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 20.936001127416436 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 20.79916058646308 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 20.657573430434518 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 20.516819715499878 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 20.379234035809834 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 20.244089107124175 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 20.121304750442505 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 19.98583476216185 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 19.8491189296429 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 19.70705945086929 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 19.568946926682084 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 19.42899149114435 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 19.292997019631525 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 19.154427603671422 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 19.018107973296065 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 18.88089253942845 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 18.74266807238261 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 18.60481587394339 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 18.469470977783203 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 18.33080472264971 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 18.192179948091507 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 18.055102476706875 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 17.92076920740532 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 17.78361458564872 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 17.646356105804443 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 17.5115076009778 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 17.373976605279104 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 17.2405875770139 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 17.10468249850803 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 16.969373856505303 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 16.83261755994848 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 16.697549422581993 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 16.560547477320622 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 16.426562008919653 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 16.289465482418354 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 16.15408605261694 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 16.018349289894104 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 15.884573062260946 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 15.74905415860618 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 15.615835517285818 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 15.479292279198056 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 15.34436370344723 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 15.212835505951281 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 15.0812476695269 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 14.949225208976053 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 14.814615678251458 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 14.681539747450088 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 14.546406955509395 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 14.416121223698493 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 14.283614443194482 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 14.152816950006688 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 14.022795212896249 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 13.888744711875914 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 13.753065421409215 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 13.618574205709963 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 13.484414852026736 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 13.348536491394043 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 13.213148782748988 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 13.079305447784124 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 12.945576077526056 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 12.811774767362156 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 12.677912598564511 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 12.542737106107316 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 12.412658034083998 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 12.288340277141995 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 12.153058237985734 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 12.01737765832381 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 11.882594067771157 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 11.748368399483816 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 11.614469163185728 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 11.48080151122913 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 11.346104642619256 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 11.21087753361669 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 11.076099740134346 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 10.941060858257746 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 10.805779052381757 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 10.670538584391275 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 10.535767021258016 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 10.401246270195383 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 10.266923443088686 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 10.132808569938906 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 9.998508024215697 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 9.86458728805421 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 9.731017193456333 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 9.5964944511652 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 9.46216956219932 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 9.327591786017784 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 9.193241467002693 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 9.05928036660859 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 8.925852323833265 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 8.792380026916959 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 8.65879879174409 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 8.525290657492246 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 8.391475110158433 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 8.258039512496063 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 8.123892787549135 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 7.992300306047712 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 7.858483620569215 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 7.725382586600076 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 7.592141329825341 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 7.458415865898132 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 7.324462298689217 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 7.191498276305525 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 7.058259357400492 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 6.924301566304388 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 6.790423782079812 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 6.656786680221558 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 6.523226837448727 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 6.3900144978573445 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 6.256419657102597 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 6.122889577568351 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 5.989212420678908 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 5.855784257253011 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 5.722426138106425 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 5.589061160630817 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 5.455577096099374 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 5.322337031364441 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 5.189437168725529 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 5.0567086331638285 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 4.923727332448666 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 4.790316651507122 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 4.657568924354784 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 4.524394673037242 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 4.3911047510044305 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 4.258182389395578 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.125007108823787 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 3.9916168801924763 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 3.858311225099173 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 3.725083938864775 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 3.5919434652163114 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 3.458715109989561 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.325519732066563 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.1923758983612056 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.059209695643624 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 2.9261361427521435 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 2.792948468437408 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 2.659860716925727 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 2.526625010190089 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.393529307711255 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.2611127329654384 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.1279698662135913 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 1.9948394556303284 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 1.8621115966509747 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 1.7289897770805156 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.5959115637109633 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.4628817517921406 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.3298430317326595 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.1968377248154884 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.0638831655184426 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 0.9308600573959745 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.797821703645372 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.6648320173605894 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.5318709052338891 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.39888046840725816 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.2659162270902383 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.13295408469348696 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   26.6s finished

    1975 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  5.322 seconds)

**Estimated memory usage:**  1943 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
