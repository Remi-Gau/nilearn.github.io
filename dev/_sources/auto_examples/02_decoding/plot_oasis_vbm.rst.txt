
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

..
    Original authors:

    - Elvis Dhomatob, Apr. 2014
    - Virgile Fritsch, Apr 2014
    - Gael Varoquaux, Apr 2014
    - Andres Hoyos-Idrobo, Apr 2017

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-90

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/runner/work/nilearn/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 93-109

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 148-150

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 150-163

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-166

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f84ce64a850>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-229

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    Job #1, processed 0/2000 permutations (0.00%, 198.08530807495117 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 36.79653239250183 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 34.38813400268555 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 32.92877324422201 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 33.19042086601257 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 32.59183645248413 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 32.31421534220378 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 32.01067216055734 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 31.605079650878906 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 31.217503415213688 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 31.620168209075928 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 31.445073236118667 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 31.21609584490458 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 31.05049833884606 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 30.83892846107483 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 30.527457078297935 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 30.482760429382324 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 30.19782387509066 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 29.923202488157482 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 29.692391671632468 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 29.474015951156616 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 29.264206046149845 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 29.066559813239362 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 29.019399093545005 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 28.810407002766926 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 28.581128120422363 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 28.3632790858929 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 28.14960069126553 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 27.925233806882588 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 27.83564521526468 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 27.658245007197063 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 27.459129187368575 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 27.277306973934174 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 27.068970557415124 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 26.863337250316846 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 26.658463954925537 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 26.540339628855385 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 26.34468677237227 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 26.14601604562057 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 25.957438744031467 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 25.772586822509766 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 25.59126970244617 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 25.536108595984324 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 25.394072837607805 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 25.209240609949283 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 25.025686899820965 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 24.8314919575401 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 24.644363788848228 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 24.456505815188088 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 24.320451230418925 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 24.134125471115112 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 23.960305961908077 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 23.777627889926617 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 23.594304125264006 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 23.41209340978552 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 23.25339965386824 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 23.10431855065482 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 22.931895348063684 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 22.777944096203505 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 22.614688760143213 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 22.45152576764425 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 22.282700831772853 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 22.14353347593738 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 21.964810314632597 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 21.79230386018753 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 21.615106069124664 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 21.438312927881878 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 21.267451072806743 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 21.104732036590576 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 20.961930026178774 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 20.78994948523385 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 20.620094614969172 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 20.44861136542426 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 20.278408164847388 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 20.110571062242663 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 19.971214930216473 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 19.808882964284795 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 19.64294504809689 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 19.477142101679092 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 19.307179016403005 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 19.135565757751465 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 18.96361228271767 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 18.81505733001523 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 18.649575569543494 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 18.479774009613763 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 18.31369112519657 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 18.148995022441063 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 17.98369981776709 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 17.841624520041726 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 17.675842129782342 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 17.51362376742893 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 17.34832015928331 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 17.182782504869547 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 17.020846282282186 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 16.86885246824711 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 16.72579178057219 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 16.56266701221466 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 16.41127423896003 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 16.246413931554677 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 16.080326061056116 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 15.915446281433105 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 15.76833677055812 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 15.604935683456123 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 15.441254835684322 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 15.276502902691181 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 15.115064632324945 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 14.951189365027087 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 14.788571386693794 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 14.641067222312644 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 14.483561535494044 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 14.319901357997548 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 14.156704672822007 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 13.993847131729126 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 13.832487686545447 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 13.6865782486765 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 13.527992590613986 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 13.364961640588168 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 13.20402072229956 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 13.044971571130269 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 12.881413666140132 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 12.719185511271158 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 12.571701018278265 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 12.410955659678725 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 12.250296228300265 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 12.089000824959047 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 11.929107427597046 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 11.769088313693093 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 11.617360826552384 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 11.456594467163086 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 11.29694338547167 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 11.138218366182766 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 10.978068226166354 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 10.81681726918076 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 10.655606449098515 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 10.503116443975648 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 10.341819648389462 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 10.181131923899931 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 10.020604885407607 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 9.858414176581562 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 9.698147193991023 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 9.547002451760427 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 9.38728218890251 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 9.226279879959536 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 9.065416139322561 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 8.904790388213264 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 8.744718050134592 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 8.584952654903882 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 8.430412423853971 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 8.270948680671486 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 8.110654726924512 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 7.9499045213063555 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 7.790366302262868 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 7.630260492625989 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 7.475532891703588 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 7.314985931693733 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 7.1545117978126775 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 6.994576570315239 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 6.836107635194328 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 6.675663724730286 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 6.515064825801729 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 6.359117329120636 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 6.198755921784396 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 6.0382355848948155 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 5.879372595278032 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 5.720093494508324 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 5.561103582382202 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 5.405800138611391 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 5.246021135124618 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 5.086568877810524 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 4.9268247009029045 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 4.767456377253813 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 4.607424967470225 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 4.448281360227009 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 4.291707809260815 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 4.132116413664544 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 3.9724514484405518 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 3.8127796541560777 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 3.655619009739935 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 3.496321273653695 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 3.339060273250388 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 3.183337688446045 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.023694250465098 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 2.8639731826363026 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 2.706774503155484 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 2.547974565754766 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 2.389856564032065 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.2303416318790887 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.0707142939542065 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 1.9112081172618458 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 1.7515489840633653 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 1.5920259701578239 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.4326397236729167 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.274035652478536 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.1147349708438536 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 0.9554250314063633 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 0.7961419851352006 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.6369020209020497 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.4776191384659201 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.3185535055218321 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.15926812401968032 seconds remaining)
    1981 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 20.099 seconds)

**Estimated memory usage:**  1887 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
