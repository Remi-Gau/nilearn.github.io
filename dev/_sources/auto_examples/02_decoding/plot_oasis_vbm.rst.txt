
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
--------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
-----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.image import get_data

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 59-61

Load Oasis dataset
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-78

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars['age'].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split
    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=.6, random_state=0)

    # print basic information on the dataset
    print('First gray-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.gray_matter_maps[0])  # 3D data
    print('First white-matter anatomy image (3D) is located at: %s' %
          oasis_dataset.white_matter_maps[0])  # 3D data





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/circleci/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Preprocess data
----------------

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False,
        smoothing_fwhm=2,
        memory='nilearn_cache')  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold
    variance_threshold = VarianceThreshold(threshold=.01)
    gm_maps_thresholded = variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor
    decoder = DecoderRegressor(estimator='svr', mask=mask,
                               scoring='neg_mean_absolute_error',
                               screening_percentile=1,
                               n_jobs=1)
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_['beta'])

    print("=== DECODER ===")
    print("explained variance for the cross-validation: %f" % prediction_score)
    print("")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670598





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Visualization
--------------

.. GENERATED FROM PYTHON SOURCE LINES 133-144

.. code-block:: default

    weight_img = decoder.coef_img_['beta']

    # Create the figure
    from nilearn.plotting import plot_stat_map, show
    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(weight_img, bg_img=bg_filename,
                            display_mode='z', cut_coords=[z_slice])
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Visualize the quality of predictions
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle("Decoder: Mean Absolute Error %.2f years" % prediction_score)
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, '--', c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(age_test - age_pred, label="True age - predicted age",
             linewidth=linewidth)
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f2b3289adc0>



.. GENERATED FROM PYTHON SOURCE LINES 162-164

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 164-197

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age, data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals))

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor='k')

    display = plot_stat_map(signed_neg_log_pvals_unmasked, bg_img=bg_filename,
                            threshold=threshold, cmap=plt.cm.RdBu_r,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig)
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)')
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print('\n%d detections' % n_detections)

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 243.9117431640625 seconds remaining)    Job #1, processed 10/2000 permutations (0.50%, 47.04998302459717 seconds remaining)    Job #1, processed 20/2000 permutations (1.00%, 44.246511697769165 seconds remaining)    Job #1, processed 30/2000 permutations (1.50%, 42.872387647628784 seconds remaining)    Job #1, processed 40/2000 permutations (2.00%, 42.16538095474243 seconds remaining)    Job #1, processed 50/2000 permutations (2.50%, 41.5390841960907 seconds remaining)    Job #1, processed 60/2000 permutations (3.00%, 40.929514487584434 seconds remaining)    Job #1, processed 70/2000 permutations (3.50%, 40.515966279166086 seconds remaining)    Job #1, processed 80/2000 permutations (4.00%, 40.20429611206055 seconds remaining)    Job #1, processed 90/2000 permutations (4.50%, 39.96218098534478 seconds remaining)    Job #1, processed 100/2000 permutations (5.00%, 39.97852039337158 seconds remaining)    Job #1, processed 110/2000 permutations (5.50%, 39.77772071144798 seconds remaining)    Job #1, processed 120/2000 permutations (6.00%, 39.5563178062439 seconds remaining)    Job #1, processed 130/2000 permutations (6.50%, 39.297717974736145 seconds remaining)    Job #1, processed 140/2000 permutations (7.00%, 39.03653546742031 seconds remaining)    Job #1, processed 150/2000 permutations (7.50%, 38.745410680770874 seconds remaining)    Job #1, processed 160/2000 permutations (8.00%, 38.34435725212097 seconds remaining)    Job #1, processed 170/2000 permutations (8.50%, 37.974950089174165 seconds remaining)    Job #1, processed 180/2000 permutations (9.00%, 37.639397859573364 seconds remaining)    Job #1, processed 190/2000 permutations (9.50%, 37.37064756845174 seconds remaining)    Job #1, processed 200/2000 permutations (10.00%, 37.11341714859009 seconds remaining)    Job #1, processed 210/2000 permutations (10.50%, 36.859747727712 seconds remaining)    Job #1, processed 220/2000 permutations (11.00%, 36.57658798044378 seconds remaining)    Job #1, processed 230/2000 permutations (11.50%, 36.32196111264437 seconds remaining)    Job #1, processed 240/2000 permutations (12.00%, 36.05777661005656 seconds remaining)    Job #1, processed 250/2000 permutations (12.50%, 35.81175422668457 seconds remaining)    Job #1, processed 260/2000 permutations (13.00%, 35.58105600797213 seconds remaining)    Job #1, processed 270/2000 permutations (13.50%, 35.37490157727842 seconds remaining)    Job #1, processed 280/2000 permutations (14.00%, 35.151084286826 seconds remaining)    Job #1, processed 290/2000 permutations (14.50%, 34.9212599293939 seconds remaining)    Job #1, processed 300/2000 permutations (15.00%, 34.69870853424072 seconds remaining)    Job #1, processed 310/2000 permutations (15.50%, 34.488607083597486 seconds remaining)    Job #1, processed 320/2000 permutations (16.00%, 34.27923792600632 seconds remaining)    Job #1, processed 330/2000 permutations (16.50%, 34.0714971296715 seconds remaining)    Job #1, processed 340/2000 permutations (17.00%, 33.86711085543913 seconds remaining)    Job #1, processed 350/2000 permutations (17.50%, 33.65885741370065 seconds remaining)    Job #1, processed 360/2000 permutations (18.00%, 33.45741677284241 seconds remaining)    Job #1, processed 370/2000 permutations (18.50%, 33.285821070542205 seconds remaining)    Job #1, processed 380/2000 permutations (19.00%, 33.09618360117862 seconds remaining)    Job #1, processed 390/2000 permutations (19.50%, 32.90280974216951 seconds remaining)    Job #1, processed 400/2000 permutations (20.00%, 32.72008514404297 seconds remaining)    Job #1, processed 410/2000 permutations (20.50%, 32.52911112366653 seconds remaining)    Job #1, processed 420/2000 permutations (21.00%, 32.34026246979123 seconds remaining)    Job #1, processed 430/2000 permutations (21.50%, 32.15491990710414 seconds remaining)    Job #1, processed 440/2000 permutations (22.00%, 31.969092152335428 seconds remaining)    Job #1, processed 450/2000 permutations (22.50%, 31.773312886555992 seconds remaining)    Job #1, processed 460/2000 permutations (23.00%, 31.56227699570034 seconds remaining)    Job #1, processed 470/2000 permutations (23.50%, 31.35334096563623 seconds remaining)    Job #1, processed 480/2000 permutations (24.00%, 31.143080353736877 seconds remaining)    Job #1, processed 490/2000 permutations (24.50%, 30.90842055301277 seconds remaining)    Job #1, processed 500/2000 permutations (25.00%, 30.683612823486328 seconds remaining)    Job #1, processed 510/2000 permutations (25.50%, 30.44778978123384 seconds remaining)    Job #1, processed 520/2000 permutations (26.00%, 30.233487569368805 seconds remaining)    Job #1, processed 530/2000 permutations (26.50%, 30.01534907772856 seconds remaining)    Job #1, processed 540/2000 permutations (27.00%, 29.809247652689617 seconds remaining)    Job #1, processed 550/2000 permutations (27.50%, 29.59597173604098 seconds remaining)    Job #1, processed 560/2000 permutations (28.00%, 29.372507980891637 seconds remaining)    Job #1, processed 570/2000 permutations (28.50%, 29.162727121721232 seconds remaining)    Job #1, processed 580/2000 permutations (29.00%, 28.964609828488577 seconds remaining)    Job #1, processed 590/2000 permutations (29.50%, 28.758190555087587 seconds remaining)    Job #1, processed 600/2000 permutations (30.00%, 28.56777612368266 seconds remaining)    Job #1, processed 610/2000 permutations (30.50%, 28.372857500295172 seconds remaining)    Job #1, processed 620/2000 permutations (31.00%, 28.178888705468946 seconds remaining)    Job #1, processed 630/2000 permutations (31.50%, 27.97687024540371 seconds remaining)    Job #1, processed 640/2000 permutations (32.00%, 27.765969902276993 seconds remaining)    Job #1, processed 650/2000 permutations (32.50%, 27.562852400999805 seconds remaining)    Job #1, processed 660/2000 permutations (33.00%, 27.354399168130122 seconds remaining)    Job #1, processed 670/2000 permutations (33.50%, 27.14380022305161 seconds remaining)    Job #1, processed 680/2000 permutations (34.00%, 26.939329610151404 seconds remaining)    Job #1, processed 690/2000 permutations (34.50%, 26.73168323005455 seconds remaining)    Job #1, processed 700/2000 permutations (35.00%, 26.52799473490034 seconds remaining)    Job #1, processed 710/2000 permutations (35.50%, 26.317861328662282 seconds remaining)    Job #1, processed 720/2000 permutations (36.00%, 26.115518781873913 seconds remaining)    Job #1, processed 730/2000 permutations (36.50%, 25.913976953454213 seconds remaining)    Job #1, processed 740/2000 permutations (37.00%, 25.701133876233488 seconds remaining)    Job #1, processed 750/2000 permutations (37.50%, 25.49403746922811 seconds remaining)    Job #1, processed 760/2000 permutations (38.00%, 25.287154862755223 seconds remaining)    Job #1, processed 770/2000 permutations (38.50%, 25.131520763620152 seconds remaining)    Job #1, processed 780/2000 permutations (39.00%, 24.92523769231943 seconds remaining)    Job #1, processed 790/2000 permutations (39.50%, 24.767307495769064 seconds remaining)    Job #1, processed 800/2000 permutations (40.00%, 24.56349742412567 seconds remaining)    Job #1, processed 810/2000 permutations (40.50%, 24.36464709411433 seconds remaining)    Job #1, processed 820/2000 permutations (41.00%, 24.166550735147986 seconds remaining)    Job #1, processed 830/2000 permutations (41.50%, 23.973412306911975 seconds remaining)    Job #1, processed 840/2000 permutations (42.00%, 23.76740642956325 seconds remaining)    Job #1, processed 850/2000 permutations (42.50%, 23.565910984488095 seconds remaining)    Job #1, processed 860/2000 permutations (43.00%, 23.354722937872243 seconds remaining)    Job #1, processed 870/2000 permutations (43.50%, 23.140390256355552 seconds remaining)    Job #1, processed 880/2000 permutations (44.00%, 22.927273446863346 seconds remaining)    Job #1, processed 890/2000 permutations (44.50%, 22.712449462226267 seconds remaining)    Job #1, processed 900/2000 permutations (45.00%, 22.504437843958538 seconds remaining)    Job #1, processed 910/2000 permutations (45.50%, 22.292630331856863 seconds remaining)    Job #1, processed 920/2000 permutations (46.00%, 22.078943190367326 seconds remaining)    Job #1, processed 930/2000 permutations (46.50%, 21.87056283284259 seconds remaining)    Job #1, processed 940/2000 permutations (47.00%, 21.667566471911492 seconds remaining)    Job #1, processed 950/2000 permutations (47.50%, 21.457597167868364 seconds remaining)    Job #1, processed 960/2000 permutations (48.00%, 21.24779031674067 seconds remaining)    Job #1, processed 970/2000 permutations (48.50%, 21.043943348619127 seconds remaining)    Job #1, processed 980/2000 permutations (49.00%, 20.83671552307752 seconds remaining)    Job #1, processed 990/2000 permutations (49.50%, 20.631611178619693 seconds remaining)    Job #1, processed 1000/2000 permutations (50.00%, 20.42817187309265 seconds remaining)    Job #1, processed 1010/2000 permutations (50.50%, 20.222827151270195 seconds remaining)    Job #1, processed 1020/2000 permutations (51.00%, 20.01407086615469 seconds remaining)    Job #1, processed 1030/2000 permutations (51.50%, 19.801530488486428 seconds remaining)    Job #1, processed 1040/2000 permutations (52.00%, 19.59175102527325 seconds remaining)    Job #1, processed 1050/2000 permutations (52.50%, 19.382608674821398 seconds remaining)    Job #1, processed 1060/2000 permutations (53.00%, 19.174900216876335 seconds remaining)    Job #1, processed 1070/2000 permutations (53.50%, 18.966679593112982 seconds remaining)    Job #1, processed 1080/2000 permutations (54.00%, 18.75914074756481 seconds remaining)    Job #1, processed 1090/2000 permutations (54.50%, 18.552349648344407 seconds remaining)    Job #1, processed 1100/2000 permutations (55.00%, 18.344856782393023 seconds remaining)    Job #1, processed 1110/2000 permutations (55.50%, 18.14087434717127 seconds remaining)    Job #1, processed 1120/2000 permutations (56.00%, 17.93708734852927 seconds remaining)    Job #1, processed 1130/2000 permutations (56.50%, 17.732451299650478 seconds remaining)    Job #1, processed 1140/2000 permutations (57.00%, 17.5266820673357 seconds remaining)    Job #1, processed 1150/2000 permutations (57.50%, 17.324096658955447 seconds remaining)    Job #1, processed 1160/2000 permutations (58.00%, 17.118706916940624 seconds remaining)    Job #1, processed 1170/2000 permutations (58.50%, 16.90878106182457 seconds remaining)    Job #1, processed 1180/2000 permutations (59.00%, 16.698827622300488 seconds remaining)    Job #1, processed 1190/2000 permutations (59.50%, 16.492750432310988 seconds remaining)    Job #1, processed 1200/2000 permutations (60.00%, 16.290441195170082 seconds remaining)    Job #1, processed 1210/2000 permutations (60.50%, 16.08767860585993 seconds remaining)    Job #1, processed 1220/2000 permutations (61.00%, 15.885715777756738 seconds remaining)    Job #1, processed 1230/2000 permutations (61.50%, 15.680419823018514 seconds remaining)    Job #1, processed 1240/2000 permutations (62.00%, 15.476595247945479 seconds remaining)    Job #1, processed 1250/2000 permutations (62.50%, 15.272140502929688 seconds remaining)    Job #1, processed 1260/2000 permutations (63.00%, 15.070199527437726 seconds remaining)    Job #1, processed 1270/2000 permutations (63.50%, 14.868900038125947 seconds remaining)    Job #1, processed 1280/2000 permutations (64.00%, 14.668676286935806 seconds remaining)    Job #1, processed 1290/2000 permutations (64.50%, 14.468182547147883 seconds remaining)    Job #1, processed 1300/2000 permutations (65.00%, 14.26702803831834 seconds remaining)    Job #1, processed 1310/2000 permutations (65.50%, 14.065157349783046 seconds remaining)    Job #1, processed 1320/2000 permutations (66.00%, 13.860923434748793 seconds remaining)    Job #1, processed 1330/2000 permutations (66.50%, 13.656354665756226 seconds remaining)    Job #1, processed 1340/2000 permutations (67.00%, 13.451506130730927 seconds remaining)    Job #1, processed 1350/2000 permutations (67.50%, 13.24607499440511 seconds remaining)    Job #1, processed 1360/2000 permutations (68.00%, 13.040232826681699 seconds remaining)    Job #1, processed 1370/2000 permutations (68.50%, 12.835817886965119 seconds remaining)    Job #1, processed 1380/2000 permutations (69.00%, 12.631483181663182 seconds remaining)    Job #1, processed 1390/2000 permutations (69.50%, 12.424995031288201 seconds remaining)    Job #1, processed 1400/2000 permutations (70.00%, 12.216841731752668 seconds remaining)    Job #1, processed 1410/2000 permutations (70.50%, 12.010041133731814 seconds remaining)    Job #1, processed 1420/2000 permutations (71.00%, 11.805314416616735 seconds remaining)    Job #1, processed 1430/2000 permutations (71.50%, 11.601678791579667 seconds remaining)    Job #1, processed 1440/2000 permutations (72.00%, 11.398745165930855 seconds remaining)    Job #1, processed 1450/2000 permutations (72.50%, 11.196444642954859 seconds remaining)    Job #1, processed 1460/2000 permutations (73.00%, 10.994812077038908 seconds remaining)    Job #1, processed 1470/2000 permutations (73.50%, 10.79242204971054 seconds remaining)    Job #1, processed 1480/2000 permutations (74.00%, 10.58892525208963 seconds remaining)    Job #1, processed 1490/2000 permutations (74.50%, 10.386288777293775 seconds remaining)    Job #1, processed 1500/2000 permutations (75.00%, 10.181065479914347 seconds remaining)    Job #1, processed 1510/2000 permutations (75.50%, 9.976266892540533 seconds remaining)    Job #1, processed 1520/2000 permutations (76.00%, 9.773305516493947 seconds remaining)    Job #1, processed 1530/2000 permutations (76.50%, 9.569657451966231 seconds remaining)    Job #1, processed 1540/2000 permutations (77.00%, 9.36622988093983 seconds remaining)    Job #1, processed 1550/2000 permutations (77.50%, 9.161441433814264 seconds remaining)    Job #1, processed 1560/2000 permutations (78.00%, 8.954878990466778 seconds remaining)    Job #1, processed 1570/2000 permutations (78.50%, 8.749118419209863 seconds remaining)    Job #1, processed 1580/2000 permutations (79.00%, 8.54399209082881 seconds remaining)    Job #1, processed 1590/2000 permutations (79.50%, 8.340640649855512 seconds remaining)    Job #1, processed 1600/2000 permutations (80.00%, 8.136938512325287 seconds remaining)    Job #1, processed 1610/2000 permutations (80.50%, 7.934014280390295 seconds remaining)    Job #1, processed 1620/2000 permutations (81.00%, 7.73117599663911 seconds remaining)    Job #1, processed 1630/2000 permutations (81.50%, 7.527703510471648 seconds remaining)    Job #1, processed 1640/2000 permutations (82.00%, 7.325098846016861 seconds remaining)    Job #1, processed 1650/2000 permutations (82.50%, 7.1229634284973145 seconds remaining)    Job #1, processed 1660/2000 permutations (83.00%, 6.920718891074858 seconds remaining)    Job #1, processed 1670/2000 permutations (83.50%, 6.718878905930205 seconds remaining)    Job #1, processed 1680/2000 permutations (84.00%, 6.516910552978516 seconds remaining)    Job #1, processed 1690/2000 permutations (84.50%, 6.31379946025871 seconds remaining)    Job #1, processed 1700/2000 permutations (85.00%, 6.110901622211232 seconds remaining)    Job #1, processed 1710/2000 permutations (85.50%, 5.907501199789214 seconds remaining)    Job #1, processed 1720/2000 permutations (86.00%, 5.7043086484421135 seconds remaining)    Job #1, processed 1730/2000 permutations (86.50%, 5.501528808836303 seconds remaining)    Job #1, processed 1740/2000 permutations (87.00%, 5.299177632934746 seconds remaining)    Job #1, processed 1750/2000 permutations (87.50%, 5.09611371585301 seconds remaining)    Job #1, processed 1760/2000 permutations (88.00%, 4.892691070383245 seconds remaining)    Job #1, processed 1770/2000 permutations (88.50%, 4.689732633741562 seconds remaining)    Job #1, processed 1780/2000 permutations (89.00%, 4.486138927802611 seconds remaining)    Job #1, processed 1790/2000 permutations (89.50%, 4.282477883653268 seconds remaining)    Job #1, processed 1800/2000 permutations (90.00%, 4.07857330640157 seconds remaining)    Job #1, processed 1810/2000 permutations (90.50%, 3.8739271361524885 seconds remaining)    Job #1, processed 1820/2000 permutations (91.00%, 3.6689837136111416 seconds remaining)    Job #1, processed 1830/2000 permutations (91.50%, 3.464126618182073 seconds remaining)    Job #1, processed 1840/2000 permutations (92.00%, 3.2598355749379033 seconds remaining)    Job #1, processed 1850/2000 permutations (92.50%, 3.0557989751970447 seconds remaining)    Job #1, processed 1860/2000 permutations (93.00%, 2.851886195521201 seconds remaining)    Job #1, processed 1870/2000 permutations (93.50%, 2.648070819875136 seconds remaining)    Job #1, processed 1880/2000 permutations (94.00%, 2.4445325009366297 seconds remaining)    Job #1, processed 1890/2000 permutations (94.50%, 2.2410139495102817 seconds remaining)    Job #1, processed 1900/2000 permutations (95.00%, 2.0373527878209163 seconds remaining)    Job #1, processed 1910/2000 permutations (95.50%, 1.83410275918651 seconds remaining)    Job #1, processed 1920/2000 permutations (96.00%, 1.6304305990537007 seconds remaining)    Job #1, processed 1930/2000 permutations (96.50%, 1.4266954493646176 seconds remaining)    Job #1, processed 1940/2000 permutations (97.00%, 1.2228775786370347 seconds remaining)    Job #1, processed 1950/2000 permutations (97.50%, 1.0188179871974847 seconds remaining)    Job #1, processed 1960/2000 permutations (98.00%, 0.8148788821940519 seconds remaining)    Job #1, processed 1970/2000 permutations (98.50%, 0.6111933870363961 seconds remaining)    Job #1, processed 1980/2000 permutations (99.00%, 0.4073655653481532 seconds remaining)    Job #1, processed 1990/2000 permutations (99.50%, 0.20363562190952014 seconds remaining)    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   40.7s finished

    1936 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  4.014 seconds)

**Estimated memory usage:**  1920 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/nilearn/nilearn.github.io/main?filepath=examples/auto_examples/02_decoding/plot_oasis_vbm.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
