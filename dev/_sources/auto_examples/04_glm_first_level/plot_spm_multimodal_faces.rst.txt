
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/04_glm_first_level/plot_spm_multimodal_faces.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_04_glm_first_level_plot_spm_multimodal_faces.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_04_glm_first_level_plot_spm_multimodal_faces.py:


Single-subject data (two sessions) in native space
==================================================

The example shows the analysis of an SPM dataset studying face perception.  The
analysis is performed in native space. Realignment parameters are provided with
the input images, but those have not been resampled to a common space.

The experimental paradigm is simple, with two conditions; viewing a face image
or a scrambled face image, supposedly with the same low-level statistical
properties, to find face-specific responses.

For details on the data, please see:
Henson, R.N., Goshen-Gottstein, Y., Ganel, T., Otten, L.J., Quayle, A.,
Rugg, M.D. Electrophysiological and haemodynamic correlates of face
perception, recognition and priming. Cereb Cortex. 2003 Jul;13(7):793-805.
http://www.dx.doi.org/10.1093/cercor/13.7.793

This example takes a lot of time because the input are lists of 3D images
sampled in different positions (encoded by different affine functions).

.. GENERATED FROM PYTHON SOURCE LINES 23-27

.. code-block:: default


    print(__doc__)









.. GENERATED FROM PYTHON SOURCE LINES 28-29

Fetch the SPM multimodal_faces data.

.. GENERATED FROM PYTHON SOURCE LINES 29-32

.. code-block:: default

    from nilearn.datasets import fetch_spm_multimodal_fmri
    subject_data = fetch_spm_multimodal_fmri()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Dataset created in /home/circleci/nilearn_data/spm_multimodal_fmri

    Missing 390 functional scans for session 1.
    Data absent, downloading...
    Downloading data from http://www.fil.ion.ucl.ac.uk/spm/download/data/mmfaces/multimodal_fmri.zip ...
    Downloaded 1875968 of 134263085 bytes (1.4%,  1.2min remaining)    Downloaded 4259840 of 134263085 bytes (3.2%,  1.0min remaining)    Downloaded 6742016 of 134263085 bytes (5.0%,   57.9s remaining)    Downloaded 9175040 of 134263085 bytes (6.8%,   55.4s remaining)    Downloaded 11599872 of 134263085 bytes (8.6%,   53.6s remaining)    Downloaded 13811712 of 134263085 bytes (10.3%,   53.0s remaining)    Downloaded 15958016 of 134263085 bytes (11.9%,   52.5s remaining)    Downloaded 18448384 of 134263085 bytes (13.7%,   50.8s remaining)    Downloaded 20471808 of 134263085 bytes (15.2%,   50.5s remaining)    Downloaded 22528000 of 134263085 bytes (16.8%,   50.1s remaining)    Downloaded 24600576 of 134263085 bytes (18.3%,   49.5s remaining)    Downloaded 26796032 of 134263085 bytes (20.0%,   48.5s remaining)    Downloaded 28909568 of 134263085 bytes (21.5%,   47.8s remaining)    Downloaded 30736384 of 134263085 bytes (22.9%,   47.5s remaining)    Downloaded 32735232 of 134263085 bytes (24.4%,   46.9s remaining)    Downloaded 34938880 of 134263085 bytes (26.0%,   45.8s remaining)    Downloaded 36405248 of 134263085 bytes (27.1%,   46.1s remaining)    Downloaded 37765120 of 134263085 bytes (28.1%,   46.4s remaining)    Downloaded 39092224 of 134263085 bytes (29.1%,   46.6s remaining)    Downloaded 40288256 of 134263085 bytes (30.0%,   47.0s remaining)    Downloaded 41623552 of 134263085 bytes (31.0%,   47.1s remaining)    Downloaded 42721280 of 134263085 bytes (31.8%,   47.5s remaining)    Downloaded 43630592 of 134263085 bytes (32.5%,   48.1s remaining)    Downloaded 44572672 of 134263085 bytes (33.2%,   48.6s remaining)    Downloaded 45588480 of 134263085 bytes (34.0%,   49.0s remaining)    Downloaded 46743552 of 134263085 bytes (34.8%,   49.0s remaining)    Downloaded 47751168 of 134263085 bytes (35.6%,   49.3s remaining)    Downloaded 48857088 of 134263085 bytes (36.4%,   49.3s remaining)    Downloaded 50053120 of 134263085 bytes (37.3%,   49.1s remaining)    Downloaded 51298304 of 134263085 bytes (38.2%,   48.8s remaining)    Downloaded 52576256 of 134263085 bytes (39.2%,   48.5s remaining)    Downloaded 54009856 of 134263085 bytes (40.2%,   47.9s remaining)    Downloaded 55500800 of 134263085 bytes (41.3%,   47.1s remaining)    Downloaded 56885248 of 134263085 bytes (42.4%,   46.5s remaining)    Downloaded 58204160 of 134263085 bytes (43.4%,   46.0s remaining)    Downloaded 59441152 of 134263085 bytes (44.3%,   45.6s remaining)    Downloaded 60686336 of 134263085 bytes (45.2%,   45.1s remaining)    Downloaded 62013440 of 134263085 bytes (46.2%,   44.6s remaining)    Downloaded 63463424 of 134263085 bytes (47.3%,   43.8s remaining)    Downloaded 64978944 of 134263085 bytes (48.4%,   42.9s remaining)    Downloaded 66625536 of 134263085 bytes (49.6%,   41.9s remaining)    Downloaded 68395008 of 134263085 bytes (50.9%,   40.7s remaining)    Downloaded 70287360 of 134263085 bytes (52.4%,   39.4s remaining)    Downloaded 72343552 of 134263085 bytes (53.9%,   37.9s remaining)    Downloaded 74309632 of 134263085 bytes (55.3%,   36.5s remaining)    Downloaded 76529664 of 134263085 bytes (57.0%,   34.9s remaining)    Downloaded 78848000 of 134263085 bytes (58.7%,   33.2s remaining)    Downloaded 81117184 of 134263085 bytes (60.4%,   31.6s remaining)    Downloaded 83075072 of 134263085 bytes (61.9%,   30.4s remaining)    Downloaded 85106688 of 134263085 bytes (63.4%,   29.1s remaining)    Downloaded 86827008 of 134263085 bytes (64.7%,   28.0s remaining)    Downloaded 88702976 of 134263085 bytes (66.1%,   26.9s remaining)    Downloaded 90677248 of 134263085 bytes (67.5%,   25.6s remaining)    Downloaded 92585984 of 134263085 bytes (69.0%,   24.5s remaining)    Downloaded 94642176 of 134263085 bytes (70.5%,   23.2s remaining)    Downloaded 96387072 of 134263085 bytes (71.8%,   22.1s remaining)    Downloaded 98074624 of 134263085 bytes (73.0%,   21.2s remaining)    Downloaded 99344384 of 134263085 bytes (74.0%,   20.5s remaining)    Downloaded 100352000 of 134263085 bytes (74.7%,   20.1s remaining)    Downloaded 101146624 of 134263085 bytes (75.3%,   19.8s remaining)    Downloaded 101949440 of 134263085 bytes (75.9%,   19.5s remaining)    Downloaded 102793216 of 134263085 bytes (76.6%,   19.1s remaining)    Downloaded 103546880 of 134263085 bytes (77.1%,   18.8s remaining)    Downloaded 104423424 of 134263085 bytes (77.8%,   18.4s remaining)    Downloaded 105349120 of 134263085 bytes (78.5%,   18.0s remaining)    Downloaded 106356736 of 134263085 bytes (79.2%,   17.4s remaining)    Downloaded 107315200 of 134263085 bytes (79.9%,   16.9s remaining)    Downloaded 108052480 of 134263085 bytes (80.5%,   16.6s remaining)    Downloaded 108830720 of 134263085 bytes (81.1%,   16.2s remaining)    Downloaded 109568000 of 134263085 bytes (81.6%,   15.9s remaining)    Downloaded 110346240 of 134263085 bytes (82.2%,   15.5s remaining)    Downloaded 111132672 of 134263085 bytes (82.8%,   15.1s remaining)    Downloaded 111869952 of 134263085 bytes (83.3%,   14.7s remaining)    Downloaded 112566272 of 134263085 bytes (83.8%,   14.4s remaining)    Downloaded 113106944 of 134263085 bytes (84.2%,   14.1s remaining)    Downloaded 113696768 of 134263085 bytes (84.7%,   13.8s remaining)    Downloaded 114393088 of 134263085 bytes (85.2%,   13.5s remaining)    Downloaded 115204096 of 134263085 bytes (85.8%,   13.0s remaining)    Downloaded 115982336 of 134263085 bytes (86.4%,   12.5s remaining)    Downloaded 116662272 of 134263085 bytes (86.9%,   12.2s remaining)    Downloaded 117219328 of 134263085 bytes (87.3%,   11.9s remaining)    Downloaded 117661696 of 134263085 bytes (87.6%,   11.7s remaining)    Downloaded 118128640 of 134263085 bytes (88.0%,   11.4s remaining)    Downloaded 118644736 of 134263085 bytes (88.4%,   11.1s remaining)    Downloaded 119160832 of 134263085 bytes (88.8%,   10.8s remaining)    Downloaded 119767040 of 134263085 bytes (89.2%,   10.5s remaining)    Downloaded 120479744 of 134263085 bytes (89.7%,   10.0s remaining)    Downloaded 121126912 of 134263085 bytes (90.2%,    9.6s remaining)    Downloaded 121831424 of 134263085 bytes (90.7%,    9.2s remaining)    Downloaded 122429440 of 134263085 bytes (91.2%,    8.8s remaining)    Downloaded 123117568 of 134263085 bytes (91.7%,    8.3s remaining)    Downloaded 123904000 of 134263085 bytes (92.3%,    7.8s remaining)    Downloaded 124805120 of 134263085 bytes (93.0%,    7.1s remaining)    Downloaded 125837312 of 134263085 bytes (93.7%,    6.3s remaining)    Downloaded 126967808 of 134263085 bytes (94.6%,    5.5s remaining)    Downloaded 128180224 of 134263085 bytes (95.5%,    4.6s remaining)    Downloaded 128999424 of 134263085 bytes (96.1%,    4.0s remaining)    Downloaded 129802240 of 134263085 bytes (96.7%,    3.4s remaining)    Downloaded 130441216 of 134263085 bytes (97.2%,    2.9s remaining)    Downloaded 130973696 of 134263085 bytes (97.6%,    2.5s remaining)    Downloaded 131604480 of 134263085 bytes (98.0%,    2.1s remaining)    Downloaded 132341760 of 134263085 bytes (98.6%,    1.5s remaining)    Downloaded 133087232 of 134263085 bytes (99.1%,    0.9s remaining)    Downloaded 133840896 of 134263085 bytes (99.7%,    0.3s remaining) ...done. (106 seconds, 1 min)
    Extracting data from /home/circleci/nilearn_data/spm_multimodal_fmri/sub001/multimodal_fmri.zip..... done.
    Downloading data from http://www.fil.ion.ucl.ac.uk/spm/download/data/mmfaces/multimodal_smri.zip ...
    Downloaded 3497984 of 6852766 bytes (51.0%,    1.0s remaining)    Downloaded 6291456 of 6852766 bytes (91.8%,    0.2s remaining) ...done. (3 seconds, 0 min)
    Extracting data from /home/circleci/nilearn_data/spm_multimodal_fmri/sub001/multimodal_smri.zip..... done.




.. GENERATED FROM PYTHON SOURCE LINES 33-34

Specfiy timing and design matrix parameters.

.. GENERATED FROM PYTHON SOURCE LINES 34-40

.. code-block:: default

    tr = 2.  # repetition time, in seconds
    slice_time_ref = 0.  # Sample at the beginning of each acquisition.
    drift_model = 'Cosine'  # We use a discrete cosine transform to model signal drifts.
    high_pass = .01  # The cutoff for the drift model is 0.01 Hz.
    hrf_model = 'spm + derivative'  # The hemodynamic response function is the SPM canonical one.








.. GENERATED FROM PYTHON SOURCE LINES 41-44

Resample the images.

This is achieved by the concat_imgs function of Nilearn.

.. GENERATED FROM PYTHON SOURCE LINES 44-56

.. code-block:: default

    import warnings
    from nilearn.image import concat_imgs, resample_img, mean_img

    # Avoid getting too many warnings due to resampling
    with warnings.catch_warnings():
        warnings.simplefilter("ignore")
        fmri_img = [concat_imgs(subject_data.func1, auto_resample=True),
                    concat_imgs(subject_data.func2, auto_resample=True)]
    affine, shape = fmri_img[0].affine, fmri_img[0].shape
    print('Resampling the second image (this takes time)...')
    fmri_img[1] = resample_img(fmri_img[1], affine, shape[:3])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Resampling the second image (this takes time)...




.. GENERATED FROM PYTHON SOURCE LINES 57-58

Let's create mean image for display purposes.

.. GENERATED FROM PYTHON SOURCE LINES 58-60

.. code-block:: default

    mean_image = mean_img(fmri_img)








.. GENERATED FROM PYTHON SOURCE LINES 61-62

Make the design matrices.

.. GENERATED FROM PYTHON SOURCE LINES 62-67

.. code-block:: default

    import numpy as np
    import pandas as pd
    from nilearn.glm.first_level import make_first_level_design_matrix
    design_matrices = []








.. GENERATED FROM PYTHON SOURCE LINES 68-69

Loop over the two sessions.

.. GENERATED FROM PYTHON SOURCE LINES 69-87

.. code-block:: default

    for idx, img in enumerate(fmri_img, start=1):
        # Build experimental paradigm
        n_scans = img.shape[-1]
        events = pd.read_table(subject_data['events{}'.format(idx)])
        # Define the sampling times for the design matrix
        frame_times = np.arange(n_scans) * tr
        # Build design matrix with the reviously defined parameters
        design_matrix = make_first_level_design_matrix(
                frame_times,
                events,
                hrf_model=hrf_model,
                drift_model=drift_model,
                high_pass=high_pass,
                )

        # put the design matrices in a list
        design_matrices.append(design_matrix)








.. GENERATED FROM PYTHON SOURCE LINES 88-91

We can specify basic contrasts (to get :term:`beta<Parameter Estimate>`
maps).
We start by specifying canonical contrast that isolate design matrix columns.

.. GENERATED FROM PYTHON SOURCE LINES 91-95

.. code-block:: default

    contrast_matrix = np.eye(design_matrix.shape[1])
    basic_contrasts = dict([(column, contrast_matrix[i])
                            for i, column in enumerate(design_matrix.columns)])








.. GENERATED FROM PYTHON SOURCE LINES 96-101

We actually want more interesting contrasts. The simplest contrast
just makes the difference between the two main conditions.  We
define the two opposite versions to run one-tailed t-tests.  We also
define the effects of interest contrast, a 2-dimensional contrasts
spanning the two conditions.

.. GENERATED FROM PYTHON SOURCE LINES 101-109

.. code-block:: default


    contrasts = {
        'faces-scrambled': basic_contrasts['faces'] - basic_contrasts['scrambled'],
        'scrambled-faces': -basic_contrasts['faces'] + basic_contrasts['scrambled'],
        'effects_of_interest': np.vstack((basic_contrasts['faces'],
                                          basic_contrasts['scrambled']))
        }








.. GENERATED FROM PYTHON SOURCE LINES 110-112

Fit the GLM for the 2 sessions by specifying a FirstLevelModel and then
fitting it.

.. GENERATED FROM PYTHON SOURCE LINES 112-117

.. code-block:: default

    from nilearn.glm.first_level import FirstLevelModel
    print('Fitting a GLM')
    fmri_glm = FirstLevelModel()
    fmri_glm = fmri_glm.fit(fmri_img, design_matrices=design_matrices)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Fitting a GLM




.. GENERATED FROM PYTHON SOURCE LINES 118-120

Now we can compute contrast-related statistical maps (in z-scale), and plot
them.

.. GENERATED FROM PYTHON SOURCE LINES 120-137

.. code-block:: default

    print('Computing contrasts')
    from nilearn import plotting

    # Iterate on contrasts
    for contrast_id, contrast_val in contrasts.items():
        print("\tcontrast id: %s" % contrast_id)
        # compute the contrasts
        z_map = fmri_glm.compute_contrast(
            contrast_val, output_type='z_score')
        # plot the contrasts as soon as they're generated
        # the display is overlaid on the mean fMRI image
        # a threshold of 3.0 is used, more sophisticated choices are possible
        plotting.plot_stat_map(
            z_map, bg_img=mean_image, threshold=3.0, display_mode='z',
            cut_coords=3, black_bg=True, title=contrast_id)
        plotting.show()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_001.png
         :alt: plot spm multimodal faces
         :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_002.png
         :alt: plot spm multimodal faces
         :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_003.png
         :alt: plot spm multimodal faces
         :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computing contrasts
            contrast id: faces-scrambled
    /home/circleci/miniconda3/envs/testenv/lib/python3.8/site-packages/nilearn/glm/first_level/first_level.py:696: UserWarning:

    One contrast given, assuming it for all 2 runs

            contrast id: scrambled-faces
    /home/circleci/miniconda3/envs/testenv/lib/python3.8/site-packages/nilearn/glm/first_level/first_level.py:696: UserWarning:

    One contrast given, assuming it for all 2 runs

            contrast id: effects_of_interest
    /home/circleci/miniconda3/envs/testenv/lib/python3.8/site-packages/nilearn/glm/first_level/first_level.py:696: UserWarning:

    One contrast given, assuming it for all 2 runs

    /home/circleci/miniconda3/envs/testenv/lib/python3.8/site-packages/nilearn/glm/contrasts.py:361: UserWarning:

    Running approximate fixed effects on F statistics.





.. GENERATED FROM PYTHON SOURCE LINES 138-144

Based on the resulting maps we observe that the analysis results in
wide activity for the 'effects of interest' contrast, showing the
implications of large portions of the visual cortex in the
conditions. By contrast, the differential effect between "faces" and
"scrambled" involves sparser, more anterior and lateral regions. It
also displays some responses in the frontal lobe.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  20.889 seconds)

**Estimated memory usage:**  984 MB


.. _sphx_glr_download_auto_examples_04_glm_first_level_plot_spm_multimodal_faces.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/04_glm_first_level/plot_spm_multimodal_faces.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_spm_multimodal_faces.py <plot_spm_multimodal_faces.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_spm_multimodal_faces.ipynb <plot_spm_multimodal_faces.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
