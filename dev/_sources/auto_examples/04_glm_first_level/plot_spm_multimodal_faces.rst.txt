
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/04_glm_first_level/plot_spm_multimodal_faces.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_04_glm_first_level_plot_spm_multimodal_faces.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_04_glm_first_level_plot_spm_multimodal_faces.py:


Single-subject data (two sessions) in native space
==================================================

The example shows the analysis of an SPM dataset studying face perception.  The
analysis is performed in native space. Realignment parameters are provided with
the input images, but those have not been resampled to a common space.

The experimental paradigm is simple, with two conditions; viewing a face image
or a scrambled face image, supposedly with the same low-level statistical
properties, to find face-specific responses.

For details on the data, please see:
Henson, R.N., Goshen-Gottstein, Y., Ganel, T., Otten, L.J., Quayle, A.,
Rugg, M.D. Electrophysiological and haemodynamic correlates of face
perception, recognition and priming. Cereb Cortex. 2003 Jul;13(7):793-805.
http://www.dx.doi.org/10.1093/cercor/13.7.793

This example takes a lot of time because the input are lists of 3D images
sampled in different positions (encoded by different affine functions).

.. GENERATED FROM PYTHON SOURCE LINES 23-27

.. code-block:: default


    print(__doc__)









.. GENERATED FROM PYTHON SOURCE LINES 28-29

Fetch the SPM multimodal_faces data.

.. GENERATED FROM PYTHON SOURCE LINES 29-33

.. code-block:: default

    from nilearn.datasets import fetch_spm_multimodal_fmri

    subject_data = fetch_spm_multimodal_fmri()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Dataset created in /home/runner/work/nilearn/nilearn/nilearn_data/spm_multimodal_fmri

    Missing 390 functional scans for session 1.
    Data absent, downloading...
    Downloading data from http://www.fil.ion.ucl.ac.uk/spm/download/data/mmfaces/multimodal_fmri.zip ...
    Downloaded 835584 of 134263085 bytes (0.6%,  2.7min remaining)    Downloaded 2834432 of 134263085 bytes (2.1%,  1.6min remaining)    Downloaded 4481024 of 134263085 bytes (3.3%,  1.5min remaining)    Downloaded 6217728 of 134263085 bytes (4.6%,  1.4min remaining)    Downloaded 7995392 of 134263085 bytes (6.0%,  1.3min remaining)    Downloaded 9781248 of 134263085 bytes (7.3%,  1.3min remaining)    Downloaded 11558912 of 134263085 bytes (8.6%,  1.3min remaining)    Downloaded 13066240 of 134263085 bytes (9.7%,  1.3min remaining)    Downloaded 14565376 of 134263085 bytes (10.8%,  1.3min remaining)    Downloaded 16236544 of 134263085 bytes (12.1%,  1.2min remaining)    Downloaded 17997824 of 134263085 bytes (13.4%,  1.2min remaining)    Downloaded 19185664 of 134263085 bytes (14.3%,  1.2min remaining)    Downloaded 20144128 of 134263085 bytes (15.0%,  1.3min remaining)    Downloaded 21078016 of 134263085 bytes (15.7%,  1.3min remaining)    Downloaded 21938176 of 134263085 bytes (16.3%,  1.3min remaining)    Downloaded 22814720 of 134263085 bytes (17.0%,  1.3min remaining)    Downloaded 23699456 of 134263085 bytes (17.7%,  1.3min remaining)    Downloaded 24584192 of 134263085 bytes (18.3%,  1.4min remaining)    Downloaded 25501696 of 134263085 bytes (19.0%,  1.4min remaining)    Downloaded 26501120 of 134263085 bytes (19.7%,  1.4min remaining)    Downloaded 27648000 of 134263085 bytes (20.6%,  1.4min remaining)    Downloaded 29065216 of 134263085 bytes (21.6%,  1.4min remaining)    Downloaded 30851072 of 134263085 bytes (23.0%,  1.3min remaining)    Downloaded 33161216 of 134263085 bytes (24.7%,  1.2min remaining)    Downloaded 35463168 of 134263085 bytes (26.4%,  1.2min remaining)    Downloaded 37806080 of 134263085 bytes (28.2%,  1.1min remaining)    Downloaded 40386560 of 134263085 bytes (30.1%,  1.1min remaining)    Downloaded 43114496 of 134263085 bytes (32.1%,  1.0min remaining)    Downloaded 45907968 of 134263085 bytes (34.2%,   56.8s remaining)    Downloaded 48349184 of 134263085 bytes (36.0%,   54.2s remaining)    Downloaded 50503680 of 134263085 bytes (37.6%,   52.2s remaining)    Downloaded 52264960 of 134263085 bytes (38.9%,   51.0s remaining)    Downloaded 54181888 of 134263085 bytes (40.4%,   49.6s remaining)    Downloaded 56180736 of 134263085 bytes (41.8%,   48.0s remaining)    Downloaded 58187776 of 134263085 bytes (43.3%,   46.5s remaining)    Downloaded 60203008 of 134263085 bytes (44.8%,   45.0s remaining)    Downloaded 62226432 of 134263085 bytes (46.3%,   43.5s remaining)    Downloaded 64102400 of 134263085 bytes (47.7%,   42.2s remaining)    Downloaded 65716224 of 134263085 bytes (48.9%,   41.3s remaining)    Downloaded 67575808 of 134263085 bytes (50.3%,   40.1s remaining)    Downloaded 69550080 of 134263085 bytes (51.8%,   38.7s remaining)    Downloaded 71598080 of 134263085 bytes (53.3%,   37.3s remaining)    Downloaded 73670656 of 134263085 bytes (54.9%,   35.9s remaining)    Downloaded 75735040 of 134263085 bytes (56.4%,   34.5s remaining)    Downloaded 77799424 of 134263085 bytes (57.9%,   33.2s remaining)    Downloaded 79912960 of 134263085 bytes (59.5%,   31.8s remaining)    Downloaded 82116608 of 134263085 bytes (61.2%,   30.3s remaining)    Downloaded 84099072 of 134263085 bytes (62.6%,   29.1s remaining)    Downloaded 85794816 of 134263085 bytes (63.9%,   28.1s remaining)    Downloaded 87302144 of 134263085 bytes (65.0%,   27.3s remaining)    Downloaded 88915968 of 134263085 bytes (66.2%,   26.4s remaining)    Downloaded 90570752 of 134263085 bytes (67.5%,   25.5s remaining)    Downloaded 92233728 of 134263085 bytes (68.7%,   24.5s remaining)    Downloaded 93888512 of 134263085 bytes (69.9%,   23.6s remaining)    Downloaded 95567872 of 134263085 bytes (71.2%,   22.6s remaining)    Downloaded 97304576 of 134263085 bytes (72.5%,   21.6s remaining)    Downloaded 99164160 of 134263085 bytes (73.9%,   20.5s remaining)    Downloaded 100777984 of 134263085 bytes (75.1%,   19.6s remaining)    Downloaded 102440960 of 134263085 bytes (76.3%,   18.6s remaining)    Downloaded 104292352 of 134263085 bytes (77.7%,   17.5s remaining)    Downloaded 106233856 of 134263085 bytes (79.1%,   16.3s remaining)    Downloaded 108232704 of 134263085 bytes (80.6%,   15.1s remaining)    Downloaded 110231552 of 134263085 bytes (82.1%,   13.9s remaining)    Downloaded 112230400 of 134263085 bytes (83.6%,   12.8s remaining)    Downloaded 114245632 of 134263085 bytes (85.1%,   11.6s remaining)    Downloaded 116334592 of 134263085 bytes (86.6%,   10.3s remaining)    Downloaded 118530048 of 134263085 bytes (88.3%,    9.0s remaining)    Downloaded 120938496 of 134263085 bytes (90.1%,    7.6s remaining)    Downloaded 123674624 of 134263085 bytes (92.1%,    6.0s remaining)    Downloaded 126869504 of 134263085 bytes (94.5%,    4.1s remaining)    Downloaded 129261568 of 134263085 bytes (96.3%,    2.8s remaining)    Downloaded 131235840 of 134263085 bytes (97.7%,    1.7s remaining)    Downloaded 133324800 of 134263085 bytes (99.3%,    0.5s remaining) ...done. (77 seconds, 1 min)
    Extracting data from /home/runner/work/nilearn/nilearn/nilearn_data/spm_multimodal_fmri/sub001/multimodal_fmri.zip..... done.
    Downloading data from http://www.fil.ion.ucl.ac.uk/spm/download/data/mmfaces/multimodal_smri.zip ...
    Downloaded 974848 of 6852766 bytes (14.2%,    6.1s remaining)    Downloaded 3678208 of 6852766 bytes (53.7%,    1.8s remaining)    Downloaded 6078464 of 6852766 bytes (88.7%,    0.4s remaining) ...done. (4 seconds, 0 min)
    Extracting data from /home/runner/work/nilearn/nilearn/nilearn_data/spm_multimodal_fmri/sub001/multimodal_smri.zip..... done.




.. GENERATED FROM PYTHON SOURCE LINES 34-35

Specfiy timing and design matrix parameters.

.. GENERATED FROM PYTHON SOURCE LINES 35-47

.. code-block:: default


    # repetition time, in seconds
    tr = 2.0
    # Sample at the beginning of each acquisition.
    slice_time_ref = 0.0
    # We use a discrete cosine transform to model signal drifts.
    drift_model = "Cosine"
    # The cutoff for the drift model is 0.01 Hz.
    high_pass = 0.01
    # The hemodynamic response function
    hrf_model = "spm + derivative"








.. GENERATED FROM PYTHON SOURCE LINES 48-51

Resample the images.

This is achieved by the concat_imgs function of Nilearn.

.. GENERATED FROM PYTHON SOURCE LINES 51-66

.. code-block:: default

    import warnings

    from nilearn.image import concat_imgs, mean_img, resample_img

    # Avoid getting too many warnings due to resampling
    with warnings.catch_warnings():
        warnings.simplefilter("ignore")
        fmri_img = [
            concat_imgs(subject_data.func1, auto_resample=True),
            concat_imgs(subject_data.func2, auto_resample=True),
        ]
    affine, shape = fmri_img[0].affine, fmri_img[0].shape
    print("Resampling the second image (this takes time)...")
    fmri_img[1] = resample_img(fmri_img[1], affine, shape[:3])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Resampling the second image (this takes time)...




.. GENERATED FROM PYTHON SOURCE LINES 67-68

Let's create mean image for display purposes.

.. GENERATED FROM PYTHON SOURCE LINES 68-70

.. code-block:: default

    mean_image = mean_img(fmri_img)








.. GENERATED FROM PYTHON SOURCE LINES 71-72

Make the design matrices.

.. GENERATED FROM PYTHON SOURCE LINES 72-78

.. code-block:: default

    import numpy as np
    import pandas as pd
    from nilearn.glm.first_level import make_first_level_design_matrix

    design_matrices = []








.. GENERATED FROM PYTHON SOURCE LINES 79-80

Loop over the two sessions.

.. GENERATED FROM PYTHON SOURCE LINES 80-98

.. code-block:: default

    for idx, img in enumerate(fmri_img, start=1):
        # Build experimental paradigm
        n_scans = img.shape[-1]
        events = pd.read_table(subject_data[f"events{idx}"])
        # Define the sampling times for the design matrix
        frame_times = np.arange(n_scans) * tr
        # Build design matrix with the reviously defined parameters
        design_matrix = make_first_level_design_matrix(
            frame_times,
            events,
            hrf_model=hrf_model,
            drift_model=drift_model,
            high_pass=high_pass,
        )

        # put the design matrices in a list
        design_matrices.append(design_matrix)








.. GENERATED FROM PYTHON SOURCE LINES 99-102

We can specify basic contrasts (to get :term:`beta<Parameter Estimate>`
maps).
We start by specifying canonical contrast that isolate design matrix columns.

.. GENERATED FROM PYTHON SOURCE LINES 102-108

.. code-block:: default

    contrast_matrix = np.eye(design_matrix.shape[1])
    basic_contrasts = {
        column: contrast_matrix[i]
        for i, column in enumerate(design_matrix.columns)
    }








.. GENERATED FROM PYTHON SOURCE LINES 109-114

We actually want more interesting contrasts. The simplest contrast
just makes the difference between the two main conditions.  We
define the two opposite versions to run one-tailed t-tests.  We also
define the effects of interest contrast, a 2-dimensional contrasts
spanning the two conditions.

.. GENERATED FROM PYTHON SOURCE LINES 114-124

.. code-block:: default


    contrasts = {
        "faces-scrambled": basic_contrasts["faces"] - basic_contrasts["scrambled"],
        "scrambled-faces": -basic_contrasts["faces"]
        + basic_contrasts["scrambled"],
        "effects_of_interest": np.vstack(
            (basic_contrasts["faces"], basic_contrasts["scrambled"])
        ),
    }








.. GENERATED FROM PYTHON SOURCE LINES 125-127

Fit the GLM for the 2 sessions by specifying a FirstLevelModel and then
fitting it.

.. GENERATED FROM PYTHON SOURCE LINES 127-133

.. code-block:: default

    from nilearn.glm.first_level import FirstLevelModel

    print("Fitting a GLM")
    fmri_glm = FirstLevelModel()
    fmri_glm = fmri_glm.fit(fmri_img, design_matrices=design_matrices)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Fitting a GLM




.. GENERATED FROM PYTHON SOURCE LINES 134-136

Now we can compute contrast-related statistical maps (in z-scale), and plot
them.

.. GENERATED FROM PYTHON SOURCE LINES 136-159

.. code-block:: default

    from nilearn import plotting

    print("Computing contrasts")

    # Iterate on contrasts
    for contrast_id, contrast_val in contrasts.items():
        print(f"\tcontrast id: {contrast_id}")
        # compute the contrasts
        z_map = fmri_glm.compute_contrast(contrast_val, output_type="z_score")
        # plot the contrasts as soon as they're generated
        # the display is overlaid on the mean fMRI image
        # a threshold of 3.0 is used, more sophisticated choices are possible
        plotting.plot_stat_map(
            z_map,
            bg_img=mean_image,
            threshold=3.0,
            display_mode="z",
            cut_coords=3,
            black_bg=True,
            title=contrast_id,
        )
        plotting.show()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_001.png
         :alt: plot spm multimodal faces
         :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_002.png
         :alt: plot spm multimodal faces
         :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_003.png
         :alt: plot spm multimodal faces
         :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computing contrasts
            contrast id: faces-scrambled
    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/nilearn/glm/first_level/first_level.py:688: UserWarning:

    One contrast given, assuming it for all 2 runs

            contrast id: scrambled-faces
    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/nilearn/glm/first_level/first_level.py:688: UserWarning:

    One contrast given, assuming it for all 2 runs

            contrast id: effects_of_interest
    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/nilearn/glm/first_level/first_level.py:688: UserWarning:

    One contrast given, assuming it for all 2 runs

    /usr/share/miniconda3/envs/testenv/lib/python3.9/site-packages/nilearn/glm/contrasts.py:346: UserWarning:

    Running approximate fixed effects on F statistics.





.. GENERATED FROM PYTHON SOURCE LINES 160-166

Based on the resulting maps we observe that the analysis results in
wide activity for the 'effects of interest' contrast, showing the
implications of large portions of the visual cortex in the
conditions. By contrast, the differential effect between "faces" and
"scrambled" involves sparser, more anterior and lateral regions. It
also displays some responses in the frontal lobe.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  5.001 seconds)

**Estimated memory usage:**  979 MB


.. _sphx_glr_download_auto_examples_04_glm_first_level_plot_spm_multimodal_faces.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/04_glm_first_level/plot_spm_multimodal_faces.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_spm_multimodal_faces.py <plot_spm_multimodal_faces.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_spm_multimodal_faces.ipynb <plot_spm_multimodal_faces.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
