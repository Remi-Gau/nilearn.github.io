
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/04_glm_first_level/plot_spm_multimodal_faces.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_04_glm_first_level_plot_spm_multimodal_faces.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_04_glm_first_level_plot_spm_multimodal_faces.py:


Single-subject data (two runs) in native space
==============================================

The example shows the analysis of an :term:`SPM` dataset
studying face perception.
The analysis is performed in native space.
Realignment parameters are provided with the input images,
but those have not been resampled to a common space.

The experimental paradigm is simple, with two conditions; viewing a face image
or a scrambled face image, supposedly with the same low-level statistical
properties, to find face-specific responses.

For details on the data, please see :footcite:t:`Henson2003`.

This example takes a lot of time because the input are lists of 3D images
sampled in different positions (encoded by different affine functions).

.. GENERATED FROM PYTHON SOURCE LINES 22-23

Fetch the :term:`SPM` multimodal_faces data.

.. GENERATED FROM PYTHON SOURCE LINES 23-27

.. code-block:: Python

    from nilearn.datasets import fetch_spm_multimodal_fmri

    subject_data = fetch_spm_multimodal_fmri()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Dataset created in /home/runner/work/nilearn/nilearn/nilearn_data/spm_multimodal_fmri

    Missing 390 functional scans for session 1.
    Data absent, downloading...
    Downloading data from https://www.fil.ion.ucl.ac.uk/spm/download/data/mmfaces/multimodal_fmri.zip ...
    Downloaded 1646592 of 134263085 bytes (1.2%,  1.5min remaining)    Downloaded 7430144 of 134263085 bytes (5.5%,   36.0s remaining)    Downloaded 11706368 of 134263085 bytes (8.7%,   32.7s remaining)    Downloaded 16056320 of 134263085 bytes (12.0%,   30.5s remaining)    Downloaded 19464192 of 134263085 bytes (14.5%,   30.4s remaining)    Downloaded 23117824 of 134263085 bytes (17.2%,   29.7s remaining)    Downloaded 26918912 of 134263085 bytes (20.0%,   28.7s remaining)    Downloaded 30785536 of 134263085 bytes (22.9%,   27.6s remaining)    Downloaded 34701312 of 134263085 bytes (25.8%,   26.5s remaining)    Downloaded 38608896 of 134263085 bytes (28.8%,   25.4s remaining)    Downloaded 42524672 of 134263085 bytes (31.7%,   24.3s remaining)    Downloaded 46456832 of 134263085 bytes (34.6%,   23.2s remaining)    Downloaded 50454528 of 134263085 bytes (37.6%,   22.1s remaining)    Downloaded 53829632 of 134263085 bytes (40.1%,   21.4s remaining)    Downloaded 57139200 of 134263085 bytes (42.6%,   20.7s remaining)    Downloaded 60768256 of 134263085 bytes (45.3%,   19.8s remaining)    Downloaded 64610304 of 134263085 bytes (48.1%,   18.7s remaining)    Downloaded 68083712 of 134263085 bytes (50.7%,   17.9s remaining)    Downloaded 71081984 of 134263085 bytes (52.9%,   17.2s remaining)    Downloaded 74285056 of 134263085 bytes (55.3%,   16.5s remaining)    Downloaded 77594624 of 134263085 bytes (57.8%,   15.7s remaining)    Downloaded 80961536 of 134263085 bytes (60.3%,   14.8s remaining)    Downloaded 84336640 of 134263085 bytes (62.8%,   13.9s remaining)    Downloaded 87408640 of 134263085 bytes (65.1%,   13.1s remaining)    Downloaded 90087424 of 134263085 bytes (67.1%,   12.5s remaining)    Downloaded 93069312 of 134263085 bytes (69.3%,   11.7s remaining)    Downloaded 96247808 of 134263085 bytes (71.7%,   10.9s remaining)    Downloaded 99549184 of 134263085 bytes (74.1%,   10.0s remaining)    Downloaded 102907904 of 134263085 bytes (76.6%,    9.0s remaining)    Downloaded 106283008 of 134263085 bytes (79.2%,    8.1s remaining)    Downloaded 109666304 of 134263085 bytes (81.7%,    7.1s remaining)    Downloaded 113049600 of 134263085 bytes (84.2%,    6.1s remaining)    Downloaded 116465664 of 134263085 bytes (86.7%,    5.1s remaining)    Downloaded 119955456 of 134263085 bytes (89.3%,    4.1s remaining)    Downloaded 123576320 of 134263085 bytes (92.0%,    3.1s remaining)    Downloaded 127426560 of 134263085 bytes (94.9%,    2.0s remaining)    Downloaded 131604480 of 134263085 bytes (98.0%,    0.8s remaining) ...done. (40 seconds, 0 min)
    Extracting data from /home/runner/work/nilearn/nilearn/nilearn_data/spm_multimodal_fmri/sub001/multimodal_fmri.zip..... done.
    Downloading data from https://www.fil.ion.ucl.ac.uk/spm/download/data/mmfaces/multimodal_smri.zip ...
    Downloaded 1376256 of 6852766 bytes (20.1%,    4.1s remaining)    Downloaded 6201344 of 6852766 bytes (90.5%,    0.2s remaining) ...done. (3 seconds, 0 min)
    Extracting data from /home/runner/work/nilearn/nilearn/nilearn_data/spm_multimodal_fmri/sub001/multimodal_smri.zip..... done.




.. GENERATED FROM PYTHON SOURCE LINES 28-29

Specify timing and design matrix parameters.

.. GENERATED FROM PYTHON SOURCE LINES 29-41

.. code-block:: Python


    # repetition time, in seconds
    tr = 2.0
    # Sample at the beginning of each acquisition.
    slice_time_ref = 0.0
    # We use a discrete cosine transform to model signal drifts.
    drift_model = "Cosine"
    # The cutoff for the drift model is 0.01 Hz.
    high_pass = 0.01
    # The hemodynamic response function
    hrf_model = "spm + derivative"








.. GENERATED FROM PYTHON SOURCE LINES 42-45

Resample the images.

This is achieved by the concat_imgs function of Nilearn.

.. GENERATED FROM PYTHON SOURCE LINES 45-60

.. code-block:: Python

    import warnings

    from nilearn.image import concat_imgs, mean_img, resample_img

    # Avoid getting too many warnings due to resampling
    with warnings.catch_warnings():
        warnings.simplefilter("ignore")
        fmri_img = [
            concat_imgs(subject_data.func1, auto_resample=True),
            concat_imgs(subject_data.func2, auto_resample=True),
        ]
    affine, shape = fmri_img[0].affine, fmri_img[0].shape
    print("Resampling the second image (this takes time)...")
    fmri_img[1] = resample_img(fmri_img[1], affine, shape[:3])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Resampling the second image (this takes time)...




.. GENERATED FROM PYTHON SOURCE LINES 61-62

Let's create mean image for display purposes.

.. GENERATED FROM PYTHON SOURCE LINES 62-64

.. code-block:: Python

    mean_image = mean_img(fmri_img)








.. GENERATED FROM PYTHON SOURCE LINES 65-66

Make the design matrices.

.. GENERATED FROM PYTHON SOURCE LINES 66-73

.. code-block:: Python

    import numpy as np
    import pandas as pd

    from nilearn.glm.first_level import make_first_level_design_matrix

    design_matrices = []








.. GENERATED FROM PYTHON SOURCE LINES 74-75

Loop over the two runs.

.. GENERATED FROM PYTHON SOURCE LINES 75-93

.. code-block:: Python

    for idx, img in enumerate(fmri_img, start=1):
        # Build experimental paradigm
        n_scans = img.shape[-1]
        events = pd.read_table(subject_data[f"events{idx}"])
        # Define the sampling times for the design matrix
        frame_times = np.arange(n_scans) * tr
        # Build design matrix with the reviously defined parameters
        design_matrix = make_first_level_design_matrix(
            frame_times,
            events,
            hrf_model=hrf_model,
            drift_model=drift_model,
            high_pass=high_pass,
        )

        # put the design matrices in a list
        design_matrices.append(design_matrix)








.. GENERATED FROM PYTHON SOURCE LINES 94-98

We can specify basic contrasts (to get :term:`beta<Parameter Estimate>`
maps).
We start by specifying canonical :term:`contrast`
that isolate design matrix columns.

.. GENERATED FROM PYTHON SOURCE LINES 98-104

.. code-block:: Python

    contrast_matrix = np.eye(design_matrix.shape[1])
    basic_contrasts = {
        column: contrast_matrix[i]
        for i, column in enumerate(design_matrix.columns)
    }








.. GENERATED FROM PYTHON SOURCE LINES 105-110

We actually want more interesting contrasts. The simplest contrast
just makes the difference between the two main conditions.  We
define the two opposite versions to run one-tailed t-tests.  We also
define the effects of interest contrast, a 2-dimensional contrasts
spanning the two conditions.

.. GENERATED FROM PYTHON SOURCE LINES 110-120

.. code-block:: Python


    contrasts = {
        "faces-scrambled": basic_contrasts["faces"] - basic_contrasts["scrambled"],
        "scrambled-faces": -basic_contrasts["faces"]
        + basic_contrasts["scrambled"],
        "effects_of_interest": np.vstack(
            (basic_contrasts["faces"], basic_contrasts["scrambled"])
        ),
    }








.. GENERATED FROM PYTHON SOURCE LINES 121-123

Fit the :term:`GLM` for the 2 runs
by specifying a FirstLevelModel and then fitting it.

.. GENERATED FROM PYTHON SOURCE LINES 123-129

.. code-block:: Python

    from nilearn.glm.first_level import FirstLevelModel

    print("Fitting a GLM")
    fmri_glm = FirstLevelModel()
    fmri_glm = fmri_glm.fit(fmri_img, design_matrices=design_matrices)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Fitting a GLM




.. GENERATED FROM PYTHON SOURCE LINES 130-132

Now we can compute contrast-related statistical maps (in z-scale), and plot
them.

.. GENERATED FROM PYTHON SOURCE LINES 132-155

.. code-block:: Python

    from nilearn import plotting

    print("Computing contrasts")

    # Iterate on contrasts
    for contrast_id, contrast_val in contrasts.items():
        print(f"\tcontrast id: {contrast_id}")
        # compute the contrasts
        z_map = fmri_glm.compute_contrast(contrast_val, output_type="z_score")
        # plot the contrasts as soon as they're generated
        # the display is overlaid on the mean fMRI image
        # a threshold of 3.0 is used, more sophisticated choices are possible
        plotting.plot_stat_map(
            z_map,
            bg_img=mean_image,
            threshold=3.0,
            display_mode="z",
            cut_coords=3,
            black_bg=True,
            title=contrast_id,
        )
        plotting.show()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_001.png
         :alt: plot spm multimodal faces
         :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_002.png
         :alt: plot spm multimodal faces
         :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_003.png
         :alt: plot spm multimodal faces
         :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computing contrasts
            contrast id: faces-scrambled
    /home/runner/work/nilearn/nilearn/examples/04_glm_first_level/plot_spm_multimodal_faces.py:140: UserWarning:

    One contrast given, assuming it for all 2 runs

            contrast id: scrambled-faces
    /home/runner/work/nilearn/nilearn/examples/04_glm_first_level/plot_spm_multimodal_faces.py:140: UserWarning:

    One contrast given, assuming it for all 2 runs

            contrast id: effects_of_interest
    /home/runner/work/nilearn/nilearn/examples/04_glm_first_level/plot_spm_multimodal_faces.py:140: UserWarning:

    One contrast given, assuming it for all 2 runs

    /opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/nilearn/glm/contrasts.py:159: UserWarning:

    Running approximate fixed effects on F statistics.





.. GENERATED FROM PYTHON SOURCE LINES 156-162

Based on the resulting maps we observe that the analysis results in
wide activity for the 'effects of interest' contrast, showing the
implications of large portions of the visual cortex in the
conditions. By contrast, the differential effect between "faces" and
"scrambled" involves sparser, more anterior and lateral regions. It
also displays some responses in the frontal lobe.

.. GENERATED FROM PYTHON SOURCE LINES 164-168

References
----------

 .. footbibliography::


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (2 minutes 25.930 seconds)

**Estimated memory usage:**  939 MB


.. _sphx_glr_download_auto_examples_04_glm_first_level_plot_spm_multimodal_faces.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/04_glm_first_level/plot_spm_multimodal_faces.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_spm_multimodal_faces.ipynb <plot_spm_multimodal_faces.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_spm_multimodal_faces.py <plot_spm_multimodal_faces.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
