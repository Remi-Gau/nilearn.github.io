
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/04_glm_first_level/plot_fixed_effects.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_04_glm_first_level_plot_fixed_effects.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_04_glm_first_level_plot_fixed_effects.py:

Example of explicit fixed effects fMRI model fitting
====================================================

This example illustrates how to run a fixed effects model based on
pre-computed statistics. This is helpful when the initial models
have to be fit separately.

For details on the data, please see:

    Dehaene-Lambertz G, Dehaene S, Anton JL, Campagne A, Ciuciu P, Dehaene
        G, Denghien I, Jobert A, LeBihan D, Sigman M, Pallier C, Poline
        JB. Functional segregation of cortical language areas by sentence
        repetition. Hum Brain Mapp. 2006: 27:360--371.
        http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=2653076#R11

Please see
:ref:`sphx_glr_auto_examples_04_glm_first_level_plot_fiac_analysis.py`
for details.  The main difference is that
the fixed-effects model is run explicitly here,
after GLM fitting on two sessions.

.. GENERATED FROM PYTHON SOURCE LINES 24-28

Prepare data and analysis parameters
--------------------------------------

Inspecting 'data', we note that there are two sessions

.. GENERATED FROM PYTHON SOURCE LINES 28-33

.. code-block:: default


    from nilearn.datasets import func
    data = func.fetch_fiac_first_level()
    fmri_img = [data['func1'], data['func2']]





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Dataset created in /home/circleci/nilearn_data/fiac_nilearn.glm

    Missing functional scan for session 1.
    Data absent, downloading...
    Downloading data from http://nipy.sourceforge.net/data-packages/nipy-data-0.2.tar.gz ...
    Downloaded 2056192 of 81515168 bytes (2.5%,  1.3min remaining)    Downloaded 3104768 of 81515168 bytes (3.8%,  1.7min remaining)    Downloaded 4128768 of 81515168 bytes (5.1%,  1.9min remaining)    Downloaded 5177344 of 81515168 bytes (6.4%,  2.0min remaining)    Downloaded 6209536 of 81515168 bytes (7.6%,  2.0min remaining)    Downloaded 7266304 of 81515168 bytes (8.9%,  2.0min remaining)    Downloaded 8323072 of 81515168 bytes (10.2%,  2.1min remaining)    Downloaded 9371648 of 81515168 bytes (11.5%,  2.1min remaining)    Downloaded 10387456 of 81515168 bytes (12.7%,  2.1min remaining)    Downloaded 11468800 of 81515168 bytes (14.1%,  2.0min remaining)    Downloaded 12517376 of 81515168 bytes (15.4%,  2.0min remaining)    Downloaded 13565952 of 81515168 bytes (16.6%,  2.0min remaining)    Downloaded 14614528 of 81515168 bytes (17.9%,  2.0min remaining)    Downloaded 15368192 of 81515168 bytes (18.9%,  2.0min remaining)    Downloaded 16678912 of 81515168 bytes (20.5%,  1.9min remaining)    Downloaded 17670144 of 81515168 bytes (21.7%,  1.9min remaining)    Downloaded 18776064 of 81515168 bytes (23.0%,  1.9min remaining)    Downloaded 19791872 of 81515168 bytes (24.3%,  1.9min remaining)    Downloaded 20807680 of 81515168 bytes (25.5%,  1.8min remaining)    Downloaded 21561344 of 81515168 bytes (26.5%,  1.9min remaining)    Downloaded 22970368 of 81515168 bytes (28.2%,  1.8min remaining)    Downloaded 23953408 of 81515168 bytes (29.4%,  1.8min remaining)    Downloaded 25067520 of 81515168 bytes (30.8%,  1.7min remaining)    Downloaded 26017792 of 81515168 bytes (31.9%,  1.7min remaining)    Downloaded 27164672 of 81515168 bytes (33.3%,  1.7min remaining)    Downloaded 28188672 of 81515168 bytes (34.6%,  1.6min remaining)    Downloaded 29130752 of 81515168 bytes (35.7%,  1.6min remaining)    Downloaded 30310400 of 81515168 bytes (37.2%,  1.6min remaining)    Downloaded 31318016 of 81515168 bytes (38.4%,  1.6min remaining)    Downloaded 32407552 of 81515168 bytes (39.8%,  1.5min remaining)    Downloaded 33325056 of 81515168 bytes (40.9%,  1.5min remaining)    Downloaded 34381824 of 81515168 bytes (42.2%,  1.5min remaining)    Downloaded 35553280 of 81515168 bytes (43.6%,  1.4min remaining)    Downloaded 36601856 of 81515168 bytes (44.9%,  1.4min remaining)    Downloaded 37519360 of 81515168 bytes (46.0%,  1.4min remaining)    Downloaded 38600704 of 81515168 bytes (47.4%,  1.3min remaining)    Downloaded 39714816 of 81515168 bytes (48.7%,  1.3min remaining)    Downloaded 40632320 of 81515168 bytes (49.8%,  1.3min remaining)    Downloaded 41811968 of 81515168 bytes (51.3%,  1.2min remaining)    Downloaded 42827776 of 81515168 bytes (52.5%,  1.2min remaining)    Downloaded 43876352 of 81515168 bytes (53.8%,  1.2min remaining)    Downloaded 44826624 of 81515168 bytes (55.0%,  1.1min remaining)    Downloaded 46039040 of 81515168 bytes (56.5%,  1.1min remaining)    Downloaded 47030272 of 81515168 bytes (57.7%,  1.1min remaining)    Downloaded 48103424 of 81515168 bytes (59.0%,  1.0min remaining)    Downloaded 49184768 of 81515168 bytes (60.3%,  1.0min remaining)    Downloaded 50069504 of 81515168 bytes (61.4%,   59.1s remaining)    Downloaded 51249152 of 81515168 bytes (62.9%,   56.7s remaining)    Downloaded 52232192 of 81515168 bytes (64.1%,   55.0s remaining)    Downloaded 53379072 of 81515168 bytes (65.5%,   52.7s remaining)    Downloaded 54427648 of 81515168 bytes (66.8%,   50.8s remaining)    Downloaded 55476224 of 81515168 bytes (68.1%,   48.8s remaining)    Downloaded 56524800 of 81515168 bytes (69.3%,   46.9s remaining)    Downloaded 57540608 of 81515168 bytes (70.6%,   45.0s remaining)    Downloaded 58556416 of 81515168 bytes (71.8%,   43.1s remaining)    Downloaded 59670528 of 81515168 bytes (73.2%,   41.0s remaining)    Downloaded 60719104 of 81515168 bytes (74.5%,   39.1s remaining)    Downloaded 61767680 of 81515168 bytes (75.8%,   37.1s remaining)    Downloaded 62816256 of 81515168 bytes (77.1%,   35.1s remaining)    Downloaded 63807488 of 81515168 bytes (78.3%,   33.3s remaining)    Downloaded 64913408 of 81515168 bytes (79.6%,   31.2s remaining)    Downloaded 65888256 of 81515168 bytes (80.8%,   29.4s remaining)    Downloaded 66985984 of 81515168 bytes (82.2%,   27.3s remaining)    Downloaded 68059136 of 81515168 bytes (83.5%,   25.3s remaining)    Downloaded 69042176 of 81515168 bytes (84.7%,   23.5s remaining)    Downloaded 70041600 of 81515168 bytes (85.9%,   21.6s remaining)    Downloaded 71204864 of 81515168 bytes (87.4%,   19.4s remaining)    Downloaded 72220672 of 81515168 bytes (88.6%,   17.5s remaining)    Downloaded 73269248 of 81515168 bytes (89.9%,   15.5s remaining)    Downloaded 74285056 of 81515168 bytes (91.1%,   13.6s remaining)    Downloaded 75366400 of 81515168 bytes (92.5%,   11.6s remaining)    Downloaded 76382208 of 81515168 bytes (93.7%,    9.7s remaining)    Downloaded 77496320 of 81515168 bytes (95.1%,    7.6s remaining)    Downloaded 78544896 of 81515168 bytes (96.4%,    5.6s remaining)    Downloaded 79593472 of 81515168 bytes (97.6%,    3.6s remaining)    Downloaded 80576512 of 81515168 bytes (98.8%,    1.8s remaining) ...done. (153 seconds, 2 min)
    Extracting data from /home/circleci/nilearn_data/fiac_nilearn.glm/nipy-data-0.2.tar.gz..... done.




.. GENERATED FROM PYTHON SOURCE LINES 34-35

Create a mean image for plotting purpose

.. GENERATED FROM PYTHON SOURCE LINES 35-38

.. code-block:: default

    from nilearn.image import mean_img
    mean_img_ = mean_img(fmri_img[0])








.. GENERATED FROM PYTHON SOURCE LINES 39-41

The design matrices were pre-computed, we simply put them in a list of
DataFrames

.. GENERATED FROM PYTHON SOURCE LINES 41-46

.. code-block:: default

    design_files = [data['design_matrix1'], data['design_matrix2']]
    import pandas as pd
    import numpy as np
    design_matrices = [pd.DataFrame(np.load(df)['X']) for df in design_files]








.. GENERATED FROM PYTHON SOURCE LINES 47-51

GLM estimation
----------------------------------
GLM specification. Note that the mask was provided in the dataset.
So we use it.

.. GENERATED FROM PYTHON SOURCE LINES 51-56

.. code-block:: default


    from nilearn.glm.first_level import FirstLevelModel
    fmri_glm = FirstLevelModel(mask_img=data['mask'], smoothing_fwhm=5,
                               minimize_memory=True)








.. GENERATED FROM PYTHON SOURCE LINES 57-59

Compute fixed effects of the two runs and compute related images
For this, we first define the contrasts as we would do for a single session

.. GENERATED FROM PYTHON SOURCE LINES 59-62

.. code-block:: default

    n_columns = design_matrices[0].shape[1]
    contrast_val = np.hstack(([-1, -1, 1, 1], np.zeros(n_columns - 4)))








.. GENERATED FROM PYTHON SOURCE LINES 63-64

Statistics for the first session

.. GENERATED FROM PYTHON SOURCE LINES 64-76

.. code-block:: default

    from nilearn import plotting
    cut_coords = [-129, -126, 49]
    contrast_id = 'DSt_minus_SSt'

    fmri_glm = fmri_glm.fit(fmri_img[0], design_matrices=design_matrices[0])
    summary_statistics_session1 = fmri_glm.compute_contrast(
        contrast_val, output_type='all')
    plotting.plot_stat_map(
        summary_statistics_session1['z_score'],
        bg_img=mean_img_, threshold=3.0, cut_coords=cut_coords,
        title='{0}, first session'.format(contrast_id))




.. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_fixed_effects_001.png
   :alt: plot fixed effects
   :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_fixed_effects_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <nilearn.plotting.displays._slicers.OrthoSlicer object at 0x7f81c4635490>



.. GENERATED FROM PYTHON SOURCE LINES 77-78

Statistics for the second session

.. GENERATED FROM PYTHON SOURCE LINES 78-87

.. code-block:: default


    fmri_glm = fmri_glm.fit(fmri_img[1], design_matrices=design_matrices[1])
    summary_statistics_session2 = fmri_glm.compute_contrast(
        contrast_val, output_type='all')
    plotting.plot_stat_map(
        summary_statistics_session2['z_score'],
        bg_img=mean_img_, threshold=3.0, cut_coords=cut_coords,
        title='{0}, second session'.format(contrast_id))




.. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_fixed_effects_002.png
   :alt: plot fixed effects
   :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_fixed_effects_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <nilearn.plotting.displays._slicers.OrthoSlicer object at 0x7f81bfa5d9d0>



.. GENERATED FROM PYTHON SOURCE LINES 88-89

Fixed effects statistics

.. GENERATED FROM PYTHON SOURCE LINES 89-102

.. code-block:: default

    from nilearn.glm.contrasts import compute_fixed_effects

    contrast_imgs = [summary_statistics_session1['effect_size'],
                     summary_statistics_session2['effect_size']]
    variance_imgs = [summary_statistics_session1['effect_variance'],
                     summary_statistics_session2['effect_variance']]

    fixed_fx_contrast, fixed_fx_variance, fixed_fx_stat = compute_fixed_effects(
        contrast_imgs, variance_imgs, data['mask'])
    plotting.plot_stat_map(
        fixed_fx_stat, bg_img=mean_img_, threshold=3.0, cut_coords=cut_coords,
        title='{0}, fixed effects'.format(contrast_id))




.. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_fixed_effects_003.png
   :alt: plot fixed effects
   :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_fixed_effects_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <nilearn.plotting.displays._slicers.OrthoSlicer object at 0x7f81c4b3e9d0>



.. GENERATED FROM PYTHON SOURCE LINES 103-108

Not unexpectedly, the fixed effects version displays higher peaks than the
input sessions. Computing fixed effects enhances the signal-to-noise ratio of
the resulting brain maps
Note however that, technically, the output maps of the fixed effects map is a
t statistic (not a z statistic)

.. GENERATED FROM PYTHON SOURCE LINES 108-110

.. code-block:: default


    plotting.show()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  48.634 seconds)

**Estimated memory usage:**  550 MB


.. _sphx_glr_download_auto_examples_04_glm_first_level_plot_fixed_effects.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/04_glm_first_level/plot_fixed_effects.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_fixed_effects.py <plot_fixed_effects.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_fixed_effects.ipynb <plot_fixed_effects.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
