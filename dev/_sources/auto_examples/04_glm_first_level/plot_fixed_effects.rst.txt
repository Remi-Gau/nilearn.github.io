
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/04_glm_first_level/plot_fixed_effects.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_04_glm_first_level_plot_fixed_effects.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_04_glm_first_level_plot_fixed_effects.py:

Example of explicit fixed effects fMRI model fitting
====================================================

This example illustrates how to run a fixed effects model based on
pre-computed statistics. This is helpful when the initial models
have to be fit separately.

For details on the data, please see:

Dehaene-Lambertz G, Dehaene S, Anton JL, Campagne A, Ciuciu P, Dehaene
G, Denghien I, Jobert A, LeBihan D, Sigman M, Pallier C, Poline
JB. Functional segregation of cortical language areas by sentence
repetition. Hum Brain Mapp. 2006: 27:360--371.
http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=2653076#R11

Please see `Simple example of two-session :term:`fMRI` model fitting
<https://nistats.github.io/auto_examples/02_first_levels/plot_fiac_analysis.html>`_
example for details.  The main difference is that
the fixed-effects model is run explicitly here,
after GLM fitting on two sessions.

.. GENERATED FROM PYTHON SOURCE LINES 25-29

Prepare data and analysis parameters
--------------------------------------

Inspecting 'data', we note that there are two sessions

.. GENERATED FROM PYTHON SOURCE LINES 29-34

.. code-block:: default


    from nilearn.datasets import func
    data = func.fetch_fiac_first_level()
    fmri_img = [data['func1'], data['func2']]





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Dataset created in /home/circleci/nilearn_data/fiac_nilearn.glm

    Missing functional scan for session 1.
    Data absent, downloading...
    Downloading data from http://nipy.sourceforge.net/data-packages/nipy-data-0.2.tar.gz ...
    Downloaded 2105344 of 81515168 bytes (2.6%,  1.4min remaining)    Downloaded 3137536 of 81515168 bytes (3.8%,  1.4min remaining)    Downloaded 3964928 of 81515168 bytes (4.9%,  1.4min remaining)    Downloaded 4202496 of 81515168 bytes (5.2%,  1.9min remaining)    Downloaded 5251072 of 81515168 bytes (6.4%,  2.0min remaining)    Downloaded 6299648 of 81515168 bytes (7.7%,  2.1min remaining)    Downloaded 7348224 of 81515168 bytes (9.0%,  2.1min remaining)    Downloaded 8396800 of 81515168 bytes (10.3%,  2.1min remaining)    Downloaded 9445376 of 81515168 bytes (11.6%,  2.1min remaining)    Downloaded 10493952 of 81515168 bytes (12.9%,  2.1min remaining)    Downloaded 11542528 of 81515168 bytes (14.2%,  2.1min remaining)    Downloaded 12591104 of 81515168 bytes (15.4%,  2.0min remaining)    Downloaded 13639680 of 81515168 bytes (16.7%,  2.0min remaining)    Downloaded 14688256 of 81515168 bytes (18.0%,  2.0min remaining)    Downloaded 15736832 of 81515168 bytes (19.3%,  2.0min remaining)    Downloaded 16785408 of 81515168 bytes (20.6%,  1.9min remaining)    Downloaded 17833984 of 81515168 bytes (21.9%,  1.9min remaining)    Downloaded 18882560 of 81515168 bytes (23.2%,  1.9min remaining)    Downloaded 19931136 of 81515168 bytes (24.5%,  1.9min remaining)    Downloaded 20979712 of 81515168 bytes (25.7%,  1.8min remaining)    Downloaded 22028288 of 81515168 bytes (27.0%,  1.8min remaining)    Downloaded 23076864 of 81515168 bytes (28.3%,  1.8min remaining)    Downloaded 24125440 of 81515168 bytes (29.6%,  1.8min remaining)    Downloaded 25174016 of 81515168 bytes (30.9%,  1.7min remaining)    Downloaded 26222592 of 81515168 bytes (32.2%,  1.7min remaining)    Downloaded 27271168 of 81515168 bytes (33.5%,  1.7min remaining)    Downloaded 28319744 of 81515168 bytes (34.7%,  1.6min remaining)    Downloaded 29368320 of 81515168 bytes (36.0%,  1.6min remaining)    Downloaded 30416896 of 81515168 bytes (37.3%,  1.6min remaining)    Downloaded 31465472 of 81515168 bytes (38.6%,  1.5min remaining)    Downloaded 32514048 of 81515168 bytes (39.9%,  1.5min remaining)    Downloaded 33562624 of 81515168 bytes (41.2%,  1.5min remaining)    Downloaded 34611200 of 81515168 bytes (42.5%,  1.5min remaining)    Downloaded 35659776 of 81515168 bytes (43.7%,  1.4min remaining)    Downloaded 36708352 of 81515168 bytes (45.0%,  1.4min remaining)    Downloaded 37756928 of 81515168 bytes (46.3%,  1.4min remaining)    Downloaded 38805504 of 81515168 bytes (47.6%,  1.3min remaining)    Downloaded 39854080 of 81515168 bytes (48.9%,  1.3min remaining)    Downloaded 40902656 of 81515168 bytes (50.2%,  1.3min remaining)    Downloaded 41951232 of 81515168 bytes (51.5%,  1.2min remaining)    Downloaded 42999808 of 81515168 bytes (52.8%,  1.2min remaining)    Downloaded 44048384 of 81515168 bytes (54.0%,  1.2min remaining)    Downloaded 45096960 of 81515168 bytes (55.3%,  1.1min remaining)    Downloaded 46145536 of 81515168 bytes (56.6%,  1.1min remaining)    Downloaded 47194112 of 81515168 bytes (57.9%,  1.1min remaining)    Downloaded 48242688 of 81515168 bytes (59.2%,  1.0min remaining)    Downloaded 49291264 of 81515168 bytes (60.5%,  1.0min remaining)    Downloaded 50339840 of 81515168 bytes (61.8%,   58.4s remaining)    Downloaded 51388416 of 81515168 bytes (63.0%,   56.5s remaining)    Downloaded 52436992 of 81515168 bytes (64.3%,   54.5s remaining)    Downloaded 53485568 of 81515168 bytes (65.6%,   52.6s remaining)    Downloaded 54534144 of 81515168 bytes (66.9%,   50.6s remaining)    Downloaded 55582720 of 81515168 bytes (68.2%,   48.7s remaining)    Downloaded 56631296 of 81515168 bytes (69.5%,   46.7s remaining)    Downloaded 57679872 of 81515168 bytes (70.8%,   44.8s remaining)    Downloaded 58728448 of 81515168 bytes (72.0%,   42.8s remaining)    Downloaded 59777024 of 81515168 bytes (73.3%,   40.8s remaining)    Downloaded 60825600 of 81515168 bytes (74.6%,   38.9s remaining)    Downloaded 61874176 of 81515168 bytes (75.9%,   36.9s remaining)    Downloaded 62922752 of 81515168 bytes (77.2%,   35.0s remaining)    Downloaded 63971328 of 81515168 bytes (78.5%,   33.0s remaining)    Downloaded 65019904 of 81515168 bytes (79.8%,   31.0s remaining)    Downloaded 66068480 of 81515168 bytes (81.1%,   29.1s remaining)    Downloaded 67117056 of 81515168 bytes (82.3%,   27.1s remaining)    Downloaded 68165632 of 81515168 bytes (83.6%,   25.1s remaining)    Downloaded 69214208 of 81515168 bytes (84.9%,   23.2s remaining)    Downloaded 70262784 of 81515168 bytes (86.2%,   21.2s remaining)    Downloaded 71311360 of 81515168 bytes (87.5%,   19.2s remaining)    Downloaded 72359936 of 81515168 bytes (88.8%,   17.2s remaining)    Downloaded 73408512 of 81515168 bytes (90.1%,   15.3s remaining)    Downloaded 74457088 of 81515168 bytes (91.3%,   13.3s remaining)    Downloaded 75505664 of 81515168 bytes (92.6%,   11.3s remaining)    Downloaded 76554240 of 81515168 bytes (93.9%,    9.4s remaining)    Downloaded 77602816 of 81515168 bytes (95.2%,    7.4s remaining)    Downloaded 78651392 of 81515168 bytes (96.5%,    5.4s remaining)    Downloaded 79699968 of 81515168 bytes (97.8%,    3.4s remaining)    Downloaded 80748544 of 81515168 bytes (99.1%,    1.4s remaining) ...done. (153 seconds, 2 min)
    Extracting data from /home/circleci/nilearn_data/fiac_nilearn.glm/nipy-data-0.2.tar.gz..... done.




.. GENERATED FROM PYTHON SOURCE LINES 35-36

Create a mean image for plotting purpose

.. GENERATED FROM PYTHON SOURCE LINES 36-39

.. code-block:: default

    from nilearn.image import mean_img
    mean_img_ = mean_img(fmri_img[0])








.. GENERATED FROM PYTHON SOURCE LINES 40-42

The design matrices were pre-computed, we simply put them in a list of
DataFrames

.. GENERATED FROM PYTHON SOURCE LINES 42-47

.. code-block:: default

    design_files = [data['design_matrix1'], data['design_matrix2']]
    import pandas as pd
    import numpy as np
    design_matrices = [pd.DataFrame(np.load(df)['X']) for df in design_files]








.. GENERATED FROM PYTHON SOURCE LINES 48-52

GLM estimation
----------------------------------
GLM specification. Note that the mask was provided in the dataset.
So we use it.

.. GENERATED FROM PYTHON SOURCE LINES 52-57

.. code-block:: default


    from nilearn.glm.first_level import FirstLevelModel
    fmri_glm = FirstLevelModel(mask_img=data['mask'], smoothing_fwhm=5,
                               minimize_memory=True)








.. GENERATED FROM PYTHON SOURCE LINES 58-60

Compute fixed effects of the two runs and compute related images
For this, we first define the contrasts as we would do for a single session

.. GENERATED FROM PYTHON SOURCE LINES 60-63

.. code-block:: default

    n_columns = design_matrices[0].shape[1]
    contrast_val = np.hstack(([-1, -1, 1, 1], np.zeros(n_columns - 4)))








.. GENERATED FROM PYTHON SOURCE LINES 64-65

Statistics for the first session

.. GENERATED FROM PYTHON SOURCE LINES 65-77

.. code-block:: default

    from nilearn import plotting
    cut_coords = [-129, -126, 49]
    contrast_id = 'DSt_minus_SSt'

    fmri_glm = fmri_glm.fit(fmri_img[0], design_matrices=design_matrices[0])
    summary_statistics_session1 = fmri_glm.compute_contrast(
        contrast_val, output_type='all')
    plotting.plot_stat_map(
        summary_statistics_session1['z_score'],
        bg_img=mean_img_, threshold=3.0, cut_coords=cut_coords,
        title='{0}, first session'.format(contrast_id))




.. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_fixed_effects_001.png
   :alt: plot fixed effects
   :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_fixed_effects_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <nilearn.plotting.displays.OrthoSlicer object at 0x7f18cb617e20>



.. GENERATED FROM PYTHON SOURCE LINES 78-79

Statistics for the second session

.. GENERATED FROM PYTHON SOURCE LINES 79-88

.. code-block:: default


    fmri_glm = fmri_glm.fit(fmri_img[1], design_matrices=design_matrices[1])
    summary_statistics_session2 = fmri_glm.compute_contrast(
        contrast_val, output_type='all')
    plotting.plot_stat_map(
        summary_statistics_session2['z_score'],
        bg_img=mean_img_, threshold=3.0, cut_coords=cut_coords,
        title='{0}, second session'.format(contrast_id))




.. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_fixed_effects_002.png
   :alt: plot fixed effects
   :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_fixed_effects_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <nilearn.plotting.displays.OrthoSlicer object at 0x7f18cb1348b0>



.. GENERATED FROM PYTHON SOURCE LINES 89-90

Fixed effects statistics

.. GENERATED FROM PYTHON SOURCE LINES 90-103

.. code-block:: default

    from nilearn.glm.contrasts import compute_fixed_effects

    contrast_imgs = [summary_statistics_session1['effect_size'],
                     summary_statistics_session2['effect_size']]
    variance_imgs = [summary_statistics_session1['effect_variance'],
                     summary_statistics_session2['effect_variance']]

    fixed_fx_contrast, fixed_fx_variance, fixed_fx_stat = compute_fixed_effects(
        contrast_imgs, variance_imgs, data['mask'])
    plotting.plot_stat_map(
        fixed_fx_stat, bg_img=mean_img_, threshold=3.0, cut_coords=cut_coords,
        title='{0}, fixed effects'.format(contrast_id))




.. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_fixed_effects_003.png
   :alt: plot fixed effects
   :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_fixed_effects_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <nilearn.plotting.displays.OrthoSlicer object at 0x7f18ca027a90>



.. GENERATED FROM PYTHON SOURCE LINES 104-109

Not unexpectedly, the fixed effects version displays higher peaks than the
input sessions. Computing fixed effects enhances the signal-to-noise ratio of
the resulting brain maps
Note however that, technically, the output maps of the fixed effects map is a
t statistic (not a z statistic)

.. GENERATED FROM PYTHON SOURCE LINES 109-111

.. code-block:: default


    plotting.show()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  53.667 seconds)


.. _sphx_glr_download_auto_examples_04_glm_first_level_plot_fixed_effects.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/nilearn/nilearn.github.io/main?filepath=examples/auto_examples/04_glm_first_level/plot_fixed_effects.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_fixed_effects.py <plot_fixed_effects.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_fixed_effects.ipynb <plot_fixed_effects.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
