Search.setIndex({"docnames": ["authors", "auto_examples/00_tutorials/index", "auto_examples/00_tutorials/plot_3d_and_4d_niimg", "auto_examples/00_tutorials/plot_decoding_tutorial", "auto_examples/00_tutorials/plot_nilearn_101", "auto_examples/00_tutorials/plot_python_101", "auto_examples/00_tutorials/plot_single_subject_single_run", "auto_examples/00_tutorials/sg_execution_times", "auto_examples/01_plotting/index", "auto_examples/01_plotting/plot_3d_map_to_surface_projection", "auto_examples/01_plotting/plot_atlas", "auto_examples/01_plotting/plot_carpet", "auto_examples/01_plotting/plot_colormaps", "auto_examples/01_plotting/plot_demo_glass_brain", "auto_examples/01_plotting/plot_demo_glass_brain_extensive", "auto_examples/01_plotting/plot_demo_more_plotting", "auto_examples/01_plotting/plot_demo_plotting", "auto_examples/01_plotting/plot_dim_plotting", "auto_examples/01_plotting/plot_haxby_masks", "auto_examples/01_plotting/plot_multiscale_parcellations", "auto_examples/01_plotting/plot_overlay", "auto_examples/01_plotting/plot_prob_atlas", "auto_examples/01_plotting/plot_surf_atlas", "auto_examples/01_plotting/plot_surf_stat_map", "auto_examples/01_plotting/plot_surface_projection_strategies", "auto_examples/01_plotting/plot_visualization", "auto_examples/01_plotting/plot_visualize_megatrawls_netmats", "auto_examples/01_plotting/sg_execution_times", "auto_examples/02_decoding/index", "auto_examples/02_decoding/plot_haxby_anova_svm", "auto_examples/02_decoding/plot_haxby_different_estimators", "auto_examples/02_decoding/plot_haxby_frem", "auto_examples/02_decoding/plot_haxby_full_analysis", "auto_examples/02_decoding/plot_haxby_glm_decoding", "auto_examples/02_decoding/plot_haxby_grid_search", "auto_examples/02_decoding/plot_haxby_multiclass", "auto_examples/02_decoding/plot_haxby_searchlight", "auto_examples/02_decoding/plot_haxby_searchlight_surface", "auto_examples/02_decoding/plot_haxby_stimuli", "auto_examples/02_decoding/plot_mixed_gambles_frem", "auto_examples/02_decoding/plot_miyawaki_encoding", "auto_examples/02_decoding/plot_miyawaki_reconstruction", "auto_examples/02_decoding/plot_oasis_vbm", "auto_examples/02_decoding/plot_oasis_vbm_space_net", "auto_examples/02_decoding/plot_simulated_data", "auto_examples/02_decoding/sg_execution_times", "auto_examples/03_connectivity/index", "auto_examples/03_connectivity/plot_atlas_comparison", "auto_examples/03_connectivity/plot_compare_decomposition", "auto_examples/03_connectivity/plot_data_driven_parcellations", "auto_examples/03_connectivity/plot_extract_regions_dictlearning_maps", "auto_examples/03_connectivity/plot_group_level_connectivity", "auto_examples/03_connectivity/plot_inverse_covariance_connectome", "auto_examples/03_connectivity/plot_multi_subject_connectome", "auto_examples/03_connectivity/plot_probabilistic_atlas_extraction", "auto_examples/03_connectivity/plot_seed_to_voxel_correlation", "auto_examples/03_connectivity/plot_signal_extraction", "auto_examples/03_connectivity/plot_simulated_connectome", "auto_examples/03_connectivity/plot_sphere_based_connectome", "auto_examples/03_connectivity/sg_execution_times", "auto_examples/04_glm_first_level/index", "auto_examples/04_glm_first_level/plot_adhd_dmn", "auto_examples/04_glm_first_level/plot_bids_features", "auto_examples/04_glm_first_level/plot_design_matrix", "auto_examples/04_glm_first_level/plot_fir_model", "auto_examples/04_glm_first_level/plot_first_level_details", "auto_examples/04_glm_first_level/plot_hrf", "auto_examples/04_glm_first_level/plot_localizer_surface_analysis", "auto_examples/04_glm_first_level/plot_predictions_residuals", "auto_examples/04_glm_first_level/plot_spm_multimodal_faces", "auto_examples/04_glm_first_level/plot_two_runs_model", "auto_examples/04_glm_first_level/plot_write_events_file", "auto_examples/04_glm_first_level/sg_execution_times", "auto_examples/05_glm_second_level/index", "auto_examples/05_glm_second_level/plot_oasis", "auto_examples/05_glm_second_level/plot_proportion_activated_voxels", "auto_examples/05_glm_second_level/plot_second_level_association_test", "auto_examples/05_glm_second_level/plot_second_level_design_matrix", "auto_examples/05_glm_second_level/plot_second_level_one_sample_test", "auto_examples/05_glm_second_level/plot_second_level_two_sample_test", "auto_examples/05_glm_second_level/plot_thresholding", "auto_examples/05_glm_second_level/sg_execution_times", "auto_examples/06_manipulating_images/index", "auto_examples/06_manipulating_images/plot_affine_transformation", "auto_examples/06_manipulating_images/plot_compare_mean_image", "auto_examples/06_manipulating_images/plot_extract_regions_labels_image", "auto_examples/06_manipulating_images/plot_extract_rois_smith_atlas", "auto_examples/06_manipulating_images/plot_extract_rois_statistical_maps", "auto_examples/06_manipulating_images/plot_mask_computation", "auto_examples/06_manipulating_images/plot_negate_image", "auto_examples/06_manipulating_images/plot_nifti_labels_simple", "auto_examples/06_manipulating_images/plot_nifti_simple", "auto_examples/06_manipulating_images/plot_resample_to_template", "auto_examples/06_manipulating_images/plot_roi_extraction", "auto_examples/06_manipulating_images/plot_smooth_mean_image", "auto_examples/06_manipulating_images/sg_execution_times", "auto_examples/07_advanced/index", "auto_examples/07_advanced/plot_advanced_decoding_scikit", "auto_examples/07_advanced/plot_age_group_prediction_cross_val", "auto_examples/07_advanced/plot_beta_series", "auto_examples/07_advanced/plot_bids_analysis", "auto_examples/07_advanced/plot_haxby_mass_univariate", "auto_examples/07_advanced/plot_ica_neurovault", "auto_examples/07_advanced/plot_ica_resting_state", "auto_examples/07_advanced/plot_localizer_mass_univariate_methods", "auto_examples/07_advanced/plot_localizer_simple_analysis", "auto_examples/07_advanced/plot_neurovault_meta_analysis", "auto_examples/07_advanced/plot_surface_bids_analysis", "auto_examples/07_advanced/sg_execution_times", "auto_examples/08_experimental/index", "auto_examples/08_experimental/plot_surface_image_and_maskers", "auto_examples/08_experimental/sg_execution_times", "auto_examples/index", "auto_examples/sg_execution_times", "bibliography", "building_blocks/index", "building_blocks/manual_pipeline", "building_blocks/neurovault", "changes/0.1.0", "changes/0.1.1", "changes/0.1.2", "changes/0.1.3", "changes/0.1.4", "changes/0.10.0", "changes/0.10.1", "changes/0.10.2", "changes/0.10.3", "changes/0.2.0", "changes/0.2.1", "changes/0.2.2", "changes/0.2.3", "changes/0.2.4", "changes/0.2.5", "changes/0.2.6", "changes/0.3.0", "changes/0.3.1", "changes/0.4.0", "changes/0.4.1", "changes/0.4.2", "changes/0.5.0", "changes/0.5.1", "changes/0.5.2", "changes/0.6.0", "changes/0.6.1", "changes/0.6.2", "changes/0.7.0", "changes/0.7.1", "changes/0.8.0", "changes/0.8.1", "changes/0.9.0", "changes/0.9.1", "changes/0.9.2", "changes/latest", "changes/names", "changes/whats_new", "connectivity/connectome_extraction", "connectivity/functional_connectomes", "connectivity/index", "connectivity/parcellating", "connectivity/region_extraction", "connectivity/resting_state_networks", "decoding/decoding_intro", "decoding/estimator_choice", "decoding/frem", "decoding/going_further", "decoding/index", "decoding/searchlight", "decoding/space_net", "developers/group_sparse_covariance", "development", "glm/first_level_model", "glm/glm_intro", "glm/index", "glm/second_level_model", "glossary", "index", "introduction", "maintenance", "manipulating_images/index", "manipulating_images/input_output", "manipulating_images/manipulating_images", "manipulating_images/masker_objects", "modules/connectome", "modules/datasets", "modules/decoding", "modules/decomposition", "modules/description/ABIDE_pcp", "modules/description/Megatrawls", "modules/description/aal_SPM12", "modules/description/adhd", "modules/description/allen_rsn_2011", "modules/description/basc_multiscale_2015", "modules/description/bids_langloc", "modules/description/brainomics_localizer", "modules/description/craddock_2012", "modules/description/destrieux_surface", "modules/description/development_fmri", "modules/description/difumo_atlases", "modules/description/dosenbach_2010", "modules/description/fiac", "modules/description/fsaverage", "modules/description/fsaverage3", "modules/description/fsaverage4", "modules/description/fsaverage5", "modules/description/fsaverage6", "modules/description/harvard_oxford", "modules/description/haxby2001", "modules/description/icbm152_2009", "modules/description/juelich", "modules/description/language_localizer_demo", "modules/description/localizer_first_level", "modules/description/mixed_gambles", "modules/description/miyawaki2008", "modules/description/msdl_atlas", "modules/description/neurovault", "modules/description/nki_enhanced_surface", "modules/description/oasis1", "modules/description/pauli_2017", "modules/description/power_2011", "modules/description/schaefer_2018", "modules/description/seitzman_2018", "modules/description/smith_2009", "modules/description/spm_auditory", "modules/description/spm_multimodal", "modules/description/talairach_atlas", "modules/description/yeo_2011", "modules/experimental", "modules/generated/nilearn.connectome.ConnectivityMeasure", "modules/generated/nilearn.connectome.GroupSparseCovariance", "modules/generated/nilearn.connectome.GroupSparseCovarianceCV", "modules/generated/nilearn.connectome.cov_to_corr", "modules/generated/nilearn.connectome.group_sparse_covariance", "modules/generated/nilearn.connectome.prec_to_partial", "modules/generated/nilearn.connectome.sym_matrix_to_vec", "modules/generated/nilearn.connectome.vec_to_sym_matrix", "modules/generated/nilearn.datasets.fetch_abide_pcp", "modules/generated/nilearn.datasets.fetch_adhd", "modules/generated/nilearn.datasets.fetch_atlas_aal", "modules/generated/nilearn.datasets.fetch_atlas_allen_2011", "modules/generated/nilearn.datasets.fetch_atlas_basc_multiscale_2015", "modules/generated/nilearn.datasets.fetch_atlas_craddock_2012", "modules/generated/nilearn.datasets.fetch_atlas_destrieux_2009", "modules/generated/nilearn.datasets.fetch_atlas_difumo", "modules/generated/nilearn.datasets.fetch_atlas_harvard_oxford", "modules/generated/nilearn.datasets.fetch_atlas_juelich", "modules/generated/nilearn.datasets.fetch_atlas_msdl", "modules/generated/nilearn.datasets.fetch_atlas_pauli_2017", "modules/generated/nilearn.datasets.fetch_atlas_schaefer_2018", "modules/generated/nilearn.datasets.fetch_atlas_smith_2009", "modules/generated/nilearn.datasets.fetch_atlas_surf_destrieux", "modules/generated/nilearn.datasets.fetch_atlas_talairach", "modules/generated/nilearn.datasets.fetch_atlas_yeo_2011", "modules/generated/nilearn.datasets.fetch_bids_langloc_dataset", "modules/generated/nilearn.datasets.fetch_coords_dosenbach_2010", "modules/generated/nilearn.datasets.fetch_coords_power_2011", "modules/generated/nilearn.datasets.fetch_coords_seitzman_2018", "modules/generated/nilearn.datasets.fetch_development_fmri", "modules/generated/nilearn.datasets.fetch_ds000030_urls", "modules/generated/nilearn.datasets.fetch_fiac_first_level", "modules/generated/nilearn.datasets.fetch_haxby", "modules/generated/nilearn.datasets.fetch_icbm152_2009", "modules/generated/nilearn.datasets.fetch_icbm152_brain_gm_mask", "modules/generated/nilearn.datasets.fetch_language_localizer_demo_dataset", "modules/generated/nilearn.datasets.fetch_localizer_button_task", "modules/generated/nilearn.datasets.fetch_localizer_calculation_task", "modules/generated/nilearn.datasets.fetch_localizer_contrasts", "modules/generated/nilearn.datasets.fetch_localizer_first_level", "modules/generated/nilearn.datasets.fetch_megatrawls_netmats", "modules/generated/nilearn.datasets.fetch_mixed_gambles", "modules/generated/nilearn.datasets.fetch_miyawaki2008", "modules/generated/nilearn.datasets.fetch_neurovault", "modules/generated/nilearn.datasets.fetch_neurovault_auditory_computation_task", "modules/generated/nilearn.datasets.fetch_neurovault_ids", "modules/generated/nilearn.datasets.fetch_neurovault_motor_task", "modules/generated/nilearn.datasets.fetch_oasis_vbm", "modules/generated/nilearn.datasets.fetch_openneuro_dataset", "modules/generated/nilearn.datasets.fetch_openneuro_dataset_index", "modules/generated/nilearn.datasets.fetch_spm_auditory", "modules/generated/nilearn.datasets.fetch_spm_multimodal_fmri", "modules/generated/nilearn.datasets.fetch_surf_fsaverage", "modules/generated/nilearn.datasets.fetch_surf_nki_enhanced", "modules/generated/nilearn.datasets.get_data_dirs", "modules/generated/nilearn.datasets.load_mni152_brain_mask", "modules/generated/nilearn.datasets.load_mni152_gm_mask", "modules/generated/nilearn.datasets.load_mni152_gm_template", "modules/generated/nilearn.datasets.load_mni152_template", "modules/generated/nilearn.datasets.load_mni152_wm_mask", "modules/generated/nilearn.datasets.load_mni152_wm_template", "modules/generated/nilearn.datasets.load_sample_motor_activation_image", "modules/generated/nilearn.datasets.patch_openneuro_dataset", "modules/generated/nilearn.datasets.select_from_index", "modules/generated/nilearn.decoding.Decoder", "modules/generated/nilearn.decoding.DecoderRegressor", "modules/generated/nilearn.decoding.FREMClassifier", "modules/generated/nilearn.decoding.FREMRegressor", "modules/generated/nilearn.decoding.SearchLight", "modules/generated/nilearn.decoding.SpaceNetClassifier", "modules/generated/nilearn.decoding.SpaceNetRegressor", "modules/generated/nilearn.decomposition.CanICA", "modules/generated/nilearn.decomposition.DictLearning", "modules/generated/nilearn.experimental.surface.FileMesh", "modules/generated/nilearn.experimental.surface.InMemoryMesh", "modules/generated/nilearn.experimental.surface.Mesh", "modules/generated/nilearn.experimental.surface.PolyMesh", "modules/generated/nilearn.experimental.surface.SurfaceImage", "modules/generated/nilearn.experimental.surface.SurfaceLabelsMasker", "modules/generated/nilearn.experimental.surface.SurfaceMasker", "modules/generated/nilearn.experimental.surface.fetch_destrieux", "modules/generated/nilearn.experimental.surface.fetch_nki", "modules/generated/nilearn.experimental.surface.load_fsaverage", "modules/generated/nilearn.glm.ARModel", "modules/generated/nilearn.glm.Contrast", "modules/generated/nilearn.glm.FContrastResults", "modules/generated/nilearn.glm.LikelihoodModelResults", "modules/generated/nilearn.glm.OLSModel", "modules/generated/nilearn.glm.RegressionResults", "modules/generated/nilearn.glm.SimpleRegressionResults", "modules/generated/nilearn.glm.TContrastResults", "modules/generated/nilearn.glm.cluster_level_inference", "modules/generated/nilearn.glm.compute_contrast", "modules/generated/nilearn.glm.compute_fixed_effects", "modules/generated/nilearn.glm.expression_to_contrast_vector", "modules/generated/nilearn.glm.fdr_threshold", "modules/generated/nilearn.glm.first_level.FirstLevelModel", "modules/generated/nilearn.glm.first_level.check_design_matrix", "modules/generated/nilearn.glm.first_level.compute_regressor", "modules/generated/nilearn.glm.first_level.first_level_from_bids", "modules/generated/nilearn.glm.first_level.glover_dispersion_derivative", "modules/generated/nilearn.glm.first_level.glover_hrf", "modules/generated/nilearn.glm.first_level.glover_time_derivative", "modules/generated/nilearn.glm.first_level.make_first_level_design_matrix", "modules/generated/nilearn.glm.first_level.mean_scaling", "modules/generated/nilearn.glm.first_level.run_glm", "modules/generated/nilearn.glm.first_level.spm_dispersion_derivative", "modules/generated/nilearn.glm.first_level.spm_hrf", "modules/generated/nilearn.glm.first_level.spm_time_derivative", "modules/generated/nilearn.glm.second_level.SecondLevelModel", "modules/generated/nilearn.glm.second_level.make_second_level_design_matrix", "modules/generated/nilearn.glm.second_level.non_parametric_inference", "modules/generated/nilearn.glm.threshold_stats_img", "modules/generated/nilearn.image.binarize_img", "modules/generated/nilearn.image.clean_img", "modules/generated/nilearn.image.concat_imgs", "modules/generated/nilearn.image.coord_transform", "modules/generated/nilearn.image.copy_img", "modules/generated/nilearn.image.crop_img", "modules/generated/nilearn.image.get_data", "modules/generated/nilearn.image.high_variance_confounds", "modules/generated/nilearn.image.index_img", "modules/generated/nilearn.image.iter_img", "modules/generated/nilearn.image.largest_connected_component_img", "modules/generated/nilearn.image.load_img", "modules/generated/nilearn.image.math_img", "modules/generated/nilearn.image.mean_img", "modules/generated/nilearn.image.new_img_like", "modules/generated/nilearn.image.reorder_img", "modules/generated/nilearn.image.resample_img", "modules/generated/nilearn.image.resample_to_img", "modules/generated/nilearn.image.smooth_img", "modules/generated/nilearn.image.swap_img_hemispheres", "modules/generated/nilearn.image.threshold_img", "modules/generated/nilearn.interfaces.bids.get_bids_files", "modules/generated/nilearn.interfaces.bids.parse_bids_filename", "modules/generated/nilearn.interfaces.bids.save_glm_to_bids", "modules/generated/nilearn.interfaces.fmriprep.load_confounds", "modules/generated/nilearn.interfaces.fmriprep.load_confounds_strategy", "modules/generated/nilearn.interfaces.fsl.get_design_from_fslmat", "modules/generated/nilearn.maskers.BaseMasker", "modules/generated/nilearn.maskers.MultiNiftiLabelsMasker", "modules/generated/nilearn.maskers.MultiNiftiMapsMasker", "modules/generated/nilearn.maskers.MultiNiftiMasker", "modules/generated/nilearn.maskers.NiftiLabelsMasker", "modules/generated/nilearn.maskers.NiftiMapsMasker", "modules/generated/nilearn.maskers.NiftiMasker", "modules/generated/nilearn.maskers.NiftiSpheresMasker", "modules/generated/nilearn.masking.apply_mask", "modules/generated/nilearn.masking.compute_background_mask", "modules/generated/nilearn.masking.compute_brain_mask", "modules/generated/nilearn.masking.compute_epi_mask", "modules/generated/nilearn.masking.compute_multi_background_mask", "modules/generated/nilearn.masking.compute_multi_brain_mask", "modules/generated/nilearn.masking.compute_multi_epi_mask", "modules/generated/nilearn.masking.intersect_masks", "modules/generated/nilearn.masking.unmask", "modules/generated/nilearn.mass_univariate.permuted_ols", "modules/generated/nilearn.plotting.displays.BaseAxes", "modules/generated/nilearn.plotting.displays.BaseSlicer", "modules/generated/nilearn.plotting.displays.CutAxes", "modules/generated/nilearn.plotting.displays.GlassBrainAxes", "modules/generated/nilearn.plotting.displays.LProjector", "modules/generated/nilearn.plotting.displays.LRProjector", "modules/generated/nilearn.plotting.displays.LYRProjector", "modules/generated/nilearn.plotting.displays.LYRZProjector", "modules/generated/nilearn.plotting.displays.LZRProjector", "modules/generated/nilearn.plotting.displays.LZRYProjector", "modules/generated/nilearn.plotting.displays.MosaicSlicer", "modules/generated/nilearn.plotting.displays.OrthoProjector", "modules/generated/nilearn.plotting.displays.OrthoSlicer", "modules/generated/nilearn.plotting.displays.PlotlySurfaceFigure", "modules/generated/nilearn.plotting.displays.RProjector", "modules/generated/nilearn.plotting.displays.TiledSlicer", "modules/generated/nilearn.plotting.displays.XProjector", "modules/generated/nilearn.plotting.displays.XSlicer", "modules/generated/nilearn.plotting.displays.XZProjector", "modules/generated/nilearn.plotting.displays.XZSlicer", "modules/generated/nilearn.plotting.displays.YProjector", "modules/generated/nilearn.plotting.displays.YSlicer", "modules/generated/nilearn.plotting.displays.YXProjector", "modules/generated/nilearn.plotting.displays.YXSlicer", "modules/generated/nilearn.plotting.displays.YZProjector", "modules/generated/nilearn.plotting.displays.YZSlicer", "modules/generated/nilearn.plotting.displays.ZProjector", "modules/generated/nilearn.plotting.displays.ZSlicer", "modules/generated/nilearn.plotting.displays.get_projector", "modules/generated/nilearn.plotting.displays.get_slicer", "modules/generated/nilearn.plotting.find_cut_slices", "modules/generated/nilearn.plotting.find_parcellation_cut_coords", "modules/generated/nilearn.plotting.find_probabilistic_atlas_cut_coords", "modules/generated/nilearn.plotting.find_xyz_cut_coords", "modules/generated/nilearn.plotting.plot_anat", "modules/generated/nilearn.plotting.plot_carpet", "modules/generated/nilearn.plotting.plot_connectome", "modules/generated/nilearn.plotting.plot_contrast_matrix", "modules/generated/nilearn.plotting.plot_design_matrix", "modules/generated/nilearn.plotting.plot_epi", "modules/generated/nilearn.plotting.plot_event", "modules/generated/nilearn.plotting.plot_glass_brain", "modules/generated/nilearn.plotting.plot_img", "modules/generated/nilearn.plotting.plot_img_comparison", "modules/generated/nilearn.plotting.plot_img_on_surf", "modules/generated/nilearn.plotting.plot_markers", "modules/generated/nilearn.plotting.plot_matrix", "modules/generated/nilearn.plotting.plot_prob_atlas", "modules/generated/nilearn.plotting.plot_roi", "modules/generated/nilearn.plotting.plot_stat_map", "modules/generated/nilearn.plotting.plot_surf", "modules/generated/nilearn.plotting.plot_surf_contours", "modules/generated/nilearn.plotting.plot_surf_roi", "modules/generated/nilearn.plotting.plot_surf_stat_map", "modules/generated/nilearn.plotting.show", "modules/generated/nilearn.plotting.view_connectome", "modules/generated/nilearn.plotting.view_img", "modules/generated/nilearn.plotting.view_img_on_surf", "modules/generated/nilearn.plotting.view_markers", "modules/generated/nilearn.plotting.view_surf", "modules/generated/nilearn.regions.HierarchicalKMeans", "modules/generated/nilearn.regions.Parcellations", "modules/generated/nilearn.regions.ReNA", "modules/generated/nilearn.regions.RegionExtractor", "modules/generated/nilearn.regions.connected_label_regions", "modules/generated/nilearn.regions.connected_regions", "modules/generated/nilearn.regions.img_to_signals_labels", "modules/generated/nilearn.regions.img_to_signals_maps", "modules/generated/nilearn.regions.recursive_neighbor_agglomeration", "modules/generated/nilearn.regions.signals_to_img_labels", "modules/generated/nilearn.regions.signals_to_img_maps", "modules/generated/nilearn.reporting.HTMLReport", "modules/generated/nilearn.reporting.get_clusters_table", "modules/generated/nilearn.reporting.make_glm_report", "modules/generated/nilearn.signal.butterworth", "modules/generated/nilearn.signal.clean", "modules/generated/nilearn.signal.high_variance_confounds", "modules/generated/nilearn.surface.load_surf_data", "modules/generated/nilearn.surface.load_surf_mesh", "modules/generated/nilearn.surface.vol_to_surf", "modules/generated_reports/glm_reports_examples", "modules/generated_reports/masker_reports_examples", "modules/glm", "modules/image", "modules/index", "modules/interfaces", "modules/maskers", "modules/masking", "modules/mass_univariate", "modules/plotting", "modules/regions", "modules/reporting", "modules/signal", "modules/surface", "plotting/index", "quickstart", "sg_execution_times", "user_guide"], "filenames": ["authors.rst", "auto_examples/00_tutorials/index.rst", "auto_examples/00_tutorials/plot_3d_and_4d_niimg.rst", "auto_examples/00_tutorials/plot_decoding_tutorial.rst", "auto_examples/00_tutorials/plot_nilearn_101.rst", "auto_examples/00_tutorials/plot_python_101.rst", "auto_examples/00_tutorials/plot_single_subject_single_run.rst", "auto_examples/00_tutorials/sg_execution_times.rst", "auto_examples/01_plotting/index.rst", "auto_examples/01_plotting/plot_3d_map_to_surface_projection.rst", "auto_examples/01_plotting/plot_atlas.rst", "auto_examples/01_plotting/plot_carpet.rst", "auto_examples/01_plotting/plot_colormaps.rst", "auto_examples/01_plotting/plot_demo_glass_brain.rst", "auto_examples/01_plotting/plot_demo_glass_brain_extensive.rst", "auto_examples/01_plotting/plot_demo_more_plotting.rst", "auto_examples/01_plotting/plot_demo_plotting.rst", "auto_examples/01_plotting/plot_dim_plotting.rst", "auto_examples/01_plotting/plot_haxby_masks.rst", "auto_examples/01_plotting/plot_multiscale_parcellations.rst", "auto_examples/01_plotting/plot_overlay.rst", "auto_examples/01_plotting/plot_prob_atlas.rst", "auto_examples/01_plotting/plot_surf_atlas.rst", "auto_examples/01_plotting/plot_surf_stat_map.rst", "auto_examples/01_plotting/plot_surface_projection_strategies.rst", "auto_examples/01_plotting/plot_visualization.rst", "auto_examples/01_plotting/plot_visualize_megatrawls_netmats.rst", "auto_examples/01_plotting/sg_execution_times.rst", "auto_examples/02_decoding/index.rst", "auto_examples/02_decoding/plot_haxby_anova_svm.rst", "auto_examples/02_decoding/plot_haxby_different_estimators.rst", "auto_examples/02_decoding/plot_haxby_frem.rst", "auto_examples/02_decoding/plot_haxby_full_analysis.rst", "auto_examples/02_decoding/plot_haxby_glm_decoding.rst", "auto_examples/02_decoding/plot_haxby_grid_search.rst", "auto_examples/02_decoding/plot_haxby_multiclass.rst", "auto_examples/02_decoding/plot_haxby_searchlight.rst", "auto_examples/02_decoding/plot_haxby_searchlight_surface.rst", "auto_examples/02_decoding/plot_haxby_stimuli.rst", "auto_examples/02_decoding/plot_mixed_gambles_frem.rst", "auto_examples/02_decoding/plot_miyawaki_encoding.rst", "auto_examples/02_decoding/plot_miyawaki_reconstruction.rst", "auto_examples/02_decoding/plot_oasis_vbm.rst", "auto_examples/02_decoding/plot_oasis_vbm_space_net.rst", "auto_examples/02_decoding/plot_simulated_data.rst", "auto_examples/02_decoding/sg_execution_times.rst", "auto_examples/03_connectivity/index.rst", "auto_examples/03_connectivity/plot_atlas_comparison.rst", "auto_examples/03_connectivity/plot_compare_decomposition.rst", "auto_examples/03_connectivity/plot_data_driven_parcellations.rst", "auto_examples/03_connectivity/plot_extract_regions_dictlearning_maps.rst", "auto_examples/03_connectivity/plot_group_level_connectivity.rst", "auto_examples/03_connectivity/plot_inverse_covariance_connectome.rst", "auto_examples/03_connectivity/plot_multi_subject_connectome.rst", "auto_examples/03_connectivity/plot_probabilistic_atlas_extraction.rst", "auto_examples/03_connectivity/plot_seed_to_voxel_correlation.rst", "auto_examples/03_connectivity/plot_signal_extraction.rst", "auto_examples/03_connectivity/plot_simulated_connectome.rst", "auto_examples/03_connectivity/plot_sphere_based_connectome.rst", "auto_examples/03_connectivity/sg_execution_times.rst", "auto_examples/04_glm_first_level/index.rst", "auto_examples/04_glm_first_level/plot_adhd_dmn.rst", "auto_examples/04_glm_first_level/plot_bids_features.rst", "auto_examples/04_glm_first_level/plot_design_matrix.rst", "auto_examples/04_glm_first_level/plot_fir_model.rst", "auto_examples/04_glm_first_level/plot_first_level_details.rst", "auto_examples/04_glm_first_level/plot_hrf.rst", "auto_examples/04_glm_first_level/plot_localizer_surface_analysis.rst", "auto_examples/04_glm_first_level/plot_predictions_residuals.rst", "auto_examples/04_glm_first_level/plot_spm_multimodal_faces.rst", "auto_examples/04_glm_first_level/plot_two_runs_model.rst", "auto_examples/04_glm_first_level/plot_write_events_file.rst", "auto_examples/04_glm_first_level/sg_execution_times.rst", "auto_examples/05_glm_second_level/index.rst", "auto_examples/05_glm_second_level/plot_oasis.rst", "auto_examples/05_glm_second_level/plot_proportion_activated_voxels.rst", "auto_examples/05_glm_second_level/plot_second_level_association_test.rst", "auto_examples/05_glm_second_level/plot_second_level_design_matrix.rst", "auto_examples/05_glm_second_level/plot_second_level_one_sample_test.rst", "auto_examples/05_glm_second_level/plot_second_level_two_sample_test.rst", "auto_examples/05_glm_second_level/plot_thresholding.rst", "auto_examples/05_glm_second_level/sg_execution_times.rst", "auto_examples/06_manipulating_images/index.rst", "auto_examples/06_manipulating_images/plot_affine_transformation.rst", "auto_examples/06_manipulating_images/plot_compare_mean_image.rst", "auto_examples/06_manipulating_images/plot_extract_regions_labels_image.rst", "auto_examples/06_manipulating_images/plot_extract_rois_smith_atlas.rst", "auto_examples/06_manipulating_images/plot_extract_rois_statistical_maps.rst", "auto_examples/06_manipulating_images/plot_mask_computation.rst", "auto_examples/06_manipulating_images/plot_negate_image.rst", "auto_examples/06_manipulating_images/plot_nifti_labels_simple.rst", "auto_examples/06_manipulating_images/plot_nifti_simple.rst", "auto_examples/06_manipulating_images/plot_resample_to_template.rst", "auto_examples/06_manipulating_images/plot_roi_extraction.rst", "auto_examples/06_manipulating_images/plot_smooth_mean_image.rst", "auto_examples/06_manipulating_images/sg_execution_times.rst", "auto_examples/07_advanced/index.rst", "auto_examples/07_advanced/plot_advanced_decoding_scikit.rst", "auto_examples/07_advanced/plot_age_group_prediction_cross_val.rst", "auto_examples/07_advanced/plot_beta_series.rst", "auto_examples/07_advanced/plot_bids_analysis.rst", "auto_examples/07_advanced/plot_haxby_mass_univariate.rst", "auto_examples/07_advanced/plot_ica_neurovault.rst", "auto_examples/07_advanced/plot_ica_resting_state.rst", "auto_examples/07_advanced/plot_localizer_mass_univariate_methods.rst", "auto_examples/07_advanced/plot_localizer_simple_analysis.rst", "auto_examples/07_advanced/plot_neurovault_meta_analysis.rst", "auto_examples/07_advanced/plot_surface_bids_analysis.rst", "auto_examples/07_advanced/sg_execution_times.rst", "auto_examples/08_experimental/index.rst", "auto_examples/08_experimental/plot_surface_image_and_maskers.rst", "auto_examples/08_experimental/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/sg_execution_times.rst", "bibliography.rst", "building_blocks/index.rst", "building_blocks/manual_pipeline.rst", "building_blocks/neurovault.rst", "changes/0.1.0.rst", "changes/0.1.1.rst", "changes/0.1.2.rst", "changes/0.1.3.rst", "changes/0.1.4.rst", "changes/0.10.0.rst", "changes/0.10.1.rst", "changes/0.10.2.rst", "changes/0.10.3.rst", "changes/0.2.0.rst", "changes/0.2.1.rst", "changes/0.2.2.rst", "changes/0.2.3.rst", "changes/0.2.4.rst", "changes/0.2.5.rst", "changes/0.2.6.rst", "changes/0.3.0.rst", "changes/0.3.1.rst", "changes/0.4.0.rst", "changes/0.4.1.rst", "changes/0.4.2.rst", "changes/0.5.0.rst", "changes/0.5.1.rst", "changes/0.5.2.rst", "changes/0.6.0.rst", "changes/0.6.1.rst", "changes/0.6.2.rst", "changes/0.7.0.rst", "changes/0.7.1.rst", "changes/0.8.0.rst", "changes/0.8.1.rst", "changes/0.9.0.rst", "changes/0.9.1.rst", "changes/0.9.2.rst", "changes/latest.rst", "changes/names.rst", "changes/whats_new.rst", "connectivity/connectome_extraction.rst", "connectivity/functional_connectomes.rst", "connectivity/index.rst", "connectivity/parcellating.rst", "connectivity/region_extraction.rst", "connectivity/resting_state_networks.rst", "decoding/decoding_intro.rst", "decoding/estimator_choice.rst", "decoding/frem.rst", "decoding/going_further.rst", "decoding/index.rst", "decoding/searchlight.rst", "decoding/space_net.rst", "developers/group_sparse_covariance.rst", "development.rst", "glm/first_level_model.rst", "glm/glm_intro.rst", "glm/index.rst", "glm/second_level_model.rst", "glossary.rst", "index.rst", "introduction.rst", "maintenance.rst", "manipulating_images/index.rst", "manipulating_images/input_output.rst", "manipulating_images/manipulating_images.rst", "manipulating_images/masker_objects.rst", "modules/connectome.rst", "modules/datasets.rst", "modules/decoding.rst", "modules/decomposition.rst", "modules/description/ABIDE_pcp.rst", "modules/description/Megatrawls.rst", "modules/description/aal_SPM12.rst", "modules/description/adhd.rst", "modules/description/allen_rsn_2011.rst", "modules/description/basc_multiscale_2015.rst", "modules/description/bids_langloc.rst", "modules/description/brainomics_localizer.rst", "modules/description/craddock_2012.rst", "modules/description/destrieux_surface.rst", "modules/description/development_fmri.rst", "modules/description/difumo_atlases.rst", "modules/description/dosenbach_2010.rst", "modules/description/fiac.rst", "modules/description/fsaverage.rst", "modules/description/fsaverage3.rst", "modules/description/fsaverage4.rst", "modules/description/fsaverage5.rst", "modules/description/fsaverage6.rst", "modules/description/harvard_oxford.rst", "modules/description/haxby2001.rst", "modules/description/icbm152_2009.rst", "modules/description/juelich.rst", "modules/description/language_localizer_demo.rst", "modules/description/localizer_first_level.rst", "modules/description/mixed_gambles.rst", "modules/description/miyawaki2008.rst", "modules/description/msdl_atlas.rst", "modules/description/neurovault.rst", "modules/description/nki_enhanced_surface.rst", "modules/description/oasis1.rst", "modules/description/pauli_2017.rst", "modules/description/power_2011.rst", "modules/description/schaefer_2018.rst", "modules/description/seitzman_2018.rst", "modules/description/smith_2009.rst", "modules/description/spm_auditory.rst", "modules/description/spm_multimodal.rst", "modules/description/talairach_atlas.rst", "modules/description/yeo_2011.rst", "modules/experimental.rst", "modules/generated/nilearn.connectome.ConnectivityMeasure.rst", "modules/generated/nilearn.connectome.GroupSparseCovariance.rst", "modules/generated/nilearn.connectome.GroupSparseCovarianceCV.rst", "modules/generated/nilearn.connectome.cov_to_corr.rst", "modules/generated/nilearn.connectome.group_sparse_covariance.rst", "modules/generated/nilearn.connectome.prec_to_partial.rst", "modules/generated/nilearn.connectome.sym_matrix_to_vec.rst", "modules/generated/nilearn.connectome.vec_to_sym_matrix.rst", "modules/generated/nilearn.datasets.fetch_abide_pcp.rst", "modules/generated/nilearn.datasets.fetch_adhd.rst", "modules/generated/nilearn.datasets.fetch_atlas_aal.rst", "modules/generated/nilearn.datasets.fetch_atlas_allen_2011.rst", "modules/generated/nilearn.datasets.fetch_atlas_basc_multiscale_2015.rst", "modules/generated/nilearn.datasets.fetch_atlas_craddock_2012.rst", "modules/generated/nilearn.datasets.fetch_atlas_destrieux_2009.rst", "modules/generated/nilearn.datasets.fetch_atlas_difumo.rst", "modules/generated/nilearn.datasets.fetch_atlas_harvard_oxford.rst", "modules/generated/nilearn.datasets.fetch_atlas_juelich.rst", "modules/generated/nilearn.datasets.fetch_atlas_msdl.rst", "modules/generated/nilearn.datasets.fetch_atlas_pauli_2017.rst", "modules/generated/nilearn.datasets.fetch_atlas_schaefer_2018.rst", "modules/generated/nilearn.datasets.fetch_atlas_smith_2009.rst", "modules/generated/nilearn.datasets.fetch_atlas_surf_destrieux.rst", "modules/generated/nilearn.datasets.fetch_atlas_talairach.rst", "modules/generated/nilearn.datasets.fetch_atlas_yeo_2011.rst", "modules/generated/nilearn.datasets.fetch_bids_langloc_dataset.rst", "modules/generated/nilearn.datasets.fetch_coords_dosenbach_2010.rst", "modules/generated/nilearn.datasets.fetch_coords_power_2011.rst", "modules/generated/nilearn.datasets.fetch_coords_seitzman_2018.rst", "modules/generated/nilearn.datasets.fetch_development_fmri.rst", "modules/generated/nilearn.datasets.fetch_ds000030_urls.rst", "modules/generated/nilearn.datasets.fetch_fiac_first_level.rst", "modules/generated/nilearn.datasets.fetch_haxby.rst", "modules/generated/nilearn.datasets.fetch_icbm152_2009.rst", "modules/generated/nilearn.datasets.fetch_icbm152_brain_gm_mask.rst", "modules/generated/nilearn.datasets.fetch_language_localizer_demo_dataset.rst", "modules/generated/nilearn.datasets.fetch_localizer_button_task.rst", "modules/generated/nilearn.datasets.fetch_localizer_calculation_task.rst", "modules/generated/nilearn.datasets.fetch_localizer_contrasts.rst", "modules/generated/nilearn.datasets.fetch_localizer_first_level.rst", "modules/generated/nilearn.datasets.fetch_megatrawls_netmats.rst", "modules/generated/nilearn.datasets.fetch_mixed_gambles.rst", "modules/generated/nilearn.datasets.fetch_miyawaki2008.rst", "modules/generated/nilearn.datasets.fetch_neurovault.rst", "modules/generated/nilearn.datasets.fetch_neurovault_auditory_computation_task.rst", "modules/generated/nilearn.datasets.fetch_neurovault_ids.rst", "modules/generated/nilearn.datasets.fetch_neurovault_motor_task.rst", "modules/generated/nilearn.datasets.fetch_oasis_vbm.rst", "modules/generated/nilearn.datasets.fetch_openneuro_dataset.rst", "modules/generated/nilearn.datasets.fetch_openneuro_dataset_index.rst", "modules/generated/nilearn.datasets.fetch_spm_auditory.rst", "modules/generated/nilearn.datasets.fetch_spm_multimodal_fmri.rst", "modules/generated/nilearn.datasets.fetch_surf_fsaverage.rst", "modules/generated/nilearn.datasets.fetch_surf_nki_enhanced.rst", "modules/generated/nilearn.datasets.get_data_dirs.rst", "modules/generated/nilearn.datasets.load_mni152_brain_mask.rst", "modules/generated/nilearn.datasets.load_mni152_gm_mask.rst", "modules/generated/nilearn.datasets.load_mni152_gm_template.rst", "modules/generated/nilearn.datasets.load_mni152_template.rst", "modules/generated/nilearn.datasets.load_mni152_wm_mask.rst", "modules/generated/nilearn.datasets.load_mni152_wm_template.rst", "modules/generated/nilearn.datasets.load_sample_motor_activation_image.rst", "modules/generated/nilearn.datasets.patch_openneuro_dataset.rst", "modules/generated/nilearn.datasets.select_from_index.rst", "modules/generated/nilearn.decoding.Decoder.rst", "modules/generated/nilearn.decoding.DecoderRegressor.rst", "modules/generated/nilearn.decoding.FREMClassifier.rst", "modules/generated/nilearn.decoding.FREMRegressor.rst", "modules/generated/nilearn.decoding.SearchLight.rst", "modules/generated/nilearn.decoding.SpaceNetClassifier.rst", "modules/generated/nilearn.decoding.SpaceNetRegressor.rst", "modules/generated/nilearn.decomposition.CanICA.rst", "modules/generated/nilearn.decomposition.DictLearning.rst", "modules/generated/nilearn.experimental.surface.FileMesh.rst", "modules/generated/nilearn.experimental.surface.InMemoryMesh.rst", "modules/generated/nilearn.experimental.surface.Mesh.rst", "modules/generated/nilearn.experimental.surface.PolyMesh.rst", "modules/generated/nilearn.experimental.surface.SurfaceImage.rst", "modules/generated/nilearn.experimental.surface.SurfaceLabelsMasker.rst", "modules/generated/nilearn.experimental.surface.SurfaceMasker.rst", "modules/generated/nilearn.experimental.surface.fetch_destrieux.rst", "modules/generated/nilearn.experimental.surface.fetch_nki.rst", "modules/generated/nilearn.experimental.surface.load_fsaverage.rst", "modules/generated/nilearn.glm.ARModel.rst", "modules/generated/nilearn.glm.Contrast.rst", "modules/generated/nilearn.glm.FContrastResults.rst", "modules/generated/nilearn.glm.LikelihoodModelResults.rst", "modules/generated/nilearn.glm.OLSModel.rst", "modules/generated/nilearn.glm.RegressionResults.rst", "modules/generated/nilearn.glm.SimpleRegressionResults.rst", "modules/generated/nilearn.glm.TContrastResults.rst", "modules/generated/nilearn.glm.cluster_level_inference.rst", "modules/generated/nilearn.glm.compute_contrast.rst", "modules/generated/nilearn.glm.compute_fixed_effects.rst", "modules/generated/nilearn.glm.expression_to_contrast_vector.rst", "modules/generated/nilearn.glm.fdr_threshold.rst", "modules/generated/nilearn.glm.first_level.FirstLevelModel.rst", "modules/generated/nilearn.glm.first_level.check_design_matrix.rst", "modules/generated/nilearn.glm.first_level.compute_regressor.rst", "modules/generated/nilearn.glm.first_level.first_level_from_bids.rst", "modules/generated/nilearn.glm.first_level.glover_dispersion_derivative.rst", "modules/generated/nilearn.glm.first_level.glover_hrf.rst", "modules/generated/nilearn.glm.first_level.glover_time_derivative.rst", "modules/generated/nilearn.glm.first_level.make_first_level_design_matrix.rst", "modules/generated/nilearn.glm.first_level.mean_scaling.rst", "modules/generated/nilearn.glm.first_level.run_glm.rst", "modules/generated/nilearn.glm.first_level.spm_dispersion_derivative.rst", "modules/generated/nilearn.glm.first_level.spm_hrf.rst", "modules/generated/nilearn.glm.first_level.spm_time_derivative.rst", "modules/generated/nilearn.glm.second_level.SecondLevelModel.rst", "modules/generated/nilearn.glm.second_level.make_second_level_design_matrix.rst", "modules/generated/nilearn.glm.second_level.non_parametric_inference.rst", "modules/generated/nilearn.glm.threshold_stats_img.rst", "modules/generated/nilearn.image.binarize_img.rst", "modules/generated/nilearn.image.clean_img.rst", "modules/generated/nilearn.image.concat_imgs.rst", "modules/generated/nilearn.image.coord_transform.rst", "modules/generated/nilearn.image.copy_img.rst", "modules/generated/nilearn.image.crop_img.rst", "modules/generated/nilearn.image.get_data.rst", "modules/generated/nilearn.image.high_variance_confounds.rst", "modules/generated/nilearn.image.index_img.rst", "modules/generated/nilearn.image.iter_img.rst", "modules/generated/nilearn.image.largest_connected_component_img.rst", "modules/generated/nilearn.image.load_img.rst", "modules/generated/nilearn.image.math_img.rst", "modules/generated/nilearn.image.mean_img.rst", "modules/generated/nilearn.image.new_img_like.rst", "modules/generated/nilearn.image.reorder_img.rst", "modules/generated/nilearn.image.resample_img.rst", "modules/generated/nilearn.image.resample_to_img.rst", "modules/generated/nilearn.image.smooth_img.rst", "modules/generated/nilearn.image.swap_img_hemispheres.rst", "modules/generated/nilearn.image.threshold_img.rst", "modules/generated/nilearn.interfaces.bids.get_bids_files.rst", "modules/generated/nilearn.interfaces.bids.parse_bids_filename.rst", "modules/generated/nilearn.interfaces.bids.save_glm_to_bids.rst", "modules/generated/nilearn.interfaces.fmriprep.load_confounds.rst", "modules/generated/nilearn.interfaces.fmriprep.load_confounds_strategy.rst", "modules/generated/nilearn.interfaces.fsl.get_design_from_fslmat.rst", "modules/generated/nilearn.maskers.BaseMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiLabelsMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiMapsMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiMasker.rst", "modules/generated/nilearn.maskers.NiftiLabelsMasker.rst", "modules/generated/nilearn.maskers.NiftiMapsMasker.rst", "modules/generated/nilearn.maskers.NiftiMasker.rst", "modules/generated/nilearn.maskers.NiftiSpheresMasker.rst", "modules/generated/nilearn.masking.apply_mask.rst", "modules/generated/nilearn.masking.compute_background_mask.rst", "modules/generated/nilearn.masking.compute_brain_mask.rst", "modules/generated/nilearn.masking.compute_epi_mask.rst", "modules/generated/nilearn.masking.compute_multi_background_mask.rst", "modules/generated/nilearn.masking.compute_multi_brain_mask.rst", "modules/generated/nilearn.masking.compute_multi_epi_mask.rst", "modules/generated/nilearn.masking.intersect_masks.rst", "modules/generated/nilearn.masking.unmask.rst", "modules/generated/nilearn.mass_univariate.permuted_ols.rst", "modules/generated/nilearn.plotting.displays.BaseAxes.rst", "modules/generated/nilearn.plotting.displays.BaseSlicer.rst", "modules/generated/nilearn.plotting.displays.CutAxes.rst", "modules/generated/nilearn.plotting.displays.GlassBrainAxes.rst", "modules/generated/nilearn.plotting.displays.LProjector.rst", "modules/generated/nilearn.plotting.displays.LRProjector.rst", "modules/generated/nilearn.plotting.displays.LYRProjector.rst", "modules/generated/nilearn.plotting.displays.LYRZProjector.rst", "modules/generated/nilearn.plotting.displays.LZRProjector.rst", "modules/generated/nilearn.plotting.displays.LZRYProjector.rst", "modules/generated/nilearn.plotting.displays.MosaicSlicer.rst", "modules/generated/nilearn.plotting.displays.OrthoProjector.rst", "modules/generated/nilearn.plotting.displays.OrthoSlicer.rst", "modules/generated/nilearn.plotting.displays.PlotlySurfaceFigure.rst", "modules/generated/nilearn.plotting.displays.RProjector.rst", "modules/generated/nilearn.plotting.displays.TiledSlicer.rst", "modules/generated/nilearn.plotting.displays.XProjector.rst", "modules/generated/nilearn.plotting.displays.XSlicer.rst", "modules/generated/nilearn.plotting.displays.XZProjector.rst", "modules/generated/nilearn.plotting.displays.XZSlicer.rst", "modules/generated/nilearn.plotting.displays.YProjector.rst", "modules/generated/nilearn.plotting.displays.YSlicer.rst", "modules/generated/nilearn.plotting.displays.YXProjector.rst", "modules/generated/nilearn.plotting.displays.YXSlicer.rst", "modules/generated/nilearn.plotting.displays.YZProjector.rst", "modules/generated/nilearn.plotting.displays.YZSlicer.rst", "modules/generated/nilearn.plotting.displays.ZProjector.rst", "modules/generated/nilearn.plotting.displays.ZSlicer.rst", "modules/generated/nilearn.plotting.displays.get_projector.rst", "modules/generated/nilearn.plotting.displays.get_slicer.rst", "modules/generated/nilearn.plotting.find_cut_slices.rst", "modules/generated/nilearn.plotting.find_parcellation_cut_coords.rst", "modules/generated/nilearn.plotting.find_probabilistic_atlas_cut_coords.rst", "modules/generated/nilearn.plotting.find_xyz_cut_coords.rst", "modules/generated/nilearn.plotting.plot_anat.rst", "modules/generated/nilearn.plotting.plot_carpet.rst", "modules/generated/nilearn.plotting.plot_connectome.rst", "modules/generated/nilearn.plotting.plot_contrast_matrix.rst", "modules/generated/nilearn.plotting.plot_design_matrix.rst", "modules/generated/nilearn.plotting.plot_epi.rst", "modules/generated/nilearn.plotting.plot_event.rst", "modules/generated/nilearn.plotting.plot_glass_brain.rst", "modules/generated/nilearn.plotting.plot_img.rst", "modules/generated/nilearn.plotting.plot_img_comparison.rst", "modules/generated/nilearn.plotting.plot_img_on_surf.rst", "modules/generated/nilearn.plotting.plot_markers.rst", "modules/generated/nilearn.plotting.plot_matrix.rst", "modules/generated/nilearn.plotting.plot_prob_atlas.rst", "modules/generated/nilearn.plotting.plot_roi.rst", "modules/generated/nilearn.plotting.plot_stat_map.rst", "modules/generated/nilearn.plotting.plot_surf.rst", "modules/generated/nilearn.plotting.plot_surf_contours.rst", "modules/generated/nilearn.plotting.plot_surf_roi.rst", "modules/generated/nilearn.plotting.plot_surf_stat_map.rst", "modules/generated/nilearn.plotting.show.rst", "modules/generated/nilearn.plotting.view_connectome.rst", "modules/generated/nilearn.plotting.view_img.rst", "modules/generated/nilearn.plotting.view_img_on_surf.rst", "modules/generated/nilearn.plotting.view_markers.rst", "modules/generated/nilearn.plotting.view_surf.rst", "modules/generated/nilearn.regions.HierarchicalKMeans.rst", "modules/generated/nilearn.regions.Parcellations.rst", "modules/generated/nilearn.regions.ReNA.rst", "modules/generated/nilearn.regions.RegionExtractor.rst", "modules/generated/nilearn.regions.connected_label_regions.rst", "modules/generated/nilearn.regions.connected_regions.rst", "modules/generated/nilearn.regions.img_to_signals_labels.rst", "modules/generated/nilearn.regions.img_to_signals_maps.rst", "modules/generated/nilearn.regions.recursive_neighbor_agglomeration.rst", "modules/generated/nilearn.regions.signals_to_img_labels.rst", "modules/generated/nilearn.regions.signals_to_img_maps.rst", "modules/generated/nilearn.reporting.HTMLReport.rst", "modules/generated/nilearn.reporting.get_clusters_table.rst", "modules/generated/nilearn.reporting.make_glm_report.rst", "modules/generated/nilearn.signal.butterworth.rst", "modules/generated/nilearn.signal.clean.rst", "modules/generated/nilearn.signal.high_variance_confounds.rst", "modules/generated/nilearn.surface.load_surf_data.rst", "modules/generated/nilearn.surface.load_surf_mesh.rst", "modules/generated/nilearn.surface.vol_to_surf.rst", "modules/generated_reports/glm_reports_examples.rst", "modules/generated_reports/masker_reports_examples.rst", "modules/glm.rst", "modules/image.rst", "modules/index.rst", "modules/interfaces.rst", "modules/maskers.rst", "modules/masking.rst", "modules/mass_univariate.rst", "modules/plotting.rst", "modules/regions.rst", "modules/reporting.rst", "modules/signal.rst", "modules/surface.rst", "plotting/index.rst", "quickstart.md", "sg_execution_times.rst", "user_guide.rst"], "titles": ["Team", "Basic tutorials", "3D and 4D niimgs: handling and visualizing", "A introduction tutorial to fMRI decoding", "Basic nilearn example: manipulating and looking at data", "Basic numerics and plotting with Python", "Intro to GLM Analysis: a single-run, single-subject fMRI dataset", "Computation times", "Visualization of brain images", "Making a surface plot of a 3D statistical map", "Basic Atlas plotting", "Visualizing global patterns with a carpet plot", "Matplotlib colormaps in Nilearn", "Glass brain plotting in nilearn", "Glass brain plotting in nilearn (all options)", "More plotting tools from nilearn", "Plotting tools in nilearn", "Controlling the contrast of the background when plotting", "Plot Haxby masks", "Visualizing multiscale functional brain parcellations", "Visualizing a probabilistic atlas: the default mode in the MSDL atlas", "Visualizing 4D probabilistic atlas maps", "Loading and plotting of a cortical surface atlas", "Seed-based connectivity on the surface", "Technical point: Illustration of the volume to surface sampling schemes", "NeuroImaging volumes visualization", "Visualizing Megatrawls Network Matrices from Human Connectome Project", "Computation times", "Decoding and predicting from brain images", "Decoding with ANOVA + SVM: face vs house in the Haxby dataset", "Different classifiers in decoding the Haxby dataset", "Decoding with FREM: face vs house vs chair object recognition", "ROI-based decoding analysis in Haxby et al. dataset", "Decoding of a dataset after GLM fit for signal extraction", "Setting a parameter by cross-validation", "The haxby dataset: different multi-class strategies", "Searchlight analysis of face vs house recognition", "Cortical surface-based searchlight decoding", "Show stimuli of Haxby et al. dataset", "FREM on Jimura et al \u201cmixed gambles\u201d dataset", "Encoding models for visual stimuli from Miyawaki et al. 2008", "Reconstruction of visual stimuli from Miyawaki et al. 2008", "Voxel-Based Morphometry on Oasis dataset", "Voxel-Based Morphometry on Oasis dataset with Space-Net prior", "Example of pattern recognition on simulated data", "Computation times", "Functional connectivity", "Comparing connectomes on different reference atlases", "Deriving spatial maps from group fMRI data using ICA and Dictionary Learning", "Clustering methods to learn a brain parcellation from fMRI", "Regions extraction using dictionary learning and functional connectomes", "Classification of age groups using functional connectivity", "Computing a connectome with sparse inverse covariance", "Group Sparse inverse covariance for multi-subject connectome", "Extracting signals of a probabilistic atlas of functional regions", "Producing single subject maps of seed-to-voxel correlation", "Extracting signals from a brain parcellation", "Connectivity structure estimation on simulated data", "Extract signals on spheres and plot a connectome", "Computation times", "GLM: First level analysis", "Default Mode Network extraction of ADHD dataset", "First level analysis of a complete BIDS dataset from openneuro", "Examples of design matrices", "Analysis of an fMRI dataset with a Finite Impule Response (FIR) model", "Understanding parameters of the first-level model", "Example of MRI response functions", "Example of surface-based first-level analysis", "Predicted time series and residuals", "Single-subject data (two runs) in native space", "Simple example of two-runs fMRI model fitting", "Generate an events.tsv file for the NeuroSpin localizer task", "Computation times", "GLM: Second level analysis", "Voxel-Based Morphometry on OASIS dataset", "Second-level fMRI model: true positive proportion in clusters", "Example of generic design in second-level models", "Example of second level design matrix", "Second-level fMRI model: one sample test", "Second-level fMRI model: two-sample test, unpaired and paired", "Statistical testing of a second-level analysis", "Computation times", "Manipulating brain image volumes", "Visualization of affine resamplings", "Comparing the means of 2 images", "Breaking an atlas of labels in separated regions", "Regions Extraction of Default Mode Networks using Smith Atlas", "Region Extraction using a t-statistical map (3D)", "Understanding NiftiMasker and mask computation", "Negating an image with math_img", "Extracting signals from brain regions using the NiftiLabelsMasker", "Simple example of NiftiMasker use", "Resample an image to a template", "Computing a Region of Interest (ROI) mask manually", "Smoothing an image", "Computation times", "Advanced statistical analysis of brain images", "Advanced decoding using scikit learn", "Functional connectivity predicts age group", "Beta-Series Modeling for Task-Based Functional Connectivity and Decoding", "BIDS dataset first and second level analysis", "Massively univariate analysis of face vs house recognition", "NeuroVault cross-study ICA maps", "Multivariate decompositions: Independent component analysis of fMRI", "Massively univariate analysis of a motor task from the Localizer dataset", "Massively univariate analysis of a calculation task from the Localizer dataset", "NeuroVault meta-analysis of stop-go paradigm studies", "Surface-based dataset first and second level analysis of a dataset", "Computation times", "Examples for experimental modules", "A short demo of the surface images &amp; maskers", "Computation times", "Examples", "Computation times", "General bibliography", "<span class=\"section-number\">10. </span>Advanced usage: manual pipelines and scaling up", "<span class=\"section-number\">10.1. </span>Building your own neuroimaging machine-learning pipeline", "<span class=\"section-number\">10.2. </span>Downloading statistical maps from the Neurovault repository", "0.1.0", "0.1.1", "0.1.2", "0.1.3", "0.1.4", "0.10.0", "0.10.1", "0.10.2", "0.10.3", "0.2.0", "0.2.1", "0.2.2", "0.2.3", "0.2.4", "0.2.5.1", "0.2.6", "0.3.0", "0.3.1", "0.4.0", "0.4.1", "0.4.2", "0.5.0", "0.5.1", "0.5.2", "0.6.0", "0.6.1", "0.6.2", "0.7.0", "0.7.1", "0.8.0", "0.8.1", "0.9.0", "0.9.1", "0.9.2", "0.10.4.dev", "&lt;no title&gt;", "What\u2019s new", "<span class=\"section-number\">6.2. </span>Connectome extraction: inverse covariance for direct connections", "<span class=\"section-number\">6.1. </span>Extracting times series to build a functional connectome", "<span class=\"section-number\">6. </span>Functional connectivity and resting state", "<span class=\"section-number\">6.5. </span>Clustering to parcellate the brain in regions", "<span class=\"section-number\">6.4. </span>Region Extraction for better brain parcellations", "<span class=\"section-number\">6.3. </span>Extracting functional brain networks: ICA and related", "<span class=\"section-number\">5.1. </span>An introduction to decoding", "<span class=\"section-number\">5.2. </span>Choosing the right predictive model for neuroimaging", "<span class=\"section-number\">5.3. </span>FREM: fast ensembling of regularized models for robust decoding", "<span class=\"section-number\">5.6. </span>Running scikit-learn functions for more control on the analysis", "<span class=\"section-number\">5. </span>Decoding and MVPA: predicting from brain images", "<span class=\"section-number\">5.5. </span>Searchlight : finding voxels containing information", "<span class=\"section-number\">5.4. </span>SpaceNet: decoding with spatial structure for better maps", "<span class=\"section-number\">6.2.3.1. </span>Group-sparse covariance estimation", "Contributing", "<span class=\"section-number\">8.2. </span>First level models", "<span class=\"section-number\">8.1. </span>An introduction to GLMs in fMRI statistical analysis", "<span class=\"section-number\">8. </span>Analyzing fMRI using GLMs", "<span class=\"section-number\">8.3. </span>Second level models", "Glossary", "Nilearn", "<span class=\"section-number\">1. </span>Introduction", "Maintenance", "<span class=\"section-number\">9. </span>Manipulation brain volumes with nilearn", "<span class=\"section-number\">9.1. </span>Input and output: neuroimaging data representation", "<span class=\"section-number\">9.2. </span>Manipulating images: resampling, smoothing, masking, ROIs\u2026", "<span class=\"section-number\">9.3. </span>From neuroimaging volumes to data matrices: the masker objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.connectome</span></code>: Functional Connectivity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.datasets</span></code>: Automatic Dataset Fetching", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.decoding</span></code>: Decoding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.decomposition</span></code>: Multivariate Decompositions", "ABIDE PCP dataset", "MegaTrawls Network Matrices HCP", "AAL atlas", "ADHD dataset", "Allen 2011 atlas", "BASC multiscale atlas", "BIDS language localizer", "Brainomics Localizer", "Craddock 2012 atlas", "Destrieux atlas", "development fMRI dataset", "DiFuMo atlas", "Dosenbach 2010 atlas", "fiac first level dataset", "fsaverage template", "fsaverage3 template", "fsaverage4 template", "fsaverage5 template", "fsaverage6 template", "Harvard Oxford atlas", "Haxby dataset", "ICBM 152 template", "Juelich atlas", "language localizer demo dataset", "localizer first level dataset", "Mixed gambles statistical maps", "Miyawaki 2008 dataset", "MSDL atlas", "Neurovault statistical maps", "NKI enhanced surface dataset", "OASIS volume based morphometry maps", "Pauli 2007 atlas", "Power 2011 atlas", "Schaefer 2018 atlas", "Seitzman 2018 atlas", "Smith 2009 atlas", "SPM auditory dataset", "SPM multimodal dataset", "Talairach atlas", "Yeo 2011 atlas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.experimental</span></code>: Experimental Modules", "nilearn.connectome.ConnectivityMeasure", "nilearn.connectome.GroupSparseCovariance", "nilearn.connectome.GroupSparseCovarianceCV", "nilearn.connectome.cov_to_corr", "nilearn.connectome.group_sparse_covariance", "nilearn.connectome.prec_to_partial", "nilearn.connectome.sym_matrix_to_vec", "nilearn.connectome.vec_to_sym_matrix", "nilearn.datasets.fetch_abide_pcp", "nilearn.datasets.fetch_adhd", "nilearn.datasets.fetch_atlas_aal", "nilearn.datasets.fetch_atlas_allen_2011", "nilearn.datasets.fetch_atlas_basc_multiscale_2015", "nilearn.datasets.fetch_atlas_craddock_2012", "nilearn.datasets.fetch_atlas_destrieux_2009", "nilearn.datasets.fetch_atlas_difumo", "nilearn.datasets.fetch_atlas_harvard_oxford", "nilearn.datasets.fetch_atlas_juelich", "nilearn.datasets.fetch_atlas_msdl", "nilearn.datasets.fetch_atlas_pauli_2017", "nilearn.datasets.fetch_atlas_schaefer_2018", "nilearn.datasets.fetch_atlas_smith_2009", "nilearn.datasets.fetch_atlas_surf_destrieux", "nilearn.datasets.fetch_atlas_talairach", "nilearn.datasets.fetch_atlas_yeo_2011", "nilearn.datasets.fetch_bids_langloc_dataset", "nilearn.datasets.fetch_coords_dosenbach_2010", "nilearn.datasets.fetch_coords_power_2011", "nilearn.datasets.fetch_coords_seitzman_2018", "nilearn.datasets.fetch_development_fmri", "nilearn.datasets.fetch_ds000030_urls", "nilearn.datasets.fetch_fiac_first_level", "nilearn.datasets.fetch_haxby", "nilearn.datasets.fetch_icbm152_2009", "nilearn.datasets.fetch_icbm152_brain_gm_mask", "nilearn.datasets.fetch_language_localizer_demo_dataset", "nilearn.datasets.fetch_localizer_button_task", "nilearn.datasets.fetch_localizer_calculation_task", "nilearn.datasets.fetch_localizer_contrasts", "nilearn.datasets.fetch_localizer_first_level", "nilearn.datasets.fetch_megatrawls_netmats", "nilearn.datasets.fetch_mixed_gambles", "nilearn.datasets.fetch_miyawaki2008", "nilearn.datasets.fetch_neurovault", "nilearn.datasets.fetch_neurovault_auditory_computation_task", "nilearn.datasets.fetch_neurovault_ids", "nilearn.datasets.fetch_neurovault_motor_task", "nilearn.datasets.fetch_oasis_vbm", "nilearn.datasets.fetch_openneuro_dataset", "nilearn.datasets.fetch_openneuro_dataset_index", "nilearn.datasets.fetch_spm_auditory", "nilearn.datasets.fetch_spm_multimodal_fmri", "nilearn.datasets.fetch_surf_fsaverage", "nilearn.datasets.fetch_surf_nki_enhanced", "nilearn.datasets.get_data_dirs", "nilearn.datasets.load_mni152_brain_mask", "nilearn.datasets.load_mni152_gm_mask", "nilearn.datasets.load_mni152_gm_template", "nilearn.datasets.load_mni152_template", "nilearn.datasets.load_mni152_wm_mask", "nilearn.datasets.load_mni152_wm_template", "nilearn.datasets.load_sample_motor_activation_image", "nilearn.datasets.patch_openneuro_dataset", "nilearn.datasets.select_from_index", "nilearn.decoding.Decoder", "nilearn.decoding.DecoderRegressor", "nilearn.decoding.FREMClassifier", "nilearn.decoding.FREMRegressor", "nilearn.decoding.SearchLight", "nilearn.decoding.SpaceNetClassifier", "nilearn.decoding.SpaceNetRegressor", "nilearn.decomposition.CanICA", "nilearn.decomposition.DictLearning", "nilearn.experimental.surface.FileMesh", "nilearn.experimental.surface.InMemoryMesh", "nilearn.experimental.surface.Mesh", "nilearn.experimental.surface.PolyMesh", "nilearn.experimental.surface.SurfaceImage", "nilearn.experimental.surface.SurfaceLabelsMasker", "nilearn.experimental.surface.SurfaceMasker", "nilearn.experimental.surface.fetch_destrieux", "nilearn.experimental.surface.fetch_nki", "nilearn.experimental.surface.load_fsaverage", "nilearn.glm.ARModel", "nilearn.glm.Contrast", "nilearn.glm.FContrastResults", "nilearn.glm.LikelihoodModelResults", "nilearn.glm.OLSModel", "nilearn.glm.RegressionResults", "nilearn.glm.SimpleRegressionResults", "nilearn.glm.TContrastResults", "nilearn.glm.cluster_level_inference", "nilearn.glm.compute_contrast", "nilearn.glm.compute_fixed_effects", "nilearn.glm.expression_to_contrast_vector", "nilearn.glm.fdr_threshold", "nilearn.glm.first_level.FirstLevelModel", "nilearn.glm.first_level.check_design_matrix", "nilearn.glm.first_level.compute_regressor", "nilearn.glm.first_level.first_level_from_bids", "nilearn.glm.first_level.glover_dispersion_derivative", "nilearn.glm.first_level.glover_hrf", "nilearn.glm.first_level.glover_time_derivative", "nilearn.glm.first_level.make_first_level_design_matrix", "nilearn.glm.first_level.mean_scaling", "nilearn.glm.first_level.run_glm", "nilearn.glm.first_level.spm_dispersion_derivative", "nilearn.glm.first_level.spm_hrf", "nilearn.glm.first_level.spm_time_derivative", "nilearn.glm.second_level.SecondLevelModel", "nilearn.glm.second_level.make_second_level_design_matrix", "nilearn.glm.second_level.non_parametric_inference", "nilearn.glm.threshold_stats_img", "nilearn.image.binarize_img", "nilearn.image.clean_img", "nilearn.image.concat_imgs", "nilearn.image.coord_transform", "nilearn.image.copy_img", "nilearn.image.crop_img", "nilearn.image.get_data", "nilearn.image.high_variance_confounds", "nilearn.image.index_img", "nilearn.image.iter_img", "nilearn.image.largest_connected_component_img", "nilearn.image.load_img", "nilearn.image.math_img", "nilearn.image.mean_img", "nilearn.image.new_img_like", "nilearn.image.reorder_img", "nilearn.image.resample_img", "nilearn.image.resample_to_img", "nilearn.image.smooth_img", "nilearn.image.swap_img_hemispheres", "nilearn.image.threshold_img", "nilearn.interfaces.bids.get_bids_files", "nilearn.interfaces.bids.parse_bids_filename", "nilearn.interfaces.bids.save_glm_to_bids", "nilearn.interfaces.fmriprep.load_confounds", "nilearn.interfaces.fmriprep.load_confounds_strategy", "nilearn.interfaces.fsl.get_design_from_fslmat", "nilearn.maskers.BaseMasker", "nilearn.maskers.MultiNiftiLabelsMasker", "nilearn.maskers.MultiNiftiMapsMasker", "nilearn.maskers.MultiNiftiMasker", "nilearn.maskers.NiftiLabelsMasker", "nilearn.maskers.NiftiMapsMasker", "nilearn.maskers.NiftiMasker", "nilearn.maskers.NiftiSpheresMasker", "nilearn.masking.apply_mask", "nilearn.masking.compute_background_mask", "nilearn.masking.compute_brain_mask", "nilearn.masking.compute_epi_mask", "nilearn.masking.compute_multi_background_mask", "nilearn.masking.compute_multi_brain_mask", "nilearn.masking.compute_multi_epi_mask", "nilearn.masking.intersect_masks", "nilearn.masking.unmask", "nilearn.mass_univariate.permuted_ols", "nilearn.plotting.displays.BaseAxes", "nilearn.plotting.displays.BaseSlicer", "nilearn.plotting.displays.CutAxes", "nilearn.plotting.displays.GlassBrainAxes", "nilearn.plotting.displays.LProjector", "nilearn.plotting.displays.LRProjector", "nilearn.plotting.displays.LYRProjector", "nilearn.plotting.displays.LYRZProjector", "nilearn.plotting.displays.LZRProjector", "nilearn.plotting.displays.LZRYProjector", "nilearn.plotting.displays.MosaicSlicer", "nilearn.plotting.displays.OrthoProjector", "nilearn.plotting.displays.OrthoSlicer", "nilearn.plotting.displays.PlotlySurfaceFigure", "nilearn.plotting.displays.RProjector", "nilearn.plotting.displays.TiledSlicer", "nilearn.plotting.displays.XProjector", "nilearn.plotting.displays.XSlicer", "nilearn.plotting.displays.XZProjector", "nilearn.plotting.displays.XZSlicer", "nilearn.plotting.displays.YProjector", "nilearn.plotting.displays.YSlicer", "nilearn.plotting.displays.YXProjector", "nilearn.plotting.displays.YXSlicer", "nilearn.plotting.displays.YZProjector", "nilearn.plotting.displays.YZSlicer", "nilearn.plotting.displays.ZProjector", "nilearn.plotting.displays.ZSlicer", "nilearn.plotting.displays.get_projector", "nilearn.plotting.displays.get_slicer", "nilearn.plotting.find_cut_slices", "nilearn.plotting.find_parcellation_cut_coords", "nilearn.plotting.find_probabilistic_atlas_cut_coords", "nilearn.plotting.find_xyz_cut_coords", "nilearn.plotting.plot_anat", "nilearn.plotting.plot_carpet", "nilearn.plotting.plot_connectome", "nilearn.plotting.plot_contrast_matrix", "nilearn.plotting.plot_design_matrix", "nilearn.plotting.plot_epi", "nilearn.plotting.plot_event", "nilearn.plotting.plot_glass_brain", "nilearn.plotting.plot_img", "nilearn.plotting.plot_img_comparison", "nilearn.plotting.plot_img_on_surf", "nilearn.plotting.plot_markers", "nilearn.plotting.plot_matrix", "nilearn.plotting.plot_prob_atlas", "nilearn.plotting.plot_roi", "nilearn.plotting.plot_stat_map", "nilearn.plotting.plot_surf", "nilearn.plotting.plot_surf_contours", "nilearn.plotting.plot_surf_roi", "nilearn.plotting.plot_surf_stat_map", "nilearn.plotting.show", "nilearn.plotting.view_connectome", "nilearn.plotting.view_img", "nilearn.plotting.view_img_on_surf", "nilearn.plotting.view_markers", "nilearn.plotting.view_surf", "nilearn.regions.HierarchicalKMeans", "nilearn.regions.Parcellations", "nilearn.regions.ReNA", "nilearn.regions.RegionExtractor", "nilearn.regions.connected_label_regions", "nilearn.regions.connected_regions", "nilearn.regions.img_to_signals_labels", "nilearn.regions.img_to_signals_maps", "nilearn.regions.recursive_neighbor_agglomeration", "nilearn.regions.signals_to_img_labels", "nilearn.regions.signals_to_img_maps", "nilearn.reporting.HTMLReport", "nilearn.reporting.get_clusters_table", "nilearn.reporting.make_glm_report", "nilearn.signal.butterworth", "nilearn.signal.clean", "nilearn.signal.high_variance_confounds", "nilearn.surface.load_surf_data", "nilearn.surface.load_surf_mesh", "nilearn.surface.vol_to_surf", "Examples of GLM reports", "Examples masker reports", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.glm</span></code>: Generalized Linear Models", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.image</span></code>: Image Processing and Resampling Utilities", "API References", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.interfaces</span></code>: Loading components from interfaces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.maskers</span></code>: Extracting Signals from Brain Images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.masking</span></code>: Data Masking Utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.mass_univariate</span></code>: Mass-Univariate Analysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.plotting</span></code>: Plotting Brain Data", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.regions</span></code>: Operating on Regions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.reporting</span></code>: Reporting Functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.signal</span></code>: Preprocessing Time Series", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.surface</span></code>: Manipulating Surface Data", "<span class=\"section-number\">7. </span>Plotting brain images", "Quickstart", "Computation times", "User guide"], "terms": {"thiwork": [0, 2, 3, 4, 6, 10, 11, 15, 16, 18, 20, 23, 25, 29, 30, 31, 32, 34, 35, 36, 39, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 61, 69, 70, 71, 74, 76, 83, 84, 85, 88, 90, 91, 93, 94, 97, 99, 100, 101, 103, 104, 107, 125, 134, 135, 142, 149, 150, 154, 155, 160, 161, 162, 164, 168, 169, 170, 171, 177, 179, 180, 181, 187, 191, 227, 228, 229, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 363, 367, 368, 369, 370, 371, 372, 373, 374, 415, 421, 426, 445, 446, 447, 448, 457, 466, 468, 470], "i": [0, 2, 4, 6, 9, 10, 11, 14, 15, 16, 18, 20, 21, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 101, 102, 103, 104, 105, 107, 110, 114, 115, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 172, 173, 174, 175, 177, 178, 180, 186, 187, 188, 189, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 210, 213, 214, 216, 217, 219, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 469, 479, 480, 482], "made": [0, 21, 100, 107, 124, 145, 148, 149, 154, 165, 168, 169, 171, 174, 176, 177, 216, 222, 291, 292, 293, 294, 296, 297, 384, 441, 482], "avail": [0, 3, 15, 23, 24, 31, 39, 42, 62, 74, 79, 88, 93, 100, 105, 107, 117, 124, 142, 147, 154, 156, 159, 162, 164, 168, 170, 173, 176, 177, 187, 191, 197, 208, 211, 216, 219, 222, 225, 235, 239, 242, 248, 256, 265, 267, 269, 274, 296, 297, 326, 431, 436, 464, 480, 482], "commun": [0, 114, 169, 175, 177, 186, 196, 216, 256, 480], "peopl": [0, 6, 136, 139, 140, 141, 142, 143, 144, 154, 168, 169], "which": [0, 3, 6, 9, 12, 14, 15, 21, 22, 23, 25, 29, 30, 32, 33, 34, 36, 37, 40, 42, 44, 47, 49, 51, 58, 61, 65, 66, 67, 68, 74, 75, 78, 83, 88, 90, 93, 97, 99, 107, 114, 116, 117, 122, 123, 124, 126, 127, 132, 133, 136, 137, 138, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 159, 160, 161, 162, 164, 166, 167, 168, 169, 170, 171, 174, 176, 177, 179, 180, 181, 187, 191, 234, 241, 243, 244, 246, 247, 250, 251, 256, 270, 271, 272, 273, 277, 278, 279, 281, 291, 292, 293, 294, 295, 296, 297, 298, 299, 310, 313, 314, 315, 316, 322, 323, 330, 331, 336, 338, 340, 345, 351, 356, 360, 362, 363, 368, 369, 370, 371, 372, 373, 374, 377, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 431, 432, 433, 434, 435, 436, 437, 438, 441, 446, 448, 449, 450, 458, 464, 479, 480], "origin": [0, 6, 36, 40, 41, 49, 50, 65, 68, 70, 83, 88, 92, 99, 124, 133, 146, 148, 149, 154, 158, 166, 168, 177, 181, 191, 196, 208, 227, 228, 229, 248, 256, 260, 265, 274, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 340, 360, 367, 368, 369, 370, 371, 372, 373, 374, 420, 435, 437, 438, 442, 444, 445, 446, 447, 448, 460], "from": [0, 4, 6, 7, 8, 9, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 94, 95, 96, 98, 100, 101, 102, 103, 106, 107, 108, 110, 111, 113, 114, 115, 118, 119, 121, 122, 123, 124, 125, 126, 127, 129, 132, 135, 136, 139, 140, 142, 147, 148, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 164, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 183, 186, 187, 189, 190, 191, 194, 196, 197, 198, 199, 205, 206, 207, 208, 210, 212, 214, 219, 220, 221, 226, 227, 228, 229, 231, 235, 236, 237, 239, 241, 242, 243, 244, 246, 247, 248, 250, 251, 253, 255, 256, 257, 259, 260, 261, 263, 264, 265, 267, 269, 270, 271, 272, 273, 274, 275, 280, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 305, 306, 312, 313, 314, 315, 316, 317, 320, 322, 323, 326, 330, 336, 337, 338, 340, 341, 343, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 419, 420, 422, 424, 425, 426, 428, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 444, 445, 446, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 472, 474, 479, 480, 481, 482], "inria": [0, 44, 114, 159, 167, 197, 213, 242, 245, 448], "mind": [0, 51, 161, 162, 169, 174], "project": [0, 8, 9, 15, 23, 24, 27, 42, 58, 74, 107, 110, 112, 114, 132, 134, 136, 144, 148, 149, 154, 168, 170, 175, 186, 189, 191, 194, 197, 215, 216, 217, 235, 240, 267, 274, 280, 298, 299, 341, 388, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 426, 429, 431, 435, 436, 437, 438, 439, 440, 443, 460, 464, 479, 481], "grew": 0, "much": [0, 3, 24, 40, 42, 51, 76, 78, 98, 99, 139, 154, 161, 168, 169, 171, 176, 198, 253, 345, 356, 464], "further": [0, 14, 15, 55, 65, 68, 83, 93, 115, 155, 163, 165, 168, 177, 179, 183, 191, 220, 270, 323, 336, 364, 398, 471, 472, 479, 482], "an": [0, 2, 3, 4, 11, 14, 15, 16, 20, 21, 22, 23, 25, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 54, 55, 56, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 74, 78, 79, 82, 83, 87, 88, 90, 91, 93, 95, 99, 100, 101, 102, 104, 107, 112, 114, 116, 117, 123, 124, 125, 126, 127, 130, 131, 132, 134, 135, 136, 137, 139, 142, 144, 145, 146, 147, 149, 151, 152, 154, 155, 156, 157, 159, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 176, 177, 179, 180, 181, 186, 187, 188, 193, 194, 205, 207, 213, 216, 223, 227, 228, 229, 233, 237, 240, 241, 245, 251, 256, 265, 266, 268, 270, 272, 274, 275, 285, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 310, 312, 313, 314, 315, 316, 319, 323, 330, 332, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 350, 351, 352, 353, 355, 356, 357, 358, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 456, 458, 460, 461, 462, 464, 468, 481, 482], "up": [0, 3, 6, 33, 36, 47, 83, 85, 88, 93, 97, 102, 114, 123, 125, 126, 139, 140, 142, 147, 149, 154, 158, 164, 165, 167, 168, 170, 171, 172, 174, 177, 181, 191, 222, 275, 310, 313, 337, 384, 420, 445, 464, 482], "date": [0, 148, 154, 238, 241, 260, 270, 272], "list": [0, 2, 3, 6, 9, 14, 15, 16, 21, 30, 33, 44, 47, 48, 49, 51, 53, 55, 58, 61, 62, 69, 70, 71, 74, 75, 78, 79, 84, 93, 98, 99, 100, 102, 107, 110, 116, 117, 123, 125, 126, 127, 130, 132, 133, 134, 138, 139, 142, 148, 149, 151, 152, 154, 155, 161, 169, 176, 177, 179, 180, 181, 190, 205, 208, 212, 214, 219, 224, 227, 228, 229, 231, 233, 234, 235, 237, 238, 241, 243, 244, 245, 246, 247, 249, 250, 252, 253, 256, 257, 259, 262, 263, 264, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 305, 318, 320, 321, 323, 325, 326, 330, 336, 337, 338, 339, 341, 342, 350, 351, 353, 356, 358, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 425, 428, 429, 431, 432, 435, 436, 437, 438, 443, 444, 446, 448, 449, 450, 451, 452, 457, 458, 460, 462, 463, 464, 466, 480], "can": [0, 2, 3, 4, 6, 9, 11, 12, 14, 15, 20, 21, 22, 23, 24, 25, 29, 30, 32, 33, 34, 39, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 61, 62, 64, 65, 66, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 85, 87, 88, 90, 91, 92, 93, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 110, 114, 115, 116, 117, 123, 124, 126, 127, 130, 132, 134, 139, 140, 142, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 179, 180, 181, 187, 196, 197, 213, 214, 217, 228, 229, 231, 234, 235, 238, 241, 242, 243, 244, 245, 246, 247, 251, 265, 267, 270, 274, 291, 292, 293, 294, 295, 296, 297, 313, 315, 316, 323, 325, 326, 330, 336, 338, 341, 342, 343, 348, 351, 352, 353, 356, 357, 360, 361, 364, 365, 370, 373, 376, 377, 378, 379, 380, 381, 383, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 424, 425, 426, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 446, 448, 449, 450, 456, 457, 458, 459, 460, 464, 466, 479, 480, 482], "seen": [0, 3, 14, 41, 49, 116, 156, 158, 162, 164, 166, 171, 176, 177, 446, 479], "github": [0, 23, 33, 36, 49, 52, 53, 58, 62, 74, 76, 110, 147, 151, 154, 169, 176, 177, 186, 215, 219, 247, 260, 365, 442, 465, 479, 480], "addit": [0, 14, 15, 55, 63, 65, 67, 68, 78, 85, 88, 100, 116, 117, 119, 124, 134, 139, 145, 154, 161, 164, 168, 170, 174, 176, 177, 235, 237, 259, 269, 291, 292, 293, 294, 298, 299, 311, 323, 330, 336, 338, 361, 364, 365, 367, 370, 373, 445, 446, 447, 456, 479], "credit": 0, "goe": [0, 14, 40, 85, 93, 99, 168, 228, 231], "michael": [0, 23, 37, 51, 98, 114, 118, 122, 127, 139, 154, 167, 176, 189, 190, 215, 217, 238, 246, 280, 365], "hank": [0, 122, 127, 154], "yaroslav": [0, 136, 139, 154], "halchenko": [0, 136, 139, 154], "data": [0, 1, 2, 7, 18, 20, 24, 26, 28, 31, 34, 36, 43, 45, 46, 50, 51, 53, 58, 59, 60, 63, 64, 66, 68, 70, 72, 75, 76, 77, 78, 79, 80, 83, 85, 89, 90, 91, 94, 98, 100, 101, 103, 104, 105, 107, 110, 112, 114, 115, 117, 123, 124, 125, 126, 129, 132, 133, 134, 135, 136, 137, 139, 140, 142, 145, 146, 147, 149, 150, 151, 154, 156, 157, 159, 162, 163, 165, 167, 168, 169, 170, 172, 173, 174, 175, 176, 178, 186, 187, 189, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 227, 228, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 291, 292, 293, 294, 295, 296, 297, 298, 299, 304, 305, 306, 308, 310, 313, 314, 323, 330, 331, 332, 336, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 420, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 458, 460, 462, 464, 466, 467, 468, 470, 479, 481, 482], "packag": [0, 3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 69, 70, 71, 76, 77, 78, 85, 91, 93, 94, 97, 99, 100, 101, 103, 104, 105, 107, 110, 121, 122, 123, 124, 126, 139, 142, 147, 149, 154, 169, 171, 176, 177, 179, 226, 243, 244, 479], "The": [0, 2, 3, 11, 14, 15, 17, 18, 19, 20, 21, 22, 23, 28, 29, 30, 32, 33, 34, 36, 40, 41, 42, 45, 47, 48, 49, 51, 52, 54, 55, 58, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 74, 75, 76, 78, 79, 80, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 103, 105, 107, 110, 112, 114, 116, 117, 119, 120, 121, 123, 124, 126, 127, 129, 130, 131, 132, 133, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 158, 159, 160, 162, 163, 164, 165, 166, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 185, 186, 187, 190, 191, 193, 194, 196, 199, 205, 206, 208, 209, 210, 215, 216, 217, 219, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 246, 247, 248, 250, 251, 256, 257, 259, 260, 261, 263, 264, 265, 267, 268, 270, 271, 272, 273, 274, 275, 276, 279, 280, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 325, 326, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 347, 351, 352, 353, 354, 355, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 464, 466, 470, 471, 475, 479, 480, 481, 482], "ar": [0, 2, 3, 4, 6, 9, 10, 14, 19, 20, 21, 23, 24, 26, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 76, 77, 78, 79, 80, 83, 85, 86, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 112, 114, 116, 117, 121, 123, 124, 125, 126, 132, 134, 135, 137, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 179, 180, 181, 187, 188, 189, 191, 193, 194, 196, 197, 207, 208, 210, 214, 219, 223, 224, 225, 226, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 274, 275, 276, 277, 278, 279, 280, 281, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 310, 313, 314, 315, 316, 319, 320, 323, 325, 326, 330, 332, 336, 338, 340, 341, 345, 347, 353, 355, 356, 357, 358, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 454, 455, 456, 457, 458, 460, 462, 463, 464, 466, 474, 479, 480], "alexi": [0, 23, 114, 123, 124, 139, 142, 147, 149, 151, 154, 215, 280], "thual": [0, 123, 124, 147, 149, 151, 154], "bertrand": [0, 44, 48, 49, 51, 71, 98, 114, 118, 121, 125, 127, 132, 136, 139, 140, 142, 149, 150, 154, 155, 158, 159, 160, 161, 163, 167, 176, 193, 197, 213, 227, 228, 242, 245, 265, 293, 294, 298, 299, 447, 448, 453], "thirion": [0, 44, 48, 49, 51, 71, 98, 114, 118, 121, 125, 127, 132, 136, 139, 140, 142, 149, 150, 154, 155, 158, 159, 160, 161, 163, 167, 176, 193, 197, 213, 227, 228, 242, 245, 265, 293, 294, 298, 299, 447, 448, 453], "elizabeth": [0, 114, 136, 140, 142, 143, 144, 154, 315, 316], "dupr": [0, 136, 140, 142, 143, 144, 154], "hao": [0, 123, 124, 125, 126, 146, 147, 149, 151, 154], "ting": [0, 123, 124, 125, 126, 146, 147, 149, 151, 154], "wang": [0, 114, 123, 124, 125, 126, 146, 147, 149, 151, 154, 216, 274], "himanshu": 0, "aggarw": 0, "jerom": [0, 125, 126, 132, 136, 138, 139, 140, 142, 143, 151, 154], "dock": [0, 125, 126, 132, 136, 138, 139, 140, 142, 143, 151, 154], "nicola": [0, 114, 126, 146, 147, 148, 149, 150, 151, 154, 187, 221, 248, 267], "gensollen": [0, 126, 146, 147, 148, 149, 150, 151, 154], "r\u00e9mi": [0, 124, 125, 126, 136, 152, 154], "gau": [0, 124, 125, 126, 152, 154], "taylor": [0, 114, 123, 124, 125, 126, 146, 149, 150, 151, 154, 167], "salo": [0, 123, 124, 125, 126, 146, 149, 150, 151, 154], "some": [0, 3, 6, 14, 15, 30, 40, 41, 48, 49, 56, 65, 66, 67, 69, 79, 83, 85, 91, 97, 102, 103, 116, 117, 125, 132, 139, 145, 148, 149, 151, 154, 161, 162, 164, 166, 168, 169, 171, 173, 176, 177, 179, 180, 181, 219, 225, 226, 227, 228, 229, 235, 241, 243, 244, 246, 247, 250, 270, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 313, 323, 336, 339, 341, 363, 367, 368, 369, 370, 371, 372, 373, 374, 426, 427, 430, 433, 434, 441, 445, 446, 447, 448, 451, 457, 460, 479, 480], "past": [0, 56, 116, 156, 365], "present": [0, 3, 6, 40, 41, 54, 56, 64, 67, 68, 100, 107, 116, 124, 135, 154, 159, 160, 161, 168, 170, 171, 172, 177, 179, 181, 208, 209, 210, 222, 231, 235, 241, 259, 291, 292, 293, 294, 298, 299, 351, 364, 365, 369, 370, 371, 372, 373, 445, 446, 447, 451, 466], "ahmad": [0, 123, 124, 125, 148, 149, 151, 154], "chamma": [0, 123, 124, 125, 148, 149, 151, 154], "saclai": [0, 169], "franc": [0, 169], "aina": [0, 127, 154], "frau": [0, 127, 154], "pascual": [0, 127, 154], "alex": [0, 56, 114, 136, 139, 154, 156, 166, 207, 260, 365], "rothberg": [0, 136, 139, 154], "free": [0, 114, 162, 169, 171, 174, 338, 384], "agenc": 0, "new": [0, 2, 3, 10, 11, 20, 36, 49, 65, 70, 71, 78, 83, 85, 93, 97, 101, 106, 114, 116, 122, 133, 134, 135, 136, 137, 150, 161, 162, 163, 164, 169, 174, 176, 177, 180, 181, 222, 226, 227, 228, 229, 233, 234, 239, 242, 244, 247, 249, 250, 255, 256, 257, 261, 262, 270, 272, 280, 282, 283, 284, 285, 286, 287, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 315, 316, 323, 326, 332, 336, 338, 340, 341, 350, 351, 352, 353, 354, 355, 356, 357, 360, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 419, 420, 421, 422, 424, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 445, 446, 447, 448, 449, 450, 456, 457, 460, 464, 479, 480], "york": [0, 114, 315, 316], "usa": 0, "alexandr": [0, 44, 49, 51, 98, 114, 118, 119, 121, 122, 125, 127, 129, 132, 139, 141, 142, 154, 155, 159, 167, 213, 228, 245, 448], "abadi": [0, 127, 129, 132, 139, 154], "pari": [0, 169], "abraham": [0, 51, 98, 114, 118, 119, 121, 122, 127, 129, 132, 142, 154, 159, 191, 364, 365, 448], "bazemont": 0, "\u00eele": 0, "de": [0, 114, 139, 142, 154, 187, 315, 316, 331], "gramfort": [0, 44, 49, 114, 118, 121, 141, 142, 154, 155, 167, 213, 228, 245], "meta": [0, 3, 14, 96, 99, 102, 108, 112, 117, 198, 218, 227, 228, 229, 272, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 346, 351, 352, 354, 367, 368, 369, 370, 371, 372, 373, 374, 426, 434, 439, 445, 446, 447, 448, 481], "savio": [0, 118, 154], "cionca": [0, 125, 154], "centr": 0, "hospitali": 0, "universitair": 0, "vaudois": 0, "lausann": 0, "switzerland": 0, "alisha": [0, 125, 154], "kodibagkar": [0, 125, 154], "mit": [0, 114, 216, 219, 221, 247, 248, 274], "mcgovern": 0, "institut": [0, 171, 174, 187, 188, 191, 215, 216, 237], "cambridg": [0, 191], "massachusett": 0, "unit": [0, 6, 15, 55, 57, 114, 159, 161, 167, 168, 169, 181, 295, 315, 316, 338, 341, 368, 369, 370, 371, 372, 373, 374, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 460], "state": [0, 2, 23, 30, 32, 48, 49, 50, 51, 54, 56, 65, 84, 86, 88, 91, 98, 99, 114, 125, 134, 145, 147, 154, 155, 156, 158, 159, 160, 162, 167, 171, 174, 176, 177, 186, 187, 189, 190, 191, 194, 198, 213, 215, 220, 221, 235, 236, 238, 239, 267, 280, 291, 292, 293, 294, 295, 298, 299, 323, 332, 338, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 446, 448, 460, 466, 482], "amadeu": [0, 47, 132, 154], "kanaan": [0, 47, 132, 154], "ana": [0, 142, 146, 148, 154], "luisa": [0, 142, 146, 148, 154], "pinho": [0, 142, 146, 148, 154], "western": 0, "univers": [0, 174, 176, 216], "london": [0, 114, 174, 257, 275], "ontario": 0, "canada": 0, "andr\u00e9": [0, 114, 142, 154, 163, 176, 195, 241, 293, 294], "hoyo": [0, 49, 114, 142, 154, 161, 163, 293, 294, 447, 453], "idrobo": [0, 49, 114, 142, 154, 161, 163, 293, 294, 447, 453], "rakuten": 0, "ann": [0, 58, 114, 124, 154, 198, 218, 253, 254], "sophi": [0, 124, 154], "kiesling": [0, 124, 154], "max": [0, 11, 30, 34, 42, 44, 49, 53, 55, 57, 58, 68, 79, 83, 87, 101, 102, 104, 110, 114, 147, 154, 155, 168, 227, 356, 357, 384, 388, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 419, 420, 424, 426, 427, 429, 432, 433, 434, 435, 437, 438, 441, 442, 444], "planck": 0, "human": [0, 8, 22, 23, 27, 31, 32, 39, 40, 41, 43, 58, 66, 70, 112, 114, 117, 166, 169, 174, 186, 191, 194, 195, 199, 200, 201, 202, 203, 204, 205, 212, 214, 217, 218, 219, 224, 225, 235, 240, 241, 246, 247, 249, 250, 251, 254, 267, 269, 270, 272, 279, 341, 365, 431, 439, 460, 481], "cognit": [0, 71, 99, 102, 114, 161, 171, 174, 176, 181, 193, 211, 216, 221, 222, 248, 257, 265, 268, 274, 275], "brain": [0, 2, 3, 4, 6, 9, 12, 15, 20, 21, 22, 23, 27, 31, 32, 36, 37, 39, 41, 43, 44, 46, 52, 54, 55, 59, 65, 67, 68, 70, 75, 77, 78, 79, 84, 88, 91, 93, 95, 97, 99, 103, 106, 114, 116, 117, 124, 127, 130, 132, 133, 134, 136, 137, 139, 140, 142, 145, 147, 148, 154, 155, 157, 161, 162, 163, 164, 166, 167, 169, 170, 171, 174, 175, 176, 179, 181, 186, 187, 188, 191, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 216, 217, 218, 220, 221, 222, 224, 227, 228, 235, 237, 239, 240, 242, 243, 245, 246, 248, 250, 253, 254, 255, 256, 259, 260, 261, 267, 269, 270, 272, 273, 274, 279, 282, 285, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 318, 341, 343, 346, 348, 353, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 417, 418, 421, 424, 426, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 448, 449, 450, 451, 456, 460, 466, 472, 480, 481, 482], "scienc": [0, 3, 22, 23, 31, 32, 37, 38, 40, 41, 49, 51, 56, 58, 97, 98, 101, 114, 155, 156, 163, 166, 167, 176, 187, 188, 191, 193, 195, 198, 206, 207, 211, 212, 213, 215, 220, 221, 227, 237, 239, 245, 248, 249, 253, 255, 256, 259, 260, 265, 267, 268, 269, 280, 285, 293, 294, 295, 364, 365, 384, 420, 461, 482], "leipzig": 0, "germnai": 0, "ariel": [0, 127, 139, 154], "rokem": [0, 127, 139, 154], "washington": [0, 216], "psychologi": 0, "seattl": 0, "98107": 0, "arthur": [0, 48, 114, 122, 127, 129, 132, 154, 160, 197, 242, 299], "mensch": [0, 48, 114, 122, 127, 129, 132, 154, 160, 197, 242, 299], "aswin": [0, 125, 154], "vijayan": [0, 125, 154], "audrei": [0, 123, 154], "duran": [0, 123, 154], "therapanacea": 0, "ben": [0, 56, 114, 118, 119, 121, 127, 129, 154, 365], "cipollini": [0, 118, 119, 121, 127, 129, 154], "facebook": 0, "hayward": 0, "california": 0, "binh": [0, 142, 145, 147, 154], "nguyen": [0, 142, 145, 147, 154], "caglar": [0, 151, 154], "cakan": [0, 151, 154], "technisch": 0, "universit\u00e4t": 0, "berlin": [0, 114, 155, 207, 213, 227, 245, 260], "germani": [0, 114, 167], "chri": [0, 118, 127, 142, 154], "gorgolewski": [0, 114, 117, 118, 127, 154, 197, 214, 242, 257, 270, 272, 275], "googl": 0, "llc": 0, "markiewicz": [0, 142, 154], "stanford": [0, 114, 167], "christian": [0, 114, 124, 136, 139, 154, 155, 187, 221, 248, 267, 364, 365], "horea": [0, 136, 139, 154], "dartmouth": 0, "colleg": [0, 174], "pb": 0, "hanov": 0, "hampshir": 0, "gerloff": [0, 124, 154], "christina": [0, 58, 114, 126, 154, 198, 253], "ro\u00dfmanith": [0, 126, 154], "dept": 0, "neurologi": [0, 222], "medic": [0, 44, 114, 155, 159, 167, 188, 189, 207, 213, 216, 227, 245, 260, 448], "faculti": 0, "mannheim": 0, "heidelberg": [0, 114, 155, 207, 213, 227, 245, 260], "colin": [0, 142, 154], "reining": [0, 142, 154], "denver": 0, "colorado": 0, "connor": [0, 151, 154], "lane": [0, 114, 151, 154, 384], "child": [0, 51, 256], "baltimor": 0, "md": [0, 247], "czarina": [0, 125, 154], "sy": [0, 41, 125, 154], "c\u00e9line": [0, 142, 154], "delettr": [0, 142, 154], "dan": [0, 114, 139, 142, 154, 224, 250], "gale": [0, 139, 142, 154], "neurosci": [0, 23, 49, 65, 71, 114, 158, 166, 174, 176, 186, 187, 190, 193, 215, 216, 221, 235, 238, 248, 265, 267, 274, 280, 482], "studi": [0, 2, 6, 9, 31, 33, 40, 42, 56, 65, 69, 74, 96, 98, 108, 112, 114, 117, 157, 162, 164, 165, 167, 168, 171, 175, 179, 188, 191, 198, 206, 207, 212, 216, 223, 239, 260, 270, 272, 274, 282, 285, 295, 346, 351, 352, 354, 358, 364, 365, 367, 373, 426, 434, 439, 481, 482], "queen": 0, "kingston": 0, "daniel": [0, 23, 56, 114, 139, 142, 148, 151, 154, 187, 214, 215, 216, 267, 270, 272, 274, 280, 364, 365], "gomez": [0, 139, 142, 148, 151, 154], "danilo": [0, 118, 119, 121, 122, 127, 129, 154], "bzdok": [0, 118, 119, 121, 122, 127, 129, 154], "mcgill": [0, 114, 191, 207, 260], "mila": 0, "quebec": 0, "ai": 0, "montr\u00e9al": [0, 176], "david": [0, 23, 56, 114, 117, 151, 154, 176, 187, 195, 205, 214, 215, 221, 241, 248, 267, 270, 272, 280, 364, 365, 384], "g": [0, 6, 9, 14, 22, 24, 30, 31, 40, 42, 43, 47, 48, 55, 61, 66, 93, 98, 99, 104, 114, 117, 124, 147, 151, 154, 156, 166, 168, 169, 170, 171, 173, 174, 176, 180, 181, 187, 188, 194, 197, 216, 224, 227, 228, 229, 240, 250, 267, 274, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 315, 316, 323, 330, 336, 340, 343, 360, 364, 367, 368, 369, 370, 371, 372, 373, 374, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 421, 429, 432, 435, 436, 437, 438, 440, 441, 442, 444, 445, 446, 447, 448, 451, 452, 454, 464, 479], "elli": [0, 151, 154], "nebraska": 0, "center": [0, 14, 36, 47, 50, 51, 55, 58, 61, 78, 98, 104, 105, 140, 151, 154, 156, 159, 181, 188, 205, 209, 216, 227, 229, 291, 292, 293, 294, 295, 296, 297, 298, 299, 323, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 418, 420, 445, 446, 448, 457, 464], "demian": [0, 114, 121, 139, 154, 197, 242], "wassermann": [0, 114, 121, 139, 154, 197, 242], "derek": [0, 142, 154], "pisner": [0, 142, 154], "st": 0, "petersburg": 0, "fl": 0, "dimitri": [0, 114, 123, 127, 139, 154, 159, 168, 169, 193, 228, 231, 265, 448], "papadopoulo": [0, 114, 123, 127, 139, 154, 169, 193, 265], "orfano": [0, 114, 123, 127, 139, 154, 169, 193, 265], "neurospin": [0, 60, 64, 72, 112, 169, 170, 210, 425, 481], "cea": [0, 193], "universit\u00e9": [0, 169], "gif": [0, 169], "sur": [0, 169], "yvett": [0, 169], "elvi": [0, 49, 114, 118, 121, 127, 129, 132, 154, 158, 159, 167, 448], "dohmatob": [0, 49, 114, 118, 121, 127, 129, 132, 154, 158, 159, 167, 448], "research": [0, 114, 174, 179, 181, 186, 187, 189, 191, 193, 196, 197, 205, 213, 216, 217, 256, 365], "fair": [0, 58, 114, 160, 198, 253], "eric": [0, 22, 23, 58, 114, 136, 139, 140, 142, 152, 154, 195, 198, 241, 249, 253], "larson": [0, 136, 139, 140, 142, 152, 154], "evan": [0, 114, 147, 154, 188, 191, 207, 219, 224, 239, 247, 250, 260, 285], "edmond": [0, 147, 154], "oxford": [0, 21, 90, 114, 156, 183, 235, 243, 315, 316, 416, 417], "uk": [0, 114, 167, 205, 208, 221, 222, 223, 248, 277, 278], "fabian": [0, 114, 118, 154, 213, 245], "pedregosa": [0, 114, 118, 154, 213, 245], "geneva": 0, "florent": [0, 114, 152, 154, 195, 205, 241], "pollet": [0, 152, 154], "en": [0, 56, 171, 186, 188, 212, 237, 365, 368], "franz": [0, 55, 140, 142, 144, 154], "liem": [0, 55, 140, 142, 144, 154], "fran\u00e7oi": [0, 125, 154], "paugam": [0, 125, 154], "gael": [0, 48, 49, 114, 118, 119, 121, 122, 127, 129, 132, 136, 139, 140, 141, 142, 144, 154, 155, 159, 160, 213, 214, 227, 228, 245, 270, 272, 298, 299, 447, 448, 453], "varoquaux": [0, 44, 48, 49, 51, 56, 98, 114, 117, 118, 119, 121, 122, 127, 129, 132, 136, 139, 140, 141, 142, 144, 154, 155, 156, 158, 159, 160, 161, 163, 167, 197, 213, 214, 227, 228, 242, 245, 270, 272, 293, 294, 298, 299, 447, 448, 453], "gill": [0, 139, 142, 154], "holland": [0, 139, 142, 154], "vrije": 0, "universiteit": 0, "amsterdam": 0, "netherland": 0, "greg": [0, 139, 142, 154], "kiar": [0, 142, 154], "greydon": [0, 147, 154], "gilmor": [0, 147, 154], "depart": [0, 174, 222], "mathemat": [0, 130, 154, 174, 352, 468], "toronto": 0, "guillaum": [0, 70, 114, 139, 142, 154, 199], "lemaitr": [0, 139, 142, 154], "geriatr": 0, "criugm": 0, "ian": [0, 142, 154], "aben": [0, 142, 154], "jake": [0, 142, 154], "vogel": [0, 58, 114, 142, 154, 198, 218, 253, 254], "clinic": [0, 51, 98, 162, 176], "scilifelab": 0, "lund": 0, "sweden": 0, "jan": [0, 114, 118, 154, 364, 365], "margeta": [0, 118, 154], "kardiom": 0, "nova": 0, "dubnica": 0, "slovakia": 0, "jaqu": [0, 118, 154], "grobler": [0, 118, 154], "anylin": 0, "gmbh": 0, "vienna": 0, "austria": 0, "jason": [0, 118, 139, 154], "gor": [0, 118, 139, 154], "insight": [0, 56, 148, 154, 155], "mountain": 0, "view": [0, 6, 13, 14, 16, 22, 23, 33, 37, 42, 52, 54, 58, 61, 62, 65, 69, 70, 74, 83, 101, 124, 125, 136, 145, 147, 151, 152, 154, 161, 166, 168, 176, 177, 181, 223, 291, 292, 293, 294, 298, 299, 356, 370, 373, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 421, 424, 426, 427, 429, 430, 432, 433, 434, 435, 437, 438, 440, 441, 443, 446, 479, 482], "javier": [0, 147, 154], "rasero": [0, 147, 154], "school": [0, 216], "virginia": 0, "viginia": 0, "jean": [0, 48, 49, 70, 71, 114, 118, 136, 139, 154, 155, 158, 160, 168, 193, 199, 205, 214, 228, 231, 265, 270, 272, 298], "kossaifi": [0, 118, 154], "imperi": 0, "king": [0, 23, 114, 136, 139, 154, 215, 280], "cnr": [0, 188, 237], "jell": [0, 75, 114, 123, 124, 154, 318], "roelof": [0, 123, 124, 154], "dalenberg": [0, 123, 124, 154], "groningen": 0, "jeremi": [0, 147, 154], "lefort": [0, 147, 154], "besnard": [0, 147, 154], "renn": 0, "origami": 0, "lab": 0, "chevali": [0, 139, 142, 154], "emerton": 0, "johann": [0, 142, 154], "wiesner": [0, 142, 154], "central": [0, 90, 235], "mental": [0, 65, 67, 71, 80, 114, 176, 193, 265, 271], "health": 0, "jon": [0, 144, 154], "haitz": [0, 144, 154], "legarreta": [0, 144, 154], "gorrono": [0, 144, 154], "brigham": 0, "women": 0, "": [0, 2, 3, 4, 6, 9, 16, 23, 29, 30, 33, 34, 40, 41, 44, 49, 50, 55, 56, 64, 65, 66, 67, 69, 70, 71, 74, 76, 77, 78, 79, 85, 90, 92, 93, 99, 101, 102, 107, 114, 117, 126, 132, 139, 149, 150, 155, 158, 162, 165, 166, 168, 169, 171, 172, 173, 174, 176, 177, 179, 180, 181, 186, 187, 188, 189, 190, 191, 193, 194, 197, 198, 205, 208, 212, 213, 214, 216, 218, 220, 221, 224, 225, 227, 228, 229, 237, 239, 240, 248, 250, 251, 253, 254, 260, 265, 267, 270, 272, 274, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 313, 315, 316, 323, 336, 340, 341, 350, 352, 356, 357, 358, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 420, 421, 429, 430, 435, 436, 437, 438, 440, 442, 444, 445, 446, 447, 448, 458, 460, 465, 479, 482], "hospit": 0, "mass": [0, 58, 78, 151, 154, 338, 384, 416, 457], "gener": [0, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 69, 72, 73, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 110, 112, 116, 123, 125, 126, 139, 140, 142, 144, 145, 147, 149, 152, 154, 161, 162, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 181, 191, 194, 207, 212, 220, 239, 240, 242, 265, 275, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 313, 315, 316, 323, 330, 336, 338, 339, 340, 341, 346, 352, 353, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 382, 384, 425, 429, 434, 435, 436, 437, 438, 439, 445, 446, 448, 456, 460, 466, 470, 479, 480, 481], "harvard": [0, 21, 90, 156, 183, 216, 225, 235, 243, 251, 416, 417], "boston": 0, "jona": [0, 49, 114, 136, 154, 447, 453], "sassenhagen": [0, 136, 154], "jordi": [0, 126, 154], "huguet": [0, 126, 154], "barcelonabeta": 0, "joshua": [0, 114, 144, 154, 219, 225, 247, 251], "teve": [0, 144, 154], "julia": [0, 127, 142, 154], "huntenburg": [0, 127, 142, 154], "intern": [0, 34, 48, 114, 160, 167, 168, 169, 171, 186, 191, 217, 229, 239, 298, 299, 350, 352], "laboratori": 0, "julio": [0, 124, 154], "A": [0, 1, 5, 6, 7, 11, 15, 16, 21, 40, 42, 47, 48, 49, 56, 58, 61, 67, 69, 70, 74, 78, 79, 83, 85, 88, 97, 99, 101, 104, 105, 109, 111, 112, 113, 114, 117, 124, 134, 135, 139, 142, 148, 154, 155, 157, 158, 160, 162, 164, 165, 166, 168, 169, 170, 172, 174, 176, 177, 179, 180, 181, 187, 188, 190, 191, 193, 194, 195, 197, 198, 205, 211, 214, 217, 218, 219, 220, 221, 222, 224, 227, 228, 229, 238, 240, 241, 246, 248, 250, 253, 254, 255, 257, 259, 267, 268, 270, 271, 272, 273, 275, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 314, 315, 316, 319, 322, 323, 326, 332, 336, 341, 342, 348, 353, 354, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 395, 396, 400, 416, 417, 420, 424, 429, 431, 433, 435, 436, 439, 441, 445, 446, 447, 448, 449, 450, 455, 456, 458, 459, 460, 461, 466, 479, 481, 482], "peraza": [0, 124, 154], "florida": 0, "miami": 0, "kamalakar": [0, 121, 127, 129, 132, 136, 137, 139, 142, 146, 154], "reddi": [0, 114, 121, 127, 129, 132, 136, 137, 138, 139, 142, 146, 154, 161], "daddi": [0, 121, 127, 129, 132, 136, 137, 139, 142, 146, 154], "kevin": [0, 124, 154], "sitek": [0, 124, 154], "northwestern": 0, "evanston": 0, "ilinoi": 0, "koen": [0, 151, 154], "helwegen": [0, 151, 154], "dutch": 0, "connectom": [0, 8, 12, 22, 27, 46, 48, 49, 51, 54, 56, 57, 59, 98, 110, 112, 114, 119, 127, 131, 132, 136, 139, 140, 142, 145, 147, 154, 157, 159, 160, 174, 175, 176, 181, 186, 187, 189, 191, 213, 235, 242, 245, 251, 253, 254, 256, 267, 298, 299, 348, 365, 367, 368, 369, 371, 372, 374, 397, 416, 417, 418, 419, 421, 430, 431, 432, 434, 439, 440, 441, 443, 448, 456, 466, 481, 482], "vu": 0, "konrad": [0, 125, 154], "wagstyl": [0, 125, 154], "konstantin": [0, 118, 154], "shmelkov": [0, 118, 154], "kshitij": [0, 139, 140, 141, 142, 143, 144, 145, 154], "chawla": [0, 139, 140, 141, 142, 143, 144, 145, 154], "duke": 0, "system": [0, 6, 23, 42, 43, 114, 161, 168, 169, 177, 179, 190, 195, 200, 201, 202, 203, 204, 205, 212, 222, 238, 279, 281], "kun": [0, 151, 154], "chen": [0, 37, 114, 151, 154, 187, 267], "macau": 0, "china": 0, "leonard": [0, 149, 154], "sass": [0, 149, 154], "loic": [0, 118, 119, 121, 122, 127, 129, 132, 142, 154], "est\u00e8v": [0, 118, 119, 121, 122, 127, 129, 132, 154], "tetrel": [0, 142, 154], "luz": 0, "paz": 0, "manon": [0, 151, 154], "pietrantoni": [0, 151, 154], "martin": [0, 23, 114, 127, 132, 146, 154, 190, 195, 200, 201, 202, 203, 204, 207, 238, 260, 279, 341, 460], "perez": [0, 127, 132, 154], "guevara": [0, 127, 132, 154], "criteo": 0, "wegrzyn": [0, 146, 154], "bielefeld": 0, "mathia": [0, 124, 154], "goncalv": [0, 124, 154], "mathieu": [0, 125, 154], "dugr\u00e9": [0, 125, 154], "concordia": 0, "matthia": [0, 118, 154], "ekman": [0, 118, 154], "donder": 0, "nijmegen": 0, "matthieu": [0, 151, 154], "joulot": [0, 151, 154], "arami": 0, "maximilian": [0, 125, 154], "cosmo": [0, 125, 154], "sitter": [0, 125, 154], "mehdi": [0, 51, 98, 114, 118, 122, 127, 136, 142, 154], "rahim": [0, 51, 98, 114, 118, 122, 127, 136, 142, 154], "air": 0, "liquid": 0, "mia": [0, 126, 154], "zwalli": [0, 126, 154], "dsst": 0, "nation": [0, 114, 166, 176, 187, 191, 221, 248, 267, 295, 365], "eickenberg": [0, 114, 118, 154, 167], "flatiron": 0, "psychoinformat": 0, "forschungszentrum": 0, "j\u00fclich": 0, "notter": [0, 139, 154], "am": [0, 114, 195, 241], "osram": 0, "martigni": 0, "waskom": [0, 118, 154], "michel": [0, 23, 44, 49, 114, 118, 124, 125, 126, 154, 167, 176, 193, 213, 215, 245, 265, 280], "mohammad": [0, 124, 125, 126, 154], "torabi": [0, 124, 125, 126, 154], "moritz": [0, 136, 139, 142, 154], "boo": [0, 136, 139, 142, 154], "myeong": [0, 149, 154], "seop": [0, 149, 154], "song": [0, 149, 154], "natasha": [0, 123, 154], "clark": [0, 114, 123, 154, 166, 190, 238], "simexp": [0, 479], "neelai": [0, 149, 154], "shah": [0, 149, 154], "intellig": [0, 83, 114, 189, 191], "nikhil": [0, 126, 154], "krish": [0, 126, 154], "texa": 0, "austin": 0, "oliv": [0, 68, 114, 125, 154, 166, 191, 239], "warrington": [0, 125, 154], "wellcom": [0, 174, 222], "neuroimag": [0, 2, 8, 22, 23, 27, 37, 48, 51, 56, 62, 75, 93, 98, 99, 100, 101, 112, 114, 115, 117, 139, 154, 155, 156, 160, 161, 163, 165, 166, 167, 169, 174, 175, 178, 183, 188, 191, 193, 195, 197, 205, 207, 213, 214, 220, 237, 239, 241, 242, 245, 249, 255, 259, 260, 265, 270, 272, 285, 291, 292, 293, 294, 295, 296, 297, 298, 299, 318, 323, 336, 338, 341, 342, 345, 346, 347, 348, 349, 350, 351, 353, 355, 356, 357, 358, 359, 361, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 420, 424, 426, 427, 429, 432, 433, 434, 439, 441, 442, 446, 448, 451, 452, 454, 455, 458, 461, 464, 470, 479, 481, 482], "ucl": [0, 114, 167, 222, 223, 277, 278], "oscar": [0, 139, 154], "esteban": [0, 139, 154], "patrick": [0, 125, 154], "sadil": [0, 125, 154], "biostatist": [0, 114, 155], "john": [0, 23, 37, 58, 101, 114, 136, 154, 166, 168, 190, 198, 215, 216, 238, 253, 274, 280, 384], "hopkin": 0, "bloomberg": 0, "public": [0, 2, 62, 99, 117, 123, 125, 126, 149, 151, 154, 169, 174, 214, 274], "paul": [0, 114, 123, 125, 154, 187, 194, 205, 240, 267], "bogdan": [0, 123, 154], "reiner": [0, 125, 154], "mason": 0, "minnesota": 0, "paula": [0, 142, 154], "sanz": [0, 142, 154], "leon": [0, 142, 154], "brisban": 0, "australia": 0, "peer": [0, 139, 154, 208], "herholz": [0, 139, 154], "philipp": [0, 48, 70, 71, 114, 118, 154, 160, 193, 199, 265, 298], "gervai": [0, 118, 154], "zurich": 0, "pierr": [0, 114, 136, 138, 139, 140, 154, 155, 191, 227, 239], "bellec": [0, 114, 139, 140, 154, 191, 239], "glaser": [0, 138, 154], "gatsbi": 0, "comput": [0, 3, 6, 9, 15, 16, 22, 25, 29, 30, 31, 33, 39, 40, 41, 43, 44, 46, 47, 48, 49, 51, 61, 62, 63, 64, 65, 66, 67, 69, 71, 74, 76, 78, 80, 82, 84, 89, 91, 94, 97, 98, 99, 100, 101, 102, 103, 107, 112, 114, 115, 117, 125, 127, 139, 145, 146, 147, 149, 154, 157, 158, 160, 161, 162, 163, 164, 166, 167, 168, 171, 172, 174, 175, 176, 178, 179, 182, 227, 229, 231, 245, 256, 259, 269, 279, 291, 292, 293, 294, 295, 296, 297, 298, 299, 311, 313, 315, 316, 319, 320, 322, 323, 325, 330, 332, 336, 338, 339, 346, 347, 348, 351, 352, 353, 354, 358, 360, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 418, 421, 424, 431, 432, 433, 434, 439, 440, 442, 445, 446, 447, 448, 456, 458, 459, 461, 464, 465, 472, 479, 482], "olivi": [0, 136, 154], "quirion": [0, 136, 154], "canadian": 0, "genom": 0, "calcul": [0, 3, 31, 41, 47, 48, 58, 91, 96, 108, 112, 124, 140, 154, 170, 193, 264, 265, 291, 292, 293, 294, 298, 299, 313, 315, 316, 331, 338, 346, 364, 367, 370, 373, 377, 380, 384, 395, 412, 419, 424, 427, 432, 433, 434, 439, 441, 446, 458, 481], "qu\u00e9bec": 0, "pradeep": [0, 114, 138, 154, 161], "raamana": [0, 114, 138, 154, 161], "pittsburgh": 0, "pa": [0, 326], "rahul": [0, 114, 125, 154, 205], "brito": [0, 125, 154], "raphael": [0, 123, 146, 147, 148, 149, 150, 151, 154], "meudec": [0, 123, 146, 147, 148, 149, 150, 151, 154], "robert": [0, 114, 123, 124, 147, 154, 168, 190, 191, 207, 238, 260, 285], "luke": [0, 147, 154], "agencyenterpris": 0, "melbourn": 0, "williamson": [0, 123, 124, 154], "roberto": [0, 114, 132, 142, 154, 221, 248], "guidotti": [0, 132, 142, 154], "d": [0, 26, 41, 50, 51, 56, 58, 69, 75, 99, 114, 117, 155, 159, 168, 169, 176, 188, 191, 197, 198, 207, 214, 218, 221, 237, 248, 253, 254, 257, 260, 270, 272, 275, 285, 311, 318, 341, 364, 365, 420, 431, 460, 468], "annunzio": 0, "chieti": 0, "pescara": 0, "san": 0, "benedetto": 0, "del": [0, 44], "tronto": 0, "itali": 0, "ronald": [0, 118, 154], "phlypo": [0, 118, 154], "lyon": 0, "area": [0, 23, 32, 70, 79, 93, 114, 147, 154, 159, 161, 166, 170, 171, 174, 175, 176, 181, 199, 200, 201, 202, 203, 204, 205, 212, 250, 260, 279, 345, 385, 387, 388, 397, 400, 435, 436, 437, 438, 444], "ryan": [0, 114, 142, 154, 220, 255], "hammond": [0, 142, 154], "uc": 0, "diego": [0, 114, 187, 267], "sachin": [0, 151, 154], "patalasingh": [0, 151, 154], "sage": [0, 151, 154], "hahn": [0, 151, 154], "deephealth": 0, "salma": [0, 118, 121, 127, 129, 136, 139, 140, 154], "bougacha": [0, 118, 121, 127, 129, 136, 139, 140, 154], "sam": [0, 124, 154], "buck": [0, 124, 154], "johnson": [0, 124, 154], "sami": [0, 151, 154], "jawhar": [0, 151, 154], "simon": [0, 56, 114, 139, 144, 154, 219, 221, 247, 248, 364, 365], "steinkamp": [0, 139, 144, 154], "danish": 0, "magnet": [0, 114, 171, 174, 186, 191, 205, 239, 265], "reson": [0, 114, 171, 174, 186, 191, 205, 239, 265], "copenhagen": 0, "amag": 0, "hvidovr": 0, "denmark": 0, "sourav": [0, 139, 154], "singh": [0, 139, 154], "steven": [0, 58, 114, 124, 126, 154, 190, 191, 198, 205, 218, 220, 238, 253, 254, 255, 364, 365], "meisler": [0, 124, 126, 154], "divis": [0, 90, 220], "technologi": 0, "suramya": [0, 126, 154], "pokharel": [0, 126, 154], "tribhuvan": 0, "kathmandu": 0, "nepal": 0, "sylvain": [0, 136, 139, 142, 154], "lan": [0, 136, 139, 154], "takerkart": [0, 142, 154], "la": 0, "timon": 0, "marseil": 0, "tamer": [0, 126, 154], "gezici": [0, 126, 154], "bilkent": 0, "tarun": [0, 125, 154], "samanta": [0, 125, 154], "acharya": 0, "prafulla": 0, "chandra": 0, "lifespan": 0, "informat": [0, 216], "pennsylvania": 0, "thoma": [0, 101, 114, 117, 142, 145, 148, 149, 154, 155, 162, 174, 176, 187, 190, 214, 219, 225, 238, 247, 251, 267, 270, 272, 338, 364, 365, 384, 461], "bazeil": [0, 142, 145, 148, 149, 154], "tom": [0, 114, 147, 154, 190, 238], "vanass": [0, 147, 154], "wisconsin": 0, "sleep": 0, "conscious": 0, "vasco": [0, 151, 154], "diogo": [0, 151, 154], "vincent": [0, 23, 44, 49, 114, 118, 154, 167, 176, 190, 193, 213, 215, 238, 245, 265, 280, 365], "http": [0, 3, 18, 22, 23, 31, 32, 34, 37, 38, 40, 41, 44, 48, 49, 51, 56, 58, 62, 69, 70, 97, 98, 100, 101, 114, 117, 147, 151, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 171, 174, 176, 177, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 228, 231, 235, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 285, 291, 292, 293, 294, 298, 310, 314, 315, 316, 338, 341, 364, 365, 384, 420, 442, 443, 447, 448, 453, 460, 461, 479, 480], "www": [0, 22, 23, 37, 40, 41, 49, 51, 56, 70, 98, 101, 114, 117, 155, 156, 158, 163, 166, 167, 176, 186, 187, 188, 189, 190, 191, 193, 194, 195, 199, 206, 207, 211, 212, 213, 214, 215, 216, 220, 221, 222, 223, 235, 236, 237, 238, 239, 240, 245, 248, 249, 255, 259, 260, 261, 265, 267, 268, 269, 270, 272, 274, 277, 278, 280, 285, 293, 294, 341, 364, 365, 384, 420, 460, 461], "logilab": 0, "fr": [0, 44, 114, 159, 167, 188, 193, 197, 213, 237, 242, 245, 448], "virgil": [0, 118, 154], "fritsch": [0, 118, 154], "yasmin": [0, 123, 124, 125, 126, 151, 154, 176], "mzayek": [0, 123, 124, 125, 126, 151, 154], "zvi": [0, 144, 154], "baratz": [0, 144, 154], "tel": 0, "aviv": 0, "israel": 0, "\u00f3scar": [0, 118, 121, 127, 129, 154], "n\u00e1jera": [0, 118, 121, 127, 129, 154], "checkmk": 0, "paid": 0, "grant": 0, "chan": 0, "zuckerberg": 0, "initi": [0, 3, 12, 48, 49, 50, 67, 93, 99, 125, 154, 159, 167, 170, 179, 181, 186, 209, 229, 231, 298, 299, 310, 314, 368, 369, 371, 372, 374, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 445, 448], "were": [0, 6, 18, 23, 40, 49, 58, 62, 65, 70, 78, 90, 93, 97, 100, 106, 107, 116, 121, 123, 142, 145, 149, 150, 151, 154, 161, 168, 169, 171, 187, 191, 198, 205, 207, 209, 212, 221, 222, 270, 272, 341, 371, 374, 460, 466], "niconnect": 0, "french": [0, 176], "investiss": 0, "avenir": 0, "wa": [0, 3, 40, 54, 67, 70, 90, 101, 104, 105, 116, 117, 123, 125, 139, 146, 147, 148, 149, 150, 154, 161, 163, 166, 168, 171, 189, 191, 222, 227, 246, 247, 296, 297, 298, 299, 306, 323, 330, 336, 338, 367, 368, 369, 370, 371, 372, 373, 374, 420, 429, 435, 437, 438, 442, 444, 445, 446, 447, 448, 451, 466], "also": [0, 4, 11, 14, 15, 16, 17, 22, 23, 29, 31, 34, 39, 40, 41, 42, 43, 50, 51, 55, 56, 62, 63, 65, 66, 68, 69, 71, 74, 76, 78, 85, 88, 90, 92, 93, 94, 97, 107, 116, 117, 121, 123, 125, 126, 127, 132, 133, 135, 139, 142, 145, 148, 149, 151, 154, 155, 156, 159, 160, 162, 163, 164, 166, 168, 169, 170, 171, 173, 174, 176, 177, 179, 180, 181, 182, 194, 195, 199, 205, 213, 214, 222, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 274, 275, 276, 277, 278, 279, 280, 281, 291, 292, 293, 294, 296, 297, 323, 325, 326, 330, 336, 348, 352, 356, 361, 362, 364, 375, 376, 377, 378, 379, 380, 381, 419, 420, 424, 425, 427, 432, 433, 434, 435, 437, 438, 446, 449, 450, 454, 455, 458, 479, 482], "support": [0, 4, 9, 15, 29, 32, 33, 34, 35, 44, 97, 104, 110, 116, 121, 123, 124, 126, 134, 135, 136, 139, 140, 141, 142, 146, 147, 149, 150, 151, 154, 161, 162, 164, 166, 171, 174, 175, 291, 292, 293, 294, 311, 363, 364, 368, 371, 435, 437, 438, 454, 464, 480], "digicosm": 0, "dataia": 0, "If": [0, 2, 9, 14, 15, 24, 32, 34, 35, 36, 40, 41, 42, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 68, 74, 78, 83, 85, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 112, 116, 117, 125, 139, 146, 147, 149, 154, 155, 159, 161, 162, 164, 166, 168, 169, 171, 174, 176, 177, 179, 180, 181, 187, 227, 228, 229, 231, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 246, 248, 253, 254, 255, 256, 260, 261, 263, 264, 265, 268, 270, 272, 274, 275, 280, 282, 283, 284, 285, 286, 287, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 310, 313, 314, 315, 316, 319, 320, 323, 326, 330, 332, 336, 337, 338, 339, 340, 341, 342, 346, 347, 351, 353, 354, 355, 356, 357, 358, 360, 361, 363, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 457, 458, 459, 460, 464, 479, 480], "you": [0, 2, 4, 6, 9, 14, 15, 22, 23, 24, 32, 35, 36, 39, 40, 41, 42, 43, 44, 47, 49, 51, 52, 53, 54, 55, 56, 58, 61, 65, 68, 70, 74, 78, 85, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 112, 114, 116, 117, 134, 135, 139, 142, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 173, 174, 176, 177, 179, 180, 181, 187, 193, 214, 227, 228, 229, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 251, 256, 259, 260, 261, 263, 264, 265, 268, 269, 270, 274, 275, 280, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 325, 326, 330, 336, 367, 368, 369, 370, 371, 372, 373, 374, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 421, 424, 426, 427, 430, 432, 433, 434, 435, 437, 438, 441, 442, 444, 445, 446, 447, 448, 464, 479, 480, 482], "want": [0, 2, 6, 9, 14, 15, 42, 49, 54, 65, 69, 70, 71, 77, 85, 93, 97, 99, 112, 116, 117, 155, 162, 164, 168, 169, 171, 180, 181, 270, 272, 296, 297, 326, 356, 365, 437, 444, 479, 480], "we": [0, 2, 3, 4, 6, 9, 11, 14, 18, 19, 20, 22, 23, 24, 25, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 115, 116, 117, 123, 125, 132, 140, 141, 142, 147, 149, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 168, 170, 171, 174, 176, 177, 178, 179, 180, 181, 197, 217, 220, 234, 243, 244, 261, 270, 272, 296, 297, 298, 313, 315, 316, 336, 340, 348, 352, 360, 361, 362, 376, 378, 379, 381, 388, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 423, 448, 450, 466, 479, 480], "suggest": [0, 6, 85, 149, 154, 158, 176, 179, 341, 376, 378, 379, 381, 460], "do": [0, 3, 6, 9, 22, 24, 25, 30, 31, 33, 34, 40, 42, 49, 50, 51, 57, 61, 64, 65, 66, 68, 74, 76, 78, 79, 93, 97, 99, 100, 107, 110, 116, 136, 140, 145, 149, 152, 154, 155, 159, 160, 161, 162, 164, 166, 168, 171, 176, 177, 179, 180, 181, 227, 237, 261, 291, 292, 293, 294, 295, 296, 297, 298, 299, 323, 332, 336, 338, 341, 353, 368, 369, 370, 371, 372, 373, 374, 379, 380, 381, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 446, 460, 464, 479], "us": [0, 1, 2, 4, 6, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 23, 26, 29, 30, 31, 32, 33, 36, 38, 40, 41, 42, 43, 44, 46, 47, 49, 52, 53, 54, 55, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 88, 89, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 112, 114, 115, 116, 123, 124, 125, 126, 127, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 180, 181, 187, 188, 191, 192, 193, 194, 195, 196, 198, 205, 206, 212, 213, 214, 216, 217, 222, 226, 228, 230, 231, 232, 233, 234, 235, 237, 240, 246, 247, 250, 252, 255, 276, 283, 284, 286, 287, 289, 296, 300, 301, 302, 309, 310, 312, 313, 314, 315, 316, 317, 321, 322, 324, 327, 328, 329, 331, 333, 334, 335, 340, 344, 345, 350, 355, 359, 361, 362, 376, 377, 379, 380, 381, 382, 385, 386, 387, 388, 413, 414, 415, 443, 445, 447, 451, 452, 453, 454, 455, 459, 460, 461, 465, 466, 467, 476, 480, 481, 482], "our": [0, 2, 3, 14, 19, 29, 34, 40, 49, 51, 56, 58, 65, 66, 93, 97, 100, 116, 117, 139, 149, 154, 156, 161, 168, 169, 171, 177], "zenodo": 0, "doi": [0, 3, 22, 23, 31, 32, 37, 38, 40, 41, 44, 48, 49, 51, 56, 58, 69, 75, 97, 98, 101, 114, 117, 155, 156, 158, 160, 162, 163, 166, 167, 174, 176, 186, 187, 188, 190, 191, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 227, 235, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 257, 259, 260, 265, 267, 268, 269, 270, 272, 274, 275, 279, 280, 285, 293, 294, 298, 299, 318, 338, 341, 364, 365, 384, 420, 447, 453, 460, 461], "softwar": [0, 6, 67, 71, 171, 174, 363, 480], "author": [0, 47, 55, 114, 168, 169, 177], "licens": [0, 125, 154, 240], "bsd": 0, "4": [0, 3, 6, 12, 14, 15, 18, 20, 23, 24, 27, 29, 30, 31, 33, 34, 35, 36, 37, 40, 41, 42, 44, 45, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 62, 64, 65, 66, 67, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 83, 85, 90, 91, 95, 97, 98, 99, 100, 101, 102, 106, 107, 108, 110, 114, 118, 127, 132, 135, 139, 140, 141, 142, 147, 155, 156, 159, 161, 166, 167, 168, 176, 187, 191, 195, 199, 200, 201, 202, 203, 204, 205, 209, 211, 217, 218, 224, 227, 229, 235, 250, 254, 257, 267, 268, 274, 275, 276, 279, 291, 292, 293, 294, 296, 297, 298, 299, 306, 323, 336, 341, 356, 357, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 376, 378, 379, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 424, 426, 427, 430, 431, 432, 433, 434, 445, 446, 447, 448, 460, 464, 465, 466, 479, 481], "claus": 0, "titl": [0, 3, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 26, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 61, 62, 64, 65, 66, 67, 69, 70, 74, 75, 76, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 110, 116, 125, 142, 143, 148, 151, 154, 159, 161, 169, 177, 181, 323, 336, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 456, 458, 479], "url": [0, 3, 22, 23, 31, 32, 37, 38, 40, 41, 44, 48, 49, 51, 56, 58, 62, 69, 70, 97, 98, 101, 114, 143, 151, 154, 155, 156, 158, 159, 160, 162, 163, 166, 167, 168, 174, 176, 186, 187, 188, 190, 191, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 228, 231, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 257, 259, 260, 263, 264, 265, 267, 268, 269, 270, 272, 274, 275, 276, 279, 280, 285, 290, 293, 294, 298, 310, 314, 315, 316, 338, 341, 364, 365, 384, 420, 447, 448, 453, 460, 461], "com": [0, 22, 23, 37, 40, 41, 49, 51, 56, 69, 98, 101, 114, 151, 154, 155, 156, 163, 166, 167, 169, 187, 188, 191, 193, 194, 195, 200, 201, 202, 203, 204, 205, 207, 211, 212, 213, 215, 219, 220, 224, 237, 239, 240, 241, 245, 247, 249, 250, 255, 260, 265, 267, 268, 269, 279, 285, 293, 294, 341, 364, 365, 384, 420, 460, 461, 479, 480], "org": [0, 3, 18, 22, 23, 31, 32, 34, 36, 37, 38, 40, 41, 49, 51, 52, 53, 56, 58, 62, 69, 74, 76, 97, 98, 101, 114, 117, 155, 156, 158, 161, 163, 166, 167, 168, 169, 171, 174, 176, 177, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 206, 207, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 228, 231, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 279, 280, 285, 291, 292, 293, 294, 338, 341, 364, 365, 384, 420, 443, 447, 453, 460, 461], "10": [0, 2, 3, 5, 6, 9, 11, 12, 15, 17, 21, 22, 23, 24, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 55, 56, 57, 58, 61, 62, 63, 64, 65, 69, 71, 72, 75, 76, 78, 80, 86, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 107, 114, 117, 122, 139, 149, 155, 156, 158, 160, 161, 162, 163, 166, 167, 168, 170, 171, 174, 176, 186, 187, 188, 190, 191, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 227, 228, 231, 235, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 259, 260, 262, 265, 267, 268, 269, 270, 272, 274, 275, 279, 280, 285, 291, 292, 293, 294, 295, 296, 297, 298, 299, 311, 318, 319, 326, 338, 340, 341, 364, 365, 369, 371, 372, 374, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 420, 438, 445, 446, 447, 448, 451, 452, 453, 456, 457, 460, 461, 464, 465, 466, 479, 481], "5281": 0, "8397156": 0, "resourc": [0, 179, 217], "identifi": [0, 29, 30, 32, 33, 50, 58, 62, 93, 114, 123, 149, 154, 159, 167, 170, 171, 173, 187, 237, 319, 323, 325, 330, 332], "rrid": 0, "scr_001362": 0, "There": [0, 4, 21, 65, 158, 161, 162, 163, 169, 174, 245, 313, 315, 316, 337, 364, 455, 479], "paper": [0, 48, 49, 116, 117, 158, 168, 169, 171, 270], "publish": [0, 222, 270, 347, 461], "about": [0, 2, 3, 6, 14, 19, 24, 49, 62, 75, 77, 78, 93, 99, 100, 107, 116, 117, 123, 124, 125, 127, 142, 150, 154, 158, 161, 162, 164, 166, 168, 169, 170, 171, 174, 175, 176, 179, 186, 187, 189, 191, 193, 196, 197, 206, 213, 214, 216, 221, 224, 226, 239, 248, 250, 259, 260, 261, 274, 282, 283, 284, 285, 286, 287, 365, 459, 464], "howev": [0, 48, 49, 65, 68, 70, 85, 93, 99, 155, 161, 164, 168, 171, 181, 237, 356, 363, 365, 482], "pattern": [0, 4, 8, 27, 28, 45, 49, 51, 99, 112, 114, 117, 137, 145, 154, 155, 160, 161, 164, 167, 168, 174, 176, 179, 187, 191, 195, 206, 211, 213, 229, 231, 236, 239, 249, 260, 267, 268, 270, 289, 295, 342, 354, 378, 383, 420, 439, 447, 453, 481], "underli": [0, 88, 171, 174, 176, 181, 398], "have": [0, 2, 3, 6, 9, 11, 15, 16, 18, 24, 29, 31, 32, 33, 39, 41, 42, 43, 44, 49, 52, 54, 55, 56, 57, 61, 62, 64, 65, 69, 70, 74, 84, 85, 92, 93, 97, 99, 100, 102, 107, 112, 116, 117, 123, 124, 125, 126, 127, 129, 131, 132, 133, 136, 137, 138, 139, 142, 145, 146, 147, 149, 150, 154, 155, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 171, 173, 174, 176, 177, 179, 180, 181, 187, 191, 194, 196, 209, 223, 226, 227, 228, 229, 231, 234, 239, 246, 247, 251, 255, 256, 270, 274, 291, 292, 293, 294, 295, 296, 297, 298, 299, 302, 306, 315, 316, 323, 326, 330, 331, 336, 337, 338, 340, 341, 343, 352, 356, 357, 358, 361, 363, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 383, 384, 420, 425, 435, 437, 438, 442, 445, 446, 447, 448, 454, 455, 457, 458, 460, 479, 480], "been": [0, 6, 10, 11, 32, 36, 39, 42, 47, 49, 52, 54, 55, 61, 65, 69, 71, 74, 78, 80, 84, 85, 88, 90, 92, 93, 103, 107, 123, 124, 126, 127, 129, 132, 133, 139, 141, 142, 144, 145, 147, 148, 149, 150, 151, 154, 160, 167, 168, 169, 170, 173, 174, 177, 181, 191, 194, 209, 222, 223, 226, 228, 239, 270, 274, 323, 336, 338, 347, 376, 377, 378, 380, 381, 384, 452, 461, 464], "describ": [0, 6, 18, 37, 63, 65, 67, 71, 115, 116, 117, 126, 154, 162, 168, 169, 171, 176, 177, 181, 193, 210, 220, 228, 235, 265, 266, 318, 321, 324, 326, 330, 338, 365, 384, 423], "machin": [0, 29, 34, 44, 49, 93, 115, 146, 154, 162, 163, 164, 169, 174, 175, 196, 268, 480, 482], "huge": [0, 65, 66, 139, 154, 197], "amount": [0, 24, 34, 36, 50, 65, 94, 162, 164, 169, 175, 176, 177, 270, 291, 292, 293, 294, 296, 297, 298, 299, 323, 336, 342, 353, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448], "upon": [0, 187, 189, 271, 323, 336, 419, 432, 433, 434, 441, 448, 450, 458], "reli": [0, 6, 30, 65, 91, 93, 125, 126, 132, 148, 154, 158, 168, 171, 174, 179, 261, 326, 464, 479], "heavili": 0, "who": [0, 117, 181, 187, 196, 365], "invest": 0, "time": [0, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 56, 57, 60, 62, 63, 64, 66, 67, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 114, 116, 117, 123, 124, 125, 129, 138, 139, 145, 146, 147, 149, 151, 154, 155, 157, 158, 159, 160, 161, 164, 166, 169, 171, 172, 174, 175, 177, 178, 179, 180, 191, 209, 221, 222, 227, 229, 231, 256, 277, 279, 280, 291, 292, 293, 294, 296, 297, 298, 299, 323, 324, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 338, 341, 342, 353, 356, 358, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 384, 412, 420, 432, 434, 441, 442, 446, 448, 450, 451, 452, 457, 459, 460, 461, 464, 466, 471, 479, 482], "maintain": [0, 123, 142, 148, 154, 169, 177], "deserv": [0, 181], "recognit": [0, 3, 28, 30, 45, 49, 69, 96, 108, 112, 114, 124, 154, 164, 166, 167, 175, 176, 191, 239, 259, 293, 295, 346, 348, 351, 353, 354, 367, 373, 383, 384, 412, 427, 431, 434, 439, 481], "citat": [0, 169], "In": [0, 4, 6, 9, 14, 15, 16, 22, 24, 32, 33, 36, 38, 39, 40, 42, 47, 48, 49, 50, 51, 52, 53, 54, 58, 62, 64, 65, 66, 71, 74, 76, 78, 80, 85, 86, 88, 90, 93, 94, 98, 99, 114, 115, 116, 117, 123, 124, 134, 139, 149, 151, 154, 155, 156, 158, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 174, 176, 177, 178, 179, 180, 181, 187, 191, 207, 213, 217, 227, 234, 237, 239, 243, 244, 245, 260, 267, 270, 272, 274, 291, 292, 293, 294, 296, 297, 298, 299, 310, 313, 315, 316, 323, 325, 330, 336, 338, 339, 356, 357, 358, 360, 378, 384, 420, 421, 432, 445, 454, 457, 464, 479, 480], "need": [0, 2, 3, 5, 6, 9, 12, 16, 20, 24, 30, 31, 33, 38, 41, 42, 44, 48, 49, 50, 51, 55, 56, 65, 66, 67, 70, 74, 76, 77, 78, 79, 80, 83, 88, 90, 91, 97, 98, 99, 102, 103, 104, 105, 107, 110, 116, 117, 139, 142, 149, 154, 155, 159, 161, 162, 163, 164, 169, 171, 173, 174, 177, 179, 180, 181, 187, 234, 310, 313, 314, 358, 363, 364, 368, 369, 371, 380, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 421, 424, 426, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 446, 464, 479, 480], "order": [0, 2, 3, 6, 15, 16, 23, 30, 32, 35, 36, 40, 41, 42, 49, 54, 56, 70, 78, 79, 90, 99, 101, 106, 116, 123, 133, 139, 142, 147, 149, 154, 160, 166, 168, 169, 170, 174, 175, 176, 177, 179, 180, 181, 231, 253, 255, 263, 264, 282, 283, 286, 310, 314, 323, 330, 332, 336, 337, 338, 341, 343, 345, 350, 351, 355, 356, 357, 368, 369, 371, 372, 373, 374, 376, 377, 378, 380, 381, 383, 384, 419, 424, 426, 427, 429, 433, 434, 441, 448, 449, 451, 454, 459, 460, 464, 479, 480], "justifi": 0, "pai": [0, 64], "engin": [0, 9, 125, 149, 152, 154, 176, 181, 398, 435, 437, 438, 479, 480], "To": [0, 2, 3, 4, 6, 15, 21, 22, 23, 31, 33, 37, 39, 40, 42, 43, 48, 49, 50, 51, 52, 54, 55, 62, 65, 66, 68, 75, 76, 78, 79, 86, 88, 93, 97, 100, 103, 107, 116, 117, 134, 139, 151, 154, 155, 156, 158, 161, 162, 163, 164, 166, 169, 170, 171, 173, 177, 179, 180, 246, 247, 270, 313, 315, 316, 323, 332, 336, 340, 352, 364, 427, 432, 433, 434, 435, 437, 438, 441, 445, 458, 479], "guarante": [0, 6, 80, 162, 168, 279, 289, 351, 356, 357, 363, 370], "futur": [0, 6, 133, 139, 145, 151, 154, 168, 174, 179, 181, 311, 456], "toolkit": [0, 191], "pleas": [0, 3, 19, 29, 30, 32, 33, 34, 35, 36, 49, 50, 52, 53, 58, 62, 69, 70, 71, 74, 76, 97, 99, 101, 102, 104, 105, 110, 134, 140, 149, 154, 159, 161, 164, 169, 174, 177, 181, 187, 199, 208, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 469, 480], "see": [0, 6, 8, 9, 12, 13, 14, 15, 16, 20, 21, 22, 23, 26, 28, 30, 31, 34, 36, 39, 40, 41, 43, 46, 48, 50, 51, 52, 54, 55, 56, 60, 69, 70, 71, 73, 79, 82, 85, 88, 90, 93, 98, 99, 101, 102, 105, 106, 112, 116, 117, 119, 125, 127, 133, 139, 140, 142, 146, 147, 149, 151, 154, 155, 156, 158, 159, 160, 161, 162, 164, 166, 167, 168, 169, 170, 171, 174, 177, 179, 181, 183, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 274, 275, 276, 277, 278, 279, 280, 281, 285, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 311, 313, 315, 316, 319, 323, 325, 330, 336, 341, 342, 345, 346, 347, 348, 349, 350, 351, 353, 355, 356, 357, 358, 359, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 420, 426, 427, 429, 432, 433, 434, 441, 442, 443, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 458, 459, 460, 464, 466, 471, 472, 479, 480], "document": [0, 2, 3, 4, 6, 19, 26, 43, 44, 49, 50, 52, 53, 56, 58, 97, 99, 102, 106, 114, 115, 116, 119, 121, 124, 126, 127, 129, 131, 132, 133, 134, 139, 142, 144, 149, 150, 152, 154, 156, 158, 159, 160, 161, 162, 163, 164, 166, 167, 175, 176, 179, 181, 187, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 479, 480], "how": [0, 1, 2, 3, 4, 5, 6, 9, 14, 19, 21, 26, 34, 40, 44, 47, 48, 49, 50, 53, 55, 56, 58, 61, 62, 65, 66, 68, 70, 77, 78, 83, 85, 86, 87, 88, 90, 93, 94, 99, 102, 105, 106, 112, 116, 124, 134, 145, 146, 149, 150, 154, 156, 158, 159, 160, 161, 162, 164, 166, 168, 171, 174, 175, 176, 178, 180, 196, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 480, 482], "introductori": [1, 112, 169], "exampl": [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 68, 69, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 110, 111, 113, 115, 116, 124, 125, 126, 127, 132, 133, 134, 135, 136, 139, 140, 142, 144, 145, 148, 149, 150, 152, 154, 159, 162, 163, 164, 165, 168, 169, 170, 171, 173, 177, 179, 223, 235, 237, 252, 296, 313, 315, 316, 340, 361, 445, 447, 468, 469, 471, 476, 480, 481, 482], "teach": [1, 112, 131, 142, 154, 169, 196], "nilearn": [1, 2, 3, 6, 7, 8, 9, 10, 11, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 115, 116, 117, 118, 122, 123, 124, 125, 126, 127, 129, 130, 132, 133, 134, 137, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 177, 179, 180, 181, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 465, 466, 469, 479, 481, 482], "numer": [1, 7, 29, 33, 35, 57, 112, 146, 154, 169, 170, 181, 231, 311, 313, 315, 316, 324, 432, 433, 459, 481], "plot": [1, 2, 4, 7, 8, 19, 20, 21, 23, 25, 26, 27, 29, 30, 33, 36, 37, 38, 39, 40, 41, 42, 43, 46, 48, 49, 51, 52, 53, 54, 56, 57, 59, 61, 62, 63, 64, 67, 69, 70, 71, 74, 75, 76, 77, 78, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 101, 102, 103, 104, 105, 107, 110, 112, 116, 119, 121, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 159, 160, 161, 166, 169, 170, 171, 173, 174, 175, 176, 177, 180, 181, 227, 236, 241, 243, 244, 249, 253, 254, 256, 259, 260, 263, 273, 279, 288, 323, 336, 342, 353, 354, 367, 374, 378, 456, 458, 462, 463, 464, 465, 466, 476, 480, 481, 482], "python": [1, 2, 3, 4, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 116, 121, 123, 124, 126, 134, 140, 141, 142, 147, 149, 154, 161, 168, 169, 175, 176, 177, 352, 480, 481], "3d": [1, 3, 6, 7, 8, 15, 16, 18, 19, 23, 24, 25, 27, 29, 30, 32, 34, 36, 37, 42, 44, 47, 69, 74, 76, 82, 83, 93, 95, 99, 101, 103, 104, 110, 112, 114, 116, 121, 124, 129, 136, 138, 139, 140, 142, 146, 147, 151, 154, 171, 174, 175, 176, 178, 180, 181, 191, 219, 224, 241, 243, 244, 247, 248, 249, 250, 271, 273, 279, 281, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 338, 340, 342, 343, 346, 348, 349, 350, 351, 360, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 417, 418, 420, 421, 426, 427, 429, 430, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 449, 450, 454, 462, 464, 481, 482], "4d": [1, 3, 4, 6, 7, 8, 11, 16, 18, 20, 25, 27, 29, 30, 31, 32, 34, 36, 41, 47, 48, 49, 52, 53, 54, 56, 58, 70, 83, 84, 86, 88, 90, 91, 93, 94, 97, 99, 101, 103, 112, 115, 123, 124, 125, 129, 136, 139, 140, 145, 154, 156, 159, 160, 161, 164, 174, 176, 178, 181, 196, 210, 238, 240, 242, 243, 244, 248, 256, 260, 266, 273, 281, 295, 298, 299, 338, 340, 341, 342, 346, 347, 348, 349, 351, 353, 360, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 416, 417, 420, 427, 432, 433, 434, 439, 441, 448, 450, 464, 466, 472, 475, 479, 481, 482], "niimg": [1, 7, 33, 54, 58, 88, 90, 91, 97, 112, 116, 124, 125, 126, 136, 139, 142, 147, 151, 154, 158, 176, 178, 180, 181, 248, 273, 281, 291, 292, 293, 294, 295, 296, 297, 298, 299, 318, 323, 326, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 420, 426, 427, 429, 432, 433, 434, 439, 441, 442, 446, 447, 448, 450, 451, 452, 453, 454, 455, 457, 458, 460, 464, 466, 468, 481, 482], "handl": [1, 7, 49, 70, 112, 124, 125, 129, 135, 151, 152, 154, 161, 176, 179, 180, 181, 248, 273, 281, 311, 315, 342, 348, 349, 350, 351, 356, 362, 364, 423, 434, 439, 447, 453, 481], "visual": [1, 7, 12, 14, 27, 28, 32, 33, 39, 45, 47, 48, 50, 56, 65, 67, 69, 70, 71, 78, 79, 82, 85, 86, 87, 88, 90, 91, 93, 95, 100, 101, 103, 104, 105, 107, 114, 115, 124, 125, 134, 136, 139, 145, 147, 154, 155, 156, 157, 165, 169, 170, 173, 176, 178, 180, 189, 193, 206, 209, 212, 225, 236, 238, 239, 245, 248, 255, 259, 260, 264, 265, 267, 269, 273, 281, 342, 343, 346, 348, 349, 351, 353, 354, 356, 360, 367, 370, 373, 375, 378, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 423, 424, 425, 431, 432, 433, 434, 437, 438, 439, 466, 481, 482], "manipul": [1, 7, 55, 65, 88, 116, 134, 154, 176, 179, 259, 281, 358, 427, 439, 481, 482], "look": [1, 6, 7, 23, 29, 32, 40, 44, 56, 64, 65, 67, 68, 71, 103, 112, 117, 139, 140, 150, 154, 161, 169, 170, 171, 176, 177, 181, 196, 259, 270, 272, 281, 358, 427, 439, 481], "introduct": [1, 7, 112, 114, 123, 139, 154, 162, 164, 165, 169, 172, 173, 175, 181, 259, 291, 315, 316, 348, 353, 424, 433, 441, 481, 482], "fmri": [1, 7, 15, 23, 25, 30, 31, 32, 33, 36, 40, 41, 44, 46, 55, 56, 59, 60, 61, 62, 63, 65, 68, 69, 72, 73, 80, 81, 84, 88, 90, 93, 96, 99, 100, 101, 107, 108, 112, 114, 116, 117, 130, 137, 142, 154, 158, 159, 160, 162, 164, 167, 168, 170, 173, 174, 175, 176, 179, 180, 181, 183, 189, 190, 191, 194, 197, 198, 206, 209, 212, 214, 215, 220, 239, 240, 242, 248, 253, 256, 258, 259, 265, 266, 277, 291, 295, 298, 299, 318, 320, 323, 332, 336, 338, 339, 341, 342, 346, 348, 349, 352, 353, 364, 365, 367, 373, 378, 381, 384, 396, 404, 411, 419, 420, 422, 423, 424, 426, 427, 432, 433, 434, 439, 441, 446, 448, 456, 457, 460, 461, 465, 467, 481, 482], "decod": [1, 7, 36, 39, 40, 42, 44, 45, 49, 96, 108, 114, 116, 117, 124, 125, 126, 134, 135, 139, 142, 145, 146, 147, 148, 149, 150, 154, 162, 166, 170, 174, 175, 176, 181, 212, 214, 259, 262, 269, 279, 323, 326, 342, 346, 348, 353, 367, 373, 374, 397, 423, 424, 431, 433, 434, 438, 439, 441, 456, 458, 463, 464, 480, 481, 482], "intro": [1, 7, 65, 112, 176, 277, 323, 339, 342, 353, 419, 422, 423, 427, 434, 457, 481], "glm": [1, 7, 28, 32, 42, 45, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 75, 76, 77, 78, 79, 80, 99, 100, 107, 123, 125, 126, 145, 146, 147, 149, 151, 152, 154, 161, 170, 173, 174, 175, 176, 177, 259, 277, 291, 342, 348, 353, 360, 363, 419, 422, 423, 425, 427, 434, 456, 457, 458, 476, 480, 481, 482], "analysi": [1, 7, 15, 23, 28, 29, 33, 34, 45, 48, 49, 63, 65, 66, 69, 70, 72, 76, 77, 78, 79, 81, 94, 97, 108, 114, 115, 117, 155, 156, 160, 162, 165, 167, 172, 173, 174, 175, 176, 180, 181, 195, 197, 198, 199, 205, 211, 218, 221, 223, 235, 239, 242, 256, 257, 259, 262, 264, 265, 266, 268, 272, 275, 277, 279, 290, 291, 295, 298, 310, 311, 314, 315, 316, 319, 323, 326, 330, 332, 336, 339, 342, 346, 348, 351, 352, 353, 354, 360, 363, 364, 365, 366, 367, 373, 384, 397, 412, 419, 422, 423, 426, 427, 428, 429, 433, 434, 438, 439, 448, 456, 457, 458, 464, 465, 476, 480, 481, 482], "singl": [1, 3, 7, 14, 23, 30, 31, 46, 49, 59, 60, 64, 65, 66, 72, 76, 78, 85, 93, 99, 103, 112, 114, 117, 121, 126, 145, 146, 147, 148, 151, 154, 155, 162, 166, 168, 169, 170, 176, 179, 181, 188, 210, 222, 237, 256, 270, 277, 278, 288, 291, 292, 293, 294, 313, 315, 316, 323, 330, 336, 338, 339, 342, 353, 356, 367, 368, 369, 370, 371, 372, 373, 374, 397, 419, 422, 423, 427, 429, 431, 432, 434, 439, 441, 446, 448, 457, 479, 481], "run": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 71, 72, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 110, 112, 116, 126, 129, 133, 147, 149, 151, 154, 155, 156, 158, 161, 162, 165, 166, 167, 168, 169, 170, 171, 176, 177, 179, 180, 181, 191, 199, 206, 212, 223, 229, 231, 258, 259, 265, 269, 277, 278, 298, 299, 320, 323, 326, 330, 339, 341, 342, 353, 356, 365, 373, 379, 381, 384, 419, 422, 423, 427, 434, 439, 445, 456, 457, 460, 465, 466, 479, 480, 481, 482], "subject": [1, 3, 4, 7, 11, 15, 16, 17, 18, 21, 22, 23, 25, 29, 30, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 46, 47, 48, 49, 50, 52, 54, 56, 57, 58, 59, 60, 64, 65, 67, 70, 72, 74, 76, 77, 79, 84, 90, 93, 94, 98, 99, 100, 101, 103, 104, 105, 107, 109, 110, 112, 114, 116, 117, 123, 124, 125, 126, 130, 132, 133, 142, 145, 154, 156, 157, 158, 159, 161, 168, 170, 171, 173, 176, 178, 179, 180, 182, 185, 187, 188, 190, 191, 193, 196, 205, 209, 210, 211, 213, 215, 221, 222, 226, 227, 228, 229, 231, 235, 236, 237, 239, 245, 256, 259, 264, 265, 267, 268, 274, 277, 278, 279, 280, 290, 298, 299, 323, 326, 330, 336, 337, 339, 342, 353, 356, 361, 364, 365, 367, 368, 369, 370, 372, 373, 374, 379, 381, 397, 417, 419, 421, 422, 423, 427, 431, 434, 439, 446, 457, 466, 479, 481, 482], "dataset": [1, 3, 4, 7, 9, 10, 13, 14, 19, 20, 21, 22, 23, 24, 25, 26, 28, 40, 45, 47, 52, 54, 55, 56, 57, 60, 65, 67, 68, 69, 70, 72, 73, 76, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 101, 102, 103, 106, 108, 112, 114, 116, 117, 124, 125, 126, 129, 130, 134, 138, 139, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 160, 161, 162, 165, 167, 170, 173, 174, 175, 176, 177, 178, 181, 187, 188, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 211, 213, 216, 217, 218, 219, 220, 221, 224, 225, 291, 292, 293, 294, 297, 298, 311, 319, 323, 326, 330, 332, 336, 339, 340, 342, 343, 346, 348, 352, 353, 357, 361, 363, 365, 366, 367, 373, 374, 384, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 422, 423, 426, 427, 428, 429, 431, 434, 435, 436, 437, 438, 439, 441, 442, 449, 456, 457, 458, 464, 465, 466, 479, 481, 482], "go": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 110, 112, 115, 117, 135, 154, 155, 161, 165, 169, 173, 176, 177, 181, 272, 346, 351, 352, 354, 421, 426, 430, 434, 439, 441, 465, 481, 482], "end": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 126, 136, 146, 154, 166, 168, 169, 180, 191, 281, 362, 363, 459, 460], "full": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 114, 121, 123, 126, 154, 158, 159, 160, 162, 164, 166, 168, 169, 170, 174, 180, 181, 187, 191, 196, 198, 206, 221, 243, 244, 248, 253, 256, 259, 267, 291, 292, 293, 294, 298, 299, 305, 310, 313, 314, 315, 316, 323, 336, 338, 341, 358, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 431, 446, 448, 450, 456, 460], "code": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 114, 116, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 159, 160, 162, 164, 168, 170, 174, 181, 235, 295, 299, 323, 336, 369, 372, 374, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 430, 448, 456, 458, 465, 474, 476, 480], "your": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 110, 115, 117, 156, 160, 161, 162, 164, 166, 177, 179, 181, 187, 226, 243, 244, 256, 261, 291, 292, 293, 294, 298, 299, 314, 370, 373, 446, 479, 482], "browser": [2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 55, 56, 57, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 139, 142, 144, 154, 181, 323, 336, 398, 440, 441, 442, 443, 444, 456, 458, 479], "via": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 114, 116, 119, 154, 156, 157, 161, 164, 167, 169, 170, 179, 194, 220, 240, 296, 297, 323, 332, 376, 377, 378, 380, 381, 419, 424, 426, 427, 432, 433, 434], "binder": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 144, 154], "here": [2, 3, 4, 6, 9, 14, 15, 19, 20, 23, 29, 30, 31, 32, 33, 34, 35, 36, 42, 43, 44, 48, 49, 54, 55, 56, 58, 61, 63, 64, 65, 67, 68, 70, 74, 87, 88, 91, 93, 94, 97, 99, 100, 102, 103, 107, 114, 116, 117, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 173, 176, 177, 180, 181, 220, 256, 296, 297, 313, 315, 316, 326, 338, 377, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 399, 403, 404, 407, 408, 409, 410, 435, 437, 438, 465], "discov": [2, 169, 175], "come": [2, 3, 6, 16, 42, 52, 54, 58, 74, 79, 93, 116, 124, 152, 154, 156, 161, 162, 168, 169, 176, 177, 180, 181, 256, 479], "function": [2, 3, 4, 6, 8, 9, 11, 13, 14, 15, 17, 18, 21, 22, 25, 26, 27, 29, 30, 32, 34, 35, 36, 48, 49, 52, 53, 55, 56, 58, 59, 60, 64, 65, 67, 69, 70, 71, 72, 73, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 101, 103, 107, 108, 110, 114, 116, 117, 119, 121, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 158, 161, 162, 165, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 186, 187, 188, 189, 191, 193, 194, 196, 197, 199, 209, 213, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 307, 308, 309, 310, 311, 314, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 472, 473, 474, 475, 477, 478, 480, 481, 482], "let": [2, 3, 4, 6, 15, 40, 49, 56, 65, 67, 69, 74, 76, 77, 78, 85, 92, 97, 162, 169, 176, 340, 352], "first": [2, 6, 11, 14, 16, 18, 20, 23, 25, 30, 32, 33, 35, 40, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 63, 64, 68, 70, 72, 74, 76, 79, 80, 83, 85, 88, 90, 91, 92, 93, 94, 96, 103, 104, 108, 114, 116, 117, 118, 124, 126, 139, 140, 142, 145, 147, 149, 150, 154, 155, 156, 158, 159, 160, 162, 164, 165, 168, 169, 171, 172, 173, 177, 178, 179, 180, 183, 191, 229, 231, 257, 258, 261, 262, 266, 267, 270, 272, 275, 279, 282, 283, 286, 290, 291, 292, 293, 294, 298, 299, 311, 319, 323, 326, 330, 332, 336, 338, 342, 347, 348, 357, 358, 361, 363, 364, 366, 369, 372, 373, 374, 380, 384, 422, 423, 426, 428, 433, 434, 435, 436, 437, 438, 439, 444, 445, 446, 448, 456, 457, 458, 460, 464, 466, 476, 481, 482], "check": [2, 3, 15, 29, 30, 32, 33, 34, 35, 36, 76, 92, 93, 97, 104, 110, 116, 124, 129, 132, 152, 154, 156, 161, 164, 168, 169, 176, 177, 179, 181, 227, 228, 229, 231, 261, 281, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 324, 336, 351, 364, 367, 368, 369, 370, 371, 372, 373, 374, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 445, 446, 447, 448, 479], "where": [2, 6, 9, 15, 16, 23, 24, 40, 44, 50, 68, 76, 83, 86, 93, 99, 104, 112, 125, 132, 146, 154, 155, 159, 161, 166, 167, 169, 171, 174, 177, 180, 181, 209, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 274, 275, 276, 277, 278, 279, 280, 281, 291, 292, 293, 294, 296, 297, 310, 313, 314, 315, 316, 319, 323, 336, 338, 375, 395, 397, 400, 402, 404, 406, 408, 410, 412, 416, 419, 422, 424, 427, 428, 429, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 444, 448, 450, 457, 458, 464, 479], "disk": [2, 3, 4, 6, 100, 102, 106, 107, 116, 117, 123, 139, 145, 146, 151, 154, 161, 169, 179, 180, 181, 209, 252, 262, 270, 272, 275, 291, 292, 300, 301, 302, 323, 336, 375, 435, 437, 438, 456, 458], "import": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 116, 117, 132, 138, 139, 140, 142, 147, 149, 154, 155, 156, 159, 161, 162, 163, 164, 166, 168, 169, 170, 173, 174, 176, 177, 179, 180, 181, 187, 212, 226, 311, 313, 315, 316, 323, 336, 340, 343, 348, 352, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 430, 458, 464, 479], "print": [2, 3, 4, 6, 9, 10, 11, 15, 16, 18, 20, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 62, 67, 68, 69, 70, 71, 74, 76, 80, 84, 85, 88, 90, 91, 92, 93, 94, 97, 100, 101, 102, 103, 104, 106, 107, 110, 116, 161, 169, 176, 179, 229, 237, 298, 299, 323, 336, 348], "f": [2, 3, 4, 9, 10, 11, 15, 16, 18, 21, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 37, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 65, 67, 69, 70, 71, 74, 76, 77, 78, 79, 80, 84, 85, 87, 88, 90, 91, 92, 93, 94, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 114, 125, 126, 154, 155, 159, 161, 164, 166, 167, 170, 187, 188, 198, 207, 220, 221, 237, 248, 253, 255, 257, 260, 267, 275, 291, 292, 293, 294, 311, 312, 313, 315, 316, 319, 323, 324, 336, 356, 357, 363, 364, 365, 375, 383, 451, 454], "store": [2, 3, 26, 29, 44, 49, 50, 51, 52, 54, 68, 93, 100, 107, 117, 159, 161, 166, 169, 221, 243, 244, 281, 300, 301, 313, 315, 316, 354, 375, 384, 428], "get_data_dir": [2, 4, 132, 154, 179, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 274, 275, 276, 277, 278, 279, 280], "r": [2, 4, 9, 14, 15, 24, 30, 34, 40, 41, 47, 51, 56, 58, 69, 93, 101, 107, 114, 125, 142, 149, 154, 155, 156, 170, 177, 194, 197, 198, 205, 213, 219, 221, 225, 235, 240, 245, 247, 248, 251, 253, 257, 275, 296, 297, 323, 336, 341, 363, 364, 365, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 419, 421, 424, 426, 427, 430, 432, 433, 434, 458, 460, 479], "home": [2, 3, 4, 6, 10, 11, 15, 16, 18, 23, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 69, 70, 71, 74, 76, 83, 84, 85, 88, 90, 91, 93, 94, 99, 100, 101, 103, 104, 107, 176, 179, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 274, 275, 276, 277, 278, 279, 280, 281, 351, 466], "runner": [2, 3, 4, 6, 10, 11, 15, 16, 18, 23, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 69, 70, 71, 74, 76, 83, 84, 85, 88, 90, 91, 93, 94, 99, 100, 101, 103, 104, 107, 466], "nilearn_data": [2, 3, 6, 10, 11, 16, 18, 23, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 74, 76, 84, 88, 90, 91, 93, 94, 99, 100, 101, 103, 104, 107, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 274, 275, 276, 277, 278, 279, 280, 281, 466], "now": [2, 3, 4, 6, 14, 16, 20, 22, 25, 29, 40, 44, 49, 50, 51, 55, 56, 63, 64, 65, 69, 78, 80, 83, 85, 91, 92, 93, 99, 100, 102, 103, 107, 110, 116, 121, 123, 124, 125, 126, 127, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 161, 167, 169, 177, 180, 291, 292, 293, 294, 298, 299, 310, 313, 314, 315, 316, 340, 348, 352, 365, 368, 370, 371, 373, 446], "retriev": [2, 20, 22, 44, 48, 89, 90, 91, 114, 116, 149, 154, 155, 156, 161, 164, 175, 179, 181, 191, 205, 214, 251, 277, 278, 281, 364, 365, 413, 414], "motor": [2, 14, 15, 16, 17, 51, 65, 67, 76, 78, 89, 90, 92, 96, 108, 112, 193, 265, 288, 346, 367, 373, 384, 426, 479, 481], "contrast": [2, 6, 8, 14, 15, 27, 33, 64, 66, 69, 74, 75, 76, 77, 78, 79, 80, 87, 89, 92, 100, 104, 105, 107, 112, 124, 125, 126, 132, 136, 137, 146, 149, 154, 160, 166, 171, 172, 173, 174, 193, 212, 263, 264, 265, 271, 273, 312, 313, 315, 316, 317, 319, 320, 321, 323, 336, 338, 363, 419, 422, 432, 433, 434, 439, 441, 445, 458, 465, 479, 481, 482], "neurovault": [2, 96, 108, 112, 114, 115, 135, 142, 147, 151, 154, 174, 183, 270, 271, 272, 273, 282, 346, 351, 352, 354, 358, 367, 373, 426, 434, 439, 481, 482], "repositori": [2, 114, 115, 169, 174, 177, 179, 214, 260, 270, 272, 482], "motor_imag": [2, 479], "fetch_neurovault_motor_task": [2, 14, 139, 154, 271, 479], "imag": [2, 6, 10, 11, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 62, 63, 65, 66, 68, 69, 70, 74, 75, 76, 77, 78, 79, 83, 85, 86, 87, 88, 90, 91, 93, 95, 97, 99, 100, 101, 103, 104, 105, 107, 109, 111, 114, 115, 121, 123, 124, 125, 126, 127, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 162, 166, 167, 169, 171, 174, 176, 178, 186, 187, 188, 189, 191, 193, 196, 197, 199, 205, 206, 207, 208, 209, 210, 212, 213, 214, 216, 217, 219, 222, 223, 224, 225, 227, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 256, 259, 260, 261, 263, 265, 266, 267, 269, 270, 271, 272, 273, 274, 277, 278, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 304, 305, 306, 307, 308, 318, 320, 323, 326, 336, 337, 338, 339, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 460, 461, 464, 466, 472, 481, 482], "collection_658": 2, "image_10426": [2, 14], "nii": [2, 3, 4, 6, 10, 11, 14, 16, 18, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 70, 74, 76, 84, 85, 88, 90, 91, 93, 94, 100, 101, 103, 104, 107, 116, 176, 179, 191, 197, 326, 361, 363, 364, 365, 435, 444, 462, 466], "gz": [2, 3, 4, 6, 10, 11, 14, 16, 18, 22, 23, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 70, 74, 76, 84, 85, 88, 90, 91, 93, 94, 100, 101, 103, 104, 116, 176, 177, 179, 191, 197, 363, 364, 365, 435, 444, 462, 463, 466], "filenam": [2, 3, 4, 10, 15, 50, 55, 61, 93, 116, 126, 132, 142, 149, 150, 154, 156, 159, 160, 169, 179, 180, 243, 244, 275, 289, 291, 292, 293, 294, 296, 297, 300, 301, 302, 351, 363, 367, 370, 373, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 424, 432], "take": [2, 3, 4, 6, 9, 24, 29, 33, 40, 42, 43, 49, 50, 64, 65, 66, 67, 69, 71, 76, 78, 93, 97, 99, 102, 107, 116, 124, 136, 139, 142, 148, 154, 155, 156, 158, 161, 164, 166, 168, 169, 170, 171, 179, 181, 220, 227, 261, 270, 282, 283, 284, 285, 286, 287, 291, 292, 293, 294, 295, 299, 323, 325, 330, 338, 371, 383, 384, 388, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 446, 448, 450, 464, 477, 479], "tmap_filenam": [2, 87], "0": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 113, 114, 116, 155, 156, 159, 161, 167, 168, 169, 170, 171, 177, 179, 180, 181, 191, 192, 196, 200, 201, 202, 203, 204, 217, 224, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 291, 292, 293, 294, 295, 296, 297, 298, 299, 310, 311, 313, 314, 315, 316, 318, 319, 320, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 347, 348, 350, 351, 352, 353, 354, 356, 357, 358, 360, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 419, 420, 421, 426, 430, 431, 432, 433, 434, 435, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 456, 457, 458, 460, 461, 464, 465, 466, 479, 480, 481], "contain": [2, 3, 4, 6, 10, 11, 22, 23, 36, 40, 49, 52, 55, 62, 67, 70, 71, 78, 83, 85, 90, 93, 100, 105, 106, 107, 116, 117, 124, 125, 126, 129, 134, 139, 142, 151, 152, 154, 155, 161, 162, 165, 168, 169, 171, 174, 177, 179, 181, 187, 188, 189, 190, 191, 194, 196, 199, 205, 206, 208, 212, 214, 215, 216, 217, 227, 228, 229, 231, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 259, 269, 270, 271, 272, 273, 274, 280, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 304, 306, 312, 313, 315, 316, 317, 323, 326, 336, 337, 338, 341, 342, 350, 356, 360, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 384, 429, 430, 435, 436, 437, 438, 442, 444, 445, 446, 447, 448, 449, 451, 452, 456, 458, 460, 462, 463, 464, 471, 482], "easili": [2, 3, 9, 15, 23, 30, 31, 39, 49, 58, 93, 116, 117, 149, 154, 161, 162, 164, 166, 167, 168, 169, 170, 174, 177, 243, 244, 265, 336, 338], "statist": [2, 6, 8, 14, 22, 23, 27, 33, 36, 40, 42, 49, 64, 65, 67, 69, 70, 73, 74, 81, 82, 95, 99, 100, 101, 102, 104, 107, 114, 115, 123, 126, 127, 134, 135, 145, 147, 151, 154, 155, 160, 163, 166, 168, 169, 170, 172, 174, 175, 176, 180, 181, 194, 223, 228, 231, 241, 249, 264, 270, 271, 272, 279, 288, 311, 312, 313, 315, 316, 317, 318, 319, 323, 336, 338, 339, 341, 360, 363, 384, 397, 398, 426, 429, 432, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 448, 450, 457, 458, 460, 462, 464, 465, 475, 480, 481, 482], "map": [2, 3, 8, 11, 14, 15, 19, 20, 22, 23, 27, 33, 37, 39, 44, 46, 50, 51, 52, 53, 54, 56, 59, 61, 62, 65, 67, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 82, 83, 86, 88, 89, 90, 91, 92, 95, 96, 98, 100, 101, 103, 107, 108, 112, 114, 115, 124, 125, 126, 127, 131, 134, 135, 139, 140, 142, 145, 146, 149, 152, 154, 155, 156, 157, 160, 162, 164, 165, 166, 169, 170, 171, 172, 174, 175, 176, 179, 180, 181, 190, 191, 193, 194, 197, 199, 200, 201, 202, 203, 204, 205, 207, 208, 213, 217, 219, 221, 224, 227, 228, 229, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 256, 260, 263, 264, 265, 270, 271, 272, 273, 274, 279, 282, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 318, 319, 323, 332, 336, 338, 339, 341, 343, 349, 358, 360, 363, 367, 368, 369, 370, 371, 372, 373, 374, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 418, 420, 426, 427, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 452, 455, 457, 458, 460, 462, 464, 465, 471, 475, 481, 482], "plot_stat_map": [2, 6, 9, 15, 17, 29, 30, 31, 36, 39, 40, 42, 43, 48, 50, 55, 61, 64, 65, 68, 69, 70, 74, 75, 76, 80, 84, 86, 87, 89, 91, 92, 93, 97, 99, 101, 102, 103, 105, 106, 116, 126, 127, 138, 139, 146, 147, 149, 150, 154, 159, 161, 173, 181, 441, 479], "displai": [2, 3, 4, 6, 10, 11, 13, 16, 17, 18, 20, 21, 22, 23, 25, 26, 39, 40, 42, 47, 48, 49, 50, 51, 55, 61, 62, 64, 65, 66, 67, 68, 69, 70, 74, 79, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 97, 98, 99, 101, 104, 105, 123, 126, 131, 136, 137, 139, 140, 142, 146, 147, 149, 151, 152, 154, 156, 159, 160, 166, 171, 175, 180, 323, 330, 336, 369, 372, 374, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 448, 456, 458, 466, 482], "_slicer": [2, 3, 4, 6, 9, 10, 15, 16, 17, 25, 39, 48, 49, 50, 68, 70, 74, 80, 85, 87, 88, 91, 93, 97, 149, 154], "orthoslic": [2, 3, 4, 6, 10, 15, 16, 17, 25, 48, 50, 68, 70, 74, 80, 85, 88, 93, 97, 149, 154, 395, 400, 402, 404, 406, 408, 410, 412, 414, 419, 424, 427, 432, 433, 434, 479], "object": [2, 3, 4, 5, 6, 9, 10, 13, 14, 15, 16, 17, 25, 28, 30, 32, 33, 36, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 63, 68, 70, 74, 80, 85, 87, 88, 90, 91, 93, 97, 112, 114, 116, 117, 124, 125, 131, 134, 142, 145, 148, 149, 151, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 168, 169, 170, 174, 175, 176, 178, 180, 206, 227, 228, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 278, 279, 280, 291, 292, 293, 294, 295, 296, 297, 298, 299, 305, 306, 307, 308, 313, 315, 316, 318, 323, 326, 336, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 463, 464, 466, 468, 471, 474, 479, 481, 482], "0x7f18d28102f0": 2, "better": [2, 3, 30, 33, 42, 43, 49, 65, 93, 99, 102, 114, 122, 124, 125, 130, 133, 139, 147, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 168, 170, 180, 228, 432, 448, 464, 482], "threshold": [2, 3, 9, 13, 14, 16, 17, 23, 30, 33, 36, 37, 39, 40, 42, 48, 49, 50, 54, 55, 56, 61, 64, 65, 67, 68, 69, 70, 74, 75, 76, 78, 79, 80, 86, 87, 88, 89, 92, 93, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 114, 117, 125, 126, 127, 140, 142, 146, 149, 151, 152, 154, 156, 159, 168, 171, 172, 174, 180, 261, 282, 283, 286, 298, 318, 322, 323, 336, 338, 339, 340, 360, 364, 365, 377, 378, 379, 380, 381, 382, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 418, 419, 421, 426, 427, 429, 432, 433, 434, 435, 437, 438, 440, 441, 442, 444, 447, 448, 453, 457, 458, 465, 479, 482], "3": [2, 3, 4, 6, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 114, 118, 122, 123, 129, 132, 133, 136, 139, 140, 141, 142, 147, 148, 149, 150, 152, 155, 159, 161, 166, 167, 170, 171, 176, 180, 181, 187, 188, 191, 194, 195, 196, 200, 201, 202, 203, 204, 205, 207, 213, 219, 224, 225, 227, 228, 229, 231, 233, 234, 235, 239, 240, 242, 245, 246, 247, 249, 250, 251, 252, 256, 257, 260, 262, 267, 270, 272, 275, 279, 280, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 311, 313, 315, 316, 318, 319, 323, 325, 326, 330, 336, 339, 340, 348, 350, 352, 353, 356, 358, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 376, 378, 379, 381, 383, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 419, 421, 424, 426, 427, 430, 432, 433, 434, 435, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 456, 458, 464, 465, 466, 468, 479, 480, 481], "0x7f18c6aeeb10": 2, "rest": [2, 3, 6, 21, 23, 30, 32, 33, 35, 41, 48, 50, 51, 54, 55, 56, 62, 68, 70, 84, 86, 88, 91, 97, 98, 99, 114, 125, 130, 134, 154, 158, 159, 160, 164, 168, 169, 174, 176, 179, 186, 187, 189, 190, 191, 194, 198, 213, 215, 220, 221, 222, 226, 235, 236, 238, 239, 248, 267, 280, 290, 299, 362, 364, 365, 373, 431, 448, 466, 482], "network": [2, 8, 19, 20, 21, 27, 46, 47, 48, 51, 54, 55, 60, 71, 72, 82, 85, 93, 95, 100, 112, 114, 117, 131, 145, 151, 154, 155, 156, 157, 159, 169, 170, 174, 175, 176, 181, 183, 186, 190, 191, 193, 198, 216, 218, 219, 220, 221, 235, 236, 238, 239, 245, 247, 248, 251, 253, 254, 255, 265, 267, 323, 330, 348, 364, 365, 367, 369, 372, 374, 397, 418, 430, 431, 432, 434, 439, 448, 456, 458, 465, 466, 479, 481, 482], "smith": [2, 21, 82, 93, 95, 101, 112, 114, 155, 174, 183, 187, 248, 267, 338, 348, 367, 372, 384, 418, 432, 434, 439, 448, 481], "2009": [2, 21, 114, 122, 145, 148, 154, 174, 176, 183, 187, 191, 195, 207, 241, 248, 260, 261, 267, 285, 338, 384], "correspond": [2, 3, 6, 14, 24, 29, 30, 33, 34, 36, 39, 40, 44, 49, 55, 56, 63, 64, 65, 67, 68, 71, 76, 77, 78, 79, 80, 85, 90, 91, 93, 100, 101, 107, 114, 125, 144, 146, 154, 156, 161, 162, 164, 166, 168, 169, 171, 174, 175, 177, 181, 191, 193, 221, 224, 227, 237, 242, 245, 248, 255, 261, 265, 272, 274, 282, 283, 286, 291, 292, 293, 294, 296, 297, 298, 299, 305, 319, 320, 323, 325, 326, 330, 332, 336, 337, 338, 352, 353, 356, 361, 368, 370, 371, 372, 373, 376, 377, 378, 379, 380, 381, 382, 384, 413, 414, 419, 420, 424, 427, 428, 430, 432, 433, 434, 436, 446, 448, 449, 451, 452, 454, 457, 458, 464], "between": [2, 6, 9, 22, 23, 24, 30, 40, 42, 49, 50, 51, 55, 62, 65, 67, 69, 71, 74, 76, 78, 79, 85, 88, 91, 98, 99, 101, 104, 127, 134, 139, 142, 145, 148, 154, 155, 156, 157, 159, 161, 162, 166, 168, 169, 170, 171, 173, 174, 175, 176, 177, 187, 191, 206, 222, 235, 247, 267, 285, 293, 294, 299, 323, 326, 336, 341, 378, 384, 385, 387, 388, 415, 419, 421, 426, 428, 430, 432, 433, 434, 435, 437, 438, 441, 442, 444, 446, 457, 458, 460, 464, 466], "task": [2, 3, 17, 29, 30, 31, 34, 39, 48, 49, 60, 62, 65, 67, 72, 76, 80, 88, 91, 96, 102, 108, 112, 114, 126, 139, 150, 154, 160, 161, 162, 165, 168, 170, 171, 174, 175, 176, 177, 181, 197, 221, 228, 231, 259, 262, 264, 265, 290, 323, 326, 342, 346, 361, 367, 373, 374, 384, 397, 412, 423, 425, 426, 434, 439, 466, 481], "rsn": [2, 21, 86, 134, 154, 190, 221, 238, 248], "fetch_atlas_smith_2009": [2, 21, 86, 124, 125, 154, 221], "true": [2, 3, 4, 6, 9, 13, 14, 15, 16, 21, 22, 23, 25, 26, 29, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62, 67, 68, 69, 70, 71, 73, 74, 76, 78, 79, 80, 81, 85, 86, 88, 90, 91, 93, 97, 98, 99, 100, 101, 102, 104, 107, 110, 112, 116, 117, 125, 134, 137, 142, 149, 154, 156, 159, 161, 164, 166, 168, 171, 173, 174, 181, 227, 228, 229, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 253, 254, 255, 256, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 272, 274, 280, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 318, 323, 326, 336, 338, 339, 340, 341, 342, 345, 347, 351, 356, 357, 360, 361, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 451, 452, 454, 457, 459, 460, 461, 466, 479, 481], "dimens": [2, 15, 21, 29, 33, 34, 40, 47, 49, 65, 86, 93, 116, 126, 147, 154, 165, 171, 174, 180, 181, 187, 227, 233, 234, 242, 248, 267, 274, 291, 292, 293, 294, 298, 299, 311, 313, 315, 316, 323, 338, 341, 342, 348, 349, 352, 353, 358, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 417, 420, 431, 432, 446, 448, 460, 482], "smith_2009": 2, "pnas_smith09_rsn10": 2, "It": [2, 3, 6, 9, 14, 15, 16, 22, 34, 41, 42, 44, 48, 51, 61, 64, 65, 69, 70, 74, 76, 80, 88, 93, 97, 99, 100, 107, 115, 116, 117, 121, 129, 132, 133, 135, 146, 147, 148, 149, 154, 155, 156, 161, 162, 164, 165, 166, 168, 169, 171, 174, 175, 176, 177, 179, 180, 181, 191, 192, 210, 213, 214, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 480], "nifti": [2, 4, 10, 11, 16, 18, 25, 29, 30, 32, 34, 35, 36, 41, 47, 48, 49, 52, 53, 54, 56, 58, 76, 78, 83, 85, 88, 90, 91, 93, 94, 101, 103, 104, 116, 126, 127, 145, 151, 152, 154, 156, 160, 161, 169, 178, 188, 189, 193, 196, 197, 199, 205, 206, 208, 212, 213, 214, 216, 217, 219, 224, 235, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 251, 256, 258, 259, 263, 264, 265, 268, 269, 274, 291, 292, 296, 297, 298, 299, 342, 343, 346, 350, 351, 352, 356, 359, 424, 446, 449, 464, 471, 479, 482], "load": [2, 4, 6, 8, 9, 21, 23, 27, 49, 52, 53, 54, 58, 61, 62, 67, 68, 70, 76, 87, 88, 90, 92, 101, 102, 103, 104, 105, 106, 107, 112, 115, 123, 124, 125, 132, 134, 137, 139, 148, 149, 151, 154, 157, 160, 164, 165, 168, 169, 176, 178, 180, 207, 235, 236, 239, 241, 243, 244, 245, 248, 249, 253, 254, 255, 256, 259, 260, 261, 264, 265, 268, 269, 270, 272, 274, 279, 280, 282, 283, 284, 285, 286, 287, 288, 298, 299, 300, 307, 308, 309, 326, 340, 351, 352, 354, 364, 365, 421, 437, 439, 440, 444, 462, 463, 471, 479, 481, 482], "memori": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 131, 139, 140, 154, 158, 159, 168, 180, 181, 228, 279, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 306, 311, 316, 323, 326, 336, 342, 346, 356, 357, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 442, 446, 447, 448, 459, 466, 479], "its": [2, 3, 15, 19, 26, 29, 30, 31, 32, 33, 34, 35, 36, 40, 44, 56, 58, 65, 67, 83, 87, 88, 89, 91, 93, 97, 99, 107, 116, 117, 131, 134, 142, 145, 147, 149, 151, 154, 155, 158, 160, 161, 162, 164, 166, 167, 168, 169, 171, 173, 174, 177, 181, 206, 234, 247, 249, 259, 270, 271, 272, 273, 291, 292, 293, 294, 296, 297, 298, 299, 310, 314, 323, 325, 330, 336, 337, 338, 340, 351, 419, 420, 421, 424, 426, 427, 430, 432, 433, 434, 435, 436, 437, 438, 445, 446, 447, 448, 466, 475], "shape": [2, 3, 4, 20, 23, 25, 40, 41, 43, 47, 49, 50, 51, 53, 54, 55, 56, 58, 61, 64, 65, 66, 67, 69, 70, 83, 90, 92, 93, 97, 99, 101, 102, 104, 105, 106, 107, 110, 116, 147, 148, 154, 156, 158, 159, 161, 164, 170, 171, 174, 176, 178, 181, 227, 228, 229, 231, 233, 234, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 268, 274, 291, 292, 293, 294, 296, 297, 298, 299, 304, 305, 306, 310, 311, 313, 314, 315, 316, 319, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 341, 342, 343, 346, 347, 348, 352, 353, 356, 357, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 421, 422, 430, 440, 443, 445, 446, 447, 448, 451, 452, 453, 454, 455, 460, 461, 482], "load_img": [2, 36, 92, 93, 106, 132, 154, 179, 180], "91": [2, 30, 33, 41, 43, 49, 56, 76, 90, 148, 154, 237, 248, 465, 466], "109": [2, 33, 41, 43, 56, 89, 90, 95, 148, 154, 237, 248, 465, 466, 481], "note": [2, 3, 4, 6, 14, 15, 20, 23, 42, 43, 44, 48, 49, 52, 54, 55, 56, 58, 64, 65, 67, 68, 70, 74, 75, 78, 83, 85, 90, 93, 94, 100, 101, 103, 107, 114, 116, 117, 124, 149, 154, 155, 156, 160, 166, 167, 168, 169, 170, 171, 177, 179, 180, 181, 191, 227, 228, 229, 234, 235, 237, 238, 239, 242, 247, 248, 251, 256, 259, 260, 261, 263, 264, 267, 269, 270, 271, 272, 273, 274, 275, 281, 282, 283, 286, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 310, 313, 314, 315, 316, 323, 336, 339, 341, 347, 350, 352, 353, 356, 359, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 420, 424, 426, 433, 434, 445, 446, 447, 448, 449, 460, 461, 464, 466, 479], "index": [2, 6, 12, 20, 22, 23, 33, 40, 41, 50, 55, 56, 64, 65, 67, 70, 71, 86, 87, 99, 100, 102, 126, 131, 149, 154, 159, 189, 190, 237, 238, 246, 247, 249, 257, 276, 290, 291, 292, 293, 294, 313, 315, 316, 330, 348, 356, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 436, 448, 450, 460, 464], "start": [2, 3, 6, 30, 40, 49, 56, 58, 67, 69, 83, 90, 93, 151, 154, 161, 168, 169, 174, 175, 177, 181, 222, 239, 240, 248, 250, 320, 323, 325, 330, 367, 368, 369, 370, 371, 372, 373, 374, 384, 448, 464], "first_rsn": 2, "index_img": [2, 3, 20, 29, 30, 31, 32, 33, 34, 36, 37, 49, 50, 86, 88, 91, 97, 101, 103, 156, 159, 180, 181, 342, 349], "0x7f18d71522d0": 2, "iter_img": [2, 48, 180, 348], "them": [2, 3, 6, 14, 19, 30, 32, 39, 42, 44, 49, 50, 54, 55, 58, 62, 64, 67, 69, 70, 71, 78, 79, 85, 88, 93, 99, 102, 103, 107, 112, 116, 117, 121, 125, 127, 139, 145, 146, 148, 151, 152, 154, 155, 156, 160, 162, 164, 169, 171, 174, 175, 176, 179, 181, 237, 270, 272, 326, 383, 384, 446, 479], "Then": [2, 3, 14, 30, 40, 42, 50, 51, 55, 62, 63, 67, 93, 94, 159, 161, 163, 164, 169, 180, 181, 227, 229, 261, 445], "give": [2, 3, 4, 9, 14, 15, 16, 24, 29, 33, 42, 49, 52, 54, 55, 56, 58, 67, 83, 90, 93, 97, 102, 114, 116, 124, 132, 134, 149, 154, 155, 156, 158, 160, 161, 162, 163, 164, 166, 168, 176, 180, 181, 199, 222, 263, 264, 272, 291, 292, 293, 294, 295, 298, 299, 310, 318, 323, 325, 330, 336, 338, 353, 358, 361, 368, 369, 370, 371, 372, 373, 374, 375, 382, 431, 436, 437, 445, 446, 448, 450, 454, 455, 464], "few": [2, 14, 15, 25, 39, 40, 49, 76, 80, 90, 101, 137, 138, 154, 160, 162, 165, 167, 169, 170, 177, 180, 446, 464, 482], "argument": [2, 6, 9, 14, 15, 17, 48, 55, 58, 66, 68, 79, 88, 91, 93, 117, 124, 125, 126, 131, 132, 134, 135, 136, 137, 139, 140, 142, 145, 146, 147, 148, 149, 151, 154, 161, 162, 164, 166, 168, 169, 170, 173, 177, 179, 231, 235, 243, 244, 270, 281, 291, 292, 293, 294, 295, 326, 336, 338, 341, 352, 355, 365, 368, 369, 370, 371, 372, 373, 374, 380, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 424, 425, 426, 427, 429, 431, 432, 433, 434, 436, 437, 438, 442, 445, 447, 460, 479], "more": [2, 3, 4, 6, 8, 9, 13, 14, 16, 19, 21, 22, 23, 26, 27, 28, 29, 31, 33, 39, 40, 42, 43, 46, 48, 49, 50, 52, 54, 55, 56, 58, 60, 61, 62, 65, 67, 68, 69, 70, 73, 74, 76, 78, 79, 82, 85, 88, 90, 93, 97, 99, 100, 101, 102, 104, 106, 107, 112, 115, 116, 117, 119, 123, 124, 125, 128, 132, 134, 136, 138, 139, 142, 144, 148, 149, 150, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 174, 176, 177, 179, 180, 181, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 199, 205, 206, 207, 208, 212, 213, 214, 216, 220, 221, 224, 225, 228, 235, 237, 238, 239, 240, 245, 247, 248, 250, 251, 256, 259, 260, 261, 265, 267, 270, 272, 274, 279, 282, 283, 285, 286, 288, 290, 291, 292, 293, 294, 296, 297, 298, 299, 311, 313, 315, 316, 323, 326, 336, 338, 342, 353, 361, 365, 368, 369, 370, 371, 372, 373, 374, 384, 395, 397, 400, 402, 404, 406, 408, 410, 412, 419, 427, 432, 433, 434, 439, 441, 442, 445, 446, 447, 448, 450, 457, 459, 464, 466, 469, 479, 480, 481, 482], "compact": [2, 93, 180, 261], "img": [2, 4, 6, 10, 50, 62, 69, 70, 76, 78, 83, 89, 100, 104, 110, 134, 142, 154, 159, 169, 179, 295, 298, 299, 305, 306, 326, 336, 338, 340, 341, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 367, 368, 369, 370, 371, 372, 373, 374, 375, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 418, 420, 427, 428, 446, 448, 451, 452, 454, 455, 457, 464, 479], "display_mod": [2, 6, 9, 13, 14, 15, 18, 30, 31, 36, 39, 40, 42, 43, 48, 49, 53, 58, 62, 64, 65, 68, 69, 74, 75, 78, 86, 87, 91, 100, 101, 104, 105, 106, 116, 132, 149, 154, 323, 336, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 419, 421, 424, 426, 427, 430, 432, 433, 434, 458, 479], "z": [2, 13, 14, 15, 18, 24, 30, 33, 36, 40, 42, 43, 48, 52, 54, 58, 61, 62, 64, 65, 67, 68, 69, 74, 75, 78, 79, 80, 83, 86, 87, 93, 100, 101, 104, 105, 107, 114, 134, 136, 140, 151, 152, 154, 169, 171, 174, 177, 180, 181, 191, 245, 270, 300, 311, 318, 320, 322, 323, 336, 339, 343, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 384, 385, 387, 388, 392, 393, 394, 395, 396, 403, 404, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 421, 424, 426, 427, 430, 432, 433, 434, 435, 436, 437, 438, 441, 444, 448, 449, 457, 458, 460, 465, 479], "cut_coord": [2, 6, 9, 15, 16, 17, 18, 20, 30, 31, 36, 39, 40, 42, 43, 48, 49, 50, 55, 61, 64, 65, 68, 69, 70, 74, 76, 78, 80, 85, 86, 87, 89, 91, 92, 93, 99, 101, 104, 105, 106, 123, 127, 154, 159, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 424, 427, 432, 433, 434, 441, 458, 479], "1": [2, 3, 4, 5, 6, 9, 11, 12, 15, 18, 19, 22, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 114, 116, 117, 123, 125, 126, 127, 129, 133, 134, 136, 139, 141, 142, 149, 151, 152, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 171, 174, 176, 177, 179, 181, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 308, 310, 311, 313, 314, 315, 316, 318, 323, 326, 330, 332, 336, 338, 340, 341, 345, 348, 350, 353, 356, 358, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 420, 421, 422, 426, 428, 430, 431, 432, 433, 435, 437, 438, 441, 442, 444, 445, 446, 447, 448, 453, 455, 457, 460, 461, 464, 465, 466, 479, 480, 481], "colorbar": [2, 6, 9, 14, 20, 21, 23, 25, 26, 36, 37, 40, 48, 50, 51, 54, 57, 58, 62, 67, 68, 74, 75, 76, 78, 79, 85, 86, 87, 93, 100, 102, 104, 107, 121, 123, 126, 131, 134, 139, 140, 142, 146, 147, 148, 149, 150, 152, 154, 159, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 440, 441, 442, 444, 479], "fals": [2, 6, 9, 14, 15, 17, 18, 20, 21, 22, 33, 34, 36, 37, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 62, 68, 71, 74, 75, 76, 78, 79, 80, 85, 86, 87, 88, 90, 91, 93, 98, 99, 100, 101, 102, 104, 105, 107, 110, 117, 125, 142, 145, 146, 147, 149, 151, 154, 159, 166, 170, 171, 174, 181, 227, 228, 229, 231, 233, 235, 241, 242, 243, 244, 253, 254, 255, 256, 259, 265, 268, 270, 272, 274, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 318, 320, 323, 326, 336, 338, 339, 340, 341, 342, 345, 354, 356, 357, 360, 361, 364, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 419, 421, 422, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 457, 458, 459, 460, 465, 466, 479], "slice": [2, 3, 6, 9, 16, 36, 88, 93, 104, 116, 124, 138, 145, 147, 154, 166, 179, 181, 190, 191, 222, 323, 326, 336, 348, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 427, 458, 482], "constructor": [2, 117, 315, 316, 348], "desir": [2, 62, 177, 181, 298, 299, 322, 323, 325, 330, 336, 339, 361, 413, 414, 446], "afterward": [2, 168, 177], "ll": [2, 6, 49, 58, 296, 297], "follow": [2, 4, 9, 14, 18, 21, 22, 29, 32, 34, 35, 36, 40, 41, 42, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 64, 65, 68, 71, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 110, 112, 116, 117, 136, 139, 140, 141, 142, 143, 144, 148, 154, 155, 156, 159, 160, 166, 169, 170, 171, 174, 176, 177, 179, 191, 199, 210, 274, 279, 281, 341, 347, 361, 363, 364, 365, 369, 372, 374, 376, 377, 378, 380, 381, 442, 448, 460, 461, 479, 480], "same": [2, 3, 6, 14, 15, 21, 23, 34, 37, 40, 41, 47, 49, 50, 55, 58, 63, 65, 67, 68, 69, 70, 83, 85, 87, 93, 97, 99, 100, 101, 107, 117, 125, 127, 134, 139, 145, 146, 147, 148, 149, 154, 155, 156, 159, 160, 161, 162, 166, 168, 169, 171, 173, 174, 177, 179, 180, 181, 199, 223, 227, 228, 229, 231, 243, 244, 252, 253, 255, 260, 261, 279, 291, 292, 293, 294, 296, 297, 298, 299, 323, 326, 336, 338, 341, 343, 352, 354, 356, 361, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 380, 382, 384, 390, 391, 392, 393, 394, 403, 404, 407, 408, 409, 410, 415, 419, 421, 424, 426, 427, 431, 432, 433, 434, 442, 445, 446, 449, 454, 455, 457, 458, 460], "formula": [2, 130, 154, 168, 336, 338, 352, 422], "befor": [2, 15, 49, 55, 56, 70, 88, 93, 97, 102, 116, 123, 125, 139, 142, 145, 147, 149, 151, 152, 154, 158, 159, 161, 162, 164, 169, 170, 171, 173, 176, 177, 179, 180, 181, 187, 231, 270, 272, 298, 299, 323, 325, 330, 341, 345, 347, 364, 365, 368, 369, 371, 372, 374, 420, 435, 437, 438, 442, 444, 446, 451, 452, 460, 461, 479], "selected_volum": 2, "5": [2, 3, 4, 6, 7, 12, 18, 20, 22, 23, 24, 25, 27, 29, 30, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 62, 64, 65, 66, 67, 68, 70, 71, 74, 75, 76, 78, 80, 87, 88, 90, 93, 94, 97, 98, 99, 100, 102, 104, 105, 106, 107, 108, 114, 123, 126, 129, 136, 142, 147, 148, 149, 150, 155, 159, 161, 166, 167, 168, 171, 180, 181, 187, 190, 191, 195, 199, 207, 210, 212, 217, 224, 238, 240, 243, 244, 246, 247, 250, 255, 256, 259, 260, 261, 265, 267, 269, 282, 285, 296, 297, 313, 315, 316, 341, 347, 348, 351, 364, 365, 377, 379, 380, 381, 382, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 432, 433, 435, 437, 438, 440, 442, 443, 444, 459, 460, 461, 464, 465, 466, 479, 481], "re": [2, 6, 21, 23, 40, 64, 65, 67, 69, 83, 117, 148, 154, 169, 270, 282, 283, 284, 285, 286, 287, 313, 315, 316, 326, 449], "thing": [2, 3, 56, 65, 124, 154, 158, 167, 168, 169, 177, 181, 313, 341, 460, 479], "base": [2, 8, 20, 27, 28, 29, 34, 44, 45, 47, 48, 49, 51, 54, 55, 60, 61, 65, 69, 72, 73, 80, 81, 87, 88, 90, 91, 96, 97, 98, 104, 108, 112, 114, 117, 123, 125, 126, 130, 134, 142, 145, 147, 150, 154, 155, 156, 157, 158, 160, 161, 164, 166, 167, 168, 169, 171, 172, 174, 175, 176, 177, 181, 183, 189, 191, 193, 195, 196, 197, 205, 212, 213, 214, 228, 231, 235, 236, 241, 247, 249, 256, 258, 259, 260, 261, 262, 265, 266, 267, 270, 272, 274, 277, 278, 279, 280, 291, 292, 293, 294, 295, 297, 298, 299, 311, 319, 323, 326, 330, 332, 336, 338, 339, 340, 341, 342, 346, 348, 352, 357, 360, 363, 364, 365, 367, 373, 374, 378, 384, 385, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 423, 432, 433, 434, 437, 438, 439, 441, 445, 446, 448, 449, 450, 456, 458, 460, 461, 462, 463, 464, 465, 466, 479, 480, 481, 482], "confirm": [2, 29, 125, 154, 169], "match": [2, 6, 15, 117, 124, 125, 126, 142, 146, 147, 149, 152, 154, 160, 166, 169, 174, 178, 181, 221, 237, 248, 270, 290, 291, 292, 293, 294, 296, 297, 298, 299, 323, 326, 336, 338, 342, 351, 353, 356, 361, 363, 364, 368, 369, 371, 372, 376, 378, 379, 381, 432, 446, 449, 482], "previou": [2, 9, 14, 41, 49, 54, 58, 62, 65, 76, 93, 148, 149, 154, 155, 158, 162, 164, 168, 171, 231, 291, 292, 293, 294, 298, 299, 370, 373, 446, 466], "abov": [2, 3, 4, 14, 21, 33, 42, 48, 49, 56, 65, 67, 85, 93, 99, 117, 126, 134, 154, 155, 156, 158, 160, 161, 166, 168, 169, 170, 174, 177, 179, 180, 181, 206, 221, 237, 259, 261, 282, 283, 286, 291, 292, 293, 294, 296, 297, 310, 311, 313, 314, 315, 316, 319, 356, 357, 364, 368, 369, 370, 371, 372, 373, 374, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 432, 440, 442, 444, 446, 448, 459, 460], "show": [2, 4, 6, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 116, 126, 134, 140, 145, 147, 149, 154, 155, 156, 159, 161, 162, 164, 166, 169, 171, 173, 180, 181, 206, 223, 259, 271, 288, 310, 323, 336, 395, 397, 398, 400, 402, 404, 406, 408, 410, 412, 436, 440, 443, 448, 458, 466, 479, 481], "forc": [2, 93, 110, 129, 154, 168, 181, 191, 239, 248, 270, 271, 272, 273], "figur": [2, 4, 9, 12, 14, 15, 18, 22, 23, 24, 25, 30, 31, 32, 34, 35, 36, 40, 41, 42, 43, 44, 48, 49, 51, 52, 56, 57, 61, 62, 64, 65, 66, 68, 74, 78, 83, 90, 93, 98, 99, 100, 104, 105, 107, 110, 125, 136, 145, 146, 149, 150, 151, 154, 169, 170, 171, 180, 363, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 479], "when": [2, 3, 4, 8, 9, 16, 24, 27, 54, 58, 65, 66, 67, 74, 88, 90, 91, 93, 99, 101, 104, 105, 112, 116, 117, 123, 124, 125, 126, 127, 129, 133, 134, 135, 137, 140, 142, 145, 146, 149, 150, 151, 152, 154, 155, 156, 158, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 173, 174, 177, 180, 193, 194, 227, 235, 237, 240, 246, 247, 263, 265, 270, 272, 291, 292, 293, 294, 295, 296, 297, 311, 312, 316, 317, 320, 323, 336, 338, 356, 358, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 384, 385, 387, 388, 416, 426, 427, 432, 433, 434, 435, 437, 438, 439, 441, 442, 444, 446, 451, 458, 459, 460, 464, 466, 479, 481], "outsid": [2, 4, 16, 65, 126, 151, 154, 169, 176, 181, 356, 357, 371, 435, 437, 438, 444, 451, 452, 457, 464], "ipython": [2, 4, 16, 161, 176, 480], "recap": [2, 4], "call": [2, 4, 6, 14, 15, 16, 33, 48, 49, 50, 52, 53, 56, 58, 65, 67, 71, 75, 80, 86, 88, 90, 93, 97, 103, 116, 117, 126, 142, 154, 155, 156, 158, 159, 161, 162, 166, 168, 169, 170, 171, 173, 174, 177, 179, 181, 185, 191, 227, 229, 231, 239, 251, 270, 272, 275, 297, 299, 312, 317, 323, 326, 336, 341, 351, 368, 369, 370, 371, 372, 373, 374, 380, 420, 421, 430, 446, 460, 479], "differ": [2, 6, 9, 15, 19, 20, 21, 22, 23, 28, 29, 45, 46, 51, 52, 54, 55, 58, 59, 63, 65, 66, 67, 68, 69, 70, 71, 74, 78, 79, 80, 88, 90, 93, 97, 98, 99, 101, 102, 112, 114, 116, 123, 125, 126, 140, 146, 148, 154, 156, 157, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 174, 178, 179, 187, 191, 197, 199, 206, 219, 227, 229, 242, 251, 256, 259, 282, 283, 284, 285, 286, 287, 291, 293, 294, 296, 297, 315, 316, 319, 323, 325, 326, 330, 332, 336, 342, 346, 348, 353, 361, 364, 367, 368, 369, 371, 372, 373, 383, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 419, 421, 424, 426, 427, 431, 432, 433, 434, 439, 446, 448, 457, 458, 464, 466, 481, 482], "flavor": [2, 191], "onli": [2, 3, 6, 13, 14, 19, 29, 31, 32, 33, 34, 36, 37, 40, 42, 43, 49, 51, 52, 54, 55, 58, 65, 67, 74, 78, 80, 83, 85, 90, 93, 97, 98, 99, 100, 102, 103, 107, 116, 117, 124, 132, 137, 142, 147, 149, 150, 152, 154, 155, 156, 158, 159, 161, 162, 163, 164, 166, 168, 169, 171, 173, 174, 177, 178, 179, 180, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 479, 482], "multipl": [2, 6, 19, 42, 47, 76, 78, 80, 100, 114, 124, 145, 146, 154, 157, 162, 164, 166, 169, 172, 174, 178, 179, 180, 187, 191, 208, 212, 239, 240, 248, 290, 313, 331, 336, 338, 348, 351, 352, 368, 369, 370, 384, 395, 397, 400, 414, 419, 424, 427, 429, 432, 433, 434, 441, 466, 479, 482], "detail": [2, 3, 8, 9, 12, 14, 15, 16, 19, 22, 23, 26, 28, 29, 31, 33, 39, 46, 48, 50, 52, 54, 58, 60, 62, 69, 70, 71, 73, 80, 82, 90, 94, 99, 100, 101, 102, 106, 112, 116, 117, 119, 134, 139, 142, 151, 154, 155, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 172, 177, 178, 179, 181, 183, 187, 199, 205, 208, 223, 227, 235, 239, 243, 244, 247, 256, 261, 265, 267, 282, 283, 284, 285, 286, 287, 291, 292, 293, 294, 298, 299, 316, 323, 326, 336, 341, 345, 353, 358, 359, 365, 367, 368, 369, 370, 371, 372, 373, 374, 384, 442, 445, 446, 448, 450, 465, 466, 471, 472, 479, 480], "input": [2, 3, 4, 6, 9, 14, 15, 23, 32, 48, 49, 54, 55, 57, 66, 69, 70, 75, 76, 78, 79, 84, 87, 88, 91, 93, 97, 107, 116, 124, 125, 126, 128, 129, 132, 133, 134, 135, 137, 138, 139, 142, 146, 148, 149, 150, 151, 154, 158, 161, 164, 166, 168, 169, 170, 174, 178, 180, 181, 187, 210, 223, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 248, 266, 267, 291, 292, 293, 294, 295, 296, 297, 298, 299, 318, 320, 322, 323, 325, 330, 331, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 420, 426, 427, 429, 432, 433, 434, 441, 442, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 460, 464, 466, 479, 482], "format": [2, 49, 99, 116, 124, 125, 146, 149, 151, 154, 169, 170, 181, 191, 195, 197, 227, 235, 298, 299, 306, 323, 336, 367, 368, 369, 370, 371, 372, 373, 374, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 424, 426, 427, 429, 433, 434, 435, 436, 437, 438, 443, 444, 445, 446, 447, 448, 462, 463, 464, 470], "given": [2, 3, 9, 14, 16, 44, 47, 50, 53, 54, 58, 64, 65, 67, 69, 70, 78, 83, 85, 93, 94, 99, 103, 124, 131, 133, 137, 142, 151, 154, 155, 158, 161, 162, 164, 166, 167, 168, 169, 171, 174, 176, 177, 181, 187, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 243, 244, 264, 265, 267, 268, 274, 280, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 310, 311, 313, 314, 315, 316, 319, 320, 323, 326, 330, 336, 337, 338, 340, 342, 347, 350, 353, 356, 358, 360, 361, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 419, 420, 421, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 458, 459, 461, 466], "section": [2, 3, 4, 14, 39, 47, 48, 49, 54, 56, 68, 90, 93, 97, 99, 114, 115, 116, 124, 134, 139, 149, 154, 155, 156, 158, 159, 161, 162, 164, 166, 169, 171, 173, 177, 178, 181, 183, 216, 270, 274, 368, 369, 371, 372, 385, 415, 419, 421, 424, 426, 427, 430, 432, 433, 434, 445, 456, 466, 471, 472, 479], "name": [2, 3, 4, 6, 14, 21, 22, 23, 26, 30, 32, 44, 51, 58, 62, 64, 71, 74, 75, 76, 78, 79, 90, 93, 99, 100, 102, 107, 116, 123, 125, 131, 140, 142, 147, 149, 151, 154, 158, 162, 166, 169, 170, 174, 176, 177, 178, 181, 187, 188, 190, 197, 198, 217, 220, 227, 228, 229, 237, 238, 240, 241, 243, 244, 245, 246, 247, 249, 250, 251, 253, 255, 265, 270, 272, 275, 276, 277, 278, 279, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 321, 323, 324, 325, 326, 330, 336, 338, 341, 352, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 445, 446, 447, 448, 449, 451, 458, 460, 466, 482], "accept": [2, 3, 47, 64, 123, 124, 133, 134, 136, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 154, 169, 170, 179, 187, 336, 338, 339, 361, 375, 376, 377, 378, 379, 380, 381, 419, 429, 431, 432, 433, 434, 441, 443, 454, 455], "either": [2, 4, 9, 32, 35, 36, 39, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 68, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 116, 139, 146, 148, 154, 156, 158, 169, 170, 173, 174, 179, 181, 191, 246, 247, 248, 251, 259, 291, 292, 293, 294, 313, 315, 316, 323, 336, 339, 340, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 419, 420, 421, 424, 425, 426, 429, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 444, 448, 458, 462, 463, 464, 479, 480], "hand": [2, 65, 67, 93, 168, 169, 179, 181, 280], "break": [2, 82, 95, 112, 134, 154, 158, 166, 169, 226, 251, 433, 439, 449, 481], "down": [2, 68, 102, 158, 168, 169, 293], "other": [2, 4, 14, 23, 24, 31, 36, 39, 40, 48, 56, 65, 67, 68, 70, 93, 97, 99, 102, 103, 114, 115, 116, 124, 139, 142, 146, 154, 155, 156, 161, 162, 163, 165, 166, 168, 169, 170, 174, 177, 179, 181, 199, 205, 222, 227, 228, 229, 256, 270, 276, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 313, 315, 316, 323, 325, 330, 336, 338, 361, 362, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 380, 384, 427, 439, 445, 446, 447, 448, 479, 482], "concat_img": [2, 6, 11, 68, 69, 99, 133, 154, 180, 348], "group": [2, 3, 6, 29, 30, 32, 33, 46, 57, 58, 59, 62, 73, 75, 76, 77, 78, 79, 96, 97, 100, 103, 104, 108, 112, 114, 136, 142, 154, 156, 157, 160, 161, 166, 171, 173, 174, 175, 176, 187, 191, 194, 196, 216, 222, 227, 228, 229, 239, 240, 245, 253, 255, 256, 267, 273, 291, 292, 293, 294, 295, 298, 299, 349, 361, 364, 367, 372, 384, 417, 420, 421, 431, 432, 434, 439, 453, 481, 482], "total": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 157, 159, 161, 167, 187, 205, 246, 256, 297, 305, 306, 378, 379, 381, 432, 449, 466, 481, 482], "script": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 148, 154, 163, 169, 179, 180, 181, 194, 479, 480], "minut": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 171, 210, 221, 222, 265], "18": [2, 6, 7, 12, 27, 33, 55, 58, 62, 71, 90, 102, 106, 114, 119, 132, 139, 149, 154, 181, 187, 191, 196, 205, 213, 256, 267, 295, 435, 437, 438, 465, 466, 479, 481], "192": [2, 7, 33, 41, 51, 83, 98, 114, 465, 466, 481], "second": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 110, 114, 125, 154, 158, 159, 167, 168, 169, 171, 172, 174, 181, 222, 262, 264, 265, 279, 291, 292, 293, 294, 296, 297, 311, 318, 319, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 341, 346, 352, 360, 363, 368, 369, 370, 371, 372, 373, 374, 384, 396, 397, 411, 420, 423, 426, 428, 434, 435, 436, 437, 438, 439, 444, 446, 448, 457, 458, 459, 460, 464, 476, 481, 482], "estim": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 63, 64, 66, 68, 69, 70, 71, 74, 77, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 99, 101, 102, 103, 104, 105, 106, 107, 110, 112, 114, 116, 123, 125, 126, 137, 145, 146, 151, 154, 155, 160, 163, 165, 166, 169, 171, 173, 174, 176, 177, 187, 191, 219, 225, 227, 228, 229, 231, 247, 251, 267, 274, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 310, 311, 313, 314, 315, 316, 319, 320, 323, 336, 338, 342, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 384, 431, 439, 445, 446, 447, 448, 473, 481, 482], "usag": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 133, 142, 146, 151, 154, 155, 169, 170, 173, 176, 177, 178, 186, 189, 193, 196, 197, 213, 216, 267, 274, 279, 442, 469, 482], "211": [2, 33, 41, 43, 465, 466], "mb": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 481], "jupyt": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 140, 142, 154, 161, 176, 181, 323, 336, 440, 441, 442, 443, 444, 456, 458, 479], "notebook": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 127, 139, 142, 154, 161, 176, 181, 323, 336, 365, 440, 441, 442, 443, 444, 456, 458, 479], "plot_3d_and_4d_niimg": [2, 7, 481], "ipynb": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110], "sourc": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 155, 156, 160, 168, 169, 177, 217, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 480], "py": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 124, 125, 142, 147, 148, 149, 151, 154, 169, 177, 181, 481], "galleri": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 125, 127, 129, 133, 134, 136, 154, 169, 479, 481], "sphinx": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 127, 129, 133, 134, 136, 154, 169], "simpl": [3, 5, 25, 29, 31, 35, 37, 40, 47, 56, 60, 64, 69, 72, 74, 75, 76, 78, 79, 82, 83, 86, 88, 90, 93, 95, 97, 99, 100, 112, 114, 116, 117, 132, 134, 139, 149, 154, 155, 156, 162, 164, 165, 168, 169, 170, 173, 174, 176, 180, 181, 206, 223, 227, 228, 229, 256, 258, 265, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 311, 314, 320, 323, 336, 348, 353, 365, 367, 368, 369, 370, 371, 372, 373, 374, 420, 433, 434, 439, 445, 446, 447, 448, 456, 465, 466, 481, 482], "reproduc": [3, 32, 40, 41, 48, 51, 71, 97, 99, 114, 175, 193, 265, 293, 294], "et": [3, 22, 23, 28, 31, 37, 44, 45, 48, 49, 51, 56, 58, 65, 69, 70, 71, 75, 97, 98, 99, 101, 112, 134, 139, 154, 155, 158, 161, 162, 163, 166, 167, 168, 176, 181, 186, 187, 188, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 227, 228, 231, 235, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 259, 260, 265, 267, 268, 269, 270, 272, 274, 279, 280, 285, 291, 294, 297, 298, 299, 315, 316, 318, 341, 343, 348, 360, 364, 365, 367, 370, 373, 384, 412, 434, 439, 447, 448, 453, 460, 466, 481], "al": [3, 22, 23, 28, 31, 37, 44, 45, 48, 49, 51, 56, 58, 65, 69, 70, 71, 75, 97, 98, 99, 101, 112, 134, 139, 154, 155, 158, 161, 162, 163, 166, 167, 168, 176, 181, 186, 187, 188, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 227, 228, 231, 235, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 259, 260, 265, 267, 268, 269, 270, 272, 274, 279, 280, 285, 291, 294, 297, 298, 299, 315, 316, 318, 341, 343, 348, 360, 364, 365, 367, 370, 373, 384, 412, 434, 439, 447, 448, 453, 460, 466, 481], "v": [3, 6, 24, 28, 32, 33, 35, 38, 45, 51, 64, 65, 75, 78, 79, 88, 96, 97, 108, 112, 114, 124, 126, 154, 161, 162, 166, 168, 169, 175, 177, 188, 189, 199, 205, 206, 207, 214, 220, 224, 250, 255, 259, 260, 263, 265, 270, 272, 273, 285, 291, 293, 295, 297, 346, 348, 351, 353, 354, 364, 367, 373, 384, 412, 427, 431, 434, 439, 441, 461, 481], "discrimin": [3, 29, 31, 51, 93, 98, 114, 116, 161, 175, 176], "mask": [3, 8, 15, 20, 23, 27, 29, 30, 31, 33, 34, 35, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 58, 68, 70, 74, 76, 78, 82, 90, 91, 95, 101, 103, 104, 105, 110, 112, 115, 117, 123, 124, 126, 132, 133, 134, 136, 139, 142, 145, 147, 148, 149, 154, 158, 162, 165, 167, 175, 176, 178, 179, 191, 193, 199, 206, 207, 212, 228, 235, 256, 258, 259, 260, 261, 265, 269, 270, 282, 283, 286, 291, 292, 293, 294, 296, 297, 298, 299, 318, 320, 323, 336, 338, 339, 340, 341, 346, 347, 348, 351, 353, 354, 358, 360, 364, 367, 368, 369, 370, 371, 372, 373, 374, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 418, 419, 420, 424, 426, 428, 429, 433, 434, 439, 446, 447, 448, 450, 451, 452, 453, 456, 458, 460, 464, 465, 466, 471, 479, 481, 482], "ventral": [3, 16, 22, 31, 32, 33, 38, 93, 97, 114, 116, 161, 175, 181, 206, 259, 435, 437, 438], "stream": [3, 32, 116, 175, 181, 206], "meant": [3, 6, 103, 110, 234, 311, 456], "variou": [3, 20, 30, 31, 39, 48, 104, 105, 142, 145, 149, 154, 161, 163, 164, 169, 171, 174, 180, 239, 293, 294, 365, 446, 464], "step": [3, 11, 20, 33, 35, 37, 42, 44, 47, 49, 50, 55, 58, 61, 62, 64, 65, 67, 70, 78, 79, 88, 93, 97, 100, 107, 116, 123, 137, 145, 151, 154, 155, 158, 159, 160, 161, 163, 164, 166, 168, 169, 174, 177, 178, 179, 180, 189, 196, 229, 236, 261, 274, 283, 286, 293, 294, 298, 299, 323, 326, 338, 365, 367, 370, 373, 376, 377, 378, 380, 381, 446, 460, 482], "minimalist": 3, "strive": 3, "didact": [3, 132, 154, 162, 164, 169], "copi": [3, 20, 33, 36, 40, 53, 87, 99, 110, 112, 116, 142, 154, 168, 169, 179, 187, 274, 275, 298, 299, 344, 345, 346, 356, 357, 360, 367, 370, 373, 459], "analyz": [3, 33, 49, 60, 73, 93, 112, 160, 169, 171, 174, 176, 178, 208, 384, 482], "mani": [3, 4, 10, 11, 15, 23, 36, 38, 39, 41, 42, 43, 48, 49, 51, 56, 69, 78, 85, 93, 97, 98, 99, 105, 117, 147, 154, 157, 158, 159, 161, 162, 163, 164, 167, 168, 169, 171, 174, 177, 180, 181, 229, 270, 272, 291, 292, 293, 294, 295, 338, 345, 374, 384, 429, 454, 455, 464, 479], "unnecessari": [3, 125, 154, 316], "fetch_haxbi": [3, 4, 15, 16, 18, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 93, 97, 101, 116, 133, 154, 161, 169, 179, 206], "directori": [3, 6, 62, 70, 93, 100, 107, 112, 158, 169, 179, 228, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 290, 291, 292, 293, 294, 296, 297, 298, 299, 323, 326, 336, 342, 361, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 428, 446, 447, 448], "while": [3, 4, 6, 48, 55, 56, 65, 83, 93, 97, 99, 100, 102, 107, 116, 123, 125, 127, 137, 139, 154, 160, 161, 166, 168, 169, 170, 176, 180, 181, 191, 239, 291, 292, 293, 294, 330, 384], "310": [3, 33, 41, 466], "mo": 3, "internet": [3, 49, 160, 178, 183, 482], "By": [3, 14, 15, 25, 29, 33, 35, 58, 68, 69, 146, 154, 162, 169, 177, 181, 217, 228, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 274, 275, 276, 277, 278, 279, 280, 281, 291, 292, 293, 294, 296, 297, 298, 299, 323, 336, 342, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 419, 424, 427, 428, 430, 432, 433, 434, 441, 446, 447, 448, 451, 479], "default": [3, 8, 9, 14, 15, 23, 25, 27, 29, 30, 32, 33, 34, 35, 36, 37, 42, 55, 56, 60, 62, 65, 72, 78, 82, 88, 93, 95, 101, 102, 110, 112, 117, 123, 124, 125, 126, 127, 129, 132, 133, 138, 139, 140, 142, 145, 146, 147, 148, 149, 151, 154, 161, 162, 166, 168, 169, 170, 177, 179, 180, 181, 227, 228, 229, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 305, 306, 310, 311, 313, 314, 315, 316, 318, 319, 320, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 347, 348, 351, 353, 354, 355, 356, 357, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 464, 465, 466, 479, 481], "2nd": [3, 25, 29, 30, 32, 33, 34, 35, 36, 37, 259], "fetch": [3, 4, 9, 14, 19, 24, 29, 30, 32, 34, 35, 36, 37, 41, 58, 69, 84, 85, 86, 87, 90, 93, 102, 117, 124, 126, 133, 134, 136, 138, 142, 154, 157, 160, 169, 178, 187, 235, 242, 248, 256, 257, 260, 263, 264, 265, 268, 270, 271, 272, 273, 274, 277, 279, 482], "haxby_dataset": [3, 15, 16, 18, 25, 29, 30, 32, 33, 34, 35, 36, 37, 38, 93, 97, 101, 116, 161, 179, 181], "func": [3, 6, 11, 15, 16, 18, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 64, 65, 68, 70, 84, 88, 90, 91, 93, 94, 97, 98, 99, 100, 101, 103, 107, 116, 126, 147, 154, 159, 169, 170, 179, 181, 189, 193, 196, 206, 212, 222, 236, 256, 259, 262, 269, 277, 361, 364, 365], "one": [3, 4, 6, 9, 14, 15, 16, 20, 24, 29, 30, 31, 33, 35, 36, 40, 44, 47, 48, 49, 55, 56, 57, 58, 65, 67, 68, 69, 70, 71, 73, 76, 77, 79, 80, 81, 85, 90, 91, 93, 99, 100, 102, 104, 107, 112, 116, 117, 123, 124, 126, 131, 133, 136, 145, 147, 148, 149, 154, 155, 156, 159, 160, 161, 162, 166, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 181, 191, 209, 227, 229, 235, 239, 240, 246, 247, 248, 255, 261, 265, 268, 279, 291, 292, 293, 294, 296, 298, 299, 305, 311, 323, 325, 326, 330, 332, 336, 337, 338, 341, 342, 343, 345, 346, 348, 352, 356, 361, 363, 368, 371, 373, 383, 384, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 421, 422, 426, 429, 430, 431, 432, 436, 437, 439, 441, 442, 446, 450, 451, 457, 460, 464, 480, 481, 482], "each": [3, 6, 14, 15, 20, 21, 22, 24, 29, 34, 36, 37, 39, 40, 47, 48, 49, 50, 51, 55, 56, 58, 61, 62, 68, 69, 70, 77, 79, 85, 87, 93, 97, 98, 99, 100, 101, 104, 107, 117, 134, 139, 140, 142, 145, 147, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 174, 176, 177, 179, 180, 181, 187, 188, 191, 193, 196, 197, 205, 208, 211, 214, 219, 220, 222, 227, 228, 229, 231, 235, 238, 249, 255, 256, 267, 270, 272, 280, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 305, 306, 313, 315, 316, 323, 325, 326, 330, 336, 338, 341, 347, 353, 358, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 379, 381, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 419, 421, 424, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 445, 446, 447, 448, 449, 450, 451, 452, 454, 458, 460, 461, 463, 464, 479], "fmri_filenam": [3, 36, 37, 56, 93, 97, 116], "basic": [3, 7, 8, 11, 15, 16, 18, 25, 27, 29, 30, 32, 34, 35, 36, 41, 42, 48, 49, 52, 53, 56, 58, 67, 69, 74, 76, 84, 88, 90, 91, 93, 94, 97, 99, 101, 103, 104, 105, 168, 170, 171, 174, 176, 177, 181, 243, 244, 259, 281, 326, 336, 338, 358, 364, 365, 422, 427, 433, 439, 481], "inform": [3, 6, 9, 11, 16, 18, 21, 23, 25, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 48, 49, 51, 52, 53, 54, 58, 61, 62, 65, 66, 71, 74, 76, 77, 84, 88, 90, 91, 93, 94, 99, 100, 101, 103, 104, 107, 114, 116, 117, 121, 124, 136, 140, 150, 154, 155, 156, 159, 160, 161, 163, 165, 168, 169, 170, 173, 174, 176, 177, 179, 181, 186, 187, 188, 189, 190, 193, 194, 196, 197, 206, 207, 211, 212, 213, 214, 216, 220, 221, 224, 225, 227, 228, 229, 235, 237, 238, 239, 240, 245, 247, 248, 250, 251, 259, 260, 267, 268, 269, 270, 272, 274, 282, 283, 285, 286, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 316, 323, 336, 338, 350, 356, 362, 363, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448, 458, 459, 460, 466, 469, 480, 482], "haxby2001": [3, 4, 16, 18, 25, 29, 30, 32, 34, 35, 36, 93, 101, 116, 179, 206, 259], "subj2": [3, 16, 18, 25, 29, 30, 32, 34, 35, 36, 93, 101, 116], "bold": [3, 6, 16, 18, 25, 29, 30, 32, 34, 35, 36, 48, 64, 65, 75, 78, 93, 99, 100, 101, 107, 114, 116, 117, 125, 126, 142, 146, 154, 160, 161, 170, 172, 174, 179, 197, 206, 212, 222, 242, 259, 269, 326, 361, 364, 365, 461, 482], "One": [3, 6, 14, 34, 35, 48, 49, 56, 69, 70, 78, 147, 154, 155, 156, 161, 162, 166, 168, 170, 171, 173, 177, 179, 181, 323, 356, 365, 369, 370, 372, 451], "wai": [3, 6, 61, 62, 65, 70, 74, 75, 83, 97, 107, 114, 116, 117, 146, 147, 149, 154, 155, 157, 160, 161, 162, 164, 167, 168, 169, 170, 171, 174, 179, 181, 272, 293, 294, 313, 315, 316, 361, 420, 445, 479, 480], "plot_epi": [3, 25, 49, 88, 93, 94, 146, 149, 154, 427, 434, 479], "previous": [3, 23, 97, 116, 142, 145, 149, 151, 154, 161, 171, 186, 220], "becaus": [3, 6, 11, 15, 18, 30, 31, 32, 36, 39, 42, 43, 44, 54, 65, 68, 69, 78, 83, 100, 101, 123, 142, 154, 156, 161, 166, 168, 169, 171, 177, 270, 296, 297, 429, 435, 437, 438, 442, 444, 464], "thei": [3, 6, 24, 39, 42, 44, 49, 58, 64, 65, 67, 69, 93, 97, 107, 116, 117, 124, 149, 151, 152, 154, 160, 163, 164, 166, 168, 169, 171, 174, 176, 177, 179, 181, 187, 191, 198, 209, 226, 251, 259, 270, 275, 323, 326, 336, 338, 342, 356, 374, 422, 449, 460, 466, 479], "consist": [3, 6, 34, 40, 44, 65, 67, 107, 116, 124, 125, 132, 138, 139, 140, 149, 154, 161, 162, 165, 166, 168, 169, 171, 174, 186, 191, 196, 222, 229, 239, 267, 297, 326, 368, 371, 445, 447, 450], "epi": [3, 6, 11, 15, 25, 30, 31, 91, 93, 94, 103, 174, 176, 180, 181, 222, 291, 292, 293, 294, 298, 299, 370, 373, 378, 424, 427, 434, 446, 466, 479], "cannot": [3, 9, 10, 11, 36, 48, 49, 51, 56, 78, 85, 91, 93, 101, 117, 139, 151, 154, 155, 161, 164, 169, 181, 229, 441, 442, 444], "directli": [3, 6, 32, 33, 47, 48, 51, 70, 85, 88, 107, 131, 135, 137, 139, 154, 158, 161, 164, 169, 171, 179, 181, 270, 326, 384, 432], "just": [3, 4, 6, 14, 16, 21, 40, 42, 44, 49, 50, 51, 56, 58, 64, 65, 69, 70, 74, 75, 76, 78, 80, 86, 90, 97, 99, 100, 110, 116, 131, 154, 159, 161, 168, 171, 176, 177, 181, 323, 336, 341, 358, 361, 364, 432, 433, 434, 441, 458, 460, 464, 479], "mean_img": [3, 6, 15, 16, 18, 25, 30, 31, 33, 36, 49, 68, 69, 70, 84, 88, 91, 93, 94, 101, 103, 110, 180, 352], "view_img": [3, 29, 139, 140, 148, 151, 152, 154, 161, 479], "none": [3, 14, 15, 32, 33, 36, 40, 44, 49, 52, 53, 54, 56, 58, 62, 65, 66, 76, 78, 88, 90, 91, 93, 94, 99, 102, 106, 110, 117, 124, 129, 139, 142, 146, 151, 154, 169, 181, 227, 228, 229, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 305, 306, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 323, 325, 326, 330, 332, 336, 337, 338, 339, 340, 341, 342, 347, 351, 353, 354, 355, 356, 358, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 464, 465, 466, 479], "opt": [3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 69, 70, 71, 76, 77, 78, 85, 91, 94, 97, 99, 100, 101, 103, 104, 105, 107, 110], "hostedtoolcach": [3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 69, 70, 71, 76, 77, 78, 85, 91, 94, 97, 99, 100, 101, 103, 104, 105, 107, 110], "12": [3, 4, 6, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 43, 44, 45, 47, 48, 49, 50, 52, 54, 56, 57, 58, 59, 61, 62, 63, 66, 67, 68, 69, 70, 71, 72, 76, 77, 78, 79, 85, 90, 91, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 114, 118, 121, 123, 124, 127, 129, 145, 150, 151, 154, 167, 168, 180, 181, 188, 191, 196, 221, 237, 239, 246, 248, 256, 326, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 448, 465, 466, 481], "2": [3, 4, 6, 9, 10, 11, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 85, 86, 87, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 114, 117, 119, 121, 122, 123, 134, 136, 137, 139, 140, 147, 148, 149, 155, 156, 159, 160, 161, 162, 166, 167, 168, 169, 171, 176, 177, 180, 181, 187, 188, 190, 191, 193, 194, 195, 199, 200, 201, 202, 203, 204, 205, 207, 213, 214, 216, 217, 219, 221, 223, 224, 225, 227, 228, 229, 233, 234, 235, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 250, 251, 256, 257, 258, 259, 260, 261, 265, 267, 270, 272, 274, 276, 278, 279, 280, 282, 283, 285, 286, 291, 292, 293, 294, 295, 296, 297, 298, 299, 310, 313, 314, 315, 316, 323, 325, 326, 330, 332, 336, 338, 339, 341, 347, 348, 351, 352, 353, 354, 357, 358, 360, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 421, 428, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 447, 448, 450, 451, 452, 454, 457, 460, 461, 464, 465, 466, 479, 480, 481], "x64": [3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 69, 70, 71, 76, 77, 78, 85, 91, 94, 97, 99, 100, 101, 103, 104, 105, 107, 110], "lib": [3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 69, 70, 71, 76, 77, 78, 85, 91, 94, 97, 99, 100, 101, 103, 104, 105, 107, 110], "python3": [3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 69, 70, 71, 76, 77, 78, 85, 91, 94, 97, 99, 100, 101, 103, 104, 105, 107, 110, 140, 142, 154, 169, 480], "site": [3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 69, 70, 71, 76, 77, 78, 85, 91, 94, 97, 99, 100, 101, 103, 104, 105, 107, 110, 186, 189, 235, 236], "numpi": [3, 5, 6, 9, 10, 11, 12, 14, 16, 20, 22, 23, 24, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 74, 76, 78, 79, 83, 85, 86, 88, 93, 97, 99, 101, 102, 103, 104, 105, 107, 110, 121, 123, 125, 126, 130, 134, 136, 139, 142, 145, 147, 149, 152, 154, 158, 159, 161, 168, 169, 177, 179, 180, 227, 228, 229, 230, 231, 232, 233, 234, 235, 241, 242, 247, 249, 253, 254, 255, 256, 291, 292, 293, 294, 296, 297, 298, 299, 301, 305, 306, 313, 315, 316, 319, 323, 325, 330, 332, 336, 338, 341, 342, 343, 346, 347, 348, 352, 353, 354, 356, 358, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 381, 383, 384, 388, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 416, 417, 419, 421, 422, 424, 426, 428, 430, 431, 434, 435, 436, 437, 438, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 462, 463, 464], "core": [3, 16, 20, 29, 42, 43, 48, 50, 58, 168, 169, 177, 229, 480], "fromnumer": [3, 16, 29], "771": [3, 16, 29], "userwarn": [3, 9, 10, 11, 16, 18, 20, 21, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 61, 62, 69, 70, 71, 76, 77, 78, 83, 85, 90, 91, 93, 94, 97, 99, 100, 102, 107, 110], "warn": [3, 16, 20, 29, 48, 50, 69, 102, 123, 124, 125, 126, 139, 140, 142, 147, 149, 151, 152, 154, 161, 169, 239, 240, 248, 320, 326, 330, 343, 367, 368, 369, 370, 371, 372, 373, 374, 439, 448], "partit": [3, 16, 29, 40, 220], "ignor": [3, 16, 21, 29, 48, 50, 69, 102, 140, 145, 154, 227, 228, 229, 270, 272, 276, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 330, 336, 338, 361, 364, 367, 368, 369, 370, 371, 372, 373, 374, 429, 445, 446, 447, 448, 464], "maskedarrai": [3, 16, 29], "kth": [3, 16], "axi": [3, 11, 12, 16, 22, 23, 25, 30, 31, 34, 38, 40, 41, 44, 47, 50, 58, 83, 84, 93, 102, 103, 106, 110, 125, 149, 151, 154, 159, 180, 191, 239, 291, 292, 293, 294, 296, 297, 323, 331, 356, 358, 385, 387, 388, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 415, 419, 421, 422, 424, 426, 427, 430, 432, 433, 434], "kind": [3, 16, 47, 50, 54, 56, 58, 78, 110, 116, 135, 154, 155, 159, 162, 168, 174, 227, 464, 479], "These": [3, 4, 6, 15, 55, 58, 60, 71, 73, 76, 78, 80, 88, 93, 106, 109, 112, 116, 142, 145, 146, 149, 154, 161, 164, 165, 167, 168, 169, 173, 174, 181, 187, 197, 207, 208, 222, 242, 253, 255, 289, 474, 479, 480], "realli": [3, 68, 140, 154, 161, 365], "love": 3, "learn": [3, 21, 34, 36, 44, 46, 52, 56, 57, 58, 59, 93, 96, 101, 103, 108, 112, 114, 115, 117, 121, 123, 126, 127, 132, 134, 135, 136, 137, 139, 142, 147, 149, 154, 155, 156, 157, 158, 161, 162, 163, 165, 166, 168, 169, 174, 175, 177, 182, 196, 213, 227, 228, 231, 245, 256, 259, 268, 291, 292, 293, 294, 295, 298, 299, 305, 306, 346, 348, 349, 353, 367, 368, 369, 370, 371, 372, 373, 374, 397, 404, 417, 418, 419, 421, 424, 431, 432, 433, 434, 439, 446, 448, 480, 481, 482], "matric": [3, 8, 27, 41, 47, 50, 51, 56, 60, 69, 70, 72, 79, 98, 112, 127, 132, 135, 136, 146, 147, 149, 154, 155, 156, 157, 168, 170, 178, 179, 180, 182, 183, 191, 197, 227, 228, 229, 231, 234, 267, 313, 315, 316, 323, 330, 356, 423, 431, 435, 437, 438, 439, 477, 481, 482], "actual": [3, 6, 42, 65, 66, 69, 76, 85, 104, 125, 154, 168, 169, 171, 174, 179, 229, 274, 323, 336, 339, 458], "fortun": [3, 66], "later": [3, 6, 9, 22, 23, 40, 62, 67, 69, 90, 99, 100, 102, 171, 179, 191, 241, 243, 244, 345, 416, 419, 424, 426, 427, 429, 433, 434, 435, 437, 438, 456, 479], "automat": [3, 15, 16, 19, 22, 23, 33, 34, 40, 54, 88, 91, 93, 114, 115, 121, 124, 132, 134, 146, 147, 148, 154, 159, 166, 169, 177, 179, 180, 181, 195, 235, 241, 249, 291, 292, 293, 294, 296, 297, 298, 299, 323, 336, 338, 356, 363, 369, 372, 384, 395, 415, 419, 424, 427, 432, 433, 434, 441, 446, 448, 450, 458, 466, 479, 482], "transform": [3, 23, 24, 40, 41, 48, 49, 50, 51, 53, 54, 65, 67, 69, 83, 90, 91, 93, 97, 98, 99, 102, 107, 110, 114, 116, 135, 136, 140, 142, 144, 145, 146, 147, 149, 151, 154, 158, 159, 164, 171, 174, 178, 179, 191, 205, 224, 227, 250, 268, 291, 292, 293, 294, 298, 299, 305, 306, 320, 323, 336, 339, 343, 354, 356, 364, 367, 368, 369, 370, 371, 372, 373, 374, 385, 445, 446, 447, 448, 460, 464, 466, 482], "all": [3, 4, 6, 8, 15, 19, 23, 27, 30, 32, 33, 35, 36, 39, 40, 41, 42, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 65, 67, 68, 69, 70, 71, 75, 76, 78, 79, 86, 88, 90, 91, 93, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 112, 114, 116, 117, 123, 124, 125, 126, 127, 132, 139, 142, 145, 147, 149, 150, 154, 155, 156, 158, 159, 160, 162, 164, 166, 168, 169, 171, 173, 176, 177, 179, 180, 181, 186, 187, 189, 190, 191, 197, 199, 208, 214, 220, 226, 228, 229, 231, 235, 236, 238, 239, 240, 256, 264, 265, 268, 270, 273, 274, 275, 280, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 318, 323, 326, 332, 336, 337, 338, 341, 342, 347, 352, 353, 356, 357, 358, 361, 362, 363, 364, 365, 368, 369, 370, 372, 373, 374, 379, 380, 381, 382, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 421, 424, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 444, 446, 448, 451, 458, 460, 464, 466, 477, 479, 480, 481], "defin": [3, 6, 9, 21, 23, 29, 30, 32, 33, 36, 37, 42, 47, 49, 54, 58, 61, 65, 67, 69, 70, 71, 75, 76, 79, 80, 90, 97, 100, 114, 123, 124, 146, 147, 148, 149, 154, 156, 158, 159, 160, 161, 166, 169, 170, 171, 173, 174, 177, 180, 181, 187, 188, 208, 212, 220, 235, 237, 241, 255, 267, 269, 291, 292, 293, 294, 296, 297, 310, 314, 318, 323, 325, 326, 330, 356, 364, 419, 420, 421, 424, 426, 427, 429, 430, 432, 433, 434, 448, 449, 450, 451, 452, 454, 455, 466, 473], "tempor": [3, 6, 16, 31, 32, 33, 38, 51, 55, 65, 66, 90, 93, 97, 100, 102, 114, 116, 139, 147, 154, 160, 161, 174, 178, 194, 206, 240, 259, 299, 323, 327, 328, 329, 330, 332, 333, 334, 335, 341, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 448, 460, 482], "vt": [3, 18, 93], "cortex": [3, 23, 31, 32, 33, 38, 55, 58, 61, 67, 69, 74, 78, 79, 90, 97, 114, 159, 161, 166, 170, 171, 187, 195, 198, 205, 206, 212, 219, 225, 241, 247, 251, 253, 259, 267, 269], "mask_filenam": [3, 30, 32, 35, 39, 97, 101, 116, 161], "mask_vt": [3, 15, 16, 18, 30, 32, 93, 97, 116, 161, 179, 206, 259], "anatom": [3, 4, 6, 9, 11, 15, 17, 18, 22, 23, 25, 30, 32, 36, 93, 101, 114, 117, 135, 154, 159, 166, 174, 181, 188, 191, 195, 197, 206, 207, 217, 220, 225, 235, 237, 239, 241, 249, 256, 259, 260, 263, 265, 270, 364, 419, 427, 432, 434, 441, 479], "background": [3, 6, 8, 14, 15, 16, 22, 23, 27, 30, 31, 40, 44, 49, 56, 67, 90, 91, 93, 103, 112, 116, 124, 130, 132, 134, 135, 136, 137, 139, 142, 145, 151, 152, 154, 169, 174, 180, 181, 191, 225, 237, 243, 244, 246, 247, 250, 251, 263, 269, 291, 292, 293, 294, 298, 299, 323, 336, 368, 370, 371, 373, 376, 379, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 419, 421, 424, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 444, 446, 449, 451, 452, 458, 466, 479, 481, 482], "plot_roi": [3, 10, 17, 19, 25, 49, 65, 85, 88, 91, 93, 138, 145, 146, 151, 154, 156, 180, 181, 427, 432, 479], "bg_img": [3, 6, 16, 17, 29, 30, 33, 36, 40, 42, 68, 69, 70, 74, 87, 92, 116, 136, 142, 148, 154, 161, 181, 323, 336, 427, 432, 433, 434, 441, 458], "anat": [3, 4, 6, 15, 16, 17, 18, 25, 29, 30, 32, 42, 43, 93, 116, 161, 179, 181, 193, 206, 222, 223, 225, 251, 259, 263, 265, 277, 278, 361], "cmap": [3, 9, 11, 12, 14, 19, 20, 22, 23, 31, 35, 36, 38, 40, 41, 42, 44, 50, 53, 75, 76, 78, 79, 80, 85, 101, 104, 105, 110, 125, 140, 142, 151, 154, 159, 193, 263, 264, 265, 419, 420, 424, 425, 426, 429, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 444, 479], "pair": [3, 73, 81, 85, 97, 112, 117, 152, 154, 161, 162, 173, 265, 268, 270, 291, 292, 293, 294, 296, 297, 336, 362, 363, 364, 365, 396, 423, 426, 431, 435, 437, 438, 439, 447, 464, 481], "0x7f18d71864b0": 3, "convert": [3, 6, 10, 11, 20, 36, 42, 48, 49, 50, 65, 78, 85, 93, 97, 106, 107, 116, 142, 147, 149, 151, 154, 159, 161, 166, 174, 180, 321, 342, 343, 351, 368, 369, 370, 371, 372, 373, 374], "appli": [3, 29, 31, 32, 42, 44, 50, 56, 61, 65, 67, 78, 79, 88, 91, 93, 97, 99, 100, 102, 103, 115, 117, 123, 125, 126, 130, 132, 136, 139, 142, 147, 148, 149, 152, 154, 155, 156, 157, 160, 162, 163, 164, 166, 170, 173, 174, 178, 187, 191, 194, 205, 220, 227, 235, 270, 290, 291, 292, 293, 294, 298, 299, 314, 323, 336, 338, 339, 340, 341, 352, 358, 360, 361, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 383, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 419, 429, 432, 433, 434, 435, 437, 438, 441, 442, 444, 445, 446, 447, 448, 450, 451, 452, 457, 459, 460, 464, 466, 471, 482], "instanc": [3, 4, 6, 15, 31, 49, 51, 65, 66, 85, 136, 142, 149, 154, 155, 156, 158, 160, 161, 169, 170, 171, 173, 174, 176, 179, 180, 227, 228, 229, 234, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 310, 311, 313, 314, 315, 316, 319, 320, 323, 330, 332, 336, 338, 342, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 419, 421, 424, 426, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 445, 446, 447, 448, 480], "csv": [3, 6, 29, 40, 47, 55, 116, 129, 154, 156, 161, 189, 197, 210, 213, 235, 236, 266, 274, 298, 299, 323, 341, 367, 368, 369, 370, 371, 372, 373, 374, 446, 448, 460], "file": [3, 6, 7, 9, 14, 22, 23, 27, 30, 32, 33, 34, 35, 36, 40, 45, 47, 48, 49, 51, 53, 55, 59, 60, 61, 62, 65, 70, 72, 74, 81, 85, 90, 91, 93, 95, 97, 99, 100, 107, 108, 111, 112, 113, 114, 116, 117, 125, 127, 129, 134, 138, 139, 140, 141, 142, 145, 149, 150, 151, 154, 155, 156, 158, 159, 161, 169, 170, 177, 178, 181, 188, 189, 190, 191, 196, 197, 199, 200, 201, 202, 203, 204, 206, 209, 210, 212, 213, 216, 217, 223, 225, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 289, 291, 292, 298, 299, 300, 301, 302, 323, 326, 336, 341, 351, 352, 354, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438, 440, 442, 443, 444, 446, 448, 456, 458, 460, 462, 463, 464, 465, 480, 481, 482], "separ": [3, 34, 48, 50, 65, 70, 82, 87, 93, 95, 99, 112, 132, 149, 151, 154, 159, 160, 162, 166, 169, 171, 174, 177, 179, 180, 187, 234, 251, 353, 364, 385, 387, 388, 415, 431, 433, 439, 448, 449, 450, 481], "space": [3, 6, 15, 22, 23, 28, 40, 45, 48, 51, 55, 60, 62, 65, 67, 72, 83, 98, 100, 107, 112, 116, 117, 124, 132, 134, 136, 139, 142, 147, 154, 156, 169, 170, 171, 173, 174, 181, 191, 195, 197, 198, 205, 208, 209, 218, 219, 220, 223, 225, 238, 240, 245, 247, 249, 251, 253, 254, 255, 270, 272, 274, 278, 280, 297, 298, 299, 323, 326, 330, 341, 342, 343, 353, 356, 367, 370, 373, 374, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 417, 419, 420, 421, 424, 426, 427, 430, 432, 433, 434, 439, 440, 441, 443, 445, 447, 460, 464, 481], "panda": [3, 6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 62, 63, 64, 65, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 93, 97, 99, 101, 116, 117, 123, 126, 136, 139, 145, 147, 149, 150, 154, 161, 227, 235, 241, 242, 253, 254, 255, 263, 264, 265, 274, 298, 299, 306, 323, 324, 326, 330, 336, 337, 338, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 422, 423, 425, 445, 446, 447, 448, 457, 460], "arrai": [3, 5, 9, 10, 11, 20, 22, 23, 26, 33, 34, 36, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 55, 56, 58, 61, 66, 68, 70, 78, 83, 85, 86, 88, 93, 97, 101, 104, 105, 107, 115, 134, 136, 142, 145, 148, 149, 151, 152, 154, 155, 158, 159, 161, 164, 168, 178, 179, 181, 186, 227, 228, 229, 231, 233, 234, 241, 242, 247, 253, 254, 255, 267, 268, 280, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 310, 311, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 341, 346, 348, 356, 357, 360, 363, 367, 368, 369, 370, 371, 372, 373, 374, 375, 379, 381, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 421, 424, 426, 430, 434, 435, 436, 437, 438, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 458, 460, 461, 462, 463, 464, 472, 482], "pd": [3, 6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 63, 64, 65, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 93, 97, 101, 116, 179, 207, 260], "read_csv": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 93, 97, 101, 116, 179], "session_target": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 93, 97, 101, 116, 179, 206, 259], "delimit": [3, 40, 41, 97, 99, 116, 179], "chunk": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 97, 101], "1447": [3, 97], "11": [3, 6, 16, 20, 27, 33, 40, 41, 44, 49, 53, 55, 59, 62, 64, 65, 71, 72, 90, 91, 95, 97, 102, 107, 108, 114, 118, 127, 136, 139, 140, 141, 149, 154, 155, 187, 191, 194, 195, 205, 211, 212, 228, 240, 241, 267, 268, 269, 276, 465, 466, 481], "1448": [3, 97], "1449": [3, 97], "1450": [3, 97], "1451": [3, 97], "1452": [3, 93, 97], "row": [3, 6, 40, 56, 65, 71, 97, 99, 117, 146, 154, 174, 270, 272, 313, 314, 315, 316, 323, 336, 337, 338, 395, 397, 400, 414, 419, 424, 427, 429, 431, 432, 433, 434, 445, 457, 464], "x": [3, 6, 9, 13, 14, 15, 24, 31, 33, 35, 37, 40, 41, 44, 52, 54, 56, 58, 62, 65, 68, 70, 83, 90, 91, 93, 100, 102, 114, 125, 126, 129, 134, 136, 142, 147, 149, 151, 154, 161, 166, 169, 174, 177, 180, 181, 187, 191, 199, 222, 227, 239, 245, 267, 268, 291, 292, 293, 294, 296, 297, 298, 299, 300, 310, 313, 314, 315, 316, 323, 332, 336, 343, 364, 367, 368, 370, 371, 373, 374, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 421, 424, 426, 427, 430, 432, 433, 434, 435, 436, 437, 438, 441, 444, 445, 447, 448, 449, 453, 457, 458, 459, 465, 477, 479], "column": [3, 6, 56, 62, 64, 65, 67, 68, 69, 70, 71, 74, 75, 76, 78, 79, 80, 97, 99, 100, 101, 104, 105, 107, 117, 125, 126, 146, 154, 171, 228, 229, 231, 291, 292, 293, 294, 310, 313, 314, 315, 316, 321, 323, 330, 336, 337, 338, 341, 356, 364, 365, 366, 371, 384, 395, 397, 400, 414, 419, 422, 423, 424, 425, 427, 431, 432, 433, 434, 455, 457, 459, 460, 461], "denot": [3, 6, 15, 139, 154, 171, 179, 180, 181, 212, 364, 365, 395, 417, 433, 448, 449, 450, 451], "experiment": [3, 63, 64, 65, 67, 69, 70, 79, 93, 110, 123, 125, 145, 146, 149, 154, 161, 168, 171, 180, 197, 199, 223, 242, 323, 326, 330, 435, 437, 438], "condit": [3, 6, 29, 30, 31, 33, 35, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 79, 93, 97, 100, 101, 107, 116, 146, 149, 151, 154, 155, 161, 168, 174, 177, 180, 187, 197, 199, 206, 222, 223, 242, 267, 323, 325, 330, 336, 338, 422], "type": [3, 6, 15, 18, 21, 29, 34, 42, 49, 63, 64, 65, 67, 71, 87, 93, 99, 101, 110, 117, 123, 125, 126, 128, 131, 133, 136, 139, 142, 148, 149, 150, 151, 154, 163, 166, 169, 170, 171, 174, 179, 187, 210, 235, 239, 243, 244, 250, 267, 295, 309, 311, 319, 323, 336, 341, 345, 346, 348, 350, 351, 353, 354, 358, 359, 361, 362, 363, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 380, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 432, 433, 446, 448, 449, 450, 457, 458, 459, 460], "try": [3, 4, 5, 9, 12, 21, 24, 36, 38, 39, 40, 44, 49, 52, 53, 56, 57, 58, 62, 64, 65, 66, 74, 76, 77, 88, 90, 97, 98, 102, 104, 105, 110, 117, 151, 154, 155, 156, 161, 162, 167, 168, 169, 177, 181, 196, 480], "length": [3, 15, 55, 66, 70, 76, 159, 169, 242, 245, 291, 292, 293, 294, 296, 297, 310, 314, 315, 316, 327, 328, 329, 333, 334, 335, 342, 367, 370, 373, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 424, 427, 430, 431, 432, 433, 434, 446, 458, 464], "dtype": [3, 10, 11, 20, 23, 33, 36, 40, 41, 44, 49, 52, 53, 54, 56, 58, 66, 76, 78, 85, 88, 90, 91, 93, 100, 102, 133, 134, 135, 139, 140, 154, 179, 324, 327, 328, 329, 333, 334, 335, 340, 342, 350, 351, 354, 356, 368, 369, 370, 371, 372, 373, 374, 375, 445, 447, 454, 466], "As": [3, 15, 34, 36, 44, 49, 52, 54, 65, 78, 80, 91, 93, 94, 97, 100, 102, 116, 123, 142, 154, 155, 156, 158, 160, 161, 162, 166, 168, 169, 171, 173, 179, 222, 326, 364, 365], "target": [3, 29, 33, 40, 83, 88, 93, 97, 99, 124, 139, 154, 161, 162, 166, 168, 169, 174, 177, 178, 191, 212, 259, 269, 291, 292, 293, 294, 295, 296, 297, 298, 299, 323, 336, 338, 356, 357, 367, 370, 373, 377, 380, 384, 445, 447, 448, 482], "experi": [3, 6, 29, 33, 34, 41, 65, 68, 70, 93, 114, 115, 165, 170, 171, 174, 199, 222, 482], "consequ": [3, 15, 85, 181], "quit": [3, 6, 65, 159, 168, 193, 265], "big": [3, 41, 49, 139, 154, 158, 161, 169, 179, 181, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464], "Not": [3, 65, 70, 243, 244, 388, 445, 447], "ha": [3, 6, 10, 11, 29, 30, 32, 33, 34, 35, 36, 42, 47, 49, 51, 52, 54, 58, 65, 66, 68, 70, 71, 74, 78, 80, 85, 88, 90, 93, 97, 99, 103, 117, 123, 124, 125, 126, 127, 129, 133, 136, 139, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 160, 162, 163, 166, 168, 169, 171, 173, 177, 181, 191, 222, 227, 228, 229, 237, 238, 239, 241, 246, 250, 270, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 330, 336, 338, 347, 350, 351, 353, 356, 357, 361, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 384, 386, 426, 429, 434, 438, 439, 445, 446, 447, 448, 452, 456, 459, 461, 464, 466, 479], "interest": [3, 6, 14, 15, 16, 23, 35, 42, 49, 51, 55, 66, 68, 69, 70, 82, 95, 97, 98, 99, 100, 103, 106, 112, 114, 117, 127, 145, 154, 155, 161, 163, 164, 166, 168, 169, 170, 171, 174, 176, 180, 181, 194, 198, 205, 235, 236, 242, 245, 247, 256, 258, 259, 260, 262, 263, 264, 265, 268, 269, 274, 277, 278, 279, 280, 313, 315, 316, 346, 351, 353, 354, 358, 361, 367, 371, 424, 433, 434, 436, 439, 448, 481, 482], "u": [3, 4, 15, 24, 40, 55, 58, 63, 65, 76, 78, 88, 93, 110, 114, 161, 162, 164, 169, 198, 220, 253, 255, 297, 315, 316, 480], "so": [3, 6, 10, 11, 14, 22, 33, 36, 40, 43, 49, 52, 65, 67, 68, 70, 71, 75, 78, 79, 80, 85, 88, 93, 99, 100, 102, 107, 117, 125, 147, 154, 166, 167, 168, 169, 171, 177, 179, 181, 187, 227, 228, 229, 237, 243, 244, 251, 270, 275, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 326, 336, 338, 361, 362, 367, 368, 369, 370, 371, 372, 373, 374, 384, 429, 435, 437, 438, 442, 444, 445, 446, 447, 448, 464], "keep": [3, 31, 33, 34, 36, 50, 51, 54, 58, 65, 67, 68, 83, 85, 93, 97, 101, 102, 117, 121, 124, 126, 139, 146, 154, 159, 161, 162, 163, 166, 167, 169, 270, 274, 290, 296, 297, 298, 341, 347, 360, 362, 376, 377, 378, 379, 380, 381, 382, 448, 449, 460, 461], "signal": [3, 6, 28, 43, 44, 45, 46, 48, 49, 50, 52, 55, 57, 59, 61, 65, 66, 68, 69, 70, 77, 82, 85, 93, 95, 99, 106, 112, 114, 122, 123, 124, 125, 126, 138, 140, 142, 146, 147, 151, 154, 155, 157, 158, 159, 160, 161, 163, 166, 168, 171, 174, 178, 180, 187, 191, 197, 227, 228, 229, 231, 235, 242, 243, 245, 253, 254, 256, 259, 267, 291, 292, 293, 294, 295, 296, 297, 298, 299, 305, 306, 323, 326, 336, 338, 341, 347, 348, 353, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 384, 416, 420, 421, 430, 431, 439, 440, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 458, 466, 481, 482], "creat": [3, 6, 10, 11, 20, 23, 33, 36, 40, 41, 42, 47, 48, 49, 55, 62, 65, 67, 69, 70, 71, 74, 78, 83, 85, 93, 97, 99, 106, 107, 115, 116, 123, 131, 139, 151, 154, 155, 156, 160, 161, 162, 164, 169, 170, 171, 174, 175, 177, 178, 179, 181, 270, 272, 290, 298, 299, 323, 326, 336, 337, 348, 354, 363, 386, 395, 396, 397, 400, 419, 420, 421, 422, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 454, 455, 457, 479, 480, 482], "sampl": [3, 8, 23, 27, 31, 34, 36, 40, 49, 58, 63, 65, 67, 69, 73, 74, 76, 77, 80, 81, 83, 93, 100, 104, 107, 112, 114, 116, 145, 147, 148, 154, 156, 161, 166, 168, 170, 171, 173, 181, 186, 191, 197, 208, 215, 227, 228, 229, 231, 256, 265, 280, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 323, 324, 325, 327, 328, 329, 330, 333, 334, 335, 336, 338, 341, 345, 346, 352, 368, 369, 370, 371, 372, 373, 374, 383, 384, 396, 411, 420, 423, 426, 429, 438, 439, 445, 446, 447, 448, 459, 460, 461, 464, 477, 481], "belong": [3, 30, 32, 149, 154, 161, 174, 181, 188], "classif": [3, 30, 31, 32, 33, 35, 43, 46, 49, 59, 97, 99, 112, 114, 116, 126, 145, 154, 155, 160, 161, 165, 166, 167, 174, 175, 176, 186, 227, 235, 245, 256, 291, 292, 293, 294, 296, 365, 367, 372, 421, 431, 439, 480, 481, 482], "becom": [3, 65, 117, 126, 154, 162, 163, 164, 171], "smaller": [3, 6, 32, 80, 129, 139, 147, 151, 154, 158, 166, 167, 168, 171, 174, 179, 243, 244, 297, 339, 352, 360, 445], "e": [3, 6, 15, 22, 24, 29, 39, 40, 44, 47, 48, 56, 58, 65, 75, 87, 93, 99, 101, 102, 104, 114, 116, 117, 124, 127, 145, 147, 148, 151, 154, 155, 156, 159, 161, 164, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 180, 181, 187, 191, 194, 195, 197, 198, 205, 214, 218, 220, 221, 227, 228, 229, 231, 240, 241, 248, 253, 254, 255, 257, 267, 270, 272, 275, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 313, 315, 316, 323, 330, 336, 338, 339, 340, 341, 342, 343, 345, 360, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 421, 429, 432, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 452, 454, 460, 464, 479], "shorter": [3, 65, 168, 364], "condition_mask": [3, 29, 30, 31, 34, 36, 37, 97, 101, 116], "isin": [3, 29, 31, 34, 36, 37, 97, 101, 116, 117, 270], "larg": [3, 30, 31, 36, 39, 41, 48, 49, 54, 56, 64, 68, 69, 71, 91, 114, 117, 140, 154, 158, 161, 162, 163, 164, 166, 168, 169, 171, 174, 175, 176, 179, 181, 193, 207, 214, 265, 270, 272, 323, 325, 330, 369, 372, 376, 377, 378, 380, 381, 415, 446, 466], "split": [3, 30, 31, 32, 34, 36, 39, 40, 41, 42, 43, 44, 49, 51, 85, 93, 98, 99, 145, 154, 159, 161, 163, 168, 169, 174, 180, 243, 244, 291, 292, 293, 294], "fmri_niimg": [3, 30, 34, 97, 161], "valu": [3, 4, 6, 9, 14, 15, 17, 23, 24, 30, 31, 33, 40, 42, 44, 47, 52, 54, 55, 58, 61, 65, 67, 68, 71, 76, 78, 87, 88, 89, 90, 91, 93, 97, 99, 100, 101, 102, 104, 105, 106, 107, 110, 117, 121, 123, 124, 126, 127, 131, 134, 135, 139, 142, 146, 147, 149, 152, 154, 155, 158, 159, 162, 163, 165, 166, 167, 169, 171, 173, 174, 176, 179, 181, 188, 219, 224, 227, 228, 229, 231, 233, 235, 237, 239, 240, 241, 243, 244, 246, 247, 248, 250, 251, 261, 265, 270, 274, 276, 279, 282, 283, 286, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 306, 310, 311, 313, 314, 315, 316, 319, 323, 324, 326, 332, 336, 338, 339, 340, 341, 342, 345, 347, 356, 357, 358, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 418, 419, 420, 421, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 441, 442, 444, 445, 446, 447, 448, 450, 451, 452, 456, 457, 458, 459, 460, 461, 464, 466, 479], "216": [3, 30, 33, 41, 465, 466], "classifi": [3, 28, 32, 33, 36, 41, 45, 51, 97, 98, 112, 142, 145, 146, 154, 161, 162, 163, 164, 165, 174, 175, 176, 259, 291, 293, 294, 295, 296, 346, 348, 353, 434, 439, 481, 482], "linear": [3, 6, 29, 33, 34, 35, 37, 44, 65, 67, 97, 101, 114, 136, 154, 161, 165, 170, 171, 172, 174, 175, 180, 181, 191, 207, 231, 270, 291, 292, 293, 294, 296, 297, 298, 299, 313, 315, 316, 323, 336, 341, 355, 356, 357, 365, 384, 428, 460, 464, 473, 480, 482], "kernel": [3, 29, 33, 34, 35, 44, 55, 93, 97, 161, 191, 292, 294, 297, 327, 328, 329, 333, 334, 335], "svc": [3, 29, 30, 31, 32, 33, 34, 35, 116, 142, 154, 161, 162, 164, 291, 293, 295], "standard": [3, 6, 9, 11, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62, 65, 67, 68, 71, 74, 88, 90, 91, 93, 97, 98, 100, 103, 104, 105, 107, 110, 114, 116, 124, 125, 139, 142, 146, 148, 149, 154, 156, 159, 161, 162, 166, 169, 170, 171, 174, 179, 180, 181, 195, 200, 201, 202, 203, 204, 227, 249, 274, 291, 292, 293, 294, 296, 297, 298, 299, 306, 315, 316, 323, 325, 326, 330, 341, 361, 364, 368, 369, 370, 371, 372, 373, 374, 420, 446, 448, 460, 465, 466, 480], "zscore_sampl": [3, 11, 29, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 90, 91, 97, 98, 99, 103, 124, 154, 159, 161, 368, 369, 370, 371, 372, 373, 374, 460, 466], "fit": [3, 6, 28, 30, 32, 35, 36, 37, 40, 41, 42, 44, 45, 48, 49, 50, 51, 52, 53, 54, 57, 58, 60, 61, 64, 65, 67, 69, 72, 74, 75, 76, 78, 79, 80, 86, 88, 90, 91, 93, 97, 98, 99, 102, 110, 112, 116, 125, 126, 139, 147, 149, 151, 154, 155, 157, 158, 159, 161, 162, 164, 166, 168, 171, 172, 174, 175, 176, 181, 227, 228, 229, 251, 258, 259, 291, 292, 293, 294, 295, 296, 297, 298, 299, 305, 306, 310, 313, 314, 315, 316, 320, 323, 326, 332, 336, 338, 348, 353, 367, 368, 369, 370, 371, 372, 373, 374, 380, 384, 397, 400, 422, 434, 439, 445, 446, 447, 448, 451, 456, 458, 465, 466, 481, 482], "train": [3, 31, 32, 34, 39, 40, 41, 42, 43, 44, 51, 97, 98, 145, 154, 161, 162, 163, 166, 168, 174, 176, 181, 228, 291, 292, 293, 294, 296, 297, 445, 447, 453], "without": [3, 6, 14, 23, 48, 50, 65, 77, 80, 83, 93, 109, 110, 112, 117, 124, 125, 133, 142, 151, 154, 156, 159, 165, 167, 168, 174, 179, 181, 226, 240, 339, 345, 365, 367, 370, 373, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 420, 427, 432, 479, 482], "resampl": [3, 9, 29, 30, 32, 33, 34, 35, 36, 43, 48, 49, 52, 53, 54, 56, 65, 69, 74, 82, 90, 91, 95, 97, 112, 116, 124, 131, 132, 135, 136, 142, 146, 148, 149, 154, 178, 191, 209, 223, 270, 272, 274, 284, 285, 287, 288, 291, 292, 293, 294, 296, 297, 298, 299, 336, 342, 346, 351, 353, 355, 356, 357, 368, 369, 370, 371, 372, 373, 376, 378, 379, 380, 381, 426, 427, 433, 434, 439, 441, 446, 451, 464, 466, 481, 482], "492": [3, 29, 30, 32, 33, 34, 35, 36, 97], "provid": [3, 5, 6, 9, 29, 30, 32, 33, 34, 35, 36, 44, 47, 48, 49, 52, 54, 56, 62, 65, 66, 69, 70, 74, 75, 76, 78, 79, 83, 90, 93, 97, 100, 104, 110, 115, 116, 117, 125, 126, 129, 137, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 154, 155, 157, 158, 160, 161, 168, 169, 170, 171, 173, 174, 175, 176, 177, 179, 181, 186, 187, 188, 197, 205, 206, 216, 219, 221, 223, 225, 226, 227, 228, 229, 231, 234, 235, 237, 238, 239, 240, 247, 248, 251, 259, 270, 274, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 310, 314, 323, 324, 325, 329, 330, 335, 336, 338, 341, 347, 356, 361, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 418, 420, 423, 430, 432, 436, 445, 446, 447, 448, 449, 456, 460, 464, 466, 479, 480], "sform": [3, 29, 30, 32, 33, 34, 35, 36, 97, 151, 154], "header": [3, 11, 29, 30, 32, 33, 34, 35, 36, 93, 97, 100, 121, 125, 140, 142, 150, 154, 179, 341, 344, 354, 420, 460], "result": [3, 6, 14, 15, 23, 24, 30, 33, 34, 35, 36, 40, 41, 42, 43, 44, 48, 49, 51, 55, 57, 58, 61, 62, 64, 65, 67, 69, 70, 71, 74, 76, 77, 78, 83, 85, 86, 87, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 104, 105, 107, 114, 115, 117, 124, 125, 132, 139, 142, 145, 150, 151, 154, 155, 157, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 179, 180, 181, 186, 188, 193, 194, 197, 206, 212, 213, 235, 237, 247, 265, 270, 272, 279, 291, 292, 295, 312, 313, 315, 316, 317, 323, 332, 336, 338, 341, 351, 352, 353, 356, 363, 371, 372, 374, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 435, 437, 438, 442, 451, 452, 457, 464, 476, 479, 482], "mai": [3, 17, 29, 30, 32, 33, 34, 35, 36, 43, 49, 56, 65, 70, 71, 79, 85, 97, 99, 102, 114, 116, 117, 121, 140, 142, 150, 154, 155, 161, 162, 164, 169, 171, 174, 179, 181, 187, 193, 226, 227, 235, 265, 270, 297, 311, 326, 338, 356, 363, 365, 369, 371, 372, 384, 435, 437, 438, 451, 457, 464], "expect": [3, 6, 29, 30, 32, 33, 34, 35, 36, 61, 65, 77, 78, 80, 94, 97, 100, 101, 104, 105, 117, 127, 142, 151, 154, 159, 166, 169, 171, 174, 177, 180, 181, 297, 323, 325, 330, 336, 338, 342, 361], "both": [3, 4, 9, 15, 24, 39, 47, 49, 51, 58, 67, 78, 79, 88, 93, 99, 104, 107, 117, 125, 126, 142, 149, 154, 155, 158, 160, 166, 167, 169, 170, 174, 179, 180, 181, 186, 187, 208, 217, 227, 234, 246, 256, 304, 305, 306, 309, 323, 325, 330, 338, 339, 341, 360, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 426, 429, 431, 434, 438, 450, 460, 464, 480], "class": [3, 11, 28, 32, 42, 43, 45, 49, 51, 54, 56, 58, 90, 93, 97, 98, 112, 122, 123, 124, 126, 127, 129, 135, 136, 137, 140, 142, 145, 147, 148, 149, 151, 154, 160, 161, 165, 168, 169, 170, 173, 181, 182, 184, 185, 226, 227, 228, 229, 259, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 311, 312, 313, 314, 315, 316, 317, 323, 336, 342, 354, 364, 367, 368, 369, 370, 371, 372, 373, 374, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 419, 421, 424, 426, 427, 430, 431, 432, 433, 434, 439, 445, 446, 447, 448, 449, 450, 456, 466, 467, 469, 471, 474, 475, 476, 481, 482], "number": [3, 6, 29, 31, 33, 34, 39, 42, 43, 49, 50, 53, 54, 55, 58, 64, 65, 67, 70, 71, 76, 78, 85, 88, 91, 93, 97, 99, 102, 103, 104, 117, 126, 127, 139, 142, 145, 146, 147, 149, 152, 154, 155, 158, 159, 161, 162, 163, 166, 169, 171, 174, 176, 177, 181, 187, 191, 194, 217, 219, 225, 227, 228, 229, 231, 235, 236, 239, 242, 243, 244, 247, 248, 250, 256, 259, 261, 264, 265, 268, 270, 274, 280, 283, 286, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 305, 306, 314, 319, 323, 332, 336, 338, 339, 341, 343, 345, 347, 353, 360, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 379, 380, 381, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 420, 421, 422, 424, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 457, 458, 459, 460, 461, 466, 479], "problem": [3, 6, 31, 33, 39, 48, 91, 93, 114, 161, 162, 163, 166, 167, 168, 169, 171, 174, 176, 177, 231, 296, 297, 299, 310, 313, 314, 315, 316, 338, 384], "balanc": [3, 49, 149, 154, 158], "perform": [3, 30, 33, 34, 44, 48, 51, 54, 62, 65, 69, 78, 79, 88, 90, 91, 93, 94, 98, 99, 100, 101, 104, 105, 110, 116, 117, 124, 145, 146, 147, 149, 154, 155, 160, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 179, 180, 181, 188, 194, 214, 223, 231, 261, 274, 283, 286, 291, 292, 293, 294, 296, 297, 298, 299, 305, 306, 323, 325, 332, 336, 338, 355, 356, 357, 358, 359, 360, 365, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 384, 395, 397, 400, 402, 404, 406, 408, 410, 412, 414, 419, 421, 424, 426, 427, 430, 432, 433, 434, 441, 445, 446, 447, 448, 451, 453, 458, 459, 460, 464, 466, 482], "done": [3, 6, 34, 36, 41, 42, 43, 44, 48, 49, 51, 53, 57, 58, 65, 70, 93, 101, 102, 104, 116, 117, 149, 151, 154, 155, 156, 158, 161, 162, 164, 166, 168, 171, 177, 180, 228, 229, 291, 292, 293, 294, 296, 297, 298, 299, 323, 336, 341, 342, 350, 360, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 446, 447, 448, 460], "sum": [3, 41, 42, 49, 58, 64, 66, 76, 78, 83, 100, 101, 104, 105, 106, 142, 154, 168, 296, 297, 310, 314, 315, 347, 368, 371, 451, 461], "float": [3, 40, 41, 43, 66, 74, 142, 145, 152, 154, 228, 229, 231, 235, 261, 282, 283, 286, 291, 292, 293, 294, 295, 296, 297, 298, 299, 310, 311, 313, 314, 315, 316, 318, 322, 323, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 338, 339, 340, 341, 345, 347, 356, 357, 360, 364, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 418, 419, 420, 421, 424, 426, 427, 429, 430, 432, 433, 434, 435, 437, 438, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 453, 456, 457, 458, 459, 460, 461, 464], "len": [3, 12, 22, 30, 32, 33, 34, 47, 48, 51, 62, 63, 64, 65, 66, 67, 70, 75, 78, 90, 93, 97, 102, 110, 117, 231, 291, 292, 293, 294, 296, 297, 313, 315, 316, 320, 336, 353, 356, 376, 378, 379, 381, 446], "meaningless": [3, 161, 171, 339], "why": [3, 93, 168, 181], "proper": [3, 34, 149, 154, 168, 246, 247, 480], "error": [3, 6, 42, 43, 65, 75, 78, 80, 83, 93, 102, 123, 125, 129, 136, 139, 142, 151, 154, 156, 161, 162, 166, 169, 171, 174, 227, 228, 229, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 313, 315, 323, 330, 336, 338, 339, 341, 342, 363, 367, 368, 369, 370, 371, 372, 373, 374, 380, 445, 446, 447, 448, 480], "rate": [3, 6, 65, 80, 129, 154, 168, 171, 174, 181, 222, 318, 338], "test": [3, 29, 31, 34, 36, 40, 42, 43, 44, 51, 53, 65, 69, 73, 76, 77, 81, 98, 100, 101, 104, 105, 110, 112, 114, 123, 125, 126, 138, 146, 149, 154, 161, 163, 164, 166, 167, 168, 171, 172, 173, 174, 177, 180, 226, 229, 235, 236, 237, 238, 239, 240, 241, 245, 248, 249, 251, 259, 260, 263, 264, 265, 268, 269, 274, 280, 291, 292, 293, 294, 295, 296, 297, 311, 336, 338, 339, 346, 352, 356, 357, 360, 363, 384, 396, 397, 411, 423, 426, 434, 439, 441, 473, 480, 481], "30": [3, 6, 32, 33, 36, 40, 44, 48, 51, 57, 62, 63, 66, 90, 98, 102, 106, 114, 129, 139, 154, 167, 236, 293, 294, 313, 315, 316, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 456, 465, 466], "last": [3, 6, 33, 35, 40, 55, 71, 141, 154, 171, 176, 177, 233, 234, 341, 348, 362, 479, 480], "point": [3, 4, 8, 15, 22, 23, 27, 54, 55, 83, 85, 90, 93, 112, 116, 139, 142, 151, 154, 159, 161, 168, 171, 174, 176, 177, 178, 179, 229, 291, 292, 293, 294, 323, 356, 357, 367, 370, 373, 378, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 421, 424, 427, 430, 432, 433, 434, 438, 439, 441, 451, 452, 458, 464, 481, 482], "dure": [3, 6, 55, 56, 64, 93, 99, 100, 114, 116, 126, 139, 146, 154, 161, 162, 168, 169, 171, 174, 176, 177, 181, 209, 210, 221, 229, 231, 235, 248, 336, 338, 376, 377, 378, 380, 381, 429, 445], "fmri_niimgs_train": 3, "fmri_niimgs_test": 3, "conditions_train": 3, "conditions_test": 3, "hasn": [3, 168], "t": [3, 5, 6, 9, 16, 22, 24, 33, 37, 41, 55, 56, 58, 62, 65, 66, 67, 69, 70, 71, 74, 75, 76, 78, 79, 82, 89, 91, 92, 93, 95, 98, 99, 101, 102, 103, 104, 106, 107, 112, 114, 117, 126, 145, 154, 155, 166, 167, 168, 169, 171, 172, 173, 174, 176, 177, 179, 180, 190, 193, 205, 219, 221, 224, 225, 237, 238, 247, 248, 250, 251, 257, 265, 270, 271, 272, 275, 296, 297, 311, 313, 314, 315, 316, 317, 319, 323, 336, 338, 360, 363, 364, 365, 378, 384, 429, 432, 434, 439, 450, 458, 461, 464, 479, 481], "examin": [3, 114, 174, 257, 275], "well": [3, 6, 15, 44, 48, 51, 58, 65, 66, 68, 78, 88, 99, 132, 139, 146, 148, 154, 155, 156, 158, 159, 161, 162, 164, 167, 169, 171, 174, 176, 191, 194, 197, 207, 220, 221, 227, 228, 229, 242, 248, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 342, 356, 365, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448, 466], "predicton_accuraci": 3, "3f": [3, 6, 34, 44, 48, 55, 97], "767": 3, "set": [3, 6, 14, 15, 16, 21, 22, 28, 29, 30, 31, 33, 36, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 64, 65, 68, 78, 79, 80, 88, 93, 94, 97, 98, 100, 112, 114, 117, 123, 124, 125, 126, 132, 136, 142, 145, 146, 148, 149, 151, 154, 155, 156, 159, 161, 163, 165, 168, 170, 171, 172, 173, 174, 175, 177, 179, 181, 188, 191, 212, 216, 220, 222, 227, 228, 229, 235, 241, 242, 253, 254, 255, 259, 263, 264, 265, 270, 272, 274, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 313, 315, 316, 322, 323, 325, 326, 330, 336, 337, 339, 341, 348, 360, 361, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 442, 444, 445, 446, 447, 448, 450, 453, 458, 460, 464, 466, 479, 481, 482], "repetit": [3, 6, 33, 63, 69, 70, 114, 138, 154, 171, 174, 199, 256, 261, 283, 286, 291, 292, 293, 294, 296, 297, 323, 326, 327, 328, 329, 333, 334, 335, 341, 368, 369, 370, 371, 372, 373, 374, 420, 446, 448, 460], "strategi": [3, 24, 28, 45, 48, 49, 65, 87, 88, 90, 91, 98, 112, 114, 124, 126, 142, 146, 147, 149, 154, 159, 162, 165, 166, 168, 171, 178, 229, 259, 291, 292, 293, 294, 295, 298, 299, 326, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 380, 420, 431, 432, 439, 446, 451, 460, 464, 466, 481, 482], "scikit": [3, 34, 49, 93, 96, 101, 103, 108, 112, 115, 121, 123, 126, 127, 132, 134, 135, 136, 139, 142, 147, 149, 154, 155, 158, 161, 162, 163, 165, 166, 168, 169, 175, 176, 177, 259, 291, 292, 293, 294, 295, 305, 306, 348, 367, 368, 369, 370, 371, 372, 373, 374, 434, 446, 480, 481, 482], "sklearn": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 48, 49, 51, 52, 53, 57, 58, 91, 93, 97, 98, 101, 102, 103, 104, 105, 110, 126, 139, 142, 146, 147, 154, 155, 161, 162, 164, 168, 181, 227, 228, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 258, 259, 260, 262, 266, 270, 272, 277, 278, 279, 280, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 332, 336, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448], "model_select": [3, 29, 30, 32, 33, 34, 35, 36, 37, 40, 42, 43, 44, 51, 97, 98, 139, 154, 161, 164, 291, 292, 293, 294], "cv": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 44, 51, 58, 97, 98, 110, 136, 154, 161, 166, 229, 291, 292, 293, 294, 295, 296, 297], "n_split": [3, 34, 36, 37, 40, 44, 51, 98], "fold": [3, 29, 31, 34, 36, 40, 51, 67, 93, 97, 98, 161, 162, 164, 166, 168, 181, 229, 291, 292, 293, 294, 295, 296, 297], "enumer": [3, 12, 22, 34, 40, 47, 48, 51, 57, 64, 65, 66, 67, 69, 70, 78, 93, 99, 100, 101, 102, 104], "01d": 3, "886": 3, "698": [3, 33], "744": [3, 33], "return": [3, 4, 9, 11, 14, 15, 31, 33, 39, 40, 41, 44, 47, 56, 65, 66, 70, 79, 83, 93, 99, 106, 110, 116, 117, 124, 125, 126, 131, 135, 142, 145, 147, 149, 150, 151, 154, 156, 161, 163, 166, 168, 169, 174, 176, 177, 179, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 305, 306, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 474, 479], "paramet": [3, 6, 14, 15, 21, 23, 24, 28, 29, 32, 42, 44, 45, 49, 51, 54, 56, 58, 60, 69, 72, 88, 90, 91, 93, 94, 103, 104, 105, 107, 110, 112, 116, 117, 123, 124, 125, 126, 133, 136, 139, 140, 142, 146, 147, 148, 149, 150, 151, 152, 154, 156, 158, 159, 160, 161, 163, 165, 166, 167, 168, 169, 170, 171, 174, 176, 178, 179, 191, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 305, 306, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 479, 481, 482], "n_fold": [3, 229, 291, 292, 293, 294, 296, 297], "pipelin": [3, 35, 37, 39, 40, 41, 42, 44, 74, 97, 98, 114, 145, 154, 160, 161, 162, 165, 166, 167, 174, 180, 191, 227, 228, 229, 235, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 341, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448, 460, 482], "found": [3, 6, 49, 52, 55, 80, 99, 100, 102, 106, 107, 116, 117, 139, 154, 155, 158, 159, 160, 161, 162, 163, 164, 166, 168, 169, 176, 177, 180, 181, 191, 214, 270, 272, 274, 341, 343, 361, 375, 378, 419, 433, 434, 460, 479], "websit": [3, 42, 74, 127, 139, 154, 169, 187, 235, 248, 269], "best": [3, 34, 42, 43, 44, 94, 145, 151, 154, 161, 162, 163, 166, 168, 169, 171, 180, 291, 292, 293, 294, 296, 297, 363, 397, 400, 445, 446], "per": [3, 4, 6, 30, 31, 33, 40, 48, 57, 65, 77, 93, 100, 101, 107, 147, 154, 155, 161, 169, 181, 191, 196, 222, 229, 249, 268, 291, 292, 293, 294, 296, 297, 299, 311, 320, 323, 324, 326, 330, 337, 361, 364, 368, 369, 370, 372, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 459], "cv_params_": [3, 34, 124, 125, 154, 291, 292, 293, 294], "c": [3, 34, 40, 41, 42, 43, 44, 49, 56, 58, 68, 97, 98, 99, 101, 110, 114, 117, 162, 166, 167, 168, 169, 187, 188, 191, 195, 198, 205, 207, 212, 214, 216, 218, 221, 224, 228, 231, 239, 241, 248, 250, 253, 254, 260, 261, 267, 269, 270, 272, 274, 285, 315, 316, 341, 356, 357, 364, 365, 384, 451, 454, 460], "100": [3, 15, 31, 33, 34, 40, 41, 42, 44, 49, 55, 63, 74, 83, 85, 88, 117, 162, 171, 178, 187, 191, 219, 229, 235, 247, 267, 270, 291, 292, 293, 294, 296, 297, 320, 323, 331, 332, 340, 347, 360, 461, 465, 466, 479, 482], "speed": [3, 36, 37, 47, 76, 88, 97, 104, 114, 125, 154, 158, 164, 167, 168, 180, 181, 384, 445, 464], "cpu": [3, 42, 101, 104, 164, 229, 291, 292, 293, 294, 295, 296, 297, 298, 299, 323, 332, 336, 338, 353, 368, 369, 370, 379, 380, 381, 384, 446], "n_job": [3, 31, 33, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 62, 74, 75, 76, 78, 79, 80, 97, 98, 99, 100, 101, 104, 107, 164, 229, 291, 292, 293, 294, 295, 296, 297, 298, 299, 323, 326, 332, 336, 338, 353, 368, 369, 370, 379, 380, 381, 384, 446, 466], "respect": [3, 62, 107, 142, 151, 154, 155, 169, 171, 174, 177, 181, 253, 255, 291, 292, 293, 294, 323, 325, 326, 330, 336, 345, 356, 357, 448, 450], "structur": [3, 6, 23, 39, 41, 43, 46, 49, 51, 58, 59, 63, 65, 112, 114, 155, 161, 163, 164, 165, 166, 168, 174, 179, 186, 188, 189, 190, 191, 193, 194, 197, 205, 206, 207, 212, 213, 216, 221, 222, 225, 229, 237, 239, 248, 251, 259, 260, 265, 274, 296, 297, 310, 313, 361, 376, 377, 378, 380, 381, 431, 439, 442, 447, 453, 481, 482], "acquisit": [3, 6, 30, 32, 63, 65, 69, 100, 114, 166, 171, 174, 191, 222, 265, 330, 420], "select": [3, 6, 14, 15, 19, 20, 23, 29, 32, 33, 34, 35, 41, 42, 55, 56, 65, 75, 88, 93, 99, 104, 114, 115, 125, 132, 133, 134, 136, 144, 145, 147, 149, 154, 156, 159, 162, 163, 164, 165, 166, 167, 168, 180, 181, 191, 212, 228, 229, 239, 256, 257, 267, 270, 272, 274, 276, 290, 291, 292, 293, 294, 296, 297, 336, 338, 348, 360, 364, 365, 426, 429, 432, 434, 435, 437, 438, 445, 446, 448, 464, 479, 482], "run_label": [3, 29, 30, 32, 33, 97, 161], "acquir": [3, 6, 65, 66, 116, 171, 174, 176, 209, 222], "nois": [3, 6, 34, 44, 56, 67, 68, 70, 93, 94, 99, 102, 107, 114, 123, 147, 154, 156, 162, 164, 168, 171, 174, 181, 313, 315, 316, 330, 364, 365, 420, 432, 433, 461], "autocorrel": [3, 67, 107], "henc": [3, 56, 58, 71, 74, 85, 145, 154, 166, 169, 171, 191], "across": [3, 6, 15, 16, 47, 50, 51, 56, 64, 65, 79, 93, 97, 98, 99, 102, 114, 124, 142, 148, 154, 155, 156, 159, 160, 161, 162, 164, 166, 171, 174, 186, 191, 199, 205, 213, 221, 227, 235, 245, 279, 291, 292, 293, 294, 296, 297, 298, 299, 359, 375, 420, 446, 448, 464, 479], "pass": [3, 4, 9, 10, 11, 24, 29, 36, 42, 43, 49, 51, 54, 55, 56, 58, 78, 85, 88, 93, 101, 104, 105, 116, 117, 123, 125, 126, 135, 137, 139, 142, 147, 149, 151, 152, 154, 161, 162, 166, 168, 169, 170, 177, 179, 180, 181, 191, 227, 228, 229, 235, 270, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 325, 326, 330, 336, 338, 341, 355, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 376, 378, 379, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 441, 442, 445, 446, 447, 448, 450, 458, 459, 460, 464], "leaveonegroupout": [3, 29, 30, 32, 33, 97, 136, 154, 161, 164, 166, 291, 292, 293, 294], "cv_scores_": [3, 29, 30, 32, 33, 34, 42, 110, 161, 229, 291, 292, 293, 294, 296, 297], "9629629629629629": 3, "8518518518518519": 3, "9753086419753086": 3, "40740740740740744": 3, "9876543209876543": 3, "9259259259259259": 3, "8765432098765432": 3, "final": [3, 4, 6, 14, 15, 30, 41, 48, 53, 55, 56, 57, 63, 67, 83, 92, 93, 99, 147, 154, 155, 162, 168, 169, 170, 176, 177, 180, 181, 191, 205, 229, 336, 361, 368, 369, 371, 372, 479], "coef_": [3, 40, 44, 97, 110, 116, 291, 292, 293, 294, 296, 297], "89376098e": 3, "02": [3, 27, 30, 33, 45, 48, 51, 53, 62, 70, 72, 77, 95, 98, 114, 155, 160, 166, 176, 191, 205, 239, 298, 364, 365, 465, 481], "87165707e": 3, "23027369e": 3, "88746990e": 3, "18696981e": 3, "10744268e": 3, "69997793e": 3, "50953636e": 3, "94203804e": 3, "51228055e": 3, "08510804e": 3, "28797053e": 3, "54676590e": 3, "78908391e": 3, "69167239e": 3, "28087796e": 3, "6": [3, 4, 6, 7, 11, 20, 23, 24, 27, 30, 31, 33, 34, 36, 38, 40, 41, 42, 43, 44, 48, 49, 50, 51, 53, 54, 55, 58, 59, 62, 63, 65, 71, 72, 79, 81, 90, 93, 95, 98, 99, 102, 103, 105, 106, 108, 110, 114, 118, 121, 123, 132, 134, 136, 139, 140, 141, 147, 148, 149, 155, 159, 166, 167, 168, 170, 180, 191, 198, 215, 221, 222, 235, 253, 256, 259, 280, 298, 364, 365, 369, 372, 374, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 434, 440, 441, 448, 450, 465, 466, 480, 481], "56417664e": 3, "03": [3, 27, 30, 32, 33, 41, 44, 45, 53, 56, 59, 70, 81, 90, 95, 108, 114, 166, 174, 338, 364, 365, 384, 465, 466, 481], "7": [3, 6, 15, 17, 22, 24, 25, 27, 30, 33, 42, 44, 45, 52, 53, 54, 56, 57, 58, 59, 62, 63, 65, 68, 69, 71, 72, 81, 85, 90, 93, 101, 102, 106, 108, 114, 117, 118, 121, 123, 127, 129, 134, 136, 139, 140, 142, 147, 149, 167, 176, 179, 180, 186, 191, 195, 197, 205, 219, 222, 225, 235, 239, 241, 242, 247, 251, 313, 315, 316, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 421, 426, 430, 432, 433, 435, 437, 438, 442, 444, 447, 453, 465, 466, 479, 481], "65759064e": 3, "67106052e": 3, "8": [3, 6, 7, 9, 12, 14, 24, 27, 30, 33, 34, 38, 40, 42, 43, 45, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 61, 62, 65, 70, 71, 72, 74, 75, 78, 79, 81, 85, 87, 88, 90, 91, 95, 99, 100, 101, 102, 103, 105, 106, 108, 110, 114, 117, 121, 126, 127, 132, 140, 142, 144, 150, 159, 167, 191, 194, 200, 201, 202, 203, 204, 205, 214, 224, 240, 244, 250, 259, 261, 270, 272, 279, 282, 283, 284, 285, 286, 287, 291, 292, 293, 294, 296, 297, 298, 299, 323, 336, 340, 345, 364, 367, 368, 369, 370, 371, 372, 373, 374, 377, 380, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 446, 448, 457, 458, 460, 465, 466, 481], "02138431e": 3, "29517339e": 3, "17594060e": 3, "36993493e": 3, "41325824e": 3, "59876643e": 3, "22603634e": 3, "77307507e": 3, "22197943e": 3, "9": [3, 6, 7, 14, 15, 19, 23, 27, 32, 33, 35, 36, 40, 41, 42, 44, 45, 47, 51, 52, 53, 54, 55, 56, 58, 59, 61, 62, 63, 66, 68, 70, 71, 72, 75, 77, 78, 79, 80, 81, 83, 85, 87, 88, 89, 90, 91, 92, 93, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 111, 114, 116, 117, 118, 121, 136, 145, 147, 152, 155, 174, 195, 196, 214, 216, 219, 247, 256, 257, 270, 272, 274, 276, 310, 314, 323, 332, 338, 354, 360, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 420, 435, 437, 438, 454, 457, 465, 466, 479, 480, 481], "53187236e": 3, "76046272e": 3, "14300803e": 3, "14225202e": 3, "03653185e": 3, "89275943e": 3, "89030430e": 3, "35114087e": 3, "21401530e": 3, "73134359e": 3, "37416551e": 3, "41276593e": 3, "81648158e": 3, "65405826e": 3, "70784354e": 3, "56844428e": 3, "21664518e": 3, "47674281e": 3, "13278003e": 3, "60954459e": 3, "52763804e": 3, "02912444e": 3, "28115036e": 3, "08007455e": 3, "09925136e": 3, "72429547e": 3, "77393038e": 3, "03857127e": 3, "38236756e": 3, "48880864e": 3, "43027752e": 3, "47419229e": 3, "01": [3, 6, 7, 12, 27, 30, 32, 33, 42, 45, 48, 51, 53, 55, 58, 59, 61, 69, 70, 72, 81, 95, 98, 99, 100, 101, 107, 108, 110, 114, 191, 195, 205, 213, 229, 241, 245, 323, 326, 330, 361, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 465, 466, 481], "34043021e": 3, "87114296e": 3, "65859406e": 3, "07604223e": 3, "22035799e": 3, "95653289e": 3, "22093925e": 3, "04056211e": 3, "15344402e": 3, "12249914e": 3, "93774497e": 3, "30541208e": 3, "42976566e": 3, "23066638e": 3, "88146818e": 3, "69390599e": 3, "78945925e": 3, "00275762e": 3, "99186550e": 3, "52172748e": 3, "06154357e": 3, "31956059e": 3, "21505760e": 3, "23348404e": 3, "42561775e": 3, "53123427e": 3, "98227261e": 3, "32638086e": 3, "55125248e": 3, "41589772e": 3, "79199968e": 3, "80907220e": 3, "70157438e": 3, "71450906e": 3, "98948962e": 3, "20169054e": 3, "35466018e": 3, "37628343e": 3, "04262098e": 3, "68458732e": 3, "19369930e": 3, "94178386e": 3, "07297172e": 3, "48931645e": 3, "43559037e": 3, "09026655e": 3, "67697354e": 3, "73786657e": 3, "96431761e": 3, "09424170e": 3, "57929917e": 3, "16720585e": 3, "00106197e": 3, "40261944e": 3, "82613540e": 3, "12101646e": 3, "45402415e": 3, "32177940e": 3, "49996945e": 3, "47543733e": 3, "56643377e": 3, "83882554e": 3, "19957215e": 3, "72171452e": 3, "25533066e": 3, "58656404e": 3, "79169220e": 3, "51807153e": 3, "31722666e": 3, "35334539e": 3, "76994406e": 3, "40831123e": 3, "20591210e": 3, "35705133e": 3, "68303173e": 3, "92570901e": 3, "24496916e": 3, "30220304e": 3, "00012410e": 3, "17136955e": 3, "92628015e": 3, "33221797e": 3, "80302241e": 3, "75294493e": 3, "17801624e": 3, "09945292e": 3, "43032780e": 3, "06832101e": 3, "84813540e": 3, "71506256e": 3, "72570390e": 3, "76642354e": 3, "08904206e": 3, "04": [3, 27, 30, 32, 33, 45, 49, 53, 56, 59, 70, 108, 114, 155, 156, 168, 213, 245, 341, 364, 365, 460, 461, 465, 466, 481], "00769491e": 3, "53994213e": 3, "25606945e": 3, "82606109e": 3, "50555608e": 3, "61202795e": 3, "16496391e": 3, "95406376e": 3, "57882322e": 3, "89303501e": 3, "82973739e": 3, "23920295e": 3, "13675763e": 3, "68751726e": 3, "66514272e": 3, "35519778e": 3, "80212533e": 3, "46411344e": 3, "53244969e": 3, "67293063e": 3, "62254148e": 3, "86829305e": 3, "39666853e": 3, "21720868e": 3, "73612493e": 3, "01697682e": 3, "17098469e": 3, "91414260e": 3, "37776866e": 3, "84698064e": 3, "22618904e": 3, "82638053e": 3, "13782033e": 3, "80797799e": 3, "79686441e": 3, "78891884e": 3, "11432580e": 3, "65018191e": 3, "89092006e": 3, "42850711e": 3, "22346905e": 3, "92871655e": 3, "89845178e": 3, "39531730e": 3, "65285134e": 3, "65325635e": 3, "58044961e": 3, "93381805e": 3, "13630427e": 3, "09407579e": 3, "50179454e": 3, "38815791e": 3, "12605355e": 3, "41484203e": 3, "10216589e": 3, "33811612e": 3, "12338976e": 3, "37427381e": 3, "13075562e": 3, "64226198e": 3, "22400187e": 3, "31921204e": 3, "98651698e": 3, "29727941e": 3, "28093842e": 3, "89711582e": 3, "13468165e": 3, "28732943e": 3, "71053976e": 3, "34908328e": 3, "04371197e": 3, "26795054e": 3, "71216276e": 3, "29123969e": 3, "33452722e": 3, "77915955e": 3, "74667694e": 3, "76481508e": 3, "38275097e": 3, "28050768e": 3, "78034656e": 3, "32695942e": 3, "22687247e": 3, "28029731e": 3, "57416598e": 3, "03623309e": 3, "90247496e": 3, "15033240e": 3, "81420270e": 3, "12338766e": 3, "17431544e": 3, "23480776e": 3, "54516396e": 3, "73680370e": 3, "53966022e": 3, "06521603e": 3, "21981536e": 3, "98728425e": 3, "85519401e": 3, "05704315e": 3, "02839114e": 3, "10051365e": 3, "42459427e": 3, "93848390e": 3, "01771554e": 3, "09405659e": 3, "49255123e": 3, "92747684e": 3, "05294111e": 3, "07532504e": 3, "84051792e": 3, "48759071e": 3, "00654179e": 3, "63079192e": 3, "64689423e": 3, "90210033e": 3, "04858936e": 3, "68079827e": 3, "36719575e": 3, "08856086e": 3, "10242409e": 3, "41966428e": 3, "16486400e": 3, "98669227e": 3, "61631551e": 3, "96235445e": 3, "03906565e": 3, "56495379e": 3, "98919677e": 3, "13032437e": 3, "21952240e": 3, "14992022e": 3, "31276095e": 3, "67258472e": 3, "14429399e": 3, "67120953e": 3, "28702654e": 3, "20151201e": 3, "68525316e": 3, "25604311e": 3, "04616739e": 3, "10335470e": 3, "85356485e": 3, "81662354e": 3, "48416031e": 3, "18825581e": 3, "18495899e": 3, "10846084e": 3, "11775513e": 3, "63479583e": 3, "25921076e": 3, "12226086e": 3, "57654916e": 3, "70199278e": 3, "32372992e": 3, "06448186e": 3, "23433473e": 3, "27355872e": 3, "33885623e": 3, "75531249e": 3, "88842692e": 3, "45131732e": 3, "03299201e": 3, "16785783e": 3, "32229116e": 3, "17565116e": 3, "40062715e": 3, "31137548e": 3, "17557216e": 3, "75889094e": 3, "18128263e": 3, "15886265e": 3, "34028278e": 3, "22779458e": 3, "00232302e": 3, "74911402e": 3, "12754412e": 3, "98717809e": 3, "04070069e": 3, "65060881e": 3, "03005663e": 3, "05685788e": 3, "80744357e": 3, "75450560e": 3, "72590302e": 3, "00662718e": 3, "46104889e": 3, "46869709e": 3, "13410978e": 3, "81702754e": 3, "40980262e": 3, "14638219e": 3, "63834334e": 3, "66532026e": 3, "15688237e": 3, "45093132e": 3, "35867363e": 3, "34597605e": 3, "81062227e": 3, "15343070e": 3, "39362342e": 3, "07247849e": 3, "15461992e": 3, "15425576e": 3, "88766971e": 3, "60261888e": 3, "09701747e": 3, "29172338e": 3, "59461567e": 3, "60401106e": 3, "64628263e": 3, "12882547e": 3, "17269811e": 3, "51638153e": 3, "82893765e": 3, "42548484e": 3, "47012339e": 3, "63033596e": 3, "17314224e": 3, "24175673e": 3, "17987591e": 3, "85681541e": 3, "23640984e": 3, "86601697e": 3, "54629049e": 3, "50546151e": 3, "20612419e": 3, "19789857e": 3, "59527168e": 3, "12128857e": 3, "93192412e": 3, "54339628e": 3, "23479432e": 3, "03928498e": 3, "37295914e": 3, "82791462e": 3, "98745521e": 3, "66896773e": 3, "23292268e": 3, "10332850e": 3, "18104522e": 3, "18718924e": 3, "63539133e": 3, "05280580e": 3, "84617460e": 3, "36216927e": 3, "65209442e": 3, "49397720e": 3, "49353207e": 3, "11598457e": 3, "69095151e": 3, "00058555e": 3, "99015084e": 3, "01873279e": 3, "09866085e": 3, "11780953e": 3, "72052846e": 3, "16425327e": 3, "55503391e": 3, "27700772e": 3, "95494258e": 3, "48708380e": 3, "19935246e": 3, "88664531e": 3, "61421338e": 3, "77021863e": 3, "90075952e": 3, "58286132e": 3, "31737513e": 3, "24913888e": 3, "36174522e": 3, "07353993e": 3, "08860799e": 3, "12810071e": 3, "63145250e": 3, "04799856e": 3, "07015195e": 3, "89178615e": 3, "71620669e": 3, "13384876e": 3, "10364362e": 3, "23264679e": 3, "50404192e": 3, "85906241e": 3, "04965638e": 3, "41706457e": 3, "18520208e": 3, "83204256e": 3, "82244778e": 3, "17649685e": 3, "03258521e": 3, "09194510e": 3, "23390949e": 3, "19387168e": 3, "53771258e": 3, "21211862e": 3, "55620356e": 3, "93484285e": 3, "92527885e": 3, "76693943e": 3, "67992031e": 3, "76553518e": 3, "38165415e": 3, "60399916e": 3, "50399509e": 3, "27423587e": 3, "29244648e": 3, "06663981e": 3, "81942805e": 3, "77511562e": 3, "64243540e": 3, "coeffici": [3, 6, 23, 39, 40, 44, 51, 97, 98, 135, 151, 154, 155, 161, 162, 163, 167, 168, 171, 174, 227, 229, 296, 297, 312, 314, 317, 323, 332, 336, 458], "voxel": [3, 15, 25, 28, 33, 36, 37, 39, 40, 41, 44, 45, 46, 49, 50, 58, 59, 65, 67, 68, 73, 78, 80, 81, 83, 86, 88, 89, 91, 97, 99, 101, 104, 107, 112, 114, 116, 124, 129, 132, 133, 134, 140, 149, 151, 154, 158, 159, 161, 163, 164, 165, 167, 170, 171, 172, 174, 175, 176, 179, 181, 188, 191, 208, 209, 212, 219, 222, 225, 235, 243, 244, 251, 256, 260, 261, 274, 292, 295, 296, 297, 298, 299, 311, 318, 319, 323, 332, 336, 338, 339, 340, 341, 343, 345, 346, 347, 356, 357, 360, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 379, 381, 384, 397, 412, 415, 420, 423, 428, 434, 439, 445, 446, 447, 448, 449, 450, 454, 455, 456, 457, 458, 464, 465, 466, 479, 481, 482], "464": [3, 33, 97], "get": [3, 4, 6, 14, 21, 22, 33, 35, 40, 41, 51, 52, 56, 58, 62, 65, 66, 67, 69, 74, 77, 80, 85, 87, 99, 100, 103, 107, 117, 134, 139, 154, 156, 159, 160, 161, 166, 168, 170, 173, 175, 181, 227, 228, 229, 237, 243, 244, 246, 247, 272, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 306, 313, 315, 316, 323, 336, 338, 346, 351, 355, 367, 368, 369, 370, 371, 372, 373, 374, 384, 385, 387, 388, 415, 445, 446, 447, 448, 456, 480], "coef_img_": [3, 29, 30, 31, 39, 42, 43, 110, 161, 181, 291, 292, 293, 294, 296, 297], "coef_img": [3, 30, 43, 110, 116], "niftiimag": [3, 156, 169, 170, 179, 180], "save": [3, 6, 9, 14, 21, 23, 29, 33, 41, 42, 43, 48, 49, 50, 51, 61, 65, 70, 71, 74, 85, 90, 91, 93, 97, 98, 99, 102, 106, 117, 125, 140, 149, 152, 154, 159, 168, 179, 180, 181, 209, 270, 272, 296, 297, 300, 301, 302, 316, 323, 336, 363, 368, 369, 371, 372, 373, 374, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 456, 458, 482], "pathlib": [3, 4, 6, 15, 23, 29, 33, 41, 48, 49, 55, 61, 62, 70, 71, 74, 85, 93, 100, 107, 125, 148, 154, 179, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 274, 275, 276, 277, 278, 279, 280, 281, 291, 292, 293, 294, 296, 297, 323, 326, 336, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 429, 446, 447, 448, 460, 462, 463, 464], "path": [3, 4, 6, 15, 23, 29, 33, 41, 48, 49, 55, 61, 62, 70, 71, 74, 85, 93, 100, 107, 115, 116, 117, 125, 131, 142, 148, 150, 151, 154, 161, 167, 168, 169, 177, 178, 181, 188, 199, 209, 212, 222, 223, 228, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 288, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 323, 326, 336, 342, 351, 361, 362, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 398, 429, 446, 447, 448, 456, 460, 462, 463, 464, 482], "output_dir": [3, 4, 6, 15, 23, 29, 33, 41, 48, 49, 55, 61, 62, 70, 71, 74, 85, 93, 428], "cwd": [3, 4, 6, 15, 23, 29, 33, 41, 48, 49, 55, 61, 62, 70, 71, 74, 85, 93], "plot_decoding_tutori": [3, 7, 142, 154, 161, 169, 481], "mkdir": [3, 4, 6, 15, 23, 29, 33, 41, 48, 49, 55, 61, 62, 70, 71, 74, 85, 93], "exist_ok": [3, 4, 6, 15, 23, 29, 33, 41, 48, 49, 55, 61, 62, 70, 71, 74, 85, 93], "parent": [3, 4, 6, 15, 23, 29, 33, 41, 48, 49, 55, 61, 62, 70, 71, 74, 85, 93, 169], "output": [3, 4, 6, 9, 15, 16, 22, 23, 29, 33, 34, 36, 41, 44, 48, 49, 51, 52, 54, 55, 56, 58, 65, 67, 70, 79, 85, 93, 107, 115, 116, 123, 124, 126, 131, 137, 149, 151, 154, 155, 160, 165, 169, 174, 176, 178, 180, 181, 227, 228, 230, 231, 232, 233, 234, 291, 292, 293, 294, 295, 296, 297, 298, 299, 305, 306, 313, 315, 316, 320, 323, 336, 338, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 353, 355, 356, 357, 358, 359, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 420, 426, 427, 429, 432, 433, 434, 441, 442, 445, 446, 447, 448, 451, 452, 454, 455, 457, 458, 464, 479, 482], "to_filenam": [3, 4, 6, 29, 48, 49, 55, 70, 85, 93, 180], "haxby_svc_weight": 3, "00_tutori": [3, 4, 6, 7, 161, 481], "dim": [3, 21, 23, 29, 47, 56, 90, 130, 132, 136, 154, 161, 311, 313, 315, 316, 419, 432, 433, 434, 441], "doe": [3, 6, 29, 49, 65, 66, 74, 101, 116, 117, 129, 138, 142, 151, 152, 154, 161, 162, 166, 168, 169, 170, 171, 176, 181, 237, 247, 259, 312, 314, 317, 326, 347, 359, 361, 363, 380, 388, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 445, 461, 479], "than": [3, 4, 6, 15, 31, 32, 35, 36, 39, 40, 41, 42, 43, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 65, 67, 68, 70, 76, 78, 80, 85, 87, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 115, 116, 117, 126, 129, 132, 133, 134, 135, 136, 138, 142, 147, 149, 154, 155, 158, 160, 161, 162, 163, 164, 166, 168, 169, 171, 174, 177, 179, 180, 181, 191, 213, 226, 243, 244, 270, 272, 276, 291, 292, 293, 294, 298, 299, 323, 332, 338, 339, 340, 347, 352, 360, 361, 364, 365, 367, 369, 370, 372, 373, 384, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 415, 420, 421, 426, 429, 430, 434, 438, 439, 440, 442, 444, 448, 457, 459, 461, 464, 466], "answer": [3, 480], "question": [3, 51, 64, 65, 98, 158, 176, 177, 181, 189, 256, 480], "random": [3, 40, 41, 44, 51, 55, 63, 97, 98, 101, 110, 114, 134, 146, 154, 158, 159, 160, 161, 168, 169, 194, 240, 298, 299, 313, 315, 316, 323, 332, 338, 384, 445, 446, 448, 450], "compar": [3, 6, 30, 31, 33, 35, 39, 41, 46, 51, 56, 58, 59, 65, 76, 78, 79, 82, 85, 93, 95, 98, 112, 114, 117, 119, 142, 154, 156, 157, 160, 161, 162, 163, 164, 165, 168, 170, 171, 174, 181, 194, 213, 227, 229, 242, 245, 251, 256, 352, 353, 367, 368, 369, 370, 371, 372, 373, 374, 416, 417, 421, 428, 434, 439, 460, 466, 479, 481, 482], "dummi": [3, 98, 147, 154, 161, 162, 164, 169, 291, 292, 293, 294, 330], "replac": [3, 4, 30, 32, 35, 36, 40, 41, 42, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 68, 76, 78, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 110, 116, 123, 124, 125, 133, 134, 139, 142, 145, 146, 147, 148, 149, 154, 164, 168, 169, 177, 274, 341, 358, 364, 375, 378, 460], "dummy_decod": 3, "dummy_classifi": [3, 32, 291, 293], "simpli": [3, 65, 66, 67, 70, 88, 100, 102, 104, 107, 117, 171, 177, 181, 191, 239, 340, 352, 358, 427, 432, 433, 434], "mean": [3, 6, 14, 15, 16, 18, 21, 22, 23, 25, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 49, 50, 51, 55, 56, 58, 61, 65, 68, 69, 70, 76, 82, 88, 90, 91, 93, 94, 95, 97, 101, 102, 103, 110, 112, 117, 132, 136, 139, 142, 146, 148, 154, 155, 158, 159, 161, 168, 169, 171, 174, 176, 180, 181, 187, 194, 227, 228, 229, 231, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 291, 292, 293, 294, 295, 296, 297, 298, 299, 313, 315, 316, 323, 331, 332, 336, 338, 339, 340, 342, 347, 352, 353, 364, 365, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 419, 420, 432, 433, 434, 435, 437, 438, 439, 441, 445, 446, 447, 448, 450, 451, 454, 455, 458, 460, 461, 466, 481], "over": [3, 20, 48, 49, 51, 67, 69, 88, 116, 124, 145, 146, 154, 160, 161, 166, 167, 168, 173, 177, 180, 191, 197, 242, 299, 305, 323, 349, 353, 364, 385, 387, 388, 432, 436, 464, 479], "38888888888888895": 3, "6111111111111112": [3, 29], "jame": [3, 31, 32, 38, 97, 114, 194, 206, 240, 259, 315, 316], "m": [3, 12, 23, 30, 31, 32, 38, 41, 49, 58, 65, 69, 74, 97, 99, 101, 114, 132, 154, 155, 166, 167, 169, 174, 176, 177, 187, 188, 191, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 217, 218, 219, 221, 224, 225, 237, 241, 246, 247, 248, 250, 251, 253, 254, 257, 259, 267, 275, 279, 313, 315, 316, 338, 384, 480], "ida": [3, 31, 32, 38, 97, 114, 206, 259], "gobbini": [3, 31, 32, 38, 97, 114, 206, 259], "maura": [3, 31, 32, 38, 97, 114, 206, 259], "l": [3, 14, 31, 32, 37, 38, 41, 44, 51, 56, 58, 68, 69, 93, 97, 114, 125, 142, 149, 154, 155, 161, 162, 167, 176, 187, 188, 191, 198, 205, 206, 216, 218, 219, 220, 221, 224, 225, 235, 237, 247, 248, 250, 251, 253, 254, 255, 259, 267, 274, 323, 336, 364, 365, 385, 387, 388, 389, 390, 391, 392, 393, 394, 413, 419, 421, 424, 426, 427, 430, 432, 433, 434, 458, 479], "furei": [3, 31, 32, 38, 97, 114, 206, 259], "alumit": [3, 31, 32, 38, 97, 114, 206, 259], "ishai": [3, 31, 32, 38, 97, 114, 206, 259], "jennif": [3, 31, 32, 38, 97, 114, 206, 259], "schouten": [3, 31, 32, 38, 97, 114, 206, 259], "pietro": [3, 31, 32, 38, 97, 114, 206, 259], "pietrini": [3, 31, 32, 38, 97, 114, 206, 259], "distribut": [3, 6, 14, 15, 22, 23, 31, 32, 38, 48, 49, 55, 78, 93, 97, 114, 146, 150, 154, 161, 166, 168, 171, 174, 195, 200, 201, 202, 203, 204, 206, 214, 249, 259, 311, 338, 384, 428], "overlap": [3, 31, 32, 38, 54, 58, 88, 90, 91, 97, 114, 123, 125, 152, 154, 169, 174, 181, 187, 206, 259, 267, 368, 369, 371, 372, 374, 432, 466], "represent": [3, 16, 31, 32, 33, 36, 38, 52, 53, 56, 58, 62, 74, 76, 83, 93, 97, 99, 103, 114, 116, 157, 160, 166, 174, 178, 180, 206, 220, 255, 259, 291, 292, 293, 294, 295, 296, 297, 298, 299, 323, 336, 341, 342, 345, 346, 347, 348, 349, 350, 351, 353, 355, 356, 357, 358, 359, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 420, 426, 427, 429, 432, 433, 434, 441, 442, 446, 448, 451, 452, 454, 455, 458, 464, 482], "293": [3, 31, 32, 33, 38, 41, 65, 71, 97, 114, 206, 259, 466], "5539": [3, 31, 32, 38, 97, 114, 206, 259], "2425": [3, 31, 32, 38, 97, 114, 206, 259], "2430": [3, 31, 32, 38, 97, 114, 206, 259], "2001": [3, 31, 32, 38, 97, 101, 114, 116, 165, 175, 179, 188, 206, 237, 259, 384, 482], "sciencemag": [3, 31, 32, 38, 58, 97, 114, 198, 206, 253, 259], "content": [3, 31, 32, 38, 58, 65, 67, 83, 97, 114, 125, 154, 165, 166, 169, 176, 248, 253, 259, 267, 341, 460], "arxiv": [3, 31, 32, 38, 58, 69, 97, 101, 114, 155, 161, 166, 168, 187, 194, 195, 198, 200, 201, 202, 203, 204, 206, 216, 219, 220, 221, 224, 225, 228, 231, 240, 241, 247, 248, 250, 251, 253, 255, 259, 267, 274, 279, 341, 384, 460], "pdf": [3, 15, 31, 32, 38, 55, 58, 66, 69, 97, 101, 114, 125, 151, 154, 161, 166, 167, 187, 191, 194, 195, 198, 200, 201, 202, 203, 204, 206, 216, 219, 221, 224, 240, 241, 247, 248, 250, 253, 259, 267, 274, 279, 341, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438, 460], "1126": [3, 31, 32, 38, 58, 97, 114, 176, 191, 198, 206, 239, 253, 259], "1063736": [3, 31, 32, 38, 97, 114, 206, 259], "anova": [3, 28, 35, 42, 45, 104, 105, 112, 134, 154, 165, 166, 167, 174, 181, 259, 291, 292, 293, 294, 296, 297, 348, 434, 439, 441, 481, 482], "hous": [3, 18, 28, 32, 33, 45, 93, 96, 108, 112, 124, 154, 166, 175, 179, 180, 205, 206, 259, 291, 293, 295, 346, 348, 351, 353, 354, 367, 373, 384, 412, 427, 431, 434, 439, 441, 481], "For": [3, 4, 6, 9, 14, 15, 19, 23, 24, 29, 30, 32, 34, 35, 36, 40, 41, 48, 50, 51, 54, 63, 65, 67, 69, 70, 71, 78, 79, 85, 88, 90, 97, 99, 102, 104, 107, 116, 117, 139, 149, 154, 155, 156, 158, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 173, 174, 176, 177, 179, 180, 181, 186, 187, 188, 189, 190, 193, 194, 196, 197, 199, 205, 206, 207, 208, 212, 213, 214, 216, 220, 221, 223, 224, 225, 227, 234, 237, 238, 239, 243, 244, 246, 247, 248, 250, 251, 260, 270, 272, 274, 285, 290, 291, 292, 293, 294, 296, 297, 298, 299, 313, 314, 315, 316, 323, 330, 336, 338, 353, 361, 364, 365, 368, 369, 371, 372, 374, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 419, 424, 427, 429, 432, 433, 434, 435, 436, 437, 438, 446, 448, 449, 450, 456, 457, 458, 459, 464, 466, 479, 480], "precomput": [3, 297], "frem": [3, 28, 45, 112, 114, 124, 145, 154, 161, 162, 165, 167, 174, 175, 259, 268, 293, 294, 297, 348, 353, 431, 434, 439, 481, 482], "fast": [3, 31, 39, 48, 49, 64, 65, 71, 99, 114, 142, 145, 154, 158, 160, 161, 162, 165, 168, 169, 174, 175, 193, 210, 265, 272, 293, 294, 299, 358, 446, 447, 453, 482], "ensembl": [3, 31, 39, 42, 114, 161, 162, 165, 167, 174, 175, 207, 293, 294, 482], "regular": [3, 31, 39, 44, 56, 65, 90, 93, 114, 117, 145, 154, 161, 162, 165, 167, 168, 174, 175, 176, 180, 228, 229, 231, 293, 294, 296, 297, 351, 480, 482], "robust": [3, 31, 39, 93, 114, 144, 154, 159, 161, 165, 174, 293, 294, 364, 365, 482], "spacenet": [3, 132, 154, 161, 162, 163, 165, 174, 296, 297, 482], "spatial": [3, 6, 31, 39, 43, 46, 49, 50, 54, 59, 67, 85, 93, 94, 97, 103, 107, 112, 114, 124, 145, 149, 154, 158, 160, 161, 164, 165, 171, 174, 175, 178, 181, 187, 188, 191, 194, 206, 207, 209, 213, 219, 221, 237, 240, 245, 247, 256, 259, 267, 291, 292, 293, 294, 295, 296, 297, 298, 299, 323, 336, 338, 349, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 432, 434, 439, 446, 448, 450, 466, 481, 482], "36": [3, 6, 7, 15, 16, 17, 33, 58, 59, 62, 89, 90, 92, 110, 136, 139, 154, 191, 221, 239, 465, 466, 479, 481], "296": [3, 7, 33, 41, 65, 71, 466, 481], "927": 3, "download": [4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 114, 115, 129, 130, 132, 133, 135, 139, 142, 145, 146, 148, 154, 155, 156, 158, 161, 169, 176, 183, 187, 196, 197, 209, 212, 213, 215, 220, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 290, 482], "exist": [4, 20, 48, 101, 159, 166, 169, 180, 220, 227, 228, 229, 270, 272, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 350, 367, 368, 369, 370, 371, 372, 373, 374, 431, 445, 446, 447, 448, 479], "ship": [4, 12, 93, 139, 154, 479], "mni152_file_path": [4, 176], "variabl": [4, 6, 14, 39, 42, 43, 44, 56, 67, 74, 76, 93, 99, 100, 107, 114, 125, 131, 149, 151, 154, 156, 161, 162, 163, 165, 166, 168, 169, 171, 174, 179, 181, 189, 208, 236, 281, 291, 292, 293, 294, 295, 296, 297, 310, 314, 323, 336, 352, 364], "mni152": [4, 92, 123, 148, 154, 171, 205, 207, 208, 219, 225, 238, 240, 247, 251, 260, 261, 282, 283, 284, 285, 286, 287, 291, 292, 293, 294, 296, 297, 298, 299, 348, 370, 373, 377, 380, 432, 433, 434, 441, 446], "templat": [4, 16, 22, 23, 48, 67, 74, 82, 95, 107, 112, 114, 123, 127, 132, 137, 142, 145, 148, 151, 152, 154, 159, 171, 174, 176, 180, 181, 188, 190, 191, 237, 239, 251, 260, 261, 274, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 298, 299, 351, 356, 357, 365, 370, 373, 377, 380, 419, 432, 433, 434, 439, 441, 446, 456, 481], "mni_icbm152_t1_tal_nlin_sym_09a_convert": [4, 176], "quickli": [4, 33, 61, 62, 70, 74, 155, 158, 168, 169, 177], "plot_img": [4, 6, 36, 125, 142, 149, 154, 176, 395, 397, 400, 402, 404, 406, 408, 410, 412, 479], "0x7f18d6e67f20": 4, "veri": [4, 30, 31, 32, 35, 36, 39, 40, 42, 44, 49, 54, 65, 74, 75, 76, 78, 85, 93, 102, 116, 142, 154, 155, 156, 158, 161, 162, 163, 164, 167, 168, 169, 171, 174, 177, 181, 293, 294, 369, 372, 374, 415, 432, 459], "pretti": [4, 102], "simplest": [4, 69, 97, 117, 164, 168, 479], "possibl": [4, 6, 14, 15, 16, 44, 67, 69, 79, 80, 83, 93, 99, 116, 117, 132, 149, 151, 154, 155, 158, 161, 166, 168, 169, 171, 174, 176, 177, 180, 181, 214, 227, 228, 229, 235, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 311, 313, 315, 316, 323, 326, 336, 338, 345, 356, 361, 364, 367, 368, 369, 370, 371, 372, 373, 374, 414, 415, 421, 426, 430, 445, 446, 447, 448, 458, 479], "whole": [4, 6, 14, 42, 48, 50, 68, 88, 93, 114, 117, 125, 148, 154, 166, 167, 169, 170, 175, 180, 181, 194, 207, 208, 222, 240, 260, 270, 272, 282, 285, 291, 292, 293, 294, 298, 299, 370, 373, 377, 380, 384, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 432, 446, 448, 479], "make": [4, 6, 8, 15, 22, 23, 27, 30, 31, 36, 41, 47, 49, 51, 56, 58, 65, 66, 67, 68, 69, 74, 76, 78, 79, 83, 97, 103, 112, 114, 117, 123, 125, 126, 127, 128, 133, 139, 148, 149, 151, 152, 154, 159, 161, 162, 166, 167, 170, 173, 174, 175, 176, 179, 181, 216, 241, 249, 259, 270, 274, 279, 288, 291, 292, 293, 294, 296, 297, 311, 356, 388, 389, 390, 391, 392, 393, 394, 396, 398, 399, 401, 403, 405, 407, 409, 411, 426, 429, 434, 436, 438, 439, 440, 441, 442, 444, 445, 462, 464, 479, 480, 481], "prettier": [4, 152, 154, 169], "exercis": [4, 176], "own": [4, 6, 49, 58, 99, 115, 117, 161, 164, 169, 226, 261, 482], "noth": [4, 166, 229, 298, 299, 312, 314, 317, 323, 336, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 427, 429, 432, 433, 434, 441], "string": [4, 15, 29, 33, 55, 71, 76, 78, 87, 99, 100, 107, 116, 136, 137, 149, 151, 152, 154, 169, 179, 190, 209, 228, 235, 237, 263, 264, 271, 273, 274, 278, 281, 290, 295, 296, 297, 298, 299, 313, 315, 316, 320, 321, 323, 325, 330, 336, 338, 339, 340, 341, 342, 351, 352, 355, 360, 361, 363, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 420, 421, 422, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 449, 458, 460], "should": [4, 6, 14, 15, 32, 35, 36, 40, 41, 42, 47, 49, 51, 52, 53, 54, 55, 56, 58, 61, 64, 65, 66, 67, 68, 70, 78, 87, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 116, 117, 135, 136, 146, 149, 150, 154, 159, 160, 161, 162, 164, 168, 169, 171, 176, 177, 181, 222, 227, 228, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 274, 275, 276, 277, 278, 279, 280, 281, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 320, 323, 325, 326, 330, 331, 336, 337, 339, 340, 341, 351, 352, 354, 357, 359, 360, 362, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 384, 385, 418, 419, 421, 424, 426, 427, 429, 432, 433, 434, 435, 436, 438, 442, 445, 446, 447, 448, 449, 450, 454, 456, 457, 458, 460, 466, 477, 479, 480], "smooth_img": [4, 68, 93, 94, 102, 136, 142, 154, 179, 180, 181], "mm": [4, 15, 33, 37, 55, 58, 83, 86, 90, 94, 139, 154, 159, 180, 191, 219, 220, 242, 247, 255, 323, 336, 364, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 448, 449, 450, 458, 464, 465, 466], "smooth_anat_img": 4, "fwhm": [4, 65, 93, 94, 102, 104, 136, 142, 154, 174, 176, 180, 181, 358], "nibabel": [4, 33, 36, 44, 49, 52, 56, 62, 74, 80, 83, 90, 123, 124, 126, 133, 134, 136, 142, 147, 149, 151, 154, 168, 179, 180, 298, 299, 342, 343, 344, 351, 356, 357, 358, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 446, 448, 449, 450, 454, 455], "nifti1": [4, 33, 36, 49, 52, 56, 74, 80, 90, 142, 154, 358, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 446, 448, 449, 450, 454, 455], "nifti1imag": [4, 33, 36, 40, 43, 44, 49, 52, 56, 74, 80, 83, 90, 134, 135, 137, 142, 154, 159, 179, 241, 243, 244, 246, 247, 250, 261, 268, 282, 283, 284, 285, 286, 287, 291, 292, 293, 294, 298, 299, 318, 320, 323, 336, 338, 339, 340, 342, 344, 348, 349, 351, 352, 353, 356, 357, 358, 359, 360, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 395, 400, 402, 406, 412, 416, 417, 418, 446, 448, 449, 450, 454, 455], "0x7f18d27ea330": [4, 33, 53], "0x7f18c9459df0": 4, "could": [4, 6, 36, 49, 58, 65, 67, 68, 78, 84, 85, 92, 99, 104, 116, 117, 129, 145, 149, 150, 154, 161, 164, 166, 168, 169, 171, 176, 181, 311, 433, 464], "more_smooth_anat_img": 4, "0x7f18d70275f0": 4, "read": [4, 23, 37, 44, 65, 67, 76, 80, 100, 102, 104, 106, 114, 117, 145, 154, 167, 169, 175, 176, 193, 209, 214, 263, 264, 265, 375], "onc": [4, 36, 49, 57, 70, 117, 149, 154, 155, 160, 161, 168, 170, 171, 173, 174, 177, 181, 445, 464], "style": [4, 127, 149, 154, 290], "haxbi": [4, 8, 15, 16, 27, 28, 45, 93, 101, 112, 114, 116, 133, 134, 154, 165, 167, 175, 179, 181, 183, 259, 291, 346, 348, 353, 367, 373, 412, 419, 431, 434, 439, 441, 479, 481, 482], "find": [4, 30, 32, 44, 50, 56, 69, 78, 99, 121, 154, 159, 160, 161, 163, 165, 168, 169, 171, 174, 177, 181, 191, 214, 223, 231, 239, 343, 378, 379, 381, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 418, 419, 441, 445, 447, 453, 479, 480, 482], "wildcard": [4, 179, 180, 290, 351], "anats_all_subject": 4, "subj": 4, "anats_all_subjects_smooth": 4, "124": [4, 33, 40, 41, 465, 466, 481], "256": [4, 33, 41, 72, 83, 146, 154, 197, 242, 251, 466, 481], "ani": [4, 6, 49, 56, 58, 74, 79, 80, 99, 102, 103, 109, 112, 116, 123, 143, 145, 151, 154, 156, 158, 161, 162, 165, 166, 168, 169, 170, 171, 174, 177, 181, 235, 259, 270, 272, 276, 343, 348, 352, 358, 361, 362, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 429, 432, 448, 452, 457, 460, 464, 479, 480, 482], "plot_nilearn_101": [4, 7, 481], "necessari": [4, 62, 88, 91, 100, 107, 123, 142, 149, 154, 155, 158, 161, 169, 170, 177, 181, 237, 270, 272, 291, 292, 293, 294, 316, 323, 336, 373, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 466], "tool": [4, 8, 10, 11, 20, 23, 27, 32, 36, 48, 49, 78, 85, 86, 93, 99, 103, 112, 116, 132, 151, 154, 157, 162, 169, 170, 173, 175, 176, 178, 179, 181, 182, 184, 205, 259, 288, 353, 395, 397, 400, 402, 404, 406, 408, 410, 412, 419, 424, 426, 433, 434, 439, 441, 470, 479, 480, 481], "210": [4, 6, 7, 22, 33, 41, 71, 114, 207, 260, 341, 460, 465, 466, 481], "177": [4, 33, 41, 465, 466], "matplotlib": [5, 6, 8, 9, 11, 15, 18, 24, 25, 27, 30, 32, 35, 38, 40, 41, 42, 43, 44, 48, 49, 51, 52, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 68, 71, 74, 77, 78, 79, 83, 90, 93, 98, 99, 100, 101, 104, 105, 110, 112, 121, 125, 126, 129, 134, 136, 137, 139, 142, 144, 149, 150, 154, 156, 161, 180, 369, 372, 374, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 479, 480, 481], "pyplot": [5, 6, 11, 12, 15, 18, 24, 25, 30, 32, 34, 35, 38, 41, 42, 43, 44, 48, 49, 51, 55, 57, 58, 61, 62, 63, 64, 65, 66, 68, 71, 74, 77, 78, 79, 83, 90, 93, 98, 99, 100, 101, 104, 105, 110, 156, 180, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 424, 425, 426, 427, 429, 430, 432, 433, 434, 435, 438, 439, 479], "plt": [5, 6, 11, 12, 15, 18, 24, 25, 30, 32, 34, 35, 38, 40, 41, 42, 43, 44, 48, 49, 51, 55, 57, 58, 61, 62, 63, 64, 65, 66, 68, 71, 74, 77, 78, 79, 83, 90, 93, 98, 99, 100, 101, 104, 105, 110, 180, 419, 420, 421, 424, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441], "except": [5, 9, 12, 24, 38, 44, 49, 52, 57, 58, 66, 71, 77, 90, 98, 99, 102, 104, 105, 110, 146, 149, 154, 167, 169, 297, 351, 384], "importerror": [5, 9, 12, 24, 38, 44, 52, 57, 58, 66, 77, 90, 98, 104, 105, 110, 142, 154], "rais": [5, 12, 24, 32, 38, 44, 66, 77, 90, 93, 98, 104, 105, 110, 123, 124, 125, 126, 129, 136, 138, 139, 142, 149, 151, 154, 179, 227, 228, 229, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 326, 330, 336, 338, 339, 342, 351, 355, 356, 367, 368, 369, 370, 371, 372, 373, 374, 380, 445, 446, 447, 448, 480], "runtimeerror": [5, 12, 24, 38, 44, 66, 77, 90, 98, 104, 105, 110], "librari": [5, 12, 24, 38, 44, 66, 77, 90, 93, 98, 104, 105, 110, 116, 139, 154, 164, 169, 176, 180, 226, 470, 479, 480], "modul": [5, 19, 26, 32, 34, 35, 36, 40, 41, 42, 47, 50, 51, 52, 53, 54, 55, 56, 58, 61, 86, 87, 88, 90, 91, 92, 93, 97, 98, 99, 101, 102, 103, 104, 105, 110, 114, 116, 117, 123, 124, 125, 126, 127, 134, 136, 137, 145, 149, 151, 154, 164, 169, 172, 176, 177, 181, 185, 270, 274, 291, 292, 293, 294, 313, 315, 316, 330, 338, 340, 350, 352, 470, 474, 475, 476, 477, 479], "np": [5, 6, 9, 11, 12, 14, 20, 22, 23, 24, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 74, 76, 78, 79, 83, 84, 86, 88, 93, 97, 99, 101, 102, 103, 104, 105, 106, 107, 110, 151, 154, 159, 169, 179, 180, 227, 247, 274, 312, 313, 314, 315, 316, 317, 342, 352, 384, 445, 447], "linspac": [5, 49, 61, 66], "2000": [5, 42, 49, 114, 142, 145, 154, 158, 179, 224, 250], "co": [5, 24, 83, 114, 170, 187, 200, 201, 202, 203, 204, 224, 250, 279], "line": [5, 9, 14, 21, 24, 48, 51, 90, 161, 168, 169, 274, 341, 440, 460, 464, 480], "line2d": [5, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421], "0x7f18c91e5100": 5, "233": [5, 7, 22, 27, 33, 41, 348, 465, 466, 481], "plot_python_101": [5, 7, 481], "tutori": [6, 7, 65, 97, 129, 139, 154, 161, 169, 174, 175, 176, 181, 206, 259, 291, 348, 353, 424, 433, 441, 481], "model": [6, 23, 28, 31, 32, 33, 34, 39, 41, 44, 45, 48, 50, 51, 60, 61, 63, 67, 69, 71, 72, 73, 74, 80, 81, 96, 97, 98, 101, 103, 104, 107, 108, 112, 114, 123, 124, 126, 136, 142, 145, 147, 149, 150, 151, 154, 155, 157, 159, 161, 165, 166, 167, 168, 169, 172, 174, 175, 176, 181, 182, 187, 215, 225, 227, 228, 231, 258, 261, 262, 265, 266, 267, 269, 280, 291, 292, 293, 294, 296, 297, 298, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 338, 339, 342, 343, 346, 347, 352, 353, 357, 360, 363, 364, 365, 367, 370, 373, 374, 384, 396, 397, 411, 412, 422, 423, 426, 433, 434, 439, 456, 458, 465, 466, 473, 480, 481, 482], "period": [6, 41, 65, 67, 107, 291, 292, 293, 294, 296, 297, 327, 328, 329, 333, 334, 335, 341, 368, 369, 370, 371, 372, 373, 374, 420, 446, 448, 460], "auditori": [6, 65, 67, 71, 76, 102, 104, 171, 183, 193, 255, 264, 265, 271, 277], "stimul": [6, 71, 161, 222], "versu": [6, 65, 67, 78, 79, 93, 97, 161, 162, 174, 206], "analys": [6, 99, 114, 125, 154, 161, 166, 170, 171, 172, 173, 174, 175, 179, 181, 191, 198, 211, 268, 467, 480], "nativ": [6, 60, 72, 112, 124, 135, 154, 170, 223, 278, 323, 330, 342, 350, 353, 356, 374, 434, 439, 481], "scan": [6, 23, 33, 36, 55, 58, 63, 64, 65, 66, 93, 99, 114, 147, 154, 158, 166, 174, 179, 189, 191, 205, 209, 222, 265, 298, 299, 323, 325, 330, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 420, 446, 448, 451, 452, 454, 460], "preprocess": [6, 11, 23, 29, 34, 37, 40, 41, 44, 70, 88, 91, 98, 100, 103, 107, 110, 114, 115, 124, 134, 154, 159, 160, 166, 167, 171, 174, 181, 186, 189, 209, 215, 235, 236, 256, 274, 280, 323, 326, 341, 362, 364, 367, 368, 369, 370, 371, 372, 373, 374, 448, 460, 466, 470, 482], "sensit": [6, 40, 48, 56, 114, 171, 174, 341, 365, 384, 460], "would": [6, 9, 14, 42, 50, 58, 65, 74, 77, 102, 110, 117, 125, 147, 151, 152, 154, 161, 168, 169, 170, 171, 177, 290, 291, 292, 293, 294, 296, 297, 299, 323, 325, 326, 330, 336, 338, 361, 375, 380, 420], "like": [6, 10, 11, 16, 34, 36, 40, 47, 49, 54, 56, 58, 65, 78, 80, 85, 88, 90, 91, 93, 99, 117, 125, 142, 146, 149, 150, 151, 154, 167, 168, 169, 170, 171, 173, 174, 177, 178, 180, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 278, 279, 280, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 310, 313, 314, 315, 316, 318, 320, 323, 325, 326, 336, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 420, 424, 426, 427, 429, 430, 432, 433, 434, 435, 437, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 464, 466, 468, 479, 482], "obtain": [6, 15, 22, 42, 43, 49, 54, 58, 63, 65, 67, 74, 76, 90, 93, 101, 104, 149, 154, 155, 156, 158, 160, 161, 163, 166, 168, 171, 174, 181, 187, 193, 198, 218, 229, 238, 240, 248, 260, 265, 282, 283, 286, 290, 296, 297, 340, 345, 356, 360, 369, 371, 372, 374, 384, 398, 425, 448, 466], "correct": [6, 42, 48, 56, 74, 76, 78, 80, 91, 100, 101, 104, 105, 114, 123, 124, 142, 145, 151, 154, 155, 166, 169, 171, 172, 174, 177, 191, 275, 289, 291, 292, 293, 294, 296, 297, 338, 339, 364, 365, 384, 420, 461, 482], "normal": [6, 24, 31, 37, 44, 55, 58, 67, 68, 100, 103, 107, 110, 116, 129, 154, 161, 168, 169, 170, 171, 174, 188, 207, 209, 228, 231, 237, 263, 274, 315, 316, 464], "smooth": [6, 29, 34, 42, 44, 49, 55, 68, 74, 80, 82, 93, 95, 100, 104, 112, 114, 135, 136, 154, 158, 160, 161, 162, 168, 174, 176, 178, 179, 191, 221, 256, 291, 292, 293, 294, 298, 299, 323, 336, 338, 353, 358, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 384, 424, 435, 437, 438, 439, 445, 446, 448, 450, 481, 482], "conduct": [6, 32, 117, 171, 222], "fil": [6, 222, 223, 277, 278], "geraint": 6, "ree": [6, 222], "under": [6, 9, 101, 151, 154, 161, 162, 166, 167, 168, 169, 170, 171, 174, 177, 187, 191, 214, 216, 222, 295, 345, 356, 357, 362, 377, 380, 384], "direct": [6, 15, 40, 51, 93, 97, 114, 136, 145, 154, 156, 157, 169, 177, 181, 197, 216, 221, 222, 242, 248, 274, 280, 291, 292, 323, 336, 358, 360, 361, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 401, 403, 404, 405, 407, 408, 409, 410, 411, 414, 415, 419, 421, 424, 426, 427, 430, 432, 433, 434, 449, 458, 479, 482], "karl": [6, 114, 222], "friston": [6, 114, 222, 341, 460], "method": [6, 14, 15, 26, 31, 36, 39, 44, 46, 48, 58, 59, 85, 88, 90, 91, 93, 99, 104, 112, 114, 115, 117, 124, 125, 126, 127, 131, 135, 139, 142, 145, 146, 147, 149, 151, 154, 155, 156, 158, 162, 163, 167, 168, 169, 174, 175, 176, 179, 180, 181, 187, 188, 191, 214, 220, 222, 224, 227, 228, 229, 239, 250, 256, 267, 270, 272, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 313, 314, 315, 316, 318, 323, 336, 338, 343, 346, 347, 348, 353, 356, 357, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 424, 433, 440, 442, 443, 444, 445, 446, 447, 448, 456, 460, 461, 479, 481, 482], "develop": [6, 47, 55, 56, 84, 88, 90, 91, 114, 126, 137, 142, 154, 155, 156, 158, 160, 168, 169, 176, 177, 183, 205, 217, 224, 229, 250, 256, 420], "spm": [6, 10, 11, 36, 49, 61, 65, 66, 69, 78, 85, 93, 114, 150, 151, 154, 165, 170, 174, 179, 183, 188, 237, 277, 278, 323, 325, 330, 333, 334, 335, 352, 482], "accord": [6, 41, 44, 67, 93, 99, 107, 123, 134, 135, 136, 139, 145, 147, 151, 154, 159, 166, 169, 198, 215, 225, 228, 235, 247, 289, 291, 292, 293, 294, 296, 297, 310, 341, 361, 384, 429, 430, 435, 437, 438, 442, 444, 447, 448, 459, 460, 479], "96": [6, 23, 30, 32, 33, 41, 49, 52, 71, 83, 222, 465, 466], "tr": [6, 11, 23, 25, 33, 63, 66, 69, 107, 124, 138, 150, 154, 171, 174, 180, 215, 256, 327, 328, 329, 333, 334, 335], "altern": [6, 9, 16, 20, 22, 52, 54, 58, 65, 70, 157, 158, 166, 174, 181, 222, 313, 315, 316, 384, 482], "42": [6, 24, 33, 36, 43, 49, 59, 62, 90, 91, 99, 103, 114, 188, 222, 465, 466, 479, 481], "block": [6, 33, 51, 56, 58, 63, 99, 100, 115, 125, 154, 161, 168, 180, 191, 199, 222, 431, 468], "bi": [6, 222], "syllab": [6, 222], "word": [6, 14, 76, 93, 102, 104, 117, 161, 162, 169, 209, 214, 222, 270, 272], "binaur": [6, 222], "60": [6, 15, 33, 40, 41, 63, 98, 114, 156, 191, 212, 222, 269, 465, 466, 479], "fm00223_004": 6, "2t": [6, 222], "siemen": [6, 222], "magnetom": [6, 222], "vision": [6, 222], "64": [6, 10, 11, 19, 21, 33, 34, 36, 47, 49, 65, 78, 83, 85, 93, 146, 151, 154, 179, 191, 197, 222, 235, 238, 239, 242, 465, 466], "contigu": [6, 158, 168, 222, 384], "64x64x64": [6, 222], "3mm": [6, 222], "took": [6, 48, 91, 222], "05": [6, 12, 30, 32, 33, 44, 51, 53, 70, 74, 75, 76, 78, 80, 98, 171, 188, 189, 190, 194, 213, 216, 217, 219, 222, 223, 224, 225, 236, 237, 240, 245, 246, 247, 250, 251, 274, 277, 278, 280, 313, 315, 316, 318, 465, 466], "repeat": [6, 58, 65, 66, 161, 171, 222], "arbitrarili": [6, 222, 297], "subject_data": [6, 68, 69, 170], "abid": [6, 114, 133, 154, 169, 183, 235], "bid": [6, 60, 71, 72, 96, 99, 108, 112, 123, 125, 142, 145, 147, 149, 151, 152, 154, 170, 174, 183, 252, 257, 262, 275, 276, 289, 290, 323, 326, 336, 364, 365, 366, 373, 422, 426, 428, 439, 456, 457, 458, 476, 481], "organ": [6, 58, 114, 129, 142, 148, 150, 154, 169, 174, 176, 191, 218, 219, 220, 225, 247, 251, 254, 338, 365, 384, 400, 463, 464, 480], "fetch_spm_auditori": [6, 68, 222], "sep": [6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 71, 93, 101, 179, 385, 387, 388], "n": [6, 14, 26, 41, 42, 49, 51, 56, 57, 58, 62, 68, 69, 76, 78, 79, 83, 90, 93, 98, 99, 101, 102, 104, 105, 106, 113, 114, 118, 119, 121, 122, 127, 129, 132, 154, 162, 168, 169, 171, 188, 198, 205, 217, 237, 246, 253, 256, 257, 267, 275, 298, 299, 310, 314, 315, 316, 323, 332, 364, 365, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 430, 448, 451, 452, 460, 480], "spm_auditori": [6, 277], "sub001": [6, 277, 278], "fm00223": 6, "fm00223_005": 6, "fm00223_006": 6, "fm00223_007": 6, "fm00223_008": 6, "anatomi": [6, 42, 67, 74, 193, 220, 251], "plot_anat": [6, 15, 18, 50, 149, 154, 159, 427, 434, 479], "cbar_tick_format": [6, 25, 146, 149, 154, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 424, 426, 427, 429, 433, 434, 435, 437, 438], "0x7f18d7024a70": 6, "next": [6, 14, 54, 55, 58, 63, 64, 65, 67, 68, 70, 74, 77, 78, 79, 80, 107, 137, 140, 149, 154, 156, 167, 168, 169, 171, 177, 466], "concaten": [6, 37, 47, 49, 53, 57, 99, 155, 180, 342, 348, 364, 448], "averag": [6, 9, 24, 30, 37, 49, 51, 68, 93, 114, 145, 148, 154, 158, 162, 163, 173, 174, 191, 200, 201, 202, 203, 204, 207, 211, 235, 260, 268, 279, 285, 291, 292, 305, 353, 358, 364, 431, 435, 437, 438, 446, 464], "activ": [6, 14, 15, 16, 30, 32, 40, 41, 49, 65, 67, 68, 69, 70, 75, 76, 78, 79, 80, 99, 107, 114, 116, 155, 156, 159, 160, 161, 165, 166, 168, 169, 170, 171, 173, 174, 176, 177, 181, 187, 188, 191, 193, 198, 211, 212, 213, 221, 229, 235, 237, 245, 248, 267, 268, 269, 288, 318, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 418, 448, 450, 480], "fmri_img": [6, 34, 36, 37, 64, 65, 67, 68, 69, 70, 93, 107, 170], "must": [6, 34, 71, 93, 151, 154, 161, 162, 164, 166, 168, 169, 170, 171, 177, 179, 181, 187, 228, 229, 231, 237, 259, 291, 292, 293, 294, 295, 296, 297, 298, 310, 314, 323, 336, 337, 338, 341, 347, 353, 356, 358, 363, 364, 367, 368, 370, 371, 373, 376, 378, 379, 380, 381, 382, 383, 384, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 425, 432, 434, 435, 436, 437, 438, 440, 442, 444, 446, 451, 454, 455, 457, 458, 460, 461, 464, 479], "descript": [6, 58, 115, 117, 123, 125, 126, 145, 149, 152, 154, 169, 177, 179, 180, 191, 199, 210, 219, 222, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 258, 262, 266, 267, 268, 270, 271, 272, 273, 277, 278, 280, 325, 338, 341, 345, 353, 358, 359, 365, 384, 482], "typic": [6, 71, 77, 78, 99, 158, 160, 162, 166, 169, 171, 174, 179, 180, 181, 186, 281, 293, 294, 297, 313, 363, 374, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 432, 433, 434, 441, 446, 479], "event": [6, 60, 62, 63, 64, 65, 66, 67, 68, 69, 72, 99, 100, 107, 112, 114, 125, 145, 146, 154, 161, 171, 172, 210, 266, 323, 324, 325, 326, 330, 425, 480, 481, 482], "tsv": [6, 47, 52, 53, 55, 56, 58, 60, 62, 72, 100, 107, 112, 125, 154, 170, 196, 256, 326, 363, 364, 365, 425, 481], "read_tabl": [6, 64, 65, 67, 68, 69], "onset": [6, 33, 63, 64, 65, 66, 71, 99, 125, 145, 154, 170, 223, 278, 323, 324, 325, 327, 328, 329, 330, 333, 334, 335, 425], "durat": [6, 33, 63, 65, 66, 71, 125, 154, 170, 171, 179, 325, 330, 425], "trial_typ": [6, 33, 63, 64, 65, 71, 99, 100, 209, 330, 425], "84": [6, 33, 90, 99, 114, 343, 364, 465, 466], "126": [6, 33, 41, 43, 56, 70, 90, 148, 154, 465, 466], "168": [6, 33, 41, 54, 55, 56, 58, 88, 90, 159, 465, 466], "252": [6, 33, 41, 93, 465, 466], "294": [6, 33, 41, 466], "336": [6, 33, 41, 466], "378": [6, 33, 466], "420": [6, 33], "462": [6, 33], "504": [6, 33, 62, 465], "13": [6, 33, 36, 56, 59, 62, 69, 70, 76, 80, 81, 90, 102, 106, 108, 114, 118, 124, 126, 127, 154, 166, 192, 196, 227, 239, 240, 248, 255, 274, 310, 314, 320, 364, 371, 372, 384, 420, 451, 452, 465, 466, 481], "546": [6, 33], "14": [6, 18, 30, 33, 40, 44, 45, 62, 68, 76, 88, 90, 95, 102, 114, 119, 121, 132, 134, 135, 136, 139, 142, 154, 166, 191, 195, 219, 241, 247, 437, 465, 466, 481], "588": [6, 33], "15": [6, 22, 23, 24, 27, 30, 33, 48, 49, 51, 61, 62, 65, 68, 71, 76, 77, 79, 81, 83, 90, 93, 102, 106, 114, 118, 122, 125, 126, 135, 139, 149, 154, 188, 195, 227, 237, 249, 371, 372, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 420, 451, 452, 465, 466, 481], "630": [6, 33], "firstlevelmodel": [6, 61, 64, 65, 68, 69, 70, 99, 147, 149, 151, 154, 170, 326, 336, 338, 363, 458], "design": [6, 33, 41, 44, 60, 61, 62, 64, 67, 68, 69, 70, 72, 73, 74, 75, 78, 79, 80, 81, 100, 104, 107, 112, 114, 124, 145, 146, 147, 149, 154, 161, 164, 168, 169, 171, 172, 173, 174, 188, 199, 210, 258, 265, 310, 313, 314, 315, 316, 321, 323, 324, 330, 332, 336, 337, 338, 339, 346, 352, 363, 366, 422, 423, 434, 439, 458, 465, 481, 482], "matrix": [6, 22, 33, 37, 40, 41, 44, 47, 50, 51, 53, 61, 62, 63, 65, 67, 68, 69, 70, 73, 74, 75, 76, 78, 79, 80, 81, 83, 90, 91, 99, 100, 102, 104, 107, 112, 123, 124, 137, 142, 145, 154, 158, 159, 161, 162, 168, 171, 172, 173, 174, 175, 176, 179, 180, 181, 199, 227, 228, 229, 230, 231, 232, 234, 258, 270, 272, 291, 292, 293, 294, 296, 297, 298, 299, 310, 313, 314, 315, 316, 321, 323, 324, 330, 332, 336, 337, 338, 343, 353, 354, 356, 359, 363, 366, 367, 370, 373, 376, 378, 379, 381, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 422, 423, 431, 445, 446, 447, 458, 465, 481, 482], "first_level": [6, 33, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 77, 99, 100, 107, 125, 147, 149, 151, 154, 170, 425, 458], "level": [6, 9, 14, 15, 18, 33, 39, 48, 49, 51, 56, 63, 68, 69, 72, 74, 81, 96, 103, 104, 108, 114, 123, 124, 125, 126, 145, 146, 151, 152, 154, 157, 158, 162, 165, 168, 169, 171, 172, 174, 177, 179, 183, 185, 191, 193, 223, 227, 228, 229, 231, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 311, 313, 315, 316, 318, 319, 323, 326, 330, 332, 336, 337, 338, 339, 341, 346, 347, 352, 357, 360, 361, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 380, 382, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 421, 422, 423, 426, 427, 428, 432, 433, 434, 435, 436, 437, 438, 439, 441, 445, 446, 447, 448, 453, 456, 457, 458, 460, 464, 476, 479, 481, 482], "t_r": [6, 11, 33, 49, 51, 52, 53, 54, 55, 56, 58, 61, 62, 64, 65, 67, 68, 88, 90, 91, 98, 99, 107, 139, 150, 154, 181, 291, 292, 293, 294, 296, 297, 298, 299, 306, 323, 325, 326, 330, 341, 368, 369, 370, 371, 372, 373, 374, 420, 446, 448, 460, 465, 466], "noise_model": [6, 33, 65, 323, 326, 332, 465], "ar1": [6, 33, 65, 323, 326, 332, 465], "covari": [6, 42, 46, 57, 58, 59, 61, 67, 101, 112, 114, 135, 154, 156, 157, 159, 175, 187, 227, 228, 229, 230, 231, 245, 256, 267, 310, 312, 313, 314, 315, 316, 367, 372, 384, 417, 421, 431, 439, 440, 481, 482], "lag": [6, 47, 64, 65], "depend": [6, 14, 15, 39, 65, 70, 88, 94, 99, 101, 104, 114, 123, 126, 129, 134, 139, 142, 154, 162, 166, 168, 169, 171, 174, 177, 179, 235, 239, 240, 243, 244, 248, 251, 256, 267, 291, 292, 293, 294, 296, 297, 298, 299, 310, 314, 323, 336, 338, 339, 346, 370, 373, 383, 384, 432, 446, 457, 458, 479], "rescal": [6, 23, 33, 40, 79, 124, 148, 154, 385, 387, 388, 423, 435, 437, 438, 444], "seri": [6, 33, 46, 47, 51, 56, 60, 65, 72, 91, 93, 94, 96, 108, 112, 114, 116, 123, 126, 129, 146, 150, 154, 155, 157, 159, 161, 166, 171, 172, 178, 179, 180, 191, 216, 221, 227, 262, 274, 275, 277, 280, 289, 298, 299, 310, 323, 326, 336, 338, 341, 342, 353, 358, 364, 367, 370, 371, 372, 373, 374, 375, 378, 397, 412, 420, 423, 434, 450, 451, 452, 457, 461, 466, 471, 481, 482], "varianc": [6, 33, 40, 42, 48, 55, 56, 57, 58, 65, 68, 79, 142, 145, 146, 154, 161, 166, 168, 174, 181, 227, 231, 291, 292, 293, 294, 298, 299, 311, 313, 315, 316, 319, 320, 323, 332, 336, 341, 347, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 420, 446, 448, 451, 460, 461], "hrf_model": [6, 33, 61, 63, 64, 65, 67, 69, 107, 323, 325, 326, 330, 465], "canon": [6, 50, 65, 69, 83, 132, 154, 174, 185, 298], "hrf": [6, 64, 65, 66, 67, 107, 149, 151, 154, 161, 172, 174, 323, 325, 327, 328, 329, 330, 333, 334, 335, 482], "dispers": [6, 65, 66, 170, 313, 315, 316, 323, 325, 327, 330, 333], "deriv": [6, 46, 59, 62, 66, 67, 69, 99, 100, 103, 107, 112, 125, 146, 148, 149, 154, 160, 168, 170, 174, 175, 181, 191, 194, 205, 207, 209, 221, 235, 256, 298, 299, 323, 325, 326, 327, 329, 330, 333, 335, 336, 338, 349, 361, 362, 363, 364, 365, 385, 386, 413, 420, 432, 434, 435, 437, 438, 439, 446, 481], "drift_model": [6, 33, 63, 65, 68, 69, 170, 323, 326, 330, 465], "cosin": [6, 33, 65, 67, 68, 69, 107, 123, 125, 147, 154, 191, 323, 326, 330, 364, 460, 465], "drift": [6, 67, 68, 69, 99, 107, 191, 323, 330, 364, 460], "slow": [6, 36, 44, 65, 167, 168, 169, 181, 191, 479], "oscil": [6, 65, 114], "high_pass": [6, 33, 49, 51, 52, 53, 54, 55, 56, 58, 61, 65, 69, 88, 90, 91, 98, 99, 139, 154, 181, 291, 292, 293, 294, 296, 297, 298, 299, 306, 323, 326, 330, 341, 364, 365, 368, 369, 370, 371, 372, 373, 374, 446, 448, 459, 460, 465, 466], "hz": [6, 33, 65, 69, 181, 191, 323, 330, 465], "cutoff": [6, 65, 67, 69, 88, 107, 147, 154, 178, 291, 292, 293, 294, 296, 297, 341, 368, 369, 370, 371, 372, 373, 374, 446, 448, 459, 460, 482], "frequenc": [6, 65, 121, 154, 181, 235, 291, 292, 293, 294, 296, 297, 323, 330, 341, 364, 368, 369, 370, 371, 372, 373, 374, 446, 448, 459, 460], "invers": [6, 46, 58, 59, 97, 112, 114, 144, 154, 156, 157, 161, 168, 175, 178, 229, 234, 245, 256, 313, 315, 316, 320, 367, 372, 417, 421, 430, 431, 439, 440, 445, 481, 482], "fmri_glm": [6, 68, 69, 70, 170], "inspect": [6, 40, 48, 55, 65, 68, 70, 88, 91, 156, 161, 176, 189, 323, 336, 466], "repres": [6, 15, 20, 33, 35, 51, 52, 54, 55, 67, 75, 78, 93, 114, 134, 146, 154, 155, 156, 159, 160, 169, 171, 173, 174, 179, 180, 181, 191, 197, 214, 235, 239, 242, 256, 284, 285, 287, 323, 336, 345, 356, 367, 368, 369, 370, 371, 372, 373, 374, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 416, 421, 426, 430, 448, 451, 458, 462, 464, 479], "predictor": [6, 40, 170, 171, 315, 316, 365], "design_matrix": [6, 41, 61, 62, 64, 65, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 107, 324, 330, 336, 337, 338, 366, 422, 423], "design_matrices_": [6, 64, 65, 68, 99], "formal": [6, 222], "taken": [6, 65, 99, 162, 168, 326, 336, 338, 357, 368, 369, 371, 372, 374, 448], "implictili": 6, "plot_design_matrix": [6, 63, 64, 65, 72, 74, 77, 79, 99, 170, 173, 481], "write": [6, 41, 70, 112, 117, 123, 149, 151, 154, 168, 169, 177, 300, 301, 302, 363, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 456], "plot_single_subject_single_run": [6, 7, 481], "output_fil": [6, 15, 23, 398, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438, 479], "png": [6, 9, 15, 23, 41, 61, 175, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438, 479], "respons": [6, 60, 68, 69, 71, 72, 78, 79, 112, 149, 154, 161, 170, 171, 174, 176, 177, 206, 223, 266, 323, 325, 327, 328, 329, 330, 333, 335, 422, 423, 434, 481], "profil": [6, 168, 169, 310, 314], "region": [6, 10, 15, 16, 19, 23, 40, 42, 43, 44, 46, 48, 49, 52, 55, 56, 58, 59, 65, 68, 69, 82, 95, 98, 112, 114, 123, 125, 127, 131, 133, 134, 137, 142, 145, 147, 149, 152, 154, 155, 157, 160, 161, 167, 170, 171, 174, 176, 178, 180, 188, 191, 194, 197, 198, 205, 206, 208, 211, 213, 217, 220, 225, 227, 235, 237, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 256, 259, 268, 271, 298, 299, 305, 306, 346, 348, 351, 353, 354, 358, 360, 365, 367, 368, 369, 371, 372, 374, 397, 415, 416, 417, 418, 419, 421, 424, 431, 432, 433, 434, 436, 437, 439, 440, 456, 466, 479, 481, 482], "xlabel": [6, 25, 30, 32, 34, 42, 48, 49, 51, 55, 58, 66, 98, 180], "access": [6, 33, 48, 56, 61, 62, 65, 70, 74, 114, 116, 124, 149, 154, 156, 160, 168, 169, 170, 178, 179, 181, 236, 237, 240, 245, 246, 247, 250, 251, 274, 277, 278, 280, 311, 398, 470, 482], "beta": [6, 26, 39, 42, 65, 69, 96, 108, 112, 114, 126, 150, 170, 174, 187, 262, 267, 291, 292, 293, 294, 310, 313, 314, 315, 316, 323, 326, 342, 367, 373, 374, 397, 423, 434, 481], "role": [6, 149, 154], "potenti": [6, 54, 55, 90, 93, 99, 114, 148, 154, 166, 169, 174, 177, 248, 338, 369, 372, 466], "weight": [6, 29, 39, 42, 43, 44, 116, 117, 142, 154, 155, 162, 164, 165, 168, 169, 171, 181, 205, 207, 214, 235, 260, 270, 272, 291, 292, 293, 294, 296, 297, 320, 363, 440, 452, 482], "associ": [6, 14, 47, 71, 74, 76, 104, 123, 154, 161, 166, 169, 171, 173, 174, 237, 275, 295, 311, 338, 364, 365, 384, 457, 464], "nutshel": 6, "combin": [6, 15, 40, 41, 70, 101, 103, 114, 123, 126, 148, 154, 161, 166, 171, 174, 181, 187, 191, 205, 208, 212, 220, 235, 269, 291, 292, 293, 294, 296, 297, 298, 299, 323, 336, 338, 364, 403, 404, 407, 408, 409, 410, 422], "consid": [6, 32, 39, 53, 54, 55, 65, 66, 79, 91, 93, 101, 103, 116, 129, 142, 149, 154, 166, 169, 187, 208, 225, 235, 251, 291, 292, 293, 294, 296, 297, 298, 299, 310, 314, 323, 325, 326, 330, 336, 338, 345, 351, 362, 369, 370, 372, 373, 378, 381, 384, 388, 433, 446, 449, 451, 452, 466], "two": [6, 14, 24, 25, 34, 40, 48, 55, 56, 58, 60, 65, 72, 73, 76, 81, 85, 87, 88, 93, 97, 99, 100, 101, 107, 112, 117, 123, 134, 137, 142, 145, 146, 154, 155, 158, 160, 161, 163, 165, 166, 168, 169, 170, 171, 173, 174, 175, 176, 177, 179, 180, 181, 187, 191, 223, 229, 233, 239, 258, 265, 278, 291, 292, 293, 294, 298, 299, 313, 315, 316, 320, 323, 330, 336, 337, 338, 342, 348, 353, 356, 364, 365, 369, 372, 374, 384, 396, 423, 426, 428, 429, 434, 435, 436, 437, 438, 439, 444, 446, 448, 449, 450, 456, 457, 458, 463, 464, 465, 479, 481, 482], "isol": [6, 68, 69, 99, 161, 171], "zero": [6, 9, 14, 20, 22, 23, 36, 39, 44, 47, 53, 54, 68, 70, 76, 78, 93, 121, 126, 142, 146, 150, 154, 155, 159, 161, 162, 166, 167, 168, 171, 174, 180, 181, 227, 228, 229, 231, 274, 291, 292, 293, 294, 296, 297, 298, 310, 315, 316, 330, 336, 338, 341, 345, 358, 360, 364, 368, 369, 370, 371, 372, 373, 374, 375, 378, 381, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 433, 434, 436, 437, 446, 447, 448, 451, 452, 454, 455, 460, 466], "16": [6, 13, 25, 30, 32, 33, 34, 39, 45, 48, 49, 54, 58, 62, 65, 66, 75, 76, 78, 79, 83, 90, 101, 102, 104, 108, 140, 147, 154, 168, 180, 186, 205, 222, 246, 369, 372, 374, 448, 465, 466, 479, 481], "active_minus_rest": 6, "plot_contrast_matrix": [6, 62, 64, 65], "ax": [6, 9, 11, 18, 21, 22, 23, 24, 31, 38, 40, 49, 51, 57, 61, 63, 64, 65, 68, 74, 77, 78, 79, 83, 90, 99, 100, 104, 107, 110, 136, 146, 147, 154, 355, 356, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438], "label": [6, 9, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 47, 49, 52, 53, 54, 58, 61, 64, 65, 66, 67, 82, 90, 93, 95, 97, 99, 101, 102, 107, 110, 112, 114, 116, 123, 124, 126, 131, 134, 139, 142, 146, 147, 149, 151, 152, 154, 156, 158, 161, 162, 164, 166, 169, 174, 179, 180, 181, 188, 190, 197, 198, 205, 206, 208, 212, 213, 217, 219, 224, 225, 235, 237, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 253, 255, 259, 269, 291, 292, 293, 294, 295, 296, 297, 305, 319, 323, 326, 330, 332, 337, 361, 364, 365, 368, 371, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 419, 420, 421, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 462, 471, 481], "below": [6, 9, 16, 20, 22, 39, 44, 49, 52, 54, 58, 64, 68, 93, 114, 134, 154, 158, 161, 162, 166, 168, 169, 170, 171, 173, 177, 180, 181, 186, 187, 228, 229, 231, 235, 256, 291, 292, 293, 294, 296, 297, 299, 361, 368, 369, 370, 371, 372, 373, 374, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 426, 427, 429, 433, 434, 435, 438, 441, 446, 448, 459, 460, 479], "account": [6, 65, 75, 93, 166, 169, 177, 181, 187, 208, 364, 368, 369, 371, 372, 374, 448], "eff_map": 6, "compute_contrast": [6, 33, 61, 62, 64, 65, 67, 68, 69, 70, 74, 75, 76, 78, 79, 80, 99, 100, 107, 123, 126, 152, 154, 170, 323, 336, 338, 458], "output_typ": [6, 61, 64, 65, 68, 69, 70, 74, 75, 76, 78, 79, 80, 99, 104, 323, 336, 384], "effect_s": [6, 70, 79, 99, 174, 311, 323, 336], "form": [6, 33, 40, 44, 49, 71, 104, 126, 154, 155, 156, 158, 159, 171, 174, 179, 205, 227, 228, 229, 275, 276, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 318, 323, 326, 330, 336, 338, 339, 361, 362, 367, 368, 369, 370, 371, 372, 373, 374, 384, 428, 441, 445, 446, 447, 448, 457, 458], "scale": [6, 15, 41, 49, 54, 61, 66, 68, 69, 71, 93, 114, 117, 132, 139, 149, 154, 162, 166, 181, 191, 193, 212, 214, 239, 265, 270, 272, 284, 285, 287, 296, 297, 310, 313, 314, 315, 316, 318, 323, 331, 336, 338, 339, 368, 369, 370, 371, 372, 373, 374, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 445, 446, 447, 457, 458, 460, 464, 466, 482], "gaussian": [6, 44, 78, 93, 114, 155, 168, 171, 181, 182, 191, 228, 231, 358], "z_map": [6, 33, 61, 62, 64, 65, 68, 69, 70, 74, 75, 76, 78, 80, 100, 323, 336], "z_score": [6, 61, 64, 65, 67, 68, 69, 70, 74, 75, 76, 78, 79, 80, 107, 311, 323, 336], "top": [6, 12, 15, 17, 25, 44, 56, 102, 145, 154, 169, 176, 180, 290, 421, 426, 427, 430, 432, 433, 434, 441, 479], "axial": [6, 14, 93, 323, 336, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 419, 421, 424, 426, 427, 430, 432, 433, 434, 458], "black_bg": [6, 13, 14, 36, 69, 148, 154, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 421, 424, 426, 427, 430, 432, 433, 434, 441, 442, 444], "minu": [6, 117, 171], "worri": [6, 24, 116], "valid": [6, 28, 32, 33, 36, 37, 40, 42, 44, 45, 51, 98, 101, 104, 105, 106, 112, 114, 124, 125, 129, 132, 145, 149, 150, 154, 155, 157, 162, 165, 169, 181, 191, 220, 229, 239, 242, 248, 259, 267, 291, 292, 293, 294, 295, 296, 297, 323, 324, 325, 330, 341, 345, 348, 353, 358, 359, 364, 365, 368, 371, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 444, 451, 457, 462, 463, 464, 481, 482], "procedur": [6, 31, 75, 76, 78, 83, 86, 101, 156, 161, 166, 171, 173, 174, 188, 191, 265, 322, 338, 384, 460, 475], "arbitrari": [6, 64, 75, 171, 177, 295, 336, 338], "risk": [6, 114, 176, 226], "aka": [6, 65, 107, 158, 171, 318], "control": [6, 8, 9, 11, 14, 15, 20, 23, 27, 33, 38, 40, 48, 56, 75, 78, 97, 112, 114, 124, 126, 127, 135, 136, 140, 142, 146, 154, 155, 159, 160, 161, 162, 165, 166, 168, 169, 171, 174, 178, 186, 189, 191, 227, 235, 263, 270, 272, 299, 318, 322, 323, 336, 339, 342, 353, 360, 364, 365, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 424, 426, 427, 429, 433, 434, 435, 437, 438, 439, 445, 458, 464, 465, 479, 481, 482], "posit": [6, 9, 14, 16, 17, 24, 48, 51, 58, 65, 69, 73, 78, 79, 80, 81, 83, 93, 98, 112, 114, 116, 145, 149, 152, 154, 161, 166, 168, 171, 173, 174, 181, 187, 228, 231, 235, 265, 267, 318, 323, 336, 338, 339, 360, 384, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 418, 419, 421, 424, 426, 427, 429, 430, 432, 433, 434, 438, 439, 441, 442, 457, 458, 464, 466, 479, 481], "fpr": [6, 33, 80, 173, 174, 323, 336, 339, 458, 465], "alpha": [6, 15, 23, 24, 37, 39, 40, 44, 48, 57, 66, 74, 75, 76, 80, 105, 151, 155, 160, 167, 171, 228, 229, 231, 296, 297, 299, 313, 315, 316, 318, 322, 323, 336, 339, 360, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 421, 426, 430, 432, 433, 435, 437, 438, 458, 479], "certain": [6, 56, 139, 154, 161, 169, 171, 177, 187, 270, 356, 432], "001": [6, 33, 41, 44, 62, 75, 78, 79, 80, 100, 171, 228, 229, 231, 296, 297, 323, 336, 339, 458, 465], "chanc": [6, 33, 37, 51, 76, 78, 146, 154, 165, 166, 171, 482], "declar": [6, 169, 171, 228, 231], "inact": [6, 171], "threshold_stats_img": [6, 74, 76, 80, 173, 360], "_": [6, 22, 30, 36, 37, 42, 44, 47, 49, 51, 57, 62, 74, 76, 79, 93, 97, 101, 104, 105, 107, 123, 147, 151, 154, 161, 169, 275, 276, 326, 363], "height_control": [6, 74, 76, 80, 323, 336, 339, 458], "uncorrect": [6, 62, 75, 78, 79, 80, 100], "p": [6, 42, 62, 70, 74, 75, 76, 78, 79, 80, 93, 100, 101, 104, 105, 107, 114, 146, 154, 155, 166, 168, 171, 176, 186, 187, 188, 189, 194, 197, 199, 207, 221, 224, 227, 228, 231, 235, 240, 248, 250, 260, 267, 310, 311, 319, 323, 336, 338, 339, 341, 363, 384, 457, 458, 460], "291": [6, 33, 41, 65, 71, 465, 466], "n_voxel": [6, 55, 76, 78, 91, 97, 161, 164, 171, 298, 311, 313, 315, 316, 319, 323, 331, 332, 448], "ten": [6, 80, 446], "hundr": [6, 49, 446], "conserv": [6, 76, 78, 101, 166, 171, 191, 228, 233], "solut": [6, 64, 65, 155, 156, 162, 167, 168, 176, 179, 219, 299], "famili": [6, 80, 101, 123, 124, 136, 151, 154, 166, 169, 174, 338, 384, 448, 450], "wise": [6, 15, 40, 47, 55, 80, 93, 99, 101, 123, 151, 154, 166, 170, 174, 181, 291, 292, 293, 294, 338, 384], "probabl": [6, 11, 21, 31, 32, 39, 43, 48, 61, 65, 76, 78, 80, 91, 93, 156, 166, 168, 171, 174, 176, 177, 205, 208, 216, 243, 244, 274], "sai": [6, 64, 68, 97, 117, 169, 171, 313], "bonferroni": [6, 80, 101, 104, 105, 166, 171, 174, 323, 336, 339, 458, 465], "934": 6, "inde": [6, 42, 49, 85, 155, 156, 164, 171, 324, 479], "popular": [6, 48, 175, 179, 291, 292], "proport": [6, 49, 51, 68, 73, 81, 98, 112, 159, 171, 173, 174, 265, 315, 318, 336, 430, 434, 439, 481], "discoveri": [6, 23, 75, 76, 78, 80, 114, 171, 174, 176, 215, 280, 318], "among": [6, 78, 124, 154, 171, 174, 239, 291, 292, 293, 294], "fdr": [6, 74, 76, 80, 173, 174, 322, 323, 336, 339, 458, 465], "904": 6, "discard": [6, 117, 171, 234, 270, 290, 326, 361, 378, 381, 460, 464], "small": [6, 18, 49, 51, 58, 64, 85, 98, 101, 102, 114, 128, 130, 131, 154, 158, 159, 166, 168, 169, 176, 177, 295, 311, 341, 432, 433, 446, 449, 460, 464, 479], "cluster": [6, 19, 31, 32, 33, 39, 46, 59, 62, 73, 78, 80, 81, 85, 90, 112, 114, 123, 124, 142, 145, 149, 150, 151, 154, 157, 163, 164, 166, 171, 173, 174, 175, 176, 188, 194, 239, 240, 256, 265, 293, 294, 318, 323, 332, 336, 338, 339, 346, 348, 353, 360, 371, 384, 404, 424, 431, 433, 434, 439, 445, 446, 447, 451, 453, 454, 457, 458, 465, 466, 481, 482], "remov": [6, 30, 32, 33, 35, 40, 41, 42, 76, 85, 88, 102, 103, 104, 105, 114, 116, 121, 123, 125, 126, 129, 133, 134, 135, 137, 139, 140, 142, 144, 145, 147, 149, 152, 154, 162, 167, 168, 177, 178, 180, 191, 227, 252, 274, 276, 323, 339, 341, 345, 347, 358, 360, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 384, 420, 432, 448, 449, 451, 452, 456, 459, 460, 461, 482], "cluster_threshold": [6, 61, 68, 80, 149, 154, 323, 336, 339, 360, 457, 458], "clean_map": 6, "zscore": [6, 124, 125, 142, 154, 227, 298, 368, 369, 370, 371, 372, 373, 374, 420, 460], "active_vs_rest_z_map": 6, "active_vs_rest_eff_map": 6, "furthermor": [6, 42, 55], "extract": [6, 22, 28, 30, 32, 40, 43, 45, 46, 48, 49, 59, 60, 62, 71, 72, 82, 85, 91, 93, 95, 97, 99, 100, 103, 112, 117, 122, 123, 124, 126, 127, 134, 135, 137, 138, 139, 140, 146, 150, 151, 154, 157, 158, 161, 164, 172, 174, 176, 177, 178, 187, 190, 197, 227, 236, 242, 243, 245, 248, 253, 254, 256, 259, 267, 271, 274, 291, 292, 293, 294, 295, 298, 299, 305, 306, 323, 330, 336, 337, 338, 347, 348, 350, 353, 360, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 379, 381, 397, 416, 417, 418, 419, 421, 430, 431, 432, 434, 439, 440, 442, 446, 448, 449, 450, 451, 452, 454, 456, 458, 461, 464, 465, 466, 475, 479, 481, 482], "report": [6, 49, 52, 53, 54, 56, 68, 88, 90, 91, 102, 114, 126, 142, 147, 149, 151, 152, 154, 171, 172, 177, 181, 197, 224, 250, 318, 323, 336, 368, 369, 370, 371, 372, 373, 374, 384, 435, 437, 438, 448, 471, 480], "tabl": [6, 33, 62, 68, 90, 100, 124, 150, 152, 154, 365, 457, 465], "get_clusters_t": [6, 62, 68, 124, 146, 150, 151, 154], "stat_threshold": [6, 68, 457], "20": [6, 21, 24, 29, 33, 34, 39, 44, 45, 48, 50, 52, 54, 57, 58, 62, 65, 68, 71, 77, 80, 90, 93, 99, 102, 105, 114, 121, 127, 132, 154, 155, 159, 161, 186, 187, 191, 221, 239, 248, 267, 291, 292, 293, 294, 296, 297, 298, 299, 464, 465, 466, 481], "id": [6, 33, 62, 68, 69, 102, 106, 117, 124, 154, 188, 235, 237, 246, 247, 250, 270, 272, 280, 323, 371, 457, 465], "y": [6, 14, 15, 24, 31, 33, 34, 35, 36, 37, 40, 41, 44, 52, 54, 58, 62, 68, 69, 83, 91, 93, 100, 101, 104, 105, 110, 114, 117, 134, 136, 139, 151, 154, 161, 162, 166, 169, 174, 177, 180, 181, 211, 227, 228, 229, 245, 268, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 305, 306, 310, 313, 314, 315, 316, 323, 331, 332, 336, 338, 343, 367, 368, 369, 370, 371, 372, 373, 374, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 421, 424, 426, 427, 430, 432, 433, 434, 435, 436, 437, 438, 441, 444, 445, 446, 447, 448, 449, 457, 458, 465, 479], "peak": [6, 33, 62, 68, 70, 162, 164, 168, 415, 448, 450, 457, 465], "stat": [6, 23, 33, 62, 66, 70, 75, 78, 93, 100, 102, 106, 107, 114, 151, 154, 155, 168, 172, 180, 228, 231, 311, 320, 323, 336, 360, 363, 438, 442, 444, 457, 458, 465, 479], "size": [6, 9, 15, 22, 23, 26, 33, 40, 44, 48, 49, 53, 58, 62, 67, 76, 78, 79, 80, 83, 90, 93, 101, 102, 104, 107, 110, 125, 129, 139, 140, 142, 149, 152, 154, 159, 166, 167, 168, 171, 191, 209, 267, 274, 323, 336, 338, 339, 360, 368, 369, 371, 372, 376, 379, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 421, 430, 431, 435, 437, 438, 440, 443, 445, 446, 447, 448, 449, 450, 457, 458, 459, 464, 465, 466], "mm3": [6, 33, 62, 90, 191, 448, 450, 457, 465], "811979": 6, "4050": 6, "1a": [6, 33, 62, 465], "63": [6, 32, 33, 62, 90, 92, 114, 217, 238, 246, 465, 466], "601922": 6, "1b": [6, 62, 465], "435063": 6, "1c": [6, 62, 465], "48": [6, 20, 33, 53, 62, 71, 90, 114, 191, 205, 238, 243, 245, 268, 343, 465, 466], "39": [6, 15, 30, 33, 45, 51, 54, 62, 71, 72, 90, 127, 129, 132, 154, 196, 238, 245, 256, 465, 466, 481], "364058": 6, "605128": 6, "1512": 6, "2a": [6, 62, 465], "45": [6, 30, 32, 33, 49, 55, 62, 90, 105, 114, 465, 466], "590200": 6, "27": [6, 15, 16, 17, 33, 47, 59, 62, 70, 89, 90, 92, 102, 108, 114, 191, 199, 365, 448, 450, 465, 466, 479, 481], "253889": 6, "972": [6, 97, 108, 481], "3a": [6, 62, 114, 200, 201, 202, 203, 204, 224, 250, 279, 465], "51": [6, 9, 33, 43, 45, 48, 53, 62, 74, 81, 114, 160, 191, 239, 298, 465, 466, 481], "968355": 6, "3b": [6, 465], "54": [6, 33, 62, 90, 99, 114, 155, 191, 207, 239, 260, 285, 465, 466], "565609": 6, "087451": 6, "1188": [6, 51, 52, 98, 465], "807510": 6, "594": [6, 33], "5a": [6, 33, 62], "21": [6, 30, 33, 54, 62, 65, 76, 90, 102, 126, 129, 147, 154, 205, 280, 465, 466], "646352": 6, "5b": [6, 33, 62], "33": [6, 33, 43, 62, 71, 90, 114, 194, 196, 240, 256, 465, 466], "416271": 6, "57": [6, 31, 33, 62, 81, 90, 114, 118, 121, 139, 154, 191, 239, 465, 466], "710963": 6, "702": [6, 33, 61], "6a": [6, 62, 465], "633746": 6, "6b": [6, 465], "66": [6, 16, 17, 33, 58, 62, 89, 92, 197, 465, 466], "796135": 6, "6c": 6, "69": [6, 11, 33, 71, 78, 465, 466], "254544": 6, "17": [6, 7, 23, 27, 30, 32, 33, 41, 42, 47, 48, 58, 61, 62, 72, 76, 79, 90, 97, 102, 108, 114, 139, 154, 187, 188, 219, 225, 237, 247, 251, 267, 465, 466, 481], "93": [6, 30, 32, 33, 76, 90, 241, 465, 466, 481], "522477": 6, "621": [6, 33, 72, 481], "7a": [6, 33, 62, 465], "99": [6, 12, 30, 32, 33, 41, 58, 92, 148, 154, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 465, 466], "713852": 6, "19": [6, 33, 41, 53, 62, 76, 90, 102, 114, 123, 126, 127, 129, 142, 154, 188, 189, 213, 216, 217, 219, 222, 223, 224, 225, 236, 237, 245, 246, 247, 250, 251, 274, 277, 278, 315, 316, 465, 466], "7b": 6, "90": [6, 9, 12, 22, 30, 32, 33, 43, 47, 50, 53, 56, 63, 76, 78, 90, 102, 114, 127, 140, 148, 154, 159, 364, 365, 435, 437, 438, 441, 461, 465, 466, 479], "270733": 6, "7c": 6, "085568": 6, "24": [6, 33, 51, 58, 62, 68, 90, 93, 95, 102, 125, 147, 154, 323, 325, 326, 330, 364, 465, 466, 481], "331806": 6, "648": [6, 33, 62, 465], "22": [6, 21, 27, 33, 36, 45, 62, 90, 102, 106, 114, 129, 140, 149, 154, 195, 241, 343, 465, 466, 481], "8a": [6, 33], "700088": 6, "23": [6, 33, 45, 62, 71, 90, 99, 102, 110, 111, 114, 191, 221, 239, 248, 297, 465, 466, 481], "8b": 6, "037845": 6, "8c": 6, "527477": 6, "25": [6, 15, 23, 30, 32, 33, 39, 40, 41, 45, 58, 59, 62, 68, 72, 76, 85, 90, 93, 94, 95, 97, 102, 118, 154, 156, 187, 267, 313, 315, 316, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 432, 440, 442, 443, 444, 465, 466, 481], "835099": 6, "837": [6, 465], "26": [6, 14, 22, 27, 33, 44, 45, 58, 61, 62, 71, 74, 90, 102, 132, 154, 449, 465, 466, 481], "9a": [6, 465], "615642": 6, "9b": 6, "091568": 6, "to_csv": [6, 71], "baselin": [6, 30, 32, 114, 145, 146, 154, 162, 164, 190, 238, 311, 331], "anoth": [6, 39, 65, 67, 78, 88, 131, 136, 154, 161, 168, 169, 171, 176, 178, 179, 227, 296, 297, 342, 343, 362, 456, 479, 482], "seek": [6, 76, 104, 160, 432], "whether": [6, 9, 68, 88, 93, 101, 140, 152, 154, 161, 169, 171, 177, 181, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 256, 259, 260, 261, 265, 267, 268, 269, 270, 272, 274, 280, 298, 299, 320, 338, 339, 345, 360, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 384, 385, 387, 388, 426, 429, 434, 435, 436, 438, 446, 448, 457, 458, 460, 461], "possibli": [6, 65, 181], "three": [6, 14, 19, 24, 32, 40, 49, 63, 64, 65, 74, 88, 93, 114, 140, 148, 154, 168, 169, 174, 177, 179, 188, 196, 220, 256, 323, 336, 356, 358, 395, 397, 400, 414, 419, 421, 424, 425, 426, 427, 430, 432, 433, 434, 458, 464], "higher": [6, 70, 116, 134, 154, 155, 166, 171, 228, 248, 291, 292, 293, 294, 296, 297, 298, 299, 323, 336, 342, 353, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 459], "dimension": [6, 26, 49, 69, 93, 129, 146, 151, 154, 168, 176, 189, 197, 233, 234, 242, 248, 267, 298, 299, 311, 342, 383, 445, 446, 447], "explain": [6, 40, 42, 48, 56, 65, 68, 145, 154, 158, 161, 169, 171, 176, 181, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464], "might": [6, 34, 61, 103, 160, 164, 166, 171, 174, 177, 179, 187, 241, 256, 330, 359, 365, 374, 376, 377, 378, 380, 381, 427, 444], "specif": [6, 14, 15, 16, 17, 30, 32, 33, 48, 49, 61, 62, 63, 64, 65, 67, 69, 75, 78, 79, 83, 93, 100, 107, 114, 115, 120, 126, 132, 145, 151, 154, 155, 158, 159, 160, 161, 162, 164, 166, 169, 171, 173, 174, 176, 177, 178, 181, 187, 191, 212, 223, 235, 257, 267, 272, 275, 276, 311, 313, 315, 316, 326, 337, 341, 361, 363, 369, 372, 374, 384, 416, 435, 436, 437, 438, 444, 448, 460, 462, 463, 464, 479, 482], "exactli": [6, 83, 93, 97, 107, 126, 154, 168, 169, 291, 292, 293, 294, 295, 361, 441, 464], "effects_of_interest": [6, 68, 69, 70, 465], "vstack": [6, 40, 41, 58, 68, 69, 74, 79, 102], "easier": [6, 23, 65, 128, 133, 148, 154, 160, 161, 168, 169, 427], "oop": 6, "lot": [6, 64, 69, 70, 85, 121, 139, 142, 154, 155, 161, 162, 168, 169, 176, 231], "non": [6, 14, 15, 39, 42, 50, 56, 64, 65, 66, 76, 78, 90, 93, 101, 102, 115, 126, 135, 139, 142, 146, 147, 149, 150, 152, 154, 155, 159, 160, 166, 167, 168, 169, 173, 174, 176, 181, 186, 189, 191, 193, 194, 196, 197, 207, 213, 240, 267, 274, 291, 292, 293, 294, 298, 313, 315, 316, 323, 341, 345, 350, 356, 358, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 429, 433, 434, 435, 437, 438, 442, 444, 448, 454, 460, 466, 479, 482], "neural": [6, 66, 114, 160, 171, 174, 176, 181, 193, 206, 257, 275, 295], "ventricl": [6, 191], "arteri": 6, "094": [6, 7, 41, 481], "274": [6, 33, 37, 41, 45, 466, 481], "025": [7, 41], "execut": [7, 21, 27, 45, 59, 72, 81, 86, 95, 108, 111, 112, 113, 169, 181, 356, 435, 437, 438, 479, 480, 481], "auto_exampl": [7, 27, 45, 59, 72, 81, 95, 108, 111, 113, 147, 154, 169, 442], "mem": [7, 27, 45, 59, 72, 81, 95, 108, 111, 113, 481], "00": [7, 27, 30, 32, 33, 44, 45, 48, 53, 59, 72, 81, 88, 95, 108, 111, 113, 465, 481], "926": [7, 481], "273": [7, 33, 41, 114, 188, 237, 466, 481], "06": [7, 22, 23, 27, 32, 33, 45, 70, 72, 90, 95, 108, 114, 168, 191, 195, 239, 249, 295, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 434, 441, 465, 466, 481], "176": [7, 33, 41, 61, 71, 465, 466, 481], "glass": [8, 9, 27, 47, 61, 106, 112, 132, 133, 134, 136, 137, 142, 145, 154, 175, 273, 288, 323, 336, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 426, 430, 434, 439, 440, 443, 458, 479, 481], "megatrawl": [8, 27, 112, 114, 129, 154, 183, 267, 431, 439, 481], "probabilist": [8, 27, 46, 51, 59, 98, 112, 114, 124, 125, 139, 150, 154, 157, 174, 180, 181, 197, 205, 207, 213, 217, 227, 238, 240, 242, 243, 244, 245, 246, 248, 256, 260, 348, 367, 372, 397, 416, 417, 421, 427, 431, 432, 433, 434, 439, 440, 452, 456, 466, 479, 481, 482], "atla": [8, 11, 27, 46, 48, 50, 59, 82, 90, 93, 95, 112, 114, 117, 122, 124, 125, 126, 130, 131, 133, 134, 135, 136, 139, 142, 145, 146, 147, 148, 150, 151, 154, 157, 159, 168, 174, 180, 181, 183, 227, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 256, 260, 270, 279, 305, 307, 348, 360, 367, 368, 369, 371, 372, 397, 416, 417, 418, 420, 421, 431, 432, 433, 434, 437, 439, 440, 441, 442, 444, 448, 449, 450, 451, 452, 456, 463, 466, 475, 479, 481, 482], "mode": [8, 14, 16, 21, 27, 55, 60, 72, 82, 93, 95, 112, 114, 132, 137, 140, 146, 151, 154, 169, 170, 175, 180, 181, 187, 197, 236, 242, 245, 248, 267, 270, 272, 318, 323, 330, 348, 367, 372, 374, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 418, 429, 432, 434, 439, 448, 456, 458, 465, 466, 481, 482], "msdl": [8, 21, 27, 52, 54, 112, 156, 180, 183, 245, 348, 397, 416, 432, 434, 439, 479, 481], "multiscal": [8, 27, 40, 41, 112, 114, 124, 130, 154, 183, 212, 239, 269, 433, 439, 481], "parcel": [8, 9, 22, 23, 27, 46, 59, 112, 114, 117, 124, 126, 130, 134, 137, 138, 139, 142, 149, 151, 152, 154, 157, 174, 175, 176, 181, 187, 188, 191, 194, 195, 208, 213, 214, 219, 225, 227, 237, 239, 240, 241, 243, 244, 245, 247, 249, 251, 256, 267, 270, 346, 348, 353, 364, 365, 367, 371, 404, 416, 417, 421, 424, 431, 433, 439, 448, 449, 479, 481, 482], "colormap": [8, 14, 19, 21, 23, 27, 85, 112, 134, 137, 138, 139, 140, 142, 147, 152, 154, 251, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 419, 420, 421, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 481, 482], "volum": [8, 16, 27, 31, 32, 36, 39, 43, 48, 54, 56, 61, 67, 78, 86, 90, 99, 110, 114, 116, 123, 125, 126, 136, 139, 147, 154, 160, 166, 167, 174, 175, 176, 179, 183, 188, 191, 205, 212, 237, 239, 242, 259, 269, 274, 291, 292, 293, 294, 296, 297, 298, 299, 323, 345, 353, 356, 357, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 385, 387, 388, 420, 424, 429, 433, 438, 439, 441, 448, 449, 450, 454, 460, 464, 466, 479, 480, 481, 482], "global": [8, 27, 112, 114, 145, 154, 168, 169, 179, 191, 219, 235, 236, 247, 260, 281, 298, 299, 342, 354, 364, 365, 378, 420, 446, 481], "carpet": [8, 27, 112, 145, 152, 154, 236, 260, 342, 354, 378, 420, 481], "technic": [8, 27, 70, 99, 112, 155, 167, 168, 187, 267, 274, 310, 314, 438, 439, 464, 481], "illustr": [8, 27, 49, 65, 66, 84, 89, 92, 100, 107, 112, 161, 169, 180, 181, 438, 439, 464, 481], "surfac": [8, 12, 27, 28, 45, 55, 60, 72, 96, 108, 109, 111, 112, 114, 116, 124, 125, 134, 136, 138, 139, 140, 142, 145, 146, 149, 151, 152, 154, 172, 174, 175, 176, 183, 195, 200, 201, 202, 203, 204, 225, 227, 241, 249, 259, 262, 266, 279, 280, 288, 291, 311, 319, 326, 330, 332, 348, 384, 398, 421, 426, 429, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 481, 482], "scheme": [8, 27, 29, 33, 36, 37, 97, 112, 145, 154, 155, 161, 162, 164, 168, 229, 291, 292, 293, 294, 384, 438, 439, 464, 481], "cortic": [8, 23, 24, 27, 28, 45, 55, 67, 70, 112, 114, 134, 136, 139, 145, 154, 156, 170, 175, 195, 199, 200, 201, 202, 203, 204, 205, 207, 208, 219, 220, 225, 241, 249, 251, 255, 259, 260, 279, 348, 421, 437, 438, 439, 440, 441, 442, 443, 444, 463, 464, 481, 482], "option": [8, 9, 13, 15, 21, 23, 27, 42, 51, 56, 66, 71, 88, 101, 110, 112, 116, 121, 123, 124, 125, 126, 132, 134, 135, 136, 137, 142, 145, 146, 147, 148, 149, 151, 154, 156, 161, 163, 169, 170, 174, 177, 179, 181, 227, 228, 229, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 310, 311, 313, 314, 315, 316, 318, 319, 320, 323, 325, 326, 330, 336, 338, 339, 341, 342, 351, 353, 354, 355, 356, 358, 360, 361, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 458, 459, 460, 461, 464, 479, 481], "seed": [8, 27, 46, 48, 59, 99, 112, 139, 151, 154, 170, 178, 249, 256, 279, 280, 293, 294, 323, 330, 332, 367, 373, 374, 384, 397, 434, 437, 438, 439, 440, 443, 448, 450, 462, 466, 479, 481, 482], "connect": [8, 22, 26, 27, 49, 50, 58, 59, 87, 93, 96, 108, 114, 126, 127, 132, 134, 135, 142, 145, 150, 152, 154, 156, 158, 160, 169, 170, 171, 174, 175, 176, 180, 186, 187, 191, 219, 221, 225, 227, 228, 229, 235, 239, 245, 247, 248, 249, 251, 256, 262, 267, 279, 280, 323, 326, 339, 342, 350, 360, 364, 365, 367, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 397, 418, 421, 423, 431, 434, 437, 438, 439, 440, 446, 449, 450, 462, 479, 480, 481, 482], "onto": [9, 16, 23, 40, 50, 67, 134, 154, 159, 169, 175, 179, 377, 380, 423, 432, 479], "vol_to_surf": [9, 37, 67, 107, 136, 145, 147, 154, 170, 429, 435, 436, 437, 438, 442, 479], "plot_surf_stat_map": [9, 23, 24, 27, 37, 67, 107, 134, 136, 138, 142, 145, 149, 150, 151, 152, 154, 170, 429, 435, 436, 481, 482], "add": [9, 14, 15, 20, 31, 40, 41, 50, 56, 63, 67, 101, 117, 122, 123, 124, 125, 126, 132, 134, 135, 137, 139, 142, 147, 151, 152, 154, 159, 161, 164, 166, 169, 174, 177, 229, 246, 247, 270, 272, 289, 341, 364, 373, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 440, 442, 444, 459, 460, 479], "contour": [9, 15, 18, 21, 86, 87, 125, 134, 142, 145, 147, 151, 154, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 432, 433, 436, 482], "plot_surf_contour": [9, 125, 145, 154], "stat_img": [9, 13, 14, 15, 16, 89, 92, 318, 323, 336, 339, 457, 458], "load_sample_motor_activation_imag": [9, 13, 14, 15, 16, 89, 92, 124, 154], "fsaverag": [9, 22, 23, 24, 37, 62, 67, 107, 124, 125, 139, 147, 154, 183, 279, 309, 429, 442, 464, 479], "fetch_surf_fsaverag": [9, 22, 23, 37, 67, 107, 124, 139, 145, 147, 151, 154, 170, 200, 201, 202, 203, 204, 249, 429, 435, 436, 437, 438, 442, 464, 479], "curvatur": [9, 23, 124, 154, 200, 201, 202, 203, 204, 279], "inflat": [9, 22, 23, 37, 67, 114, 195, 200, 201, 202, 203, 204, 279, 429, 435, 436, 437, 438, 442, 444, 463, 464], "hemispher": [9, 22, 23, 37, 58, 78, 85, 93, 107, 132, 133, 137, 154, 159, 180, 195, 200, 201, 202, 203, 204, 212, 215, 241, 249, 250, 279, 280, 304, 305, 306, 309, 323, 336, 359, 385, 393, 416, 419, 421, 424, 426, 427, 429, 430, 432, 433, 434, 435, 437, 438, 442, 458, 479], "whose": [9, 67, 168, 174, 228, 229, 231, 314, 348, 464], "vertex": [9, 24, 174, 249, 300, 302, 435, 436, 437, 438, 464], "neg": [9, 14, 17, 42, 51, 58, 65, 76, 78, 79, 89, 101, 105, 114, 126, 146, 149, 154, 166, 171, 174, 187, 235, 267, 297, 338, 339, 356, 360, 384, 426, 429, 434, 438, 457, 464, 479], "curv_right": [9, 200, 201, 202, 203, 204, 279], "load_surf_data": [9, 23, 134, 154], "curv_right_sign": 9, "sign": [9, 14, 23, 42, 101, 102, 124, 154, 166, 179, 187, 296, 297, 340, 360, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 426, 432, 440, 442, 444], "textur": [9, 67, 107, 464], "pial_right": [9, 67, 107, 200, 201, 202, 203, 204, 279, 429, 442, 479], "fig": [9, 11, 18, 24, 38, 40, 41, 42, 49, 57, 61, 63, 64, 66, 74, 77, 78, 90, 99, 100, 104, 105, 110, 429, 435, 479], "infl_right": [9, 67, 107, 200, 201, 202, 203, 204, 279, 429, 442], "hemi": [9, 22, 23, 37, 67, 107, 435, 437, 438, 479], "right": [9, 12, 18, 20, 22, 25, 32, 40, 44, 50, 58, 64, 65, 67, 71, 75, 78, 79, 85, 93, 97, 107, 132, 137, 142, 145, 147, 154, 158, 159, 165, 169, 176, 180, 195, 200, 201, 202, 203, 204, 212, 215, 235, 241, 243, 244, 249, 263, 265, 273, 279, 280, 293, 294, 323, 336, 337, 355, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 419, 421, 422, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 442, 458, 479, 482], "bg_map": [9, 22, 23, 37, 67, 107, 429, 435, 437, 438, 442, 444, 479], "recent": [9, 133, 136, 137, 139, 149, 154, 160, 177], "version": [9, 19, 20, 22, 32, 35, 36, 40, 41, 42, 47, 48, 51, 52, 53, 54, 55, 56, 58, 61, 68, 69, 70, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 116, 121, 123, 126, 127, 129, 132, 133, 134, 135, 136, 137, 139, 141, 142, 145, 147, 148, 149, 150, 151, 152, 154, 167, 168, 169, 177, 179, 181, 186, 191, 196, 206, 211, 219, 225, 227, 228, 229, 233, 234, 235, 237, 239, 240, 242, 244, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 259, 261, 262, 270, 272, 274, 275, 276, 279, 280, 282, 283, 284, 285, 286, 287, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 311, 319, 320, 323, 326, 332, 336, 338, 340, 341, 345, 350, 351, 352, 357, 360, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 377, 380, 384, 420, 431, 432, 435, 437, 438, 445, 446, 447, 448, 450, 451, 452, 454, 456, 457, 460, 464, 479], "instal": [9, 112, 123, 126, 134, 139, 142, 149, 150, 154, 176, 177, 243, 244, 343, 369, 372, 374, 435, 437, 438, 448, 479], "configur": [9, 15, 124, 125, 154, 169, 177, 180, 181, 227, 298, 299, 306, 323, 336, 365, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448], "instead": [9, 14, 32, 35, 36, 40, 41, 42, 47, 49, 51, 52, 53, 54, 55, 56, 58, 61, 65, 68, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 116, 123, 124, 126, 127, 129, 132, 133, 135, 136, 137, 139, 142, 146, 148, 149, 150, 151, 154, 167, 168, 169, 170, 180, 181, 192, 227, 228, 229, 252, 274, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 311, 313, 319, 323, 336, 367, 368, 369, 370, 371, 372, 373, 374, 384, 445, 446, 447, 448], "graph_object": 9, "noqa": [9, 58, 71, 97, 247, 426], "f401": 9, "bg_on_data": [9, 22, 23, 429, 435, 437, 438, 442, 444], "specifi": [9, 14, 15, 32, 56, 61, 62, 65, 67, 69, 70, 74, 77, 78, 79, 80, 83, 88, 93, 94, 100, 106, 107, 117, 122, 125, 126, 136, 139, 140, 142, 145, 146, 147, 148, 149, 151, 154, 155, 156, 166, 168, 170, 171, 177, 179, 180, 181, 197, 213, 243, 244, 248, 270, 271, 273, 275, 282, 283, 284, 285, 286, 287, 291, 292, 293, 294, 296, 297, 298, 299, 313, 315, 316, 319, 323, 326, 330, 331, 332, 336, 337, 341, 345, 353, 356, 358, 364, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 381, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 424, 426, 427, 429, 431, 432, 433, 434, 435, 437, 438, 441, 442, 443, 444, 446, 448, 458, 459, 460, 464, 479], "surf_plot": [9, 125, 134, 154], "860": 9, "vmin": [9, 14, 31, 36, 40, 44, 49, 50, 52, 53, 54, 56, 57, 58, 79, 83, 110, 121, 125, 126, 140, 142, 154, 159, 419, 420, 424, 426, 427, 429, 432, 433, 434, 435, 437, 438, 441, 442, 444], "chosen": [9, 22, 34, 65, 99, 168, 227, 435, 437, 438, 441, 442, 444, 464], "symmetr": [9, 19, 47, 78, 135, 154, 168, 191, 233, 234, 239, 243, 244, 260, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 429, 434, 435, 438, 440, 441, 442, 444], "_plot_surf_plotli": 9, "matplolib": [9, 152, 154, 435, 437, 438], "With": [9, 14, 32, 56, 77, 88, 164, 168, 171, 228, 231, 319, 365, 460, 463, 480], "custom": [9, 15, 22, 23, 47, 66, 124, 139, 147, 149, 154, 166, 178, 323, 325, 330, 398, 435, 437, 438, 456, 479, 482], "plotlysurfacefigur": [9, 149, 154, 435], "similar": [9, 23, 24, 30, 48, 55, 78, 93, 99, 100, 116, 127, 139, 140, 142, 149, 154, 155, 158, 160, 162, 163, 166, 173, 174, 181, 293, 294, 365], "api": [9, 44, 103, 110, 121, 122, 123, 124, 125, 126, 129, 131, 132, 133, 134, 135, 136, 137, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 169, 177, 227, 298, 299, 306, 323, 336, 367, 368, 369, 370, 371, 372, 373, 374, 380, 427, 445, 446, 447, 448, 482], "static": [9, 386, 441], "requir": [9, 20, 36, 42, 47, 55, 63, 66, 67, 71, 74, 77, 92, 117, 127, 132, 134, 136, 145, 149, 150, 154, 156, 159, 164, 166, 168, 169, 171, 174, 176, 177, 179, 180, 181, 191, 229, 274, 339, 359, 364, 365, 369, 372, 374, 384, 448, 449, 479, 480], "kaleido": [9, 149, 154, 435, 437, 438, 479, 480], "uncom": [9, 16, 22, 52, 54, 58], "savefig": [9, 15, 41, 55, 61, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 421, 424, 426, 427, 430, 432, 433, 434, 479], "right_hemispher": 9, "plot_glass_brain": [9, 13, 14, 62, 78, 79, 100, 104, 106, 126, 132, 142, 150, 151, 154, 173, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 434, 479], "plot_ab": [9, 14, 62, 78, 79, 100, 104, 388, 426, 479], "rang": [9, 14, 23, 41, 44, 47, 49, 53, 55, 57, 62, 66, 68, 77, 78, 79, 90, 94, 99, 101, 104, 132, 136, 146, 154, 168, 169, 191, 197, 228, 231, 242, 340, 360, 426, 429, 434, 438, 440, 441, 442, 444], "xslicer": [9, 15, 406, 412, 414], "0x7f18d6a11100": 9, "destrieux_atla": [9, 22, 23], "fetch_atlas_surf_destrieux": [9, 22, 23, 125, 134, 154, 479], "map_right": [9, 195, 249], "regions_dict": 9, "b": [9, 14, 15, 23, 30, 40, 41, 56, 90, 114, 117, 169, 177, 187, 188, 195, 197, 200, 201, 202, 203, 204, 219, 221, 225, 237, 241, 247, 248, 251, 257, 267, 275, 279, 314, 364, 365, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 479], "g_postcentr": 9, "postcentr": [9, 90], "gyru": [9, 90, 250], "g_precentr": 9, "precentr": [9, 90], "indic": [9, 23, 30, 32, 41, 50, 54, 58, 65, 71, 78, 85, 131, 134, 139, 154, 159, 166, 169, 174, 177, 179, 190, 219, 224, 235, 237, 238, 241, 243, 244, 246, 247, 250, 251, 259, 270, 277, 278, 291, 292, 293, 294, 296, 297, 298, 299, 323, 326, 342, 354, 356, 357, 359, 367, 369, 370, 371, 372, 373, 374, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 424, 427, 432, 433, 434, 435, 436, 437, 438, 441, 442, 444, 448, 450, 457], "regions_indic": 9, "sulc_right": [9, 67, 107, 200, 201, 202, 203, 204, 279, 429, 442, 479], "legend": [9, 18, 30, 32, 34, 42, 43, 49, 58, 61, 66, 90, 152, 154, 436], "color": [9, 14, 15, 18, 21, 24, 30, 32, 34, 49, 50, 51, 68, 85, 87, 126, 140, 142, 145, 147, 151, 152, 154, 158, 159, 169, 225, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 424, 425, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 479], "k": [9, 18, 22, 30, 32, 34, 35, 41, 42, 49, 51, 66, 80, 83, 90, 97, 110, 114, 161, 164, 166, 168, 187, 205, 229, 257, 267, 275, 291, 292, 293, 294, 296, 297, 315, 316, 323, 332, 341, 364, 365, 371, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 421, 424, 426, 427, 430, 432, 433, 434, 445, 460, 466], "low": [9, 42, 65, 69, 93, 103, 114, 139, 145, 154, 161, 167, 168, 169, 171, 176, 177, 179, 180, 181, 223, 235, 279, 291, 292, 293, 294, 296, 297, 341, 364, 368, 369, 370, 371, 372, 373, 374, 427, 429, 442, 446, 448, 459, 460], "fsaverage5": [9, 22, 23, 24, 37, 67, 107, 134, 139, 154, 183, 195, 215, 249, 279, 280, 309, 429, 442, 464], "high": [9, 31, 39, 49, 56, 64, 65, 88, 93, 114, 139, 145, 146, 147, 154, 162, 163, 168, 169, 171, 174, 176, 177, 180, 181, 187, 188, 191, 200, 201, 202, 203, 204, 217, 237, 246, 267, 279, 291, 292, 293, 294, 296, 297, 311, 323, 326, 330, 341, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 429, 442, 446, 448, 459, 460], "finer": [9, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "big_fsaverag": 9, "big_textur": 9, "fine": [9, 88, 114, 133, 154, 156, 181, 197, 242, 295, 298, 299, 364, 370, 373, 446, 479], "470x500": [9, 23, 107], "plot_img_on_surf": [9, 125, 145, 147, 154], "choic": [9, 19, 65, 66, 69, 110, 129, 154, 155, 156, 162, 164, 165, 168, 169, 229, 240, 296, 297, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 448, 482], "orient": [9, 142, 145, 154, 168, 169, 355], "surf_mesh": [9, 429, 435, 436, 437, 438, 442, 444, 463, 464, 479], "freesurf": [9, 22, 23, 67, 107, 134, 139, 151, 154, 170, 195, 200, 201, 202, 203, 204, 208, 249, 279, 300, 435, 436, 437, 438, 444, 462, 463, 464], "medial": [9, 23, 37, 58, 90, 114, 166, 429, 435, 437, 438], "left": [9, 12, 20, 22, 23, 25, 34, 37, 40, 44, 49, 50, 51, 58, 64, 65, 66, 71, 75, 76, 78, 79, 85, 93, 100, 104, 107, 114, 132, 133, 137, 142, 145, 147, 154, 159, 176, 180, 195, 200, 201, 202, 203, 204, 205, 212, 215, 235, 241, 243, 244, 249, 263, 265, 273, 279, 280, 323, 336, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 419, 420, 421, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 442, 458], "view_surf": [9, 22, 139, 142, 154, 440, 441, 442, 443, 482], "view_img_on_surf": [9, 139, 140, 142, 147, 154, 440, 441, 443, 444, 482], "atlas": [9, 10, 22, 46, 58, 59, 112, 114, 117, 126, 146, 147, 152, 154, 157, 160, 171, 174, 179, 180, 181, 191, 194, 197, 205, 207, 208, 214, 227, 242, 243, 244, 251, 256, 260, 285, 367, 368, 369, 371, 372, 416, 417, 421, 427, 432, 433, 436, 437, 439, 440, 441, 443, 466, 481, 482], "cell": [9, 16, 22, 36, 49, 52, 53, 54, 58, 62, 74, 76, 171, 174], "open": [9, 16, 22, 52, 54, 58, 88, 90, 91, 97, 107, 114, 123, 154, 168, 169, 174, 175, 176, 178, 183, 187, 197, 216, 256, 274, 311, 323, 336, 376, 377, 378, 379, 380, 381, 440, 441, 442, 443, 444, 447, 456, 458, 479, 480, 482], "open_in_brows": [9, 16, 22, 33, 52, 54, 58, 61, 62, 70, 74, 90, 91, 126, 139, 154, 181, 440, 441, 442, 443, 444, 456, 458, 479], "don": [9, 24, 33, 65, 80, 117, 126, 154, 169, 176, 177, 270, 272, 429, 464, 479], "ourselv": 9, "vol_to_surf_kwarg": [9, 147, 154, 442], "allow": [9, 20, 24, 40, 48, 51, 58, 63, 88, 98, 99, 100, 101, 116, 124, 125, 126, 133, 135, 140, 142, 146, 147, 150, 151, 154, 155, 161, 168, 169, 170, 172, 174, 177, 181, 187, 227, 228, 229, 257, 265, 276, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 326, 336, 338, 361, 364, 367, 368, 369, 370, 371, 372, 373, 374, 431, 445, 446, 447, 448], "grain": [9, 68, 114, 197, 242, 295], "interpol": [9, 24, 40, 41, 44, 52, 65, 74, 83, 126, 131, 154, 191, 270, 355, 356, 357, 426, 427, 433, 434, 441, 460, 464], "volumetr": [9, 23, 170, 179, 384], "avoid": [9, 52, 53, 54, 58, 69, 137, 142, 151, 154, 166, 168, 169, 171, 179, 291, 292, 293, 294, 311, 336, 338, 345, 350, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 459, 479], "neighbor": [9, 37, 49, 93, 142, 154, 175, 295, 426, 427, 433, 434, 441, 446, 447, 453, 464], "nearest": [9, 40, 41, 44, 49, 65, 74, 83, 114, 142, 151, 154, 174, 270, 355, 356, 357, 426, 427, 433, 434, 441, 447, 453, 457, 464], "radiu": [9, 36, 37, 44, 55, 58, 61, 99, 129, 154, 165, 170, 174, 181, 220, 255, 295, 374, 464, 466, 482], "achiev": [9, 15, 55, 69, 92, 161, 168, 176, 180, 181, 231], "destrieux": [9, 22, 23, 110, 114, 122, 125, 134, 145, 154, 183, 241, 249, 307, 479], "fetch_atlas_destrieux_2009": [9, 156, 195], "legacy_format": [9, 17, 21, 42, 43, 47, 58, 74, 75, 76, 78, 79, 80, 104, 105, 149, 154, 235, 241, 242, 253, 254, 255, 263, 264, 265, 274], "n_sampl": [9, 44, 76, 80, 101, 104, 105, 227, 228, 229, 291, 292, 293, 294, 296, 297, 298, 299, 323, 336, 341, 367, 370, 373, 384, 445, 447, 453, 459, 460, 464], "symmetric_cmap": [9, 22, 125, 140, 154, 435, 440, 441, 442, 444, 479], "41": [9, 27, 33, 49, 71, 90, 114, 447, 453, 465, 466, 481], "437": [9, 27, 33, 481], "306": [9, 33, 41, 466], "plot_3d_map_to_surface_project": [9, 27, 147, 154, 442, 481], "refer": [10, 19, 46, 59, 65, 67, 77, 92, 93, 105, 112, 114, 115, 116, 123, 124, 125, 127, 132, 140, 147, 149, 150, 151, 154, 157, 165, 169, 170, 171, 173, 179, 180, 181, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 479, 481, 482], "dataset_ho": 10, "fetch_atlas_harvard_oxford": [10, 21, 56, 90, 129, 150, 154, 156, 169, 205, 244, 449], "cort": [10, 21, 56, 90, 156, 243, 244], "maxprob": [10, 56, 90, 157, 243, 244, 482], "thr25": [10, 56, 90, 156, 243, 244], "2mm": [10, 21, 56, 90, 123, 148, 154, 156, 166, 242, 243, 244, 466], "dataset_ju": 10, "fetch_atlas_juelich": [10, 148, 150, 154, 208, 243], "thr0": [10, 243, 244], "1mm": [10, 123, 148, 154, 243, 244, 247, 284, 285, 287, 377], "atlas_ho_filenam": 10, "atlas_ju_filenam": 10, "roi": [10, 17, 21, 23, 25, 28, 33, 45, 56, 58, 82, 85, 87, 90, 95, 98, 112, 114, 117, 125, 134, 142, 145, 154, 161, 176, 178, 194, 198, 218, 219, 220, 241, 247, 253, 254, 255, 259, 270, 291, 346, 348, 351, 353, 354, 358, 359, 367, 371, 373, 424, 426, 433, 434, 436, 437, 439, 466, 479, 481, 482], "locat": [10, 15, 22, 23, 25, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 47, 49, 52, 53, 54, 55, 56, 58, 68, 74, 76, 88, 90, 91, 93, 94, 100, 101, 104, 107, 139, 148, 154, 168, 171, 177, 179, 181, 197, 228, 231, 237, 253, 255, 256, 271, 273, 295, 296, 297, 298, 299, 306, 323, 326, 336, 342, 368, 369, 370, 371, 372, 373, 374, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 446, 448, 466, 479], "fsl": [10, 11, 36, 49, 62, 78, 85, 93, 148, 149, 151, 154, 179, 205, 208, 243, 244, 352], "harvardoxford": 10, "0x7f18c6200fe0": 10, "0x7f18d6ac7590": 10, "view_typ": [10, 50, 86, 87, 145, 154, 159, 432, 433], "img_plot": [10, 76, 78], "817": 10, "bit": [10, 11, 36, 41, 49, 64, 65, 74, 78, 85, 93, 101, 127, 140, 151, 154, 155, 167, 179, 180, 261], "int": [10, 11, 23, 36, 40, 41, 42, 48, 49, 50, 57, 62, 66, 76, 77, 78, 83, 85, 93, 94, 99, 100, 102, 104, 151, 152, 154, 159, 169, 190, 228, 231, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 282, 283, 284, 285, 286, 287, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 310, 311, 313, 315, 316, 323, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 340, 342, 347, 353, 364, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 419, 420, 421, 424, 426, 427, 430, 432, 433, 434, 435, 436, 437, 438, 440, 442, 443, 444, 445, 446, 447, 448, 453, 456, 457, 458, 459, 461, 464], "due": [10, 11, 14, 34, 36, 39, 49, 65, 69, 78, 85, 93, 123, 142, 148, 149, 150, 151, 152, 154, 158, 162, 164, 169, 171, 235, 296, 297, 479], "deal": [10, 11, 36, 49, 66, 78, 85, 93, 116, 121, 145, 154, 171, 370, 466], "int64": [10, 11, 36, 49, 78, 85, 93, 100, 151, 154, 179, 445, 447], "compat": [10, 11, 36, 49, 71, 78, 85, 93, 124, 126, 129, 149, 151, 154, 164, 169, 170, 226, 243, 244, 305, 306, 323, 336, 338, 348, 363, 367, 368, 369, 370, 371, 372, 373, 374, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 422, 448, 456, 460], "int32": [10, 11, 36, 49, 78, 83, 85, 93, 151, 154, 179, 351, 368, 369, 370, 371, 372, 373, 374], "new_img_lik": [10, 11, 36, 93, 106, 125, 142, 151, 154, 180], "roi_img": [10, 68, 433], "affin": [10, 40, 43, 49, 56, 69, 82, 88, 90, 92, 93, 95, 112, 133, 148, 154, 174, 178, 181, 205, 291, 292, 293, 294, 296, 297, 298, 299, 323, 336, 341, 342, 343, 344, 346, 351, 352, 353, 354, 355, 356, 357, 359, 368, 369, 370, 371, 372, 373, 376, 377, 378, 379, 380, 381, 382, 385, 387, 388, 439, 446, 451, 454, 455, 464, 468, 481, 482], "59": [10, 27, 33, 49, 51, 52, 59, 71, 90, 91, 99, 114, 118, 154, 161, 191, 238, 364, 365, 465, 466, 481], "792": [10, 27, 62, 481], "436": [10, 33, 56, 114, 365], "plot_atla": [10, 27, 481], "common": [11, 49, 65, 66, 69, 93, 99, 134, 142, 148, 150, 154, 155, 161, 164, 166, 168, 169, 171, 173, 178, 180, 186, 191, 194, 223, 231, 240, 348, 356, 357, 361, 370, 379, 381, 482], "qualiti": [11, 62, 68, 76, 104, 114, 139, 154, 169, 170, 171, 177, 181, 187, 189, 235, 267, 368, 371, 420, 446], "mri": [11, 41, 56, 60, 72, 93, 99, 112, 114, 116, 149, 154, 169, 170, 171, 172, 174, 176, 179, 186, 188, 191, 196, 205, 207, 216, 219, 235, 237, 247, 256, 260, 274, 325, 364, 365, 481], "known": [11, 33, 34, 99, 145, 161, 162, 166, 169, 171, 220, 247, 313, 315, 316, 323, 420], "power": [11, 56, 58, 74, 76, 78, 114, 116, 122, 133, 145, 154, 155, 162, 163, 167, 174, 179, 181, 183, 191, 198, 253, 254, 364, 365, 420], "grayplot": [11, 145, 154, 420], "plot_carpet": [11, 27, 125, 145, 146, 150, 151, 154, 479, 481], "adhd_dataset": [11, 61, 170], "fetch_adhd": [11, 61, 129, 154, 189], "n_subject": [11, 23, 39, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 74, 75, 76, 77, 78, 79, 80, 84, 88, 90, 91, 94, 98, 103, 104, 105, 129, 133, 154, 159, 168, 181, 227, 228, 229, 231, 235, 236, 256, 264, 265, 268, 274, 280, 290, 308], "infer": [11, 49, 62, 64, 75, 78, 83, 99, 101, 114, 169, 171, 173, 174, 318, 326, 338, 356, 363, 384, 420], "often": [11, 30, 32, 35, 36, 48, 85, 91, 93, 116, 160, 161, 162, 166, 171, 174, 176, 179, 180, 181, 235, 313, 315, 316], "overwrit": [11, 56, 270, 272, 385, 387, 388], "particular": [11, 15, 33, 65, 86, 97, 117, 128, 149, 154, 156, 164, 166, 168, 176, 177, 179, 272, 291, 292, 293, 294, 313, 315, 316, 330, 361, 464], "field": [11, 44, 117, 142, 154, 171, 174, 179, 270, 291, 292, 293, 294, 298, 299, 324, 326, 356, 361, 362, 370, 373, 446, 463, 464], "explicit": [11, 48, 71, 142, 148, 154, 169, 174, 176, 272, 339, 365, 460], "0010042": 11, "0010042_rest_tshift_rpi_voreg_mni": 11, "build": [11, 18, 21, 41, 46, 49, 50, 51, 58, 69, 99, 112, 115, 123, 124, 125, 126, 134, 154, 157, 162, 164, 166, 171, 179, 181, 323, 446, 482], "mask_img": [11, 25, 29, 32, 33, 34, 35, 36, 39, 40, 41, 44, 49, 52, 53, 54, 56, 58, 65, 68, 70, 74, 88, 90, 91, 97, 101, 102, 116, 125, 136, 140, 144, 145, 149, 154, 161, 166, 169, 180, 181, 282, 295, 306, 318, 323, 326, 336, 339, 340, 341, 347, 360, 368, 369, 370, 371, 372, 373, 374, 375, 382, 383, 418, 420, 429, 447, 448, 450, 451, 452, 453, 454, 455, 464, 466], "compute_epi_mask": [11, 25, 68, 88, 180, 181, 291, 292, 293, 294, 298, 299, 370, 373, 446], "grai": [11, 38, 40, 41, 42, 43, 74, 88, 139, 152, 154, 166, 173, 175, 207, 216, 274, 291, 292, 293, 294, 298, 299, 370, 373, 419, 420, 446, 464], "matter": [11, 24, 42, 43, 56, 65, 74, 88, 132, 145, 148, 154, 161, 166, 168, 169, 173, 175, 180, 181, 191, 207, 216, 256, 260, 261, 274, 283, 284, 285, 286, 287, 291, 292, 293, 294, 298, 299, 326, 364, 370, 373, 377, 380, 446, 464], "white": [11, 24, 40, 42, 56, 65, 74, 88, 130, 145, 147, 148, 154, 168, 180, 181, 191, 200, 201, 202, 203, 204, 207, 216, 256, 260, 274, 279, 284, 285, 286, 287, 291, 292, 293, 294, 298, 299, 326, 364, 370, 373, 377, 380, 435, 436, 437, 438, 441, 442, 444, 446, 463, 464], "cerebrospin": [11, 56, 207, 260, 364], "fluid": [11, 56, 207, 260, 364], "icbm152": [11, 148, 154, 174, 191, 260, 261, 284, 285, 287], "fetch_icbm152_2009": [11, 21, 74, 207, 261, 285], "atlas_img": [11, 53], "gm": [11, 21, 88, 148, 154, 181, 207, 260, 261, 291, 292, 293, 294, 298, 299, 370, 373, 377, 380, 446], "wm": [11, 21, 56, 88, 148, 154, 181, 207, 260, 291, 292, 293, 294, 298, 299, 365, 370, 373, 377, 380, 446], "csf": [11, 21, 56, 207, 256, 260, 326, 364, 365], "map_label": 11, "atlas_data": [11, 20], "get_fdata": [11, 79, 142, 154, 179], "discrete_vers": 11, "argmax": 11, "discrete_atlas_img": 11, "01_plot": [11, 15, 23, 27, 147, 154, 442, 481], "subplot": [11, 12, 24, 38, 40, 41, 43, 44, 49, 51, 57, 63, 64, 65, 66, 68, 74, 77, 78, 79, 93, 99, 100, 104, 110, 123, 154, 425, 435, 436, 437, 438], "figsiz": [11, 12, 15, 18, 25, 30, 34, 35, 40, 42, 44, 48, 51, 57, 61, 62, 63, 64, 65, 66, 71, 74, 77, 78, 90, 93, 98, 99, 100, 104, 105, 110, 180, 431], "mask_label": [11, 420], "joblib": [11, 33, 48, 49, 52, 53, 54, 56, 58, 91, 123, 126, 142, 145, 149, 154, 158, 228, 291, 292, 293, 294, 296, 297, 298, 299, 323, 336, 342, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 446, 447, 448, 466], "353": [11, 33, 41, 72, 466], "cast": [11, 83, 129, 142, 154, 181, 237, 354], "float32": [11, 33, 83, 181, 342, 351, 368, 369, 370, 371, 372, 373, 374], "self": [11, 48, 49, 93, 169, 227, 228, 229, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 310, 313, 314, 315, 316, 323, 336, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448], "arg": [11, 15, 110, 291, 292, 293, 294, 302, 367], "kwarg": [11, 18, 58, 110, 124, 126, 142, 152, 154, 235, 302, 306, 326, 341, 365, 367, 368, 369, 370, 371, 372, 373, 374, 380, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 421, 424, 426, 427, 429, 430, 431, 432, 433, 434, 436, 437, 438, 445, 447, 460], "coerc": 11, "atlas_valu": 11, "239": [11, 27, 33, 41, 465, 466, 481], "928": [11, 27, 481], "hcp": [12, 26, 114, 183, 267], "workbench": 12, "cm": [12, 19, 20, 38, 41, 42, 44, 50, 53, 58, 101, 125, 139, 154, 159, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 424, 430, 431, 432, 433, 434, 440, 441, 442, 444, 479], "_cmap_d": 12, "nilearn_cmap": 12, "nmap": 12, "outer": [12, 88, 174, 464], "arang": [12, 22, 30, 32, 33, 34, 48, 51, 63, 65, 67, 69, 93, 107], "ones": [12, 33, 44, 63, 65, 74, 78, 80, 99, 102, 104, 105, 124, 154, 163, 164, 166, 168, 296, 297, 330, 384, 445], "subplots_adjust": [12, 25, 40, 44, 49, 57, 66, 180], "bottom": [12, 15, 25, 40, 66, 180, 431], "imshow": [12, 38, 40, 41, 44, 83, 156, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 424, 426, 427, 429, 431, 432, 433, 434, 435, 438], "off": [12, 14, 38, 40, 41, 65, 71, 115, 123, 132, 154, 168, 169, 191, 194, 293, 294, 323, 336, 376, 377, 378, 380, 381, 432, 433, 434, 441, 458], "fontsiz": [12, 25, 40, 49, 63, 77, 79, 104, 140, 142, 154, 180, 385, 387, 388, 440, 442, 443, 444], "va": 12, "rotat": [12, 32, 63, 83, 93, 181, 326, 364], "deprecated_cmap": 12, "vega10": 12, "vega20": 12, "vega20b": 12, "vega20c": 12, "spectral": [12, 23, 114, 194, 240], "m_cmap": 12, "datad": 12, "endswith": 12, "_r": 12, "sort": [12, 21, 30, 31, 35, 42, 43, 62, 116, 147, 154, 169, 177, 179, 257, 276, 290, 336, 338, 351, 384], "get_cmap": 12, "aspect": [12, 40, 138, 154, 164, 168, 181, 323, 336, 364, 458], "auto": [12, 132, 147, 154, 181, 298, 299, 351, 368, 369, 370, 371, 372, 373, 374, 386, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 415, 419, 421, 424, 426, 427, 429, 430, 432, 433, 434, 435, 437, 438, 440, 441, 443, 464], "989": [12, 27, 481], "plot_colormap": [12, 27, 481], "_projector": [13, 14, 16, 47, 50, 51, 52, 58, 149, 154], "orthoprojector": [13, 14, 16, 47, 50, 51, 52, 58, 149, 154, 413, 421, 426, 430], "0x7f18c6197a40": 13, "On": [13, 36, 49, 52, 53, 56, 58, 62, 65, 67, 74, 76, 114, 140, 154, 156, 168, 176, 180, 181, 228, 231], "xz": [13, 14, 15, 49, 323, 336, 403, 404, 413, 414, 419, 421, 424, 426, 427, 430, 432, 433, 434, 458, 479], "xzprojector": [13, 14, 407, 409, 413], "0x7f18d6e98c80": 13, "lyrz": [13, 14, 58, 323, 336, 392, 413, 421, 426, 430, 458, 479], "373": [13, 27, 33, 466, 481], "plot_demo_glass_brain": [13, 27, 481], "part": [14, 15, 49, 51, 55, 67, 88, 90, 110, 114, 123, 142, 148, 151, 152, 154, 162, 168, 169, 170, 175, 180, 187, 189, 193, 227, 233, 234, 243, 244, 260, 265, 291, 292, 293, 294, 298, 299, 338, 339, 360, 361, 362, 364, 370, 373, 376, 377, 378, 380, 381, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 431, 446], "through": [14, 31, 39, 42, 48, 51, 56, 70, 74, 90, 99, 123, 124, 146, 147, 149, 154, 155, 161, 162, 163, 166, 169, 174, 176, 187, 191, 270, 274, 293, 294, 323, 336, 338, 364, 365, 368, 371, 380, 385, 387, 388, 390, 391, 392, 393, 394, 401, 403, 405, 407, 409, 411, 445, 451, 456, 464], "includ": [14, 37, 39, 42, 43, 54, 58, 63, 65, 68, 76, 78, 79, 90, 99, 100, 104, 107, 121, 124, 125, 126, 132, 142, 144, 145, 149, 151, 152, 154, 159, 161, 166, 167, 169, 170, 174, 176, 177, 179, 185, 187, 189, 190, 191, 199, 206, 210, 219, 220, 222, 226, 227, 234, 237, 238, 239, 246, 247, 256, 261, 275, 282, 283, 286, 291, 292, 293, 294, 305, 306, 310, 314, 323, 336, 338, 348, 362, 363, 364, 368, 369, 370, 371, 372, 373, 376, 377, 378, 380, 381, 384, 421, 457, 470, 475], "ortho": [14, 15, 62, 323, 336, 396, 397, 413, 414, 419, 421, 424, 426, 427, 430, 432, 433, 434, 458, 479], "equival": [14, 80, 104, 123, 154, 166, 168, 171, 177, 194, 265, 291, 292, 293, 294, 298, 299, 352, 368, 369, 370, 371, 372, 373, 376, 377, 378, 380, 381, 439, 446], "sagitt": [14, 93, 323, 336, 393, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 419, 421, 424, 426, 427, 430, 432, 433, 434, 458], "cut": [14, 49, 65, 93, 126, 127, 137, 139, 140, 151, 152, 154, 175, 191, 323, 336, 377, 380, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 419, 421, 424, 426, 427, 430, 432, 433, 434, 441, 458, 479], "0x7f18d6c3cad0": 14, "produc": [14, 24, 46, 59, 62, 70, 78, 99, 104, 112, 149, 151, 154, 171, 174, 181, 256, 289, 365, 367, 368, 369, 370, 371, 372, 373, 374, 397, 434, 448, 464, 479, 481], "0x7f18c615e210": 14, "black": [14, 40, 103, 124, 125, 154, 169, 177, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 421, 424, 426, 427, 430, 432, 433, 434, 441, 442, 444], "0x7f18b99f5370": 14, "addition": [14, 15, 58, 68, 148, 154, 169, 173, 177, 180, 181, 197, 206, 326, 384, 457], "coron": [14, 93, 323, 336, 385, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 419, 421, 424, 426, 427, 430, 432, 433, 434, 458], "yz": [14, 15, 31, 39, 323, 336, 409, 410, 413, 414, 419, 421, 424, 426, 427, 430, 432, 433, 434, 458, 479], "yzprojector": [14, 403, 407, 413], "0x7f18c6b9bb90": 14, "yx": [14, 15, 116, 323, 336, 407, 408, 413, 414, 419, 421, 424, 426, 427, 430, 432, 433, 434, 458, 479], "yxprojector": [14, 403, 409, 413], "0x7f18cc849f40": [14, 15], "limit": [14, 42, 74, 87, 124, 154, 156, 166, 168, 169, 270, 365, 420], "vmax": [14, 40, 44, 49, 50, 52, 53, 54, 55, 56, 57, 58, 75, 78, 79, 83, 89, 99, 101, 104, 106, 110, 121, 123, 142, 154, 159, 419, 420, 424, 426, 427, 429, 432, 433, 434, 435, 437, 438, 440, 441, 442, 444, 479], "diverg": 14, "sinc": [14, 19, 33, 39, 58, 65, 70, 74, 76, 80, 100, 107, 116, 123, 147, 154, 168, 171, 187, 227, 237, 243, 244, 252, 276, 311, 319, 326, 361, 362, 364, 371, 372, 384, 388, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 420, 451, 452, 456, 479], "around": [14, 24, 34, 83, 85, 110, 138, 140, 154, 168, 169, 229, 338, 345, 356, 374, 385, 387, 388, 464], "symmetric_cbar": [14, 125, 154, 426, 429, 434, 438], "viridi": [14, 147, 154], "0x7f18d70bf5f0": 14, "lose": [14, 94, 479], "colour": [14, 171], "0x7f18d641fb30": 14, "saw": 14, "lzr": [14, 53, 323, 336, 393, 413, 421, 426, 430, 458, 479], "enabl": [14, 78, 103, 125, 126, 145, 149, 154, 161, 164, 175, 181, 226, 364, 389, 390, 391, 392, 393, 394, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 480], "lzrprojector": [14, 391, 413], "0x7f18c4f3de50": 14, "lyrzprojector": [14, 394, 413], "0x7f18d68fcdd0": 14, "xprojector": [14, 405, 411, 413], "yprojector": [14, 401, 411, 413], "zprojector": [14, 401, 405, 413], "lprojector": [14, 399, 413], "rprojector": [14, 389, 413], "0x7f18d6859f70": 14, "inherit": [14, 126, 154, 314, 456], "customis": [14, 56, 156, 365], "focu": [14, 78, 156, 158, 168, 448], "add_contour": [14, 18, 135, 142, 154, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 479], "lzryprojector": [14, 392, 413], "empti": [14, 101, 107, 117, 125, 142, 150, 152, 154, 169, 243, 244, 259, 291, 292, 293, 294, 361, 371, 372, 418, 431, 451, 452], "lzry": [14, 323, 336, 394, 413, 421, 426, 430, 458, 479], "choos": [14, 15, 24, 33, 34, 44, 47, 86, 164, 165, 171, 181, 291, 292, 293, 294, 323, 336, 365, 419, 421, 424, 426, 427, 430, 432, 433, 434, 445, 446, 458, 464, 482], "red": [14, 15, 18, 40, 51, 140, 152, 154, 170, 171, 174, 479], "demonstr": [14, 39, 40, 56, 62, 64, 93, 103, 150, 154, 160, 161, 220, 384, 479], "insid": [14, 21, 24, 34, 49, 55, 97, 164, 169, 227, 228, 229, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 341, 347, 361, 367, 368, 369, 370, 371, 372, 373, 374, 420, 432, 433, 436, 437, 445, 446, 447, 448, 464], "kei": [14, 54, 58, 65, 78, 110, 116, 117, 125, 154, 156, 169, 176, 179, 188, 235, 237, 238, 239, 240, 243, 244, 248, 251, 260, 266, 270, 291, 292, 293, 294, 310, 314, 319, 323, 330, 332, 336, 338, 362, 363, 384, 395, 420, 429, 442], "vari": [14, 34, 65, 70, 93, 94, 148, 154, 158, 164, 168, 176, 219, 228, 229, 231, 342], "lr": [14, 16, 323, 336, 390, 413, 421, 426, 430, 458, 479], "lrprojector": [14, 413], "ad": [14, 15, 20, 21, 30, 40, 66, 67, 83, 123, 124, 125, 135, 136, 146, 148, 149, 150, 151, 154, 164, 168, 170, 177, 227, 246, 247, 291, 292, 293, 294, 296, 297, 298, 299, 306, 323, 336, 338, 345, 356, 360, 362, 363, 367, 368, 369, 370, 371, 372, 373, 374, 384, 385, 387, 388, 419, 420, 421, 424, 426, 427, 430, 432, 433, 434, 441, 445, 446, 447, 448, 482], "chang": [14, 19, 40, 42, 51, 62, 66, 101, 104, 105, 109, 110, 112, 119, 162, 164, 168, 169, 171, 177, 178, 226, 227, 228, 229, 279, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 326, 331, 336, 350, 354, 356, 359, 360, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 384, 429, 435, 437, 438, 442, 444, 445, 446, 447, 448, 451, 452, 454, 457, 460, 480, 482], "lyr": [14, 323, 336, 391, 413, 421, 426, 430, 458, 479], "lyrprojector": [14, 393, 413], "draw": [14, 15, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 423, 464], "thick": [14, 47, 147, 154, 200, 201, 202, 203, 204, 225, 251, 279, 432, 433, 435, 436, 437, 438, 444, 462, 464], "width": [14, 32, 51, 65, 93, 174, 181, 291, 292, 293, 294, 298, 299, 323, 336, 338, 358, 368, 369, 370, 371, 372, 373, 374, 375, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 424, 426, 427, 430, 431, 432, 433, 434, 440, 446, 448, 450, 456, 458], "linewidth": [14, 18, 21, 42, 43, 48, 50, 61, 90, 432, 433, 440], "enough": [14, 58, 161, 168, 176, 181, 356], "unlik": [14, 20, 166, 171, 179, 365], "upper": [14, 40, 168, 313, 315, 316, 378, 381, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 424, 426, 427, 429, 430, 432, 433, 434, 435, 438, 442, 444], "bound": [14, 83, 88, 135, 142, 154, 180, 298, 356, 385, 387, 388, 419, 420, 424, 426, 427, 429, 430, 432, 433, 434, 435, 438, 442, 444], "kept": [14, 117, 125, 154, 169, 233, 243, 244, 291, 292, 293, 294, 340, 341, 358, 376, 377, 378, 379, 380, 381, 382, 448, 450, 456, 460], "infin": 14, "inf": [14, 54, 102, 341, 369, 372, 375, 378, 460, 465, 466], "958": [14, 27, 481], "plot_demo_glass_brain_extens": [14, 27, 481], "techniqu": [15, 44, 114, 159, 160, 161, 162, 163, 164, 168, 174, 176, 181, 222, 448], "essenti": [15, 66, 79, 174], "what": [15, 56, 65, 70, 107, 150, 162, 168, 172, 177, 179, 181, 228, 310, 314, 347, 361, 461, 479, 482], "shown": [15, 21, 40, 54, 65, 68, 93, 117, 147, 154, 155, 160, 161, 170, 171, 248, 365, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 429, 430, 433, 440, 442, 444, 466], "subclass": [15, 169, 414], "implement": [15, 48, 49, 56, 58, 65, 66, 97, 127, 134, 136, 142, 145, 146, 149, 150, 154, 155, 158, 159, 160, 162, 164, 166, 167, 168, 169, 174, 176, 177, 182, 191, 243, 244, 291, 292, 295, 296, 297, 311, 313, 318, 323, 325, 327, 328, 329, 330, 333, 334, 335, 336, 338, 347, 364, 365, 384, 385, 386, 388, 398, 435, 437, 438, 448, 460, 461, 466, 476], "interact": [15, 22, 47, 52, 54, 58, 99, 126, 139, 140, 144, 149, 154, 157, 159, 169, 174, 175, 176, 440, 441, 443, 482], "precis": [15, 41, 52, 57, 61, 90, 124, 154, 155, 158, 159, 168, 176, 181, 193, 217, 227, 228, 229, 231, 232, 265, 291, 293, 313, 315, 316, 338, 384], "overlai": [15, 20, 21, 50, 159, 180, 441, 482], "tile": [15, 140, 154, 400, 414, 419, 424, 427, 432, 433, 434, 458, 479], "mosaic": [15, 146, 152, 154, 395, 414, 419, 424, 427, 432, 433, 434, 458, 479], "wherea": [15, 49, 148, 154, 158, 162, 180, 379, 381, 382, 446], "mni": [15, 48, 52, 54, 65, 67, 92, 100, 107, 114, 117, 132, 142, 145, 151, 154, 156, 173, 174, 176, 180, 181, 188, 191, 197, 198, 207, 208, 209, 218, 220, 237, 239, 245, 253, 254, 255, 260, 284, 285, 287, 291, 292, 293, 294, 326, 343, 374, 377, 380, 419, 421, 424, 426, 427, 432, 433, 434, 440, 441, 443, 458, 479], "accordingli": [15, 149, 154, 361], "help": [15, 33, 58, 93, 114, 135, 139, 140, 154, 156, 162, 170, 181, 231, 480, 482], "haxby_anat_filenam": [15, 16], "haxby_mask_filenam": [15, 16], "haxby_func_filenam": [15, 16], "xyz": [15, 355, 395, 400, 402, 406, 412], "integ": [15, 58, 83, 93, 126, 129, 133, 142, 146, 149, 151, 154, 174, 179, 181, 224, 229, 231, 235, 237, 239, 241, 243, 244, 246, 247, 250, 251, 270, 272, 296, 297, 298, 299, 323, 342, 376, 377, 378, 380, 381, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 424, 426, 427, 432, 433, 434, 436, 437, 449, 454, 455, 458], "0x7f18b99f7290": 15, "zslicer": [15, 68, 87, 402, 406, 414], "rather": [15, 54, 65, 93, 99, 117, 132, 134, 136, 138, 142, 147, 149, 154, 155, 168, 179, 180, 213, 228, 237, 270, 272, 298, 299, 338, 369, 372, 457, 466], "impli": [15, 146, 154, 168, 227, 356, 375], "maximum": [15, 65, 78, 88, 91, 93, 103, 126, 142, 152, 154, 166, 174, 181, 208, 227, 228, 229, 231, 236, 243, 244, 270, 280, 291, 292, 293, 294, 298, 299, 310, 311, 314, 323, 332, 336, 338, 340, 358, 360, 368, 369, 370, 371, 372, 373, 374, 375, 388, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 426, 446, 448, 450, 451, 479], "0x7f18d67575f0": 15, "0x7f18d690a090": 15, "yslicer": [15, 91, 402, 412, 414], "again": [15, 49, 70, 90, 102, 116, 169, 173, 176, 270, 272], "0x7f18c615e1b0": 15, "ncolorbar": 15, "0x7f18b6e88ce0": 15, "stand": [15, 44, 142, 154, 174, 180, 479], "thu": [15, 31, 34, 39, 101, 103, 156, 161, 162, 163, 166, 167, 168, 174, 180, 181, 293, 294, 295, 296, 297, 311, 345, 365, 384], "xzslicer": [15, 49, 408, 410, 414], "0x7f18c623e1b0": 15, "similarli": [15, 55, 93, 179], "yxslicer": [15, 404, 410], "assign": [15, 85, 93, 158, 159, 171, 198, 208, 243, 244, 253, 255, 448, 449, 453], "0x7f18b6e8b4d0": 15, "yzslicer": [15, 39, 404, 408, 414], "case": [15, 23, 34, 40, 48, 49, 50, 54, 58, 62, 64, 65, 66, 71, 83, 88, 90, 91, 100, 107, 117, 132, 142, 145, 154, 155, 156, 158, 161, 162, 166, 168, 176, 177, 179, 234, 237, 241, 243, 244, 291, 292, 293, 294, 296, 297, 323, 325, 330, 336, 338, 339, 348, 356, 357, 358, 359, 362, 369, 370, 371, 372, 373, 374, 378, 416, 419, 420, 421, 424, 426, 427, 429, 432, 433, 434, 441, 457, 458, 464, 466, 479], "tiledslic": [15, 395, 397, 414], "0x7f18baac8260": 15, "situat": [15, 58, 155, 161, 162, 179, 358], "mosaicslic": [15, 397, 400, 414], "0x7f18d71261b0": 15, "still": [15, 49, 65, 78, 90, 110, 117, 125, 149, 154, 166, 168, 177, 181, 270, 479], "0x7f18c6aee570": 15, "tupl": [15, 181, 238, 245, 280, 291, 292, 293, 294, 296, 297, 298, 299, 313, 315, 316, 323, 326, 336, 345, 353, 356, 358, 361, 364, 370, 373, 376, 378, 379, 381, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 424, 427, 431, 432, 433, 434, 441, 446, 451, 458, 463, 464], "0x7f18d6d5d100": 15, "interpret": [15, 51, 68, 114, 157, 166, 167, 168, 171, 187, 221, 237, 241, 243, 244, 247, 248, 251, 352, 384, 479, 482], "process": [15, 16, 32, 36, 39, 42, 50, 53, 62, 90, 93, 100, 114, 115, 116, 127, 154, 156, 159, 160, 161, 164, 168, 169, 171, 173, 174, 176, 177, 179, 180, 181, 187, 191, 196, 197, 206, 207, 213, 228, 245, 260, 261, 265, 291, 292, 293, 294, 296, 297, 298, 299, 323, 336, 341, 342, 347, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 446, 447, 448, 454, 455, 460], "mean_haxby_img": [15, 16], "coregistr": [15, 131, 154, 174, 191], "edg": [15, 47, 52, 54, 58, 93, 142, 154, 155, 156, 174, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 421, 431, 440, 482], "being": [15, 88, 93, 123, 124, 125, 139, 142, 149, 154, 155, 168, 169, 171, 174, 235, 298, 330, 363, 369, 372, 374, 379, 381, 420, 435, 437, 438, 442, 444, 448], "outlin": [15, 48, 88, 91, 160, 169, 436, 466, 479], "manual": [15, 16, 19, 32, 34, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 68, 80, 82, 88, 90, 91, 95, 97, 98, 99, 101, 102, 103, 104, 105, 112, 116, 155, 161, 176, 178, 181, 246, 247, 259, 298, 299, 346, 351, 353, 354, 358, 367, 371, 424, 433, 434, 435, 437, 438, 439, 479, 481, 482], "34": [15, 33, 62, 76, 81, 90, 114, 166, 465, 466, 481], "blue": [15, 18, 40, 49, 68, 85, 152, 154], "fill": [15, 21, 62, 66, 93, 100, 107, 134, 142, 148, 154, 168, 181, 191, 356, 357, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 432, 433, 456, 482], "transpar": [15, 23, 125, 142, 154, 181, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 421, 426, 427, 429, 430, 432, 433, 434, 435, 438, 440, 441, 442, 443, 444], "contourf": [15, 21, 48, 50, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "sphere": [15, 36, 37, 46, 55, 59, 112, 144, 147, 152, 154, 165, 181, 188, 200, 201, 202, 203, 204, 227, 253, 254, 256, 279, 367, 374, 416, 421, 430, 431, 435, 436, 437, 438, 439, 440, 444, 456, 463, 464, 471, 479, 481, 482], "marker_color": [15, 40, 55, 61, 99, 140, 142, 154, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 443, 479], "yellow": 15, "third": [15, 65, 80, 159, 332], "marker_s": [15, 40, 55, 61, 99, 140, 142, 154, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 443, 479], "coord": [15, 37, 40, 50, 52, 54, 58, 68, 86, 99, 140, 142, 154, 159, 385, 387, 388, 416, 417, 421, 435, 436, 437, 438, 444, 479], "alter": [15, 146, 154], "bar": [15, 42, 101, 104, 126, 139, 152, 154, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 482], "scalebar": [15, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 479], "scale_": 15, "keyword": [15, 97, 117, 142, 154, 164, 168, 181, 229, 235, 270, 281, 326, 341, 352, 365, 368, 369, 370, 371, 372, 373, 374, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 424, 425, 426, 427, 429, 431, 432, 433, 434, 436, 437, 438, 442, 460], "scale_s": [15, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "scale_unit": [15, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "built": [15, 33, 42, 48, 124, 154, 171, 177, 291, 292, 293, 294, 446, 465], "extens": [15, 134, 148, 154, 186, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438], "svg": [15, 62, 125, 154, 363, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438], "plot_demo_more_plot": [15, 27, 481], "plot_stat_map_from_displai": 15, "sure": [15, 93, 112, 123, 126, 152, 154, 166, 169, 177, 296, 297, 480], "close": [15, 23, 37, 40, 49, 85, 149, 154, 155, 162, 168, 169, 171, 174, 261, 291, 292, 293, 294, 376, 377, 378, 380, 381, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438, 453, 479], "28": [15, 27, 30, 33, 53, 58, 59, 62, 86, 88, 90, 95, 102, 108, 114, 118, 139, 154, 190, 219, 238, 247, 465, 466, 481], "384": [15, 27, 33, 466, 481], "916": [15, 27, 45, 108, 481], "easi": [16, 61, 67, 74, 93, 116, 117, 159, 160, 162, 165, 169, 170, 174, 176, 181, 364, 482], "coordin": [16, 19, 22, 23, 40, 49, 52, 54, 68, 93, 99, 114, 116, 122, 126, 131, 134, 136, 137, 139, 145, 149, 151, 154, 157, 159, 168, 170, 171, 174, 181, 188, 189, 195, 198, 200, 201, 202, 203, 204, 208, 218, 220, 221, 245, 253, 254, 255, 279, 299, 300, 301, 302, 343, 356, 374, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 418, 419, 420, 421, 424, 426, 427, 430, 432, 433, 434, 435, 436, 437, 438, 440, 441, 443, 444, 457, 458, 463, 464, 466, 479, 482], "flip": [16, 102, 133, 154, 191, 239], "radiolog": [16, 125, 154, 385, 387, 388, 419, 421, 424, 426, 427, 430, 432, 433, 434], "0x7f18d70254f0": 16, "web": [16, 114, 117, 139, 142, 154, 169, 214, 270, 272, 323, 336, 440, 442, 443, 444, 458, 479], "alwai": [16, 99, 161, 164, 168, 169, 171, 181, 297, 313, 315, 316, 320, 364, 441, 442, 444, 451, 479], "fix": [16, 30, 58, 69, 120, 168, 169, 177, 180, 310, 311, 314, 320, 323, 326], "0x7f18c9c19c40": 16, "0x7f18d6754a70": 16, "overlaid": [16, 69, 88, 91, 145, 147, 154, 432, 466], "0x7f18c6b33470": 16, "voxel_wis": 16, "reduc": [16, 29, 33, 34, 44, 49, 65, 78, 86, 93, 99, 138, 139, 142, 146, 154, 163, 167, 168, 169, 174, 181, 191, 229, 274, 293, 294, 298, 299, 364, 365, 368, 371, 435, 437, 438, 442, 444, 445, 446, 447, 451], "0x7f18d6757590": 16, "ie": [16, 151, 154, 155, 160, 179, 313, 315, 316, 369, 372, 374], "777": [16, 27, 85, 95, 481], "944": 16, "plot_demo_plot": [16, 27, 481], "modifi": [17, 49, 58, 93, 102, 132, 149, 154, 169, 181, 222, 270, 272, 356, 357, 360, 435, 437, 438, 444, 459, 460], "leav": [17, 29, 33, 161, 166, 345], "unchang": [17, 65, 166, 227, 228, 229, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448], "localizer_dataset": [17, 76, 80, 104, 105], "fetch_localizer_button_task": [17, 132, 154, 264, 265, 479], "localizer_tmap_filenam": 17, "tmap": [17, 78, 126, 154, 193, 263, 265, 479], "localizer_anat_filenam": 17, "0x7f18d68f7140": 17, "0x7f18d6ac7890": 17, "0x7f18d6ac4e60": 17, "040": [17, 27, 41, 481], "plot_dim_plot": [17, 27, 481], "func_filenam": [18, 25, 30, 31, 32, 33, 35, 48, 50, 53, 55, 58, 90, 91, 101, 103, 159, 180], "z_slice": [18, 42, 104], "facecolor": [18, 32, 40, 42, 105, 125, 154, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 421, 424, 426, 427, 430, 432, 433, 434], "mask_vt_filenam": [18, 93], "mask_house_filenam": 18, "mask_hous": [18, 32, 116, 179, 206, 259], "mask_face_filenam": 18, "mask_fac": [18, 32, 116, 179, 206, 259], "limegreen": 18, "zip": [18, 20, 30, 32, 34, 38, 41, 50, 51, 53, 58, 87, 98, 100, 102, 107, 110, 112, 159, 177, 213, 245, 260], "antialias": 18, "trick": [18, 176], "user": [18, 29, 34, 39, 58, 65, 66, 99, 105, 114, 117, 123, 124, 125, 126, 136, 139, 140, 142, 143, 147, 149, 150, 151, 154, 168, 169, 170, 171, 174, 175, 177, 178, 181, 183, 191, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 469, 471, 472, 480], "legend_guid": 18, "html": [18, 29, 33, 34, 36, 49, 52, 53, 54, 56, 58, 61, 62, 70, 74, 76, 97, 139, 143, 147, 149, 152, 154, 161, 172, 181, 187, 189, 190, 206, 224, 238, 250, 259, 291, 292, 293, 294, 323, 336, 365, 369, 372, 374, 440, 441, 442, 443, 444, 448, 456, 458, 466, 479, 480], "patch": [18, 40, 41, 49, 177], "rectangl": [18, 40, 49, 83], "p_v": 18, "fc": 18, "p_h": 18, "p_f": 18, "face": [18, 28, 32, 33, 38, 45, 69, 93, 96, 97, 99, 108, 112, 114, 116, 124, 126, 134, 147, 154, 161, 166, 170, 174, 175, 179, 180, 181, 206, 207, 223, 259, 260, 278, 291, 293, 295, 300, 301, 302, 346, 348, 351, 353, 354, 367, 373, 384, 412, 427, 431, 434, 435, 436, 437, 438, 439, 441, 444, 463, 464, 481], "loc": [18, 32, 34, 42, 43, 49, 61, 66, 68, 90, 99, 385, 387, 388], "lower": [18, 31, 32, 39, 51, 68, 76, 88, 93, 129, 154, 160, 163, 167, 168, 174, 180, 227, 233, 234, 291, 292, 293, 294, 313, 315, 316, 378, 381, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 418, 419, 420, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 438, 459], "_ax": [18, 21, 48, 50], "74": [18, 21, 33, 48, 50, 90, 465, 466], "im": [18, 21, 31, 106], "getattr": [18, 21], "986": [18, 27, 78, 481], "917": [18, 29, 31, 33, 36, 37, 45, 97, 481], "plot_haxby_mask": [18, 27, 481], "fetch_atlas_basc_multiscale_2015": [19, 124, 125, 130, 154, 191], "sym": [19, 191, 234, 239], "resolut": [19, 21, 74, 75, 92, 102, 114, 116, 123, 124, 135, 147, 148, 154, 159, 178, 188, 191, 196, 197, 200, 201, 202, 203, 204, 217, 219, 237, 239, 242, 246, 247, 248, 256, 279, 282, 283, 284, 285, 286, 287, 318, 373, 377, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 429, 442, 448, 482], "197": [19, 33, 41, 191, 239, 348, 465, 466], "444": [19, 33, 191, 239], "networks_64": 19, "networks_197": 19, "networks_444": 19, "itself": [19, 34, 65, 158, 191, 227, 228, 229, 298, 299, 346, 446, 464], "bwr": [19, 53, 140, 154, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 440], "bwr_r": 19, "086": [19, 27, 41, 481], "plot_multiscale_parcel": [19, 27, 481], "compos": [20, 97, 174, 180, 181, 186, 254, 291, 292, 293, 294], "node": [20, 23, 24, 58, 107, 140, 142, 145, 147, 154, 156, 181, 187, 235, 246, 279, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 429, 430, 440, 442, 443, 464, 479], "constitut": [20, 160], "leverag": [20, 145, 154, 175, 176, 291, 292, 446, 480], "less": [20, 48, 49, 50, 56, 65, 67, 70, 76, 78, 87, 93, 99, 117, 139, 140, 147, 154, 166, 168, 169, 171, 177, 226, 314, 360, 415, 482], "fetch_atlas_msdl": [20, 21, 51, 52, 53, 54, 98, 131, 154, 156, 213], "atlas_filenam": [20, 52, 54, 56, 156], "pcc": [20, 23, 51, 55], "dmn": [20, 51, 61, 465], "acc": 20, "pariet": [20, 58, 90, 102, 213, 245], "black_blu": 20, "black_green": 20, "black_pink": 20, "ma": [20, 36, 40, 48, 50, 105], "2820": [20, 48, 50], "element": [20, 48, 49, 50, 132, 151, 154, 160, 166, 174, 227, 233, 234, 237, 291, 292, 293, 294, 295, 305, 306, 341, 358, 367, 368, 369, 370, 371, 372, 373, 374, 380, 429, 448, 454, 460, 464], "nan": [20, 48, 50, 54, 56, 90, 93, 102, 121, 125, 129, 134, 142, 146, 154, 274, 341, 356, 369, 372, 375, 378, 429, 435, 437, 438, 442, 444, 460, 464, 465, 466], "_data": 20, "3rd": [20, 426, 427, 433, 434, 441], "4th": [20, 93, 114, 167, 174, 180, 315, 316, 353, 356, 432], "5th": [20, 199], "6th": 20, "dmn_node": 20, "40": [20, 33, 50, 53, 59, 63, 90, 93, 189, 191, 236, 245, 270, 464, 465, 466, 481], "35": [20, 30, 33, 53, 71, 90, 118, 154, 245, 270, 465, 466], "55": [20, 30, 33, 66, 104, 132, 154, 465, 466], "29": [20, 33, 36, 62, 71, 80, 90, 102, 127, 154, 465, 466], "407": [20, 27, 33, 481], "plot_overlai": [20, 27, 481], "delin": 21, "filled_contour": [21, 50, 159, 432], "continu": [21, 39, 43, 52, 56, 156, 161, 162, 163, 167, 169, 174, 181, 270, 351, 355, 356, 357, 368, 369, 370, 371, 372, 373, 374, 426, 427, 432, 433, 434, 441, 449, 450], "plot_prob_atla": [21, 27, 48, 50, 86, 87, 129, 136, 137, 146, 154, 159, 160, 427, 433, 479, 481], "pick": [21, 159, 168, 171, 174, 261], "randomli": [21, 166], "alreadi": [21, 22, 33, 34, 49, 70, 88, 93, 100, 102, 106, 107, 117, 142, 149, 154, 159, 161, 162, 169, 176, 181, 270, 272, 336, 338, 357, 384, 448], "know": [21, 83, 117, 168, 169, 171, 174, 234, 272], "tune": [21, 31, 32, 34, 39, 43, 88, 114, 133, 154, 156, 161, 162, 164, 168, 171, 298, 299, 364, 370, 373, 446, 479], "allen": [21, 114, 134, 154, 183, 238], "fetch_atlas_allen_2011": [21, 134, 154, 190], "icbm": [21, 65, 74, 139, 154, 183, 260], "tissu": [21, 174, 250], "ica": [21, 46, 50, 54, 59, 86, 91, 96, 103, 108, 112, 114, 117, 127, 154, 156, 157, 174, 175, 176, 185, 187, 190, 213, 221, 238, 248, 256, 267, 270, 282, 298, 299, 349, 358, 364, 365, 367, 369, 372, 373, 432, 434, 439, 452, 466, 479, 481, 482], "brainmap": [21, 221, 248], "smith_bm20": 21, "rsn28": [21, 190, 238], "allen2011": 21, "smith2009": 21, "local": [21, 40, 41, 49, 60, 64, 65, 72, 75, 76, 78, 79, 80, 87, 96, 99, 100, 102, 106, 107, 108, 112, 114, 142, 143, 151, 154, 169, 170, 171, 174, 177, 179, 181, 183, 187, 212, 219, 235, 243, 244, 247, 252, 262, 263, 264, 265, 266, 269, 270, 272, 295, 346, 358, 361, 367, 373, 384, 412, 425, 426, 434, 439, 481], "harvard_oxford": 21, "prob": [21, 243, 244, 246, 427, 432], "harvard_oxford_sub": 21, "sub": [21, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 77, 84, 90, 91, 94, 99, 100, 103, 107, 147, 154, 227, 228, 229, 243, 244, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 361, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448, 458], "smith_rsn10": 21, "smith_rsn20": 21, "smith_rsn70": 21, "70": [21, 30, 32, 33, 63, 114, 166, 221, 248, 465, 466], "smith_bm10": 21, "smith_bm70": 21, "multi": [21, 28, 41, 42, 43, 45, 46, 48, 58, 59, 99, 112, 114, 126, 154, 155, 156, 157, 159, 165, 168, 174, 176, 179, 180, 181, 182, 191, 213, 223, 228, 229, 231, 239, 245, 256, 259, 278, 298, 323, 367, 370, 372, 373, 417, 421, 431, 439, 466, 481, 482], "dictionari": [21, 23, 33, 46, 59, 65, 67, 100, 103, 107, 112, 114, 117, 146, 154, 157, 161, 162, 174, 175, 181, 188, 197, 213, 214, 227, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 278, 279, 280, 291, 292, 293, 294, 298, 299, 323, 336, 338, 348, 349, 362, 363, 367, 371, 372, 384, 395, 397, 417, 418, 419, 420, 421, 429, 431, 432, 434, 439, 442, 448, 481, 482], "pauli": [21, 114, 183, 246], "subcort": [21, 114, 139, 154, 205, 208, 217, 220, 243, 244, 246, 255], "subcortex": [21, 114, 220, 255], "fetch_atlas_pauli_2017": [21, 139, 142, 154, 217], "difumo": [21, 47, 146, 154, 183, 242], "fetch_atlas_difumo": [21, 47, 146, 154, 197], "resolution_mm": [21, 47, 242, 247], "atlas_typ": 21, "pauli2017": 21, "item": [21, 33, 64, 65, 67, 69, 70, 99, 104, 117, 152, 154, 270, 271, 272, 273, 326, 370, 379, 381], "822": [21, 27, 127, 154, 481], "342": [21, 27, 33, 41, 466, 481], "plot_surf_roi": [22, 23, 125, 126, 134, 136, 138, 142, 146, 154, 435, 479], "pial": [22, 23, 24, 37, 145, 151, 154, 200, 201, 202, 203, 204, 279, 429, 435, 436, 437, 438, 442, 444, 463, 464], "map_left": [22, 23, 195, 249, 479], "sulcal": [22, 23, 114, 195, 200, 201, 202, 203, 204, 241, 279, 429, 435, 437, 438, 442, 444], "depth": [22, 23, 24, 114, 145, 154, 195, 200, 201, 202, 203, 204, 241, 279, 429, 435, 437, 438, 442, 444, 464], "shade": [22, 435, 437, 438, 444], "pial_left": [22, 23, 67, 107, 200, 201, 202, 203, 204, 279, 429, 442, 464], "infl_left": [22, 23, 67, 107, 200, 201, 202, 203, 204, 279, 429, 442, 479], "sulc_left": [22, 23, 67, 107, 200, 201, 202, 203, 204, 279, 429, 442], "gii": [22, 23, 364, 365, 435, 436, 437, 438, 444, 462, 463, 464], "roi_map": [22, 23, 126, 154, 436, 437], "dark": [22, 23, 125, 154, 169, 177, 435, 437, 438, 442, 444], "400x500": [22, 23], "posterior": [22, 23, 55, 58, 61, 90, 102, 136, 154, 170, 253, 255, 435, 437, 438], "explicitli": [22, 65, 106, 126, 139, 151, 154, 161, 169, 270, 363, 365, 446], "angl": [22, 24, 83, 124, 154, 174, 299, 435, 437, 438], "elev": [22, 435, 437, 438], "azim": [22, 435, 437, 438], "appropri": [22, 99, 110, 114, 126, 152, 154, 169, 181, 191, 207, 237, 256, 260, 285, 323, 325, 330, 363, 427, 449], "ot": [22, 166], "convent": [22, 71, 123, 125, 151, 154, 169, 177, 289, 359, 361, 362, 419, 424, 426, 434, 445, 447], "vertic": [22, 37, 41, 65, 71, 79, 125, 134, 154, 155, 174, 265, 300, 305, 306, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 435, 436, 437, 438, 444], "vert": 22, "map_": 22, "rr": 22, "load_surf_mesh": [22, 37, 134, 151, 154, 479], "pial_": [22, 37], "unknown": [22, 56, 90, 161, 188, 190, 191, 195, 199, 200, 201, 202, 203, 204, 206, 207, 210, 211, 212, 215, 218, 220, 221, 223, 224, 225, 237, 238, 251], "str": [22, 62, 76, 78, 99, 110, 148, 152, 154, 169, 188, 227, 228, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 274, 275, 276, 277, 278, 279, 280, 281, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 323, 325, 326, 330, 336, 337, 338, 340, 341, 352, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 454, 456, 460, 462, 463, 464], "omit": 22, "append": [22, 33, 34, 40, 41, 44, 50, 51, 53, 69, 71, 99, 102, 106, 107, 159], "synthet": [22, 57, 83, 169], "n_parcel": [22, 49, 446], "corr": [22, 428], "n_parcels_hemi": 22, "plot_connectom": [22, 47, 50, 51, 52, 53, 54, 58, 119, 121, 123, 131, 132, 137, 140, 142, 151, 154, 156, 159, 440, 443, 479], "edge_threshold": [22, 47, 50, 53, 54, 58, 140, 142, 154, 159, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 440, 479], "gist_ncar": [22, 110, 138, 154, 420, 433, 437, 479], "view_connectom": [22, 52, 54, 58, 139, 140, 142, 147, 154, 441, 443, 479], "christoph": [22, 23, 114, 136, 139, 154, 195, 241, 249], "bruce": [22, 23, 114, 195, 200, 201, 202, 203, 204, 205, 219, 225, 241, 247, 249, 251, 279], "fischl": [22, 23, 114, 195, 200, 201, 202, 203, 204, 205, 219, 225, 241, 247, 249, 251, 279], "ander": [22, 23, 114, 195, 200, 201, 202, 203, 204, 205, 241, 249, 279], "dale": [22, 23, 114, 195, 200, 201, 202, 203, 204, 205, 241, 249, 279], "halgren": [22, 23, 114, 195, 241, 249], "gyri": [22, 23, 114, 195, 249], "sulci": [22, 23, 114, 195, 249], "nomenclatur": [22, 23, 114, 195, 249], "53": [22, 23, 33, 61, 90, 92, 114, 195, 238, 239, 249, 465, 466], "2010": [22, 23, 37, 48, 58, 114, 134, 154, 155, 160, 162, 183, 191, 195, 207, 227, 228, 239, 249, 253, 260, 285, 298], "sciencedirect": [22, 23, 37, 40, 41, 49, 51, 56, 98, 101, 114, 155, 156, 163, 166, 167, 188, 191, 193, 195, 207, 211, 212, 213, 220, 237, 239, 245, 249, 255, 260, 265, 268, 269, 285, 293, 294, 364, 365, 384, 420, 461], "articl": [22, 23, 37, 40, 41, 49, 51, 56, 69, 70, 98, 101, 114, 155, 156, 158, 163, 166, 167, 168, 176, 186, 187, 188, 190, 191, 193, 195, 199, 207, 211, 212, 213, 214, 215, 216, 219, 220, 221, 235, 237, 238, 239, 241, 245, 247, 248, 249, 255, 260, 265, 267, 268, 269, 270, 272, 274, 280, 285, 293, 294, 364, 365, 384, 420, 461], "pii": [22, 23, 37, 40, 41, 49, 51, 56, 98, 101, 114, 155, 156, 163, 166, 167, 188, 191, 193, 195, 205, 207, 211, 212, 213, 220, 237, 239, 245, 249, 255, 260, 265, 268, 269, 285, 293, 294, 364, 365, 384, 420, 461], "s1053811910008542": [22, 23, 114, 195, 249], "1016": [22, 23, 37, 40, 41, 48, 49, 51, 56, 58, 75, 98, 101, 114, 155, 156, 160, 162, 163, 166, 167, 174, 191, 193, 195, 197, 205, 207, 211, 212, 213, 218, 220, 239, 241, 242, 245, 249, 254, 255, 260, 265, 268, 269, 285, 293, 294, 298, 315, 316, 318, 338, 364, 365, 384, 420, 461], "j": [22, 23, 37, 40, 41, 47, 48, 49, 51, 56, 58, 66, 69, 75, 83, 98, 99, 101, 114, 117, 136, 139, 148, 154, 155, 156, 160, 162, 163, 166, 167, 174, 187, 188, 191, 193, 195, 197, 205, 207, 211, 212, 213, 214, 217, 218, 219, 220, 224, 239, 241, 242, 245, 246, 247, 249, 250, 254, 255, 257, 260, 265, 267, 268, 269, 270, 272, 275, 285, 293, 294, 298, 318, 338, 341, 364, 365, 384, 420, 460, 461, 479], "010": [22, 23, 41, 48, 114, 160, 195, 249, 298], "plot_surf_atla": [22, 27, 481], "subset": [23, 36, 44, 93, 162, 166, 169, 191, 290, 313, 326, 348, 364], "enhanc": [23, 65, 66, 70, 114, 174, 177, 183, 280, 308, 311, 338, 384], "nki": [23, 110, 114, 134, 154, 183, 280, 308], "rockland": [23, 114, 215, 280], "fcon_1000": [23, 189, 215, 236, 280], "nitrc": [23, 189, 194, 215, 236, 240, 248, 280], "indi": [23, 189, 215, 236, 280], "nooner": [23, 114, 215, 280], "645m": [23, 215], "102": [23, 27, 33, 40, 41, 114, 215, 280, 365, 465, 466], "fliem": [23, 215], "nki_nilearn": [23, 215], "cingul": [23, 55, 58, 61, 90, 170], "pearson": [23, 114, 310, 314, 428], "product": [23, 55, 78, 168], "moment": [23, 116], "correl": [23, 26, 42, 43, 46, 47, 52, 59, 61, 69, 98, 99, 110, 112, 114, 159, 161, 168, 171, 174, 181, 187, 191, 206, 212, 227, 230, 232, 234, 256, 267, 298, 364, 365, 367, 373, 374, 397, 428, 434, 479, 481], "nki_dataset": 23, "fetch_surf_nki_enhanc": [23, 134, 142, 154, 215], "fsaverag5": 23, "func_left": [23, 215, 280], "flatten": [23, 24, 40, 41, 68, 114, 195, 227, 233, 234], "flat_left": [23, 200, 201, 202, 203, 204, 279], "curv_left": [23, 200, 201, 202, 203, 204, 279], "nki_enhanced_surfac": 23, "a00028185": 23, "a00028185_left_preprocessed_fwhm6": 23, "timeseri": [23, 26, 48, 50, 58, 88, 103, 133, 146, 154, 155, 159, 187, 189, 197, 242, 267, 341, 365, 368, 369, 370, 371, 372, 373, 374, 460, 461], "pcc_region": 23, "g_cingul": 23, "post": [23, 51, 65, 93, 114, 127, 154, 155, 169, 180, 208, 227, 261, 448], "dorsal": [23, 435, 437, 438], "pcc_label": 23, "seed_timeseri": 23, "scipi": [23, 44, 56, 62, 66, 75, 78, 93, 100, 102, 106, 107, 121, 123, 126, 132, 136, 137, 139, 142, 147, 149, 151, 154, 168, 180, 261, 283, 286, 350, 360, 376, 377, 378, 380, 381, 431, 459], "stat_map": [23, 339, 429, 437, 438], "pearsonr": 23, "wall": [23, 168], "constantinputwarn": 23, "constant": [23, 65, 110, 168, 180, 291, 292, 293, 294, 296, 297, 338, 384, 459, 479], "pcc_map": 23, "flat": [23, 41, 124, 154, 180, 200, 201, 202, 203, 204, 279], "mesh": [23, 37, 67, 107, 110, 124, 134, 139, 142, 147, 151, 154, 170, 174, 175, 200, 201, 202, 203, 204, 279, 300, 301, 303, 304, 305, 306, 309, 429, 435, 436, 437, 438, 442, 444, 462, 463, 464, 482], "yield": [23, 31, 39, 49, 76, 78, 83, 117, 142, 145, 149, 154, 160, 161, 162, 163, 166, 167, 170, 171, 186, 270, 295, 299, 319, 323, 325, 330, 339, 360, 445], "75": [23, 33, 40, 65, 71, 90, 101, 110, 114, 190, 238, 384, 465, 466], "nicer": 23, "bg_map_resc": 23, "unthreshold": [23, 80, 114, 117, 174, 190, 214, 238, 270, 272], "slightli": [23, 48, 49, 65, 83, 115, 136, 154, 162, 227, 229, 356, 357], "captur": [23, 51, 58, 65, 102, 156, 157, 158, 161, 193, 227, 265], "half": [23, 49, 65, 93, 142, 154, 168, 174, 181, 291, 292, 293, 294, 298, 299, 323, 336, 338, 358, 368, 369, 370, 371, 372, 373, 374, 375, 435, 437, 438, 442, 444, 446, 448, 450], "after": [23, 28, 32, 34, 40, 45, 50, 56, 65, 76, 93, 97, 99, 104, 112, 126, 150, 154, 158, 159, 161, 166, 168, 169, 171, 174, 177, 180, 181, 191, 231, 259, 291, 292, 293, 294, 298, 323, 331, 332, 336, 341, 345, 348, 353, 364, 365, 372, 373, 449, 451, 452, 456, 457, 458, 481], "kate": [23, 114, 215, 221, 248, 280], "stanlei": [23, 114, 215, 280], "colcomb": [23, 114, 215, 280], "russel": [23, 56, 99, 114, 117, 161, 176, 211, 214, 215, 268, 270, 272, 280, 315, 316, 364, 365], "tobe": [23, 114, 215, 280], "maarten": [23, 114, 215, 280, 364, 365], "menn": [23, 114, 215, 280, 364, 365], "melissa": [23, 114, 215, 280], "benedict": [23, 114, 215, 280], "moreno": [23, 114, 193, 215, 265, 280], "laura": [23, 114, 215, 280], "panek": [23, 114, 215, 280], "shaquanna": [23, 114, 215, 280], "brown": [23, 114, 215, 280], "stephen": [23, 101, 114, 155, 168, 174, 187, 205, 215, 221, 248, 267, 280, 338, 384], "zavitz": [23, 114, 215, 280], "qingyang": [23, 114, 215, 280], "li": [23, 88, 114, 215, 280], "sharad": [23, 114, 215, 280], "sikka": [23, 114, 215, 280], "gutman": [23, 114, 215, 280], "saroja": [23, 114, 215, 280], "bangaru": [23, 114, 215, 280], "rochel": [23, 114, 215, 280], "tziona": [23, 114, 215, 280], "schlachter": [23, 114, 215, 280], "stephani": [23, 114, 215, 280], "kamiel": [23, 114, 215, 280], "ayesha": [23, 114, 215, 280], "anwar": [23, 114, 215, 280], "caitlin": [23, 114, 215, 280], "hinz": [23, 114, 215, 280], "kaplan": [23, 114, 215, 280], "anna": [23, 114, 215, 280], "rachlin": [23, 114, 215, 280], "samantha": [23, 114, 215, 280], "adelsberg": [23, 114, 215, 280], "brian": [23, 114, 167, 205, 215, 280, 341, 460], "cheung": [23, 114, 215, 280], "ranjit": [23, 114, 215, 280], "khanuja": [23, 114, 215, 280], "chaogan": [23, 114, 215, 280], "yan": [23, 114, 215, 280], "cameron": [23, 56, 114, 155, 156, 194, 213, 215, 240, 245, 280], "craddock": [23, 56, 114, 151, 154, 155, 156, 183, 213, 215, 235, 240, 245, 280], "calhoun": [23, 114, 190, 215, 238, 280], "william": [23, 114, 187, 190, 215, 238, 267, 280, 310, 314], "courtnei": [23, 114, 215, 280], "margaret": [23, 114, 215, 280], "dylan": [23, 37, 114, 166, 215, 280], "wood": [23, 114, 215, 280], "christin": [23, 49, 114, 215, 280], "cox": [23, 114, 215, 280], "clare": [23, 114, 187, 215, 221, 248, 267, 280], "kelli": [23, 58, 114, 191, 198, 207, 215, 218, 253, 254, 260, 280, 285, 364, 365], "adriana": [23, 114, 215, 280], "dimartino": [23, 114, 215, 280], "eva": [23, 114, 215, 280], "petkova": [23, 114, 215, 280], "philip": [23, 114, 215, 280], "reiss": [23, 114, 215, 280], "nanci": [23, 114, 215, 280], "duan": [23, 114, 215, 280], "dawn": [23, 114, 215, 280], "thompsen": [23, 114, 215, 280], "bharat": [23, 114, 215, 280], "biswal": [23, 114, 215, 280], "barbara": [23, 114, 215, 280], "coffei": [23, 114, 215, 280], "matthew": [23, 101, 114, 155, 187, 215, 267, 280, 384], "hoptman": [23, 114, 215, 280], "javitt": [23, 114, 215, 280], "nunzio": [23, 114, 215, 280], "pomara": [23, 114, 215, 280], "sidti": [23, 114, 215, 280], "harold": [23, 114, 215, 280], "koplewicz": [23, 114, 215, 280], "francisco": [23, 114, 215, 280], "castellano": [23, 114, 215, 280], "bennett": [23, 114, 215, 280], "leventh": [23, 114, 215, 280], "milham": [23, 51, 98, 114, 189, 215, 280], "acceler": [23, 114, 215, 280], "pace": [23, 114, 215, 280], "psychiatri": [23, 114, 205, 215, 280], "frontier": [23, 49, 114, 158, 186, 190, 197, 214, 215, 235, 238, 270, 272, 280], "152": [23, 33, 41, 75, 81, 114, 174, 183, 191, 215, 280, 465, 466, 481], "2012": [23, 49, 99, 114, 151, 154, 156, 161, 167, 168, 176, 183, 191, 211, 215, 240, 268, 280, 364, 365, 466], "frontiersin": [23, 49, 114, 158, 186, 190, 214, 215, 235, 238, 270, 272, 280], "3389": [23, 49, 114, 117, 158, 186, 190, 214, 215, 235, 238, 270, 272, 280], "fnin": [23, 49, 114, 158, 215, 280], "00152": [23, 114, 215, 280], "sereno": [23, 114, 195, 200, 201, 202, 203, 204, 279], "segment": [23, 56, 114, 159, 174, 191, 195, 205, 207, 213, 245, 251, 260, 274, 364, 448, 450, 464], "reconstruct": [23, 28, 40, 45, 112, 114, 181, 195, 212, 227, 234, 269, 298, 299, 367, 370, 373, 439, 454, 455, 481], "179": [23, 33, 41, 114, 161, 195, 465, 466], "194": [23, 33, 41, 114, 195, 465, 466], "1999": [23, 114, 195, 200, 201, 202, 203, 204, 207, 260, 279, 466], "s1053811998903950": [23, 114, 195], "1006": [23, 114, 188, 195, 237], "nimg": [23, 114, 188, 195, 237], "1998": [23, 114, 188, 195, 237], "0395": [23, 114, 195], "ii": [23, 114, 193, 195, 265, 365], "195": [23, 33, 41, 71, 114, 195, 465, 466], "207": [23, 33, 41, 71, 114, 195, 465, 466], "s1053811998903962": [23, 114, 195], "0396": [23, 114, 195], "667": [23, 27, 33, 481], "271": [23, 33, 41, 466], "measur": [24, 29, 34, 48, 49, 51, 58, 65, 76, 98, 99, 104, 114, 135, 145, 154, 155, 156, 158, 159, 165, 166, 168, 171, 174, 176, 181, 187, 189, 235, 267, 365, 428, 430, 445, 464, 479, 482], "toi": [24, 103], "drawn": [24, 65, 93, 323, 336, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 424, 427, 432, 433, 434, 441, 458, 464], "spread": [24, 97, 164, 375], "nest": [24, 29, 42, 145, 154, 164, 227, 228, 229, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448, 464], "along": [24, 25, 65, 83, 85, 99, 124, 142, 147, 154, 160, 167, 169, 174, 180, 181, 296, 297, 323, 331, 356, 358, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 385, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 399, 400, 401, 403, 405, 407, 409, 411, 414, 415, 419, 424, 427, 428, 432, 433, 434, 448, 449, 460, 464, 479], "ball": [24, 122, 154, 166, 168, 174, 295, 464], "too": [24, 34, 38, 40, 42, 52, 54, 56, 69, 85, 117, 162, 168, 270, 272, 374, 479], "almost": [24, 39, 49, 103, 168, 181], "ident": [24, 67, 79, 168, 191, 341, 358, 450, 460], "most": [24, 33, 40, 42, 43, 49, 61, 74, 93, 99, 125, 136, 139, 154, 161, 162, 163, 164, 166, 168, 169, 171, 177, 180, 181, 187, 194, 208, 323, 325, 330, 427, 435, 437, 438, 444, 446, 448, 450, 479], "recommend": [24, 88, 91, 99, 102, 123, 140, 141, 142, 147, 149, 151, 154, 161, 166, 171, 176, 179, 181, 364, 448, 460, 464, 466, 480], "n_z": 24, "n_t": 24, "mgrid": [24, 83], "triangul": 24, "tri": [24, 51, 162, 270, 419, 431, 445], "pi": [24, 83, 310, 314], "sin": [24, 83], "asarrai": [24, 41, 51, 102, 312, 317], "triangl": [24, 174, 302, 464], "inner_mesh": [24, 464], "nested_sample_point": 24, "_sample_locations_between_surfac": 24, "ey": [24, 41, 44, 64, 65, 67, 69, 70, 79, 83, 88, 114, 169, 176, 207, 260], "line_sample_point": 24, "_line_sample_loc": 24, "segment_half_width": 24, "n_point": 24, "ball_sample_point": 24, "_ball_sample_loc": 24, "ball_radiu": 24, "view_init": 24, "67": [24, 33, 121, 154, 238, 465, 466], "plot_trisurf": 24, "scatter": [24, 93, 151, 154, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 430], "sample_point": 24, "386": [24, 27, 33, 70, 466, 481], "plot_surface_projection_strategi": [24, 27, 481], "mean_haxbi": [25, 180], "0x7f18d6669b80": 25, "0x7f18d6c90920": 25, "apply_mask": [25, 180, 370, 373], "masked_data": [25, 98, 110, 180], "timepoint": [25, 180, 326], "150": [25, 33, 41, 114, 180, 420, 465, 466], "And": [25, 41, 155, 170, 177, 180], "ylabel": [25, 30, 32, 42, 48, 49, 55, 57, 58, 64, 65, 180], "intens": [25, 50, 68, 80, 87, 93, 179, 180, 298, 340, 360, 364, 419, 420, 426, 432, 433, 434, 441, 448, 464, 479], "xlim": [25, 30, 180], "95": [25, 30, 33, 90, 92, 148, 154, 180, 191, 313, 315, 316, 465, 466], "978": [25, 27, 114, 315, 316, 481], "1348": [25, 27, 481], "plot_visu": [25, 27, 481], "releas": [26, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 187, 191, 194, 239, 247, 260, 261, 267, 280, 341], "fetch_megatrawls_netmat": [26, 187], "partial": [26, 48, 52, 98, 155, 159, 187, 227, 232, 267, 365], "300": [26, 33, 41, 55, 61, 68, 99, 187, 220, 247, 255, 267, 466], "eigen": [26, 187, 267], "regress": [26, 30, 31, 39, 40, 44, 55, 56, 114, 116, 125, 129, 139, 145, 146, 147, 151, 154, 156, 161, 165, 166, 167, 169, 170, 171, 174, 187, 191, 235, 291, 292, 293, 294, 297, 299, 310, 315, 316, 323, 336, 364, 365, 368, 369, 370, 371, 372, 373, 374, 460, 482], "netmat": [26, 129, 154], "eigen_regress": [26, 267], "partial_correl": [26, 58, 232, 267], "correlation_matric": [26, 47, 51, 187, 267], "util": [26, 43, 44, 48, 50, 86, 87, 101, 104, 105, 126, 127, 134, 138, 145, 149, 154, 159, 169, 227, 228, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 274, 275, 276, 277, 278, 279, 280, 281, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 361, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448, 474], "plot_matrix": [26, 31, 35, 50, 51, 52, 53, 54, 56, 57, 58, 110, 136, 137, 142, 154, 159], "548": [26, 27, 33, 481], "plot_visualize_megatrawls_netmat": [26, 27, 481], "435": [27, 33, 481], "305": [27, 33, 41, 466, 481], "915": [27, 34, 40, 41, 45, 114, 212, 269, 481], "270": [27, 33, 41, 435, 437, 438, 466, 481], "943": [27, 481], "07": [27, 30, 32, 33, 37, 45, 49, 59, 69, 70, 75, 90, 108, 114, 162, 191, 207, 219, 247, 260, 285, 318, 447, 453, 465, 481], "mvpa": [28, 112, 174, 176, 212, 482], "stimuli": [28, 30, 32, 33, 45, 65, 79, 97, 112, 155, 156, 158, 159, 161, 171, 176, 179, 181, 196, 206, 259, 269, 343, 360, 367, 370, 373, 412, 434, 439, 466, 481], "jimura": [28, 45, 112, 114, 211, 268, 294, 297, 434, 481], "mix": [28, 44, 45, 112, 165, 167, 183, 235, 268, 294, 296, 297, 434, 481, 482], "gambl": [28, 45, 112, 165, 167, 183, 268, 294, 297, 434, 481, 482], "morphometri": [28, 45, 73, 81, 112, 161, 172, 174, 175, 176, 183, 260, 261, 274, 292, 297, 336, 339, 346, 357, 367, 373, 384, 412, 423, 434, 439, 456, 458, 465, 481, 482], "oasi": [28, 45, 73, 81, 112, 114, 167, 173, 175, 183, 260, 261, 274, 292, 297, 336, 339, 346, 357, 367, 373, 384, 412, 423, 434, 439, 456, 458, 465, 481], "net": [28, 44, 45, 112, 167, 274, 291, 292, 296, 297, 434, 439, 481], "prior": [28, 45, 48, 54, 58, 65, 90, 112, 114, 147, 154, 155, 167, 170, 226, 228, 247, 274, 291, 292, 296, 297, 323, 336, 369, 371, 372, 374, 420, 434, 439, 466, 481], "searchlight": [28, 44, 45, 112, 114, 133, 136, 139, 145, 154, 161, 165, 174, 175, 176, 259, 279, 346, 348, 351, 353, 354, 367, 373, 427, 434, 438, 439, 463, 464, 481, 482], "chair": [28, 30, 32, 33, 45, 112, 124, 154, 179, 259, 293, 348, 353, 431, 434, 439, 481], "svm": [28, 34, 35, 39, 42, 44, 45, 51, 98, 112, 116, 134, 154, 163, 165, 167, 174, 181, 259, 291, 348, 434, 439, 441, 481, 482], "cross": [28, 32, 33, 36, 37, 40, 42, 44, 45, 51, 55, 96, 98, 108, 112, 114, 117, 124, 125, 145, 154, 155, 162, 165, 216, 229, 259, 270, 274, 282, 291, 292, 293, 294, 295, 296, 297, 348, 358, 367, 373, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 424, 427, 432, 433, 434, 439, 441, 479, 481, 482], "simul": [28, 45, 46, 59, 63, 66, 99, 112, 157, 166, 229, 295, 383, 431, 439, 481, 482], "encod": [28, 41, 45, 69, 74, 83, 112, 114, 162, 163, 181, 269, 293, 294, 343, 360, 367, 370, 373, 412, 434, 466, 481], "miyawaki": [28, 45, 112, 114, 181, 183, 269, 343, 360, 367, 370, 373, 412, 434, 439, 466, 481], "2008": [28, 45, 112, 114, 155, 174, 181, 183, 269, 338, 343, 360, 367, 370, 373, 384, 412, 434, 439, 466, 481], "effici": [29, 65, 114, 125, 154, 160, 162, 168, 169, 228, 231, 270, 293, 294], "featur": [29, 32, 33, 34, 35, 42, 44, 49, 51, 65, 93, 98, 102, 103, 109, 110, 112, 114, 116, 137, 139, 140, 145, 149, 162, 163, 164, 165, 166, 167, 168, 169, 176, 177, 181, 226, 228, 229, 231, 291, 292, 293, 294, 295, 296, 297, 298, 311, 383, 445, 447, 448, 450, 460, 461, 476, 477, 480, 482], "func_img": [29, 161], "restrict": [29, 30, 31, 88, 90, 93, 101, 139, 154, 161, 166, 181, 187, 235, 290], "place": [29, 97, 136, 154, 270, 332, 360, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 420, 427, 464], "uniqu": [29, 30, 31, 32, 33, 35, 49, 51, 58, 64, 85, 93, 99, 101, 134, 154, 155, 163, 179, 237, 243, 244, 330, 368, 371, 448, 449, 450], "aim": [29, 34, 129, 154, 161, 169, 174, 216, 296, 297], "act": [29, 34, 114, 135, 154, 174, 233, 234, 315, 316, 386], "sever": [29, 31, 34, 49, 51, 61, 62, 65, 70, 74, 85, 93, 98, 102, 116, 124, 133, 139, 154, 155, 163, 165, 166, 168, 169, 171, 174, 177, 179, 180, 181, 194, 208, 220, 229, 309, 323, 341, 352, 369, 379, 381, 382, 432, 446, 460, 466, 482], "niftimask": [29, 32, 34, 35, 36, 40, 41, 42, 43, 47, 51, 52, 53, 54, 55, 56, 58, 61, 68, 82, 90, 93, 95, 97, 98, 99, 101, 102, 103, 104, 105, 110, 112, 116, 124, 139, 142, 145, 146, 147, 148, 149, 154, 161, 164, 178, 256, 269, 291, 292, 293, 294, 296, 297, 298, 299, 320, 323, 336, 338, 348, 353, 364, 365, 367, 368, 369, 371, 372, 374, 378, 384, 424, 428, 433, 434, 439, 446, 456, 466, 471, 481, 482], "relev": [29, 34, 49, 56, 65, 67, 103, 117, 147, 151, 154, 161, 162, 168, 169, 177, 180, 181, 227, 228, 229, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 338, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 384, 445, 446, 447, 448], "classic": [29, 34, 93, 162, 179, 206], "univari": [29, 33, 34, 96, 108, 112, 114, 163, 165, 167, 259, 264, 265, 291, 292, 293, 294, 296, 297, 346, 348, 353, 367, 373, 384, 412, 426, 434, 439, 481, 482], "vector": [29, 32, 33, 34, 35, 40, 44, 51, 70, 83, 97, 98, 101, 104, 105, 116, 135, 154, 161, 162, 164, 174, 227, 291, 292, 293, 294, 310, 313, 314, 315, 316, 319, 321, 430, 464], "screening_percentil": [29, 32, 33, 34, 42, 43, 110, 161, 291, 292, 293, 294, 296, 297], "percent": [29, 34, 41, 42, 43, 142, 154, 161, 331, 340, 360, 368, 369, 370, 371, 372, 373, 374, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 432, 440, 442, 444, 460], "smoothing_fwhm": [29, 33, 34, 35, 42, 49, 50, 52, 53, 54, 55, 56, 58, 62, 65, 70, 74, 75, 76, 78, 88, 90, 91, 97, 99, 100, 101, 103, 104, 105, 135, 154, 159, 161, 181, 291, 292, 293, 294, 298, 299, 323, 326, 336, 338, 368, 369, 370, 371, 372, 373, 374, 375, 446, 448, 450, 465, 466], "accuraci": [29, 30, 31, 32, 33, 35, 37, 41, 51, 97, 98, 146, 154, 165, 166, 174, 176, 291, 293, 295, 296, 482], "y_pred": [29, 31, 34, 41, 43, 161, 291, 292, 293, 294, 296, 297], "out": [29, 33, 34, 36, 40, 42, 43, 44, 48, 51, 53, 54, 55, 56, 57, 58, 67, 70, 99, 101, 104, 105, 116, 117, 126, 139, 142, 146, 154, 156, 161, 162, 164, 166, 168, 169, 170, 174, 180, 191, 214, 260, 291, 292, 293, 294, 296, 297, 348, 356, 368, 369, 370, 371, 372, 373, 374, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 429, 446, 448, 449, 459, 460, 464, 479], "session": [29, 116, 147, 149, 154, 161, 176, 206, 299, 326, 341, 361, 480], "9444444444444444": 29, "weight_img": [29, 42, 97, 161, 181], "Or": [29, 117, 161, 246, 247, 479], "dynam": [29, 114, 161, 365], "viewer": [29, 139, 154, 161, 180, 441, 479], "plot_haxby_anova_svm": [29, 45, 134, 154, 481], "haxby_face_vs_hous": 29, "02_decod": [29, 36, 41, 43, 45, 481], "449": [29, 33, 45, 481], "fetcher": [30, 32, 125, 126, 129, 130, 131, 134, 139, 142, 143, 146, 148, 149, 150, 151, 154, 170, 235, 241, 242, 252, 253, 254, 255, 256, 263, 264, 265, 274, 278], "get_data": [30, 36, 42, 49, 76, 78, 83, 93, 101, 104, 105, 106, 134, 142, 154, 179, 351], "abl": [30, 32, 169, 177, 361, 435, 437, 438, 479], "resting_st": 30, "task_mask": [30, 32], "logical_not": [30, 36, 76, 104], "remain": [30, 32, 40, 56, 88, 99, 126, 145, 154, 166, 169, 464], "categori": [30, 32, 33, 97, 101, 116, 161, 163, 169, 179, 259], "tag": [30, 32, 67, 107, 117, 169, 177, 361, 362], "classification_target": [30, 32], "svc_l2": [30, 162, 291, 293], "svc_l1": [30, 32, 162, 291, 293], "logistic_l1": [30, 162, 291, 293], "logistic_l2": [30, 162, 291, 293], "ridge_classifi": [30, 162, 291, 293], "predict": [30, 31, 33, 39, 40, 44, 51, 58, 60, 72, 96, 108, 114, 116, 146, 147, 149, 154, 163, 164, 166, 167, 169, 171, 172, 174, 175, 176, 187, 196, 198, 227, 245, 253, 256, 267, 277, 291, 292, 293, 294, 295, 296, 297, 315, 316, 323, 336, 341, 342, 353, 358, 367, 372, 374, 378, 412, 434, 457, 480, 481, 482], "score": [30, 32, 37, 41, 42, 44, 48, 51, 79, 97, 98, 101, 102, 104, 105, 106, 110, 145, 146, 152, 154, 161, 162, 164, 165, 167, 176, 229, 274, 291, 292, 293, 294, 295, 296, 297, 298, 299, 311, 336, 340, 360, 364, 368, 369, 370, 371, 372, 373, 374, 384, 420, 446, 448, 460, 482], "classifiers_data": 30, "classifier_nam": 30, "roc_auc": [30, 32, 97, 164, 291, 293], "t0": [30, 41], "2f": [30, 32, 41, 42, 43, 44, 49, 57, 88], "std": [30, 32, 44, 51, 88, 103, 368, 369, 370, 371, 372, 373, 374, 460], "auc": [30, 32, 161, 174], "______________________________________________________________________": 30, "89": [30, 32, 33, 71, 76, 104, 465, 466], "46": [30, 33, 44, 58, 62, 90, 92, 106, 118, 154, 181, 238, 240, 465, 466, 479], "scissor": [30, 32, 33, 179], "37": [30, 32, 33, 41, 45, 65, 72, 80, 90, 93, 114, 121, 154, 364, 365, 461, 465, 466, 481], "cat": [30, 32, 33, 97, 116, 161, 175, 179], "shoe": [30, 32, 33, 34, 179], "scrambledpix": [30, 32, 33, 93, 179], "98": [30, 32, 33, 74, 86, 90, 92, 114, 148, 154, 174, 338, 384, 465, 466], "bottl": [30, 32, 33, 34, 179], "230": [30, 33, 41, 71, 465, 466], "52": [30, 33, 42, 45, 55, 58, 62, 78, 81, 90, 181, 239, 465, 466, 479, 481], "08": [30, 32, 33, 49, 70, 81, 95, 114, 155, 187, 191, 267, 345, 364, 420, 465, 466, 481], "97": [30, 33, 44, 87, 465, 466], "82": [30, 32, 33, 88, 465, 466], "87": [30, 32, 33, 71, 90, 114, 465, 466], "94": [30, 33, 76, 90, 104, 105, 264, 265, 465, 466], "09": [30, 32, 33, 58, 114, 193, 195, 207, 216, 218, 241, 254, 260, 265, 274, 285, 323, 336, 341, 458, 460, 465, 466], "92": [30, 32, 33, 76, 101, 114, 384, 465, 466], "61": [30, 33, 36, 66, 114, 205, 465, 466, 481], "rudimentari": 30, "diagram": [30, 171], "all_categori": 30, "hstack": [30, 76, 79, 313, 315, 316], "tick_posit": [30, 32], "ytick": [30, 44, 48, 51, 98], "height": [30, 33, 51, 98, 142, 154, 323, 336, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 424, 426, 427, 430, 431, 432, 433, 434, 440, 442, 444, 456, 458, 465], "score_mean": [30, 32], "barh": [30, 48, 51, 98], "xmin": [30, 419, 420, 421, 424, 426, 427, 430, 432, 433, 434], "ncol": [30, 63, 78, 99, 100, 104], "bbox_to_anchor": 30, "tight_layout": [30, 31, 32, 48, 51, 55, 58, 68, 77, 79, 98], "penalti": [30, 34, 39, 43, 162, 167, 174, 291, 292, 293, 296, 297], "logist": [30, 31, 114, 162, 163, 167, 291, 293, 296, 297], "main": [30, 56, 65, 66, 69, 93, 119, 151, 154, 161, 166, 169, 170, 174, 177, 179, 181, 237, 323, 325, 330, 361, 379, 381, 386], "ell_1": 30, "ell_2": 30, "spars": [30, 39, 40, 46, 48, 49, 57, 58, 59, 112, 114, 156, 157, 159, 160, 162, 167, 174, 175, 182, 213, 228, 229, 231, 245, 256, 296, 297, 298, 299, 367, 372, 417, 421, 431, 435, 437, 438, 439, 440, 448, 481, 482], "intra": [30, 32], "logical_or": 30, "assert": [30, 110], "fmri_niimgs_condit": 30, "mean_epi_img": 30, "ab": [30, 43, 44, 53, 58, 80, 83, 101, 102, 103, 114, 155, 168, 194, 200, 201, 202, 203, 204, 224, 228, 231, 240, 250, 279, 341, 384, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 460], "1e": [30, 39, 40, 49, 110, 228, 229, 231, 274, 296, 297, 311, 345, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 434, 437, 441, 447, 453], "213": [30, 33, 41, 45, 465, 466, 481], "1311": [30, 45, 481], "plot_haxby_different_estim": [30, 45, 142, 154, 481], "implicit": [31, 39, 145, 154, 163, 174, 293, 294], "aggreg": [31, 39, 58, 145, 154, 163, 174, 190, 238, 293, 294], "cost": [31, 39, 53, 78, 145, 154, 158, 162, 163, 167, 168, 169, 174, 181, 293, 294], "data_fil": 31, "behavior": [31, 34, 35, 74, 76, 97, 114, 116, 124, 125, 126, 129, 136, 146, 151, 154, 161, 162, 164, 165, 169, 174, 178, 181, 186, 187, 216, 221, 227, 239, 240, 248, 267, 367, 368, 369, 370, 371, 372, 373, 374, 420, 448, 482], "condition_mask_train": 31, "condition_mask_test": 31, "x_train": [31, 41, 44], "x_test": [31, 41, 44, 291, 292, 293, 294, 295], "y_train": [31, 34, 41, 44], "y_test": [31, 34, 41, 44, 291, 292, 293, 294, 295], "background_img": [31, 43], "fremclassifi": [31, 145, 146, 154, 162, 163, 291, 294], "742": [31, 32, 33, 39], "bigger": [31, 39, 43], "7778": 31, "metric": [31, 35, 40, 41, 51, 78, 142, 154, 161, 162, 166, 174, 194, 291, 292, 293, 294], "confusion_matrix": [31, 35, 162], "hot_r": [31, 35], "set_ylabel": [31, 43, 68, 74, 77], "set_xlabel": [31, 43, 68], "adjust": [31, 65, 66, 123, 137, 154, 365, 386, 397, 400], "get_figur": 31, "coef": [31, 44, 97, 323, 332], "50": [31, 33, 49, 52, 57, 58, 62, 65, 72, 92, 97, 114, 117, 166, 168, 181, 187, 196, 205, 211, 229, 231, 267, 268, 293, 294, 311, 325, 327, 328, 329, 330, 333, 334, 335, 343, 364, 365, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 446, 448, 450, 465, 466, 479], "improv": [31, 74, 114, 123, 124, 125, 132, 135, 138, 139, 142, 149, 150, 151, 152, 154, 161, 162, 163, 167, 168, 169, 171, 174, 179, 181, 207, 220, 255, 260, 341, 368, 371, 445, 460], "mechan": [31, 161, 227, 228, 229, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448], "reason": [31, 48, 65, 91, 117, 162, 164, 166, 168, 169, 171, 177, 464], "even": [31, 42, 49, 50, 58, 64, 78, 99, 117, 125, 142, 147, 154, 168, 169, 176, 270, 272, 459], "heavier": 31, "l2": [31, 34, 162, 163, 291, 293, 445, 446, 447], "ridg": [31, 40, 44, 110, 162, 163, 167, 291, 292, 293, 294], "fremregressor": [31, 39, 145, 146, 154, 162, 163, 292, 293], "solv": [31, 39, 168, 169, 176, 177, 299, 384], "473": [31, 33, 45, 481], "plot_haxby_frem": [31, 45, 481], "older": [32, 35, 36, 40, 41, 42, 47, 48, 51, 52, 53, 54, 55, 56, 58, 61, 68, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 114, 116, 134, 135, 136, 137, 154, 169, 179, 216, 274, 343], "upgrad": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 68, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 116, 123, 134, 136, 142, 147, 149, 154], "masker": [32, 33, 35, 36, 40, 41, 42, 47, 49, 51, 52, 53, 54, 55, 56, 58, 61, 68, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 109, 111, 112, 116, 122, 123, 124, 125, 126, 127, 142, 145, 146, 147, 148, 149, 151, 152, 154, 156, 158, 161, 164, 169, 170, 178, 180, 227, 291, 292, 293, 294, 296, 297, 298, 299, 303, 304, 305, 306, 307, 308, 323, 336, 338, 364, 365, 384, 428, 431, 435, 439, 446, 448, 451, 452, 454, 455, 481, 482], "input_data": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 68, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 116, 149, 154], "That": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 68, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 116, 146, 154, 174, 310, 314, 323, 325, 330], "occurr": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 68, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 116, 166], "practic": [32, 51, 67, 98, 155, 158, 162, 164, 166, 168, 169, 170, 171, 173, 176, 179, 180], "unmask": [32, 33, 44, 115, 124, 134, 137, 154, 178, 180, 298, 299, 367, 370, 373, 482], "task_data": 32, "mask_nam": 32, "mask_scor": 32, "mask_chance_scor": 32, "760": [32, 88, 95, 481], "screen": [32, 114, 167, 209, 291, 292, 293, 294, 296, 297], "clustering_percentil": [32, 293, 294], "76": [32, 33, 65, 71, 241, 249, 465, 466], "73": [32, 33, 90, 465, 466], "71": [32, 33, 71, 465, 466], "68": [32, 33, 58, 181, 465, 466, 479], "83": [32, 33, 49, 71, 114, 118, 154, 174, 205, 338, 384, 465, 466], "86": [32, 33, 465, 466], "xtick": [32, 34, 35, 44, 93], "rgb": [32, 443], "score_ch": 32, "edgecolor": [32, 40, 125, 154, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 421, 424, 426, 427, 430, 432, 433, 434], "ylim": 32, "882": [32, 45, 481], "1345": [32, 45, 481], "plot_haxby_full_analysi": [32, 45, 142, 154, 481], "record": [33, 40, 65, 161, 171, 174], "unique_run": 33, "datafram": [33, 62, 63, 65, 70, 71, 74, 75, 76, 77, 78, 79, 80, 99, 100, 117, 125, 145, 149, 150, 154, 227, 235, 241, 242, 253, 254, 255, 263, 264, 265, 274, 298, 299, 306, 323, 324, 326, 330, 336, 337, 338, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 422, 423, 425, 445, 446, 447, 448, 457, 460], "conditions_run": 33, "frame": [33, 63, 67, 88, 181, 191, 325, 348, 364, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 456], "n_scan": [33, 61, 63, 67, 69, 107, 171, 325], "frame_tim": [33, 63, 66, 67, 69, 107, 170, 324, 325, 330], "events_": 33, "insert": [33, 246, 247, 323, 336, 440, 441, 442, 443, 444, 456, 458, 479], "togeth": [33, 48, 58, 66, 67, 68, 79, 155, 163, 164, 171, 174, 191, 253, 255, 290, 293, 294, 298, 326, 341, 448, 466], "conditions_label": 33, "008": [33, 41], "nilearn_cach": [33, 35, 36, 39, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 91, 97, 98, 99, 101, 102, 103, 104, 105, 159, 466], "grab": [33, 47, 48, 49, 64, 99, 117], "fmri_run": [33, 40], "condition_": 33, "________________________________________________________________________________": [33, 48, 49, 52, 53, 56, 58], "nifti_mask": [33, 35, 36, 42, 91, 101, 104, 105, 116, 169], "_filter_and_mask": 33, "0x7f18b8830bf0": 33, "0x7f18b88338f0": 33, "clean_kwarg": [33, 49, 52, 53, 56, 58], "detrend": [33, 40, 41, 49, 51, 52, 53, 54, 55, 56, 58, 61, 88, 90, 91, 93, 98, 99, 116, 121, 139, 147, 149, 154, 180, 181, 298, 299, 306, 341, 347, 368, 369, 370, 371, 372, 373, 374, 420, 446, 448, 460, 461, 466], "high_variance_confound": [33, 49, 52, 53, 54, 56, 58, 65, 88, 90, 91, 129, 146, 154, 181, 306, 368, 369, 370, 371, 372, 373, 374, 466], "low_pass": [33, 49, 51, 52, 53, 54, 55, 56, 58, 61, 88, 90, 91, 98, 99, 139, 154, 181, 291, 292, 293, 294, 296, 297, 298, 299, 306, 341, 368, 369, 370, 371, 372, 373, 374, 446, 448, 459, 460, 466], "standardize_confound": [33, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 88, 90, 91, 98, 149, 154, 159, 181, 298, 306, 368, 369, 370, 371, 372, 373, 374, 448, 460, 466], "target_affin": [33, 49, 52, 53, 56, 83, 88, 91, 180, 181, 291, 292, 293, 294, 296, 297, 298, 299, 323, 326, 336, 353, 356, 370, 373, 376, 378, 379, 380, 381, 446, 465, 466], "target_shap": [33, 49, 52, 53, 56, 83, 88, 91, 180, 181, 291, 292, 293, 294, 296, 297, 298, 299, 323, 326, 336, 353, 356, 370, 373, 376, 378, 379, 381, 446, 465, 466], "memory_level": [33, 35, 36, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 88, 90, 91, 97, 98, 99, 101, 102, 103, 104, 105, 159, 181, 228, 291, 292, 293, 294, 296, 297, 298, 299, 306, 323, 326, 336, 342, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 466], "verbos": [33, 35, 36, 42, 44, 48, 49, 52, 53, 54, 55, 56, 57, 58, 61, 88, 90, 91, 97, 98, 99, 101, 104, 139, 154, 181, 228, 229, 231, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 291, 292, 293, 294, 295, 296, 297, 298, 299, 318, 323, 326, 332, 336, 338, 342, 353, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 445, 446, 447, 448, 453, 466], "confound": [33, 47, 49, 50, 51, 52, 53, 54, 55, 58, 62, 76, 77, 98, 99, 100, 104, 107, 114, 116, 121, 124, 125, 126, 129, 139, 145, 146, 147, 149, 151, 154, 156, 159, 160, 161, 168, 174, 178, 180, 189, 196, 227, 236, 256, 298, 299, 306, 323, 326, 336, 337, 338, 341, 347, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 384, 446, 448, 460, 461, 470, 482], "sample_mask": [33, 49, 52, 53, 56, 58, 65, 123, 125, 147, 149, 151, 154, 306, 323, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 448, 460], "__________________________________________________filter_and_mask": 33, "0min": [33, 48, 49, 52, 53, 54, 56, 58], "run_glm": [33, 67, 107, 147, 151, 154], "114769": 33, "149296": 33, "367151": 33, "779998": 33, "bin": [33, 49, 169, 323, 332, 480], "random_st": [33, 36, 42, 43, 44, 48, 49, 50, 51, 91, 98, 102, 103, 151, 154, 159, 291, 293, 298, 299, 323, 332, 338, 384, 445, 446], "__________________________________________________________run_glm": 33, "44475": 33, "379275": 33, "___________________________________________________________unmask": 33, "013524": 33, "844135": 33, "217486": 33, "430348": 33, "106474": 33, "182434": 33, "747494": 33, "660679": 33, "080159": 33, "32614": 33, "253894": 33, "452682": 33, "240914": 33, "244136": 33, "0x7f18d26f08f0": 33, "0x7f18d69927b0": 33, "660587": 33, "536042": 33, "254408": 33, "842804": 33, "871458": 33, "990755": 33, "627194": 33, "290147": 33, "153013": 33, "320123": 33, "15748": 33, "082416": 33, "997775": 33, "754066": 33, "109412": 33, "330079": 33, "030863": 33, "731439": 33, "559734": 33, "720924": 33, "0x7f18d65f85c0": 33, "0x7f18d65f8260": 33, "205584": 33, "587189": 33, "836576": 33, "676956": 33, "695564": 33, "455092": 33, "457214": 33, "537178": 33, "803925": 33, "570463": 33, "614932": 33, "232909": 33, "527175": 33, "062723": 33, "126756": 33, "274819": 33, "635166": 33, "395548": 33, "250365": 33, "364311": 33, "0x7f18d641e750": 33, "0x7f18d641f1d0": 33, "026206": 33, "974948": 33, "616334": 33, "104535": 33, "503142": 33, "639351": 33, "271132": 33, "047089": 33, "318104": 33, "724813": 33, "073279": 33, "316956": 33, "380183": 33, "690685": 33, "631912": 33, "753286": 33, "155784": 33, "065658": 33, "186135": 33, "69267": 33, "0x7f18d7124470": 33, "033577": 33, "45955": 33, "57195": 33, "994713": 33, "158342": 33, "068131": 33, "396497": 33, "424937": 33, "091867": 33, "463109": 33, "054041": 33, "122921": 33, "025223": 33, "562991": 33, "001653": 33, "968729": 33, "274665": 33, "564329": 33, "496068": 33, "0x7f18d68e9f40": 33, "0x7f18d68eb560": 33, "150482": 33, "81308": 33, "204891": 33, "417917": 33, "987059": 33, "41717": 33, "24774": 33, "674399": 33, "731234": 33, "341998": 33, "714869": 33, "182988": 33, "222674": 33, "480354": 33, "366899": 33, "091153": 33, "2708": 33, "247146": 33, "251249": 33, "413063": 33, "0x7f18d6bab350": 33, "0x7f18d6baacf0": 33, "129": [33, 41, 70, 121, 154, 465, 466], "51173": 33, "279282": 33, "911755": 33, "839058": 33, "290412": 33, "609221": 33, "090297": 33, "822602": 33, "747918": 33, "108861": 33, "095788": 33, "376995": 33, "807425": 33, "826947": 33, "017351": 33, "622242": 33, "625042": 33, "231224": 33, "056424": 33, "672737": 33, "0x7f18d26f2e40": 33, "0x7f18d68ae420": 33, "915996": 33, "07737": 33, "981215": 33, "372383": 33, "200737": 33, "008536": 33, "066075": 33, "168487": 33, "636238": 33, "145684": 33, "932773": 33, "580823": 33, "455655": 33, "685537": 33, "715791": 33, "245273": 33, "099707": 33, "79538": 33, "913842": 33, "519925": 33, "629218": 33, "0x7f18c27c4e90": 33, "0x7f18c27c40e0": 33, "292987": 33, "392956": 33, "935719": 33, "602484": 33, "425611": 33, "348025": 33, "31867": 33, "408223": 33, "534932": 33, "150519": 33, "149007": 33, "640215": 33, "640699": 33, "50369": 33, "246384": 33, "346316": 33, "162243": 33, "519251": 33, "203695": 33, "335337": 33, "0x7f18b0f3f050": 33, "0x7f18b0f3f170": 33, "223948": 33, "959582": 33, "677519": 33, "024363": 33, "034515": 33, "612397": 33, "62798": 33, "160445": 33, "506632": 33, "459388": 33, "261016": 33, "747236": 33, "231796": 33, "098904": 33, "148582": 33, "999934": 33, "548262": 33, "09934": 33, "222824": 33, "318977": 33, "0x7f18b2b2c410": 33, "0x7f18b2b2e330": 33, "66533": 33, "299562": 33, "647343": 33, "331865": 33, "175763": 33, "429485": 33, "146358": 33, "947626": 33, "806852": 33, "720554": 33, "008926": 33, "4544": 33, "279543": 33, "828183": 33, "463642": 33, "26599": 33, "058735": 33, "191442": 33, "390268": 33, "112207": 33, "0x7f18d6c90bf0": 33, "0x7f18d6c91820": 33, "095605": 33, "449202": 33, "59974": 33, "179998": 33, "340751": 33, "056108": 33, "043261": 33, "144442": 33, "517954": 33, "611394": 33, "797134e": 33, "317655e": 33, "398581": 33, "488427": 33, "714396": 33, "869941": 33, "924894": 33, "723724": 33, "145297": 33, "821272": 33, "summari": [33, 62, 70, 90, 147, 169, 311, 466], "make_glm_report": [33, 61, 62, 74, 123, 146, 149, 154], "mean_img_": [33, 70], "drift_ord": [33, 63, 65, 170, 323, 326, 330, 465], "glover": [33, 63, 65, 66, 67, 107, 170, 323, 325, 326, 327, 328, 329, 330, 465], "scaling_axi": [33, 99, 149, 154, 323, 465], "signal_sc": [33, 68, 99, 149, 154, 323, 326, 465], "slice_time_ref": [33, 61, 65, 67, 69, 124, 125, 154, 323, 326, 465], "subject_label": [33, 62, 77, 100, 323, 336, 337, 338, 465], "\u03b1": [33, 465], "minimum": [33, 76, 78, 88, 121, 123, 126, 127, 132, 134, 135, 136, 139, 142, 145, 147, 149, 154, 159, 191, 323, 336, 340, 360, 368, 371, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 415, 421, 441, 448, 449, 450, 451, 457, 458, 465], "distanc": [33, 296, 297, 323, 336, 415, 457, 458, 464, 465], "88": [33, 80, 88, 90, 101, 114, 384, 465, 466], "147": [33, 41, 465, 466], "62": [33, 62, 71, 99, 106, 114, 136, 154, 244, 465, 466], "38": [33, 62, 76, 90, 110, 139, 154, 465, 466], "393": [33, 95, 466, 481], "196": [33, 41, 465, 466], "43": [33, 90, 101, 114, 127, 154, 240, 384, 465, 466], "2264": [33, 93, 466], "31": [33, 35, 40, 45, 69, 72, 90, 114, 167, 205, 221, 248, 465, 466, 481], "77": [33, 65, 71, 465, 466], "246": [33, 41, 71, 465, 466], "541": 33, "344": [33, 41, 466], "12a": 33, "58": [33, 90, 139, 154, 465, 466], "81": [33, 119, 154, 465, 466], "1132": 33, "639": 33, "984": 33, "16a": 33, "47": [33, 90, 97, 114, 195, 207, 235, 240, 241, 260, 285, 465, 466], "49": [33, 70, 72, 85, 90, 114, 139, 154, 465, 466, 481], "787": 33, "23a": 33, "65": [33, 43, 90, 127, 154, 465, 466], "27a": 33, "44": [33, 71, 90, 99, 108, 114, 121, 154, 174, 338, 384, 465, 466, 481], "295": [33, 41, 114, 224, 250, 466], "590": 33, "31a": 33, "31b": 33, "32": [33, 34, 40, 58, 65, 83, 90, 181, 327, 328, 329, 333, 334, 335, 465, 466, 479], "41a": 33, "2214": [33, 142, 154], "42a": 33, "42b": 33, "442": 33, "43a": 33, "56": [33, 37, 71, 100, 108, 114, 162, 240, 465, 466, 481], "58a": 33, "64a": 33, "67a": 33, "72": [33, 43, 56, 58, 62, 90, 92, 114, 148, 154, 167, 218, 254, 465, 466], "80": [33, 43, 47, 54, 56, 64, 65, 71, 83, 102, 114, 155, 156, 169, 210, 213, 245, 340, 360, 395, 400, 402, 406, 412, 418, 464, 465, 466], "79": [33, 49, 65, 71, 90, 465, 466], "78": [33, 49, 52, 53, 65, 71, 92, 114, 166, 465, 466], "85": [33, 47, 90, 127, 154, 378, 379, 381, 465, 466], "96a": 33, "101": [33, 40, 41, 114, 364, 365, 461, 465, 466], "103": [33, 41, 43, 114, 166, 176, 295, 465, 466], "104": [33, 41, 242, 465, 466], "105": [33, 41, 465, 466], "106": [33, 41, 114, 187, 191, 219, 221, 225, 247, 248, 251, 267, 465, 466], "107": [33, 41, 83, 465, 466], "108": [33, 41, 70, 71, 83, 465, 466], "110": [33, 41, 62, 72, 85, 114, 250, 257, 275, 465, 466, 481], "111": [33, 41, 53, 61, 90, 465, 466], "112": [33, 41, 92, 110, 114, 364, 365, 465, 466], "113": [33, 41, 81, 108, 110, 197, 465, 466, 481], "114": [33, 41, 44, 76, 104, 139, 154, 465, 466], "115": [33, 41, 51, 98, 114, 139, 154, 465, 466], "116": [33, 41, 71, 237, 465, 466], "117": [33, 41, 92, 102, 108, 148, 154, 237, 465, 466, 481], "118": [33, 34, 41, 45, 465, 466, 481], "119": [33, 41, 71, 127, 154, 465, 466], "120": [33, 41, 43, 83, 98, 114, 224, 250, 465, 466], "121": [33, 41, 65, 465, 466], "122": [33, 38, 41, 45, 65, 71, 118, 154, 191, 239, 256, 465, 466, 481], "123": [33, 41, 91, 242, 465, 466], "124a": 33, "125": [33, 40, 41, 71, 99, 114, 465, 466], "127": [33, 41, 136, 154, 465, 466], "128": [33, 41, 63, 65, 67, 83, 91, 103, 107, 146, 154, 197, 242, 465, 466], "130": [33, 41, 465, 466], "131": [33, 41, 71, 114, 224, 250, 465, 466], "132": [33, 41, 49, 52, 465, 466], "133": [33, 41, 465, 466], "134": [33, 41, 51, 92, 98, 114, 148, 154, 465, 466], "135": [33, 41, 71, 465, 466], "136": [33, 41, 47, 465, 466], "137": [33, 41, 71, 103, 108, 465, 466, 481], "138": [33, 41, 465, 466], "139": [33, 41, 465, 466], "140": [33, 40, 41, 69, 71, 465, 466], "141": [33, 41, 122, 154, 250, 465, 466], "142": [33, 41, 71, 127, 154, 465, 466], "143": [33, 41, 71, 465, 466], "144": [33, 41, 114, 193, 265, 465, 466], "144a": 33, "145": [33, 41, 114, 161, 465, 466], "146": [33, 41, 71, 130, 154, 465, 466], "146a": 33, "148": [33, 41, 465, 466], "149": [33, 41, 71, 465, 466], "151": [33, 41, 106, 465, 466], "153": [33, 41, 71, 465, 466], "154": [33, 41, 56, 114, 364, 365, 420, 465, 466], "155": [33, 41, 114, 205, 256, 465, 466], "156": [33, 41, 71, 465, 466], "157": [33, 41, 87, 95, 465, 466, 481], "158": [33, 41, 114, 420, 465, 466], "159": [33, 41, 43, 45, 69, 70, 71, 465, 466, 481], "160": [33, 41, 58, 83, 114, 163, 198, 235, 253, 293, 294, 464, 465, 466], "161": [33, 41, 465, 466], "162": [33, 41, 71, 114, 205, 465, 466], "163": [33, 41, 56, 465, 466], "164": [33, 41, 56, 71, 465, 466], "165": [33, 41, 56, 465, 466], "166": [33, 41, 56, 114, 161, 465, 466], "167": [33, 41, 56, 71, 465, 466], "169": [33, 41, 465, 466], "170": [33, 41, 71, 465, 466], "171": [33, 41, 56, 114, 205, 365, 465, 466], "172": [33, 41, 114, 163, 250, 293, 294, 465, 466], "173": [33, 41, 58, 71, 465, 466], "174": [33, 41, 56, 114, 364, 365, 465, 466], "175": [33, 41, 465, 466], "178": [33, 41, 465, 466], "180": [33, 41, 56, 59, 83, 114, 139, 154, 163, 191, 293, 294, 435, 437, 438, 465, 466, 481], "181": [33, 41, 75, 114, 318, 465, 466], "182": [33, 41, 243, 244, 247, 465, 466], "183": [33, 41, 465, 466], "184": [33, 41, 465, 466], "185": [33, 41, 465, 466], "186": [33, 41, 465, 466], "187": [33, 41, 56, 114, 364, 365, 465, 466], "188": [33, 41, 71, 101, 108, 465, 466, 481], "189": [33, 41, 114, 341, 348, 460, 465, 466], "190": [33, 41, 465, 466], "191": [33, 41, 71, 465, 466], "193": [33, 41, 246, 465, 466], "198": [33, 41, 48, 59, 71, 94, 95, 246, 465, 466, 481], "199": [33, 41, 465, 466], "200": [33, 41, 43, 93, 102, 104, 114, 155, 187, 191, 227, 235, 239, 247, 267, 296, 297, 465, 466], "201": [33, 41, 71, 465, 466], "202": [33, 41, 465, 466], "203": [33, 41, 71, 465, 466], "204": [33, 41, 465, 466], "738": 33, "204a": 33, "205": [33, 41, 465, 466], "206": [33, 41, 114, 220, 255, 465, 466], "208": [33, 41, 80, 81, 114, 155, 227, 465, 466, 481], "209": [33, 41, 67, 72, 465, 466, 481], "212": [33, 41, 43, 71, 246, 465, 466], "214": [33, 41, 465, 466], "215": [33, 41, 71, 465, 466], "217": [33, 41, 94, 188, 237, 465, 466], "218": [33, 41, 71, 243, 244, 247, 465, 466], "219": [33, 41, 465, 466], "220": [33, 41, 465, 466], "221": [33, 41, 71, 114, 197, 242, 465, 466], "222": [33, 41, 465, 466], "223": [33, 41, 114, 207, 260, 465, 466], "224": [33, 41, 47, 71, 465, 466], "225": [33, 41, 465, 466], "226": [33, 41, 465, 466], "227": [33, 41, 70, 71, 465, 466], "228": [33, 41, 465, 466], "229": [33, 41, 246, 465, 466], "231": [33, 41, 465, 466], "232": [33, 41, 465, 466], "234": [33, 41, 71, 465, 466], "235": [33, 41, 465, 466], "236": [33, 41, 71, 465, 466], "237": [33, 41, 465, 466], "238": [33, 41, 114, 224, 250, 465, 466], "240": [33, 41, 465, 466], "241": [33, 41, 465, 466], "242": [33, 41, 114, 224, 250, 465, 466], "243": [33, 41, 465, 466], "244": [33, 41, 465, 466], "245": [33, 41, 465, 466], "247": [33, 41, 465, 466], "248": [33, 41, 71, 465, 466], "249": [33, 41, 466], "250": [33, 41, 65, 114, 466], "251": [33, 41, 71, 466], "253": [33, 41, 466], "254": [33, 41, 71, 118, 154, 466], "255": [33, 41, 148, 154, 466], "257": [33, 41, 65, 71, 466], "258": [33, 41, 466], "259": [33, 41, 466], "260": [33, 41, 71, 466], "261": [33, 41, 114, 166, 466], "262": [33, 41, 114, 466], "263": [33, 41, 246, 466], "264": [33, 41, 58, 71, 218, 254, 466], "265": [33, 41, 466], "266": [33, 41, 71, 466], "267": [33, 41, 57, 114, 364, 365, 466], "268": [33, 41, 52, 54, 466], "269": [33, 41, 71, 114, 166, 466], "272": [33, 41, 114, 200, 201, 202, 203, 204, 279, 466], "275": [33, 41, 71, 466], "276": [33, 41, 59, 466], "277": [33, 41, 114, 364, 365, 466], "278": [33, 41, 71, 466], "279": [33, 41, 466], "280": [33, 41, 466], "281": [33, 41, 466], "282": [33, 41, 93, 466], "283": [33, 41, 98, 108, 466, 481], "284": [33, 41, 65, 71, 114, 200, 201, 202, 203, 204, 279, 466], "285": [33, 41, 70, 72, 466, 481], "286": [33, 41, 466], "287": [33, 41, 466], "288": [33, 41, 48, 65, 71, 114, 160, 298, 465, 466], "289": [33, 41, 114, 188, 237, 466], "290": [33, 41, 466], "292": [33, 41, 50, 59, 114, 384, 466, 481], "297": [33, 39, 41, 466], "297a": 33, "298": [33, 41, 114, 200, 201, 202, 203, 204, 279, 384, 466], "299": [33, 41, 48, 114, 160, 298, 466], "301": [33, 41, 466], "302": [33, 41, 69, 72, 118, 154, 466, 481], "303": [33, 41, 466], "304": [33, 41, 114, 167, 466], "307": [33, 41, 51, 59, 466, 481], "308": [33, 41, 466], "309": [33, 41, 114, 193, 265, 466], "311": [33, 41, 466], "312": [33, 39, 41, 45, 466, 481], "313": [33, 41, 93, 114, 191, 207, 260, 285, 466], "314": [33, 41, 114, 193, 265, 466], "315": [33, 41, 466], "316": [33, 41, 466], "317": [33, 41, 72, 466, 481], "318": [33, 41, 64, 466], "319": [33, 41, 93, 466], "320": [33, 41, 88, 95, 114, 364, 466, 481], "321": [33, 41, 114, 167, 466], "322": [33, 41, 53, 59, 466, 481], "323": [33, 41, 466], "324": [33, 41, 114, 176, 465, 466], "325": [33, 41, 191, 239, 466], "326": [33, 41, 466], "327": [33, 41, 114, 191, 207, 260, 285, 466], "328": [33, 41, 44, 466], "329": [33, 41, 58, 114, 198, 253, 466], "330": [33, 41, 466], "331": [33, 41, 466], "332": [33, 41, 466], "333": [33, 41, 466], "334": [33, 41, 466], "335": [33, 41, 466], "337": [33, 41, 466], "338": [33, 41, 466], "339": [33, 41, 466], "340": [33, 41, 466], "341": [33, 41, 114, 364, 466], "343": [33, 41, 466], "345": [33, 41, 44, 466], "346": [33, 41, 466], "347": [33, 41, 466], "348": [33, 41, 56, 90, 466], "349": [33, 41, 466], "350": [33, 41, 466], "351": [33, 41, 466], "352": [33, 41, 466], "354": [33, 41, 466], "355": [33, 41, 466], "356": [33, 41, 466], "357": [33, 41, 466], "358": [33, 41, 466], "359": [33, 41, 466], "360": [33, 41, 62, 70, 114, 199, 465, 466], "361": [33, 41, 466], "362": [33, 466], "363": [33, 466], "364": [33, 466], "365": [33, 466], "366": [33, 466], "367": [33, 466], "368": [33, 45, 466], "369": [33, 114, 466], "370": [33, 466], "371": [33, 70, 114, 199, 466], "372": [33, 466], "373a": 33, "374": [33, 466], "375": [33, 466], "376": [33, 466], "377": [33, 466], "379": [33, 466], "380": [33, 466], "381": [33, 101, 114, 384, 466], "382": [33, 466], "383": [33, 466], "385": [33, 466], "387": [33, 59, 103, 108, 466, 481], "388": [33, 54, 466], "389": [33, 466], "390": [33, 466], "391": [33, 466], "392": [33, 466], "394": [33, 86, 466], "395": [33, 466], "396": [33, 466], "397": [33, 101, 114, 384, 466], "398": [33, 466], "399": [33, 68, 72, 466, 481], "400": [33, 114, 162, 235, 247, 466], "401": 33, "402": 33, "403": 33, "404": 33, "405": [33, 56, 114, 155, 156, 213, 245], "406": 33, "408": 33, "409": 33, "410": [33, 114, 162], "411": 33, "412": 33, "413": 33, "414": 33, "415": [33, 56, 114, 155, 156, 213, 245, 365], "416": [33, 274], "417": 33, "418": 33, "419": 33, "421": 33, "422": 33, "423": 33, "424": [33, 63, 72, 481], "425": 33, "426": 33, "427": 33, "428": 33, "429": [33, 49], "430": [33, 67, 72, 481], "431": [33, 85, 95, 481], "432": [33, 62, 114, 155, 465], "433": 33, "434": 33, "438": 33, "439": 33, "440": 33, "441": [33, 114, 155], "443": 33, "445": 33, "446": 33, "447": 33, "448": 33, "450": 33, "451": 33, "452": 33, "453": 33, "454": [33, 466], "455": 33, "456": [33, 108, 481], "457": [33, 99, 107, 108, 481], "458": 33, "459": 33, "460": 33, "461": [33, 78, 81, 187, 267, 481], "463": [33, 114, 188, 237], "465": 33, "466": 33, "467": 33, "468": [33, 62, 114, 188, 237, 465], "469": 33, "470": 33, "471": 33, "472": 33, "474": 33, "475": 33, "476": 33, "477": 33, "478": 33, "479": 33, "480": 33, "481": 33, "482": 33, "483": [33, 118, 154], "484": [33, 107, 108, 481], "485": [33, 49], "486": [33, 465], "487": 33, "488": 33, "489": 33, "490": 33, "491": 33, "493": 33, "494": 33, "495": 33, "496": 33, "497": 33, "498": 33, "499": 33, "500": [33, 35, 41, 49, 78, 97, 110, 191, 247], "501": 33, "502": [33, 97], "503": 33, "505": 33, "506": 33, "507": 33, "508": [33, 77], "509": 33, "510": 33, "511": 33, "512": [33, 83, 146, 154, 197, 242], "513": [33, 465], "514": 33, "515": 33, "516": 33, "517": 33, "518": 33, "519": 33, "520": 33, "521": 33, "522": 33, "523": 33, "524": 33, "525": 33, "526": 33, "527": 33, "528": [33, 44], "529": 33, "530": 33, "531": 33, "532": 33, "533": 33, "534": 33, "535": 33, "536": 33, "537": [33, 91, 95, 481], "538": 33, "539": [33, 48, 186], "540": [33, 62, 465], "542": 33, "543": 33, "544": [33, 114, 211, 268], "545": [33, 70], "547": 33, "549": [33, 114, 166], "550": 33, "551": [33, 59, 481], "552": [33, 53, 88, 114, 211, 268], "553": 33, "554": 33, "555": 33, "556": 33, "557": [33, 108], "558": 33, "559": [33, 114, 166], "560": 33, "561": 33, "562": [33, 114, 213, 245], "563": [33, 58, 59, 481], "564": 33, "565": 33, "566": 33, "567": 33, "568": 33, "569": 33, "570": 33, "571": 33, "572": 33, "573": [33, 114, 186, 213, 245], "574": 33, "575": 33, "576": [33, 35, 45, 481], "577": 33, "578": 33, "579": 33, "580": 33, "581": 33, "582": [33, 37, 114], "583": 33, "584": 33, "585": 33, "586": 33, "587": 33, "589": 33, "591": 33, "592": [33, 37, 114], "593": 33, "595": 33, "596": 33, "597": 33, "598": [33, 92, 95, 481], "599": [33, 114, 186, 235], "600": [33, 49, 118, 154, 190, 247], "601": 33, "602": 33, "603": 33, "604": 33, "605": 33, "606": 33, "607": [33, 85], "608": 33, "609": 33, "610": 33, "611": 33, "612": [33, 465], "613": [33, 106, 108, 481], "614": 33, "615": 33, "616": 33, "617": 33, "618": 33, "619": 33, "620": 33, "622": [33, 40, 45, 70, 481], "623": [33, 64, 72, 481], "624": 33, "625": 33, "626": 33, "627": 33, "628": 33, "629": 33, "631": [33, 41, 45, 481], "632": 33, "633": 33, "634": 33, "635": 33, "636": 33, "637": 33, "638": [33, 66, 72, 481], "640": 33, "641": 33, "642": [33, 55, 279, 442], "643": 33, "644": 33, "645": 33, "646": 33, "647": 33, "649": 33, "650": 33, "651": [33, 110, 111, 481], "652": [33, 65, 72, 481], "653": 33, "654": 33, "655": 33, "656": 33, "657": 33, "658": 33, "659": 33, "660": 33, "661": 33, "662": 33, "663": 33, "664": 33, "665": [33, 58, 114, 117, 214, 218, 254, 270, 272], "666": [33, 47, 59, 77, 81, 481], "668": 33, "669": [33, 49, 114, 447, 453, 465], "670": [33, 114, 117, 214, 270, 272], "671": 33, "672": 33, "673": [33, 59, 481], "674": [33, 56], "675": 33, "676": 33, "677": 33, "678": [33, 58, 114, 218, 254], "679": [33, 466], "680": 33, "681": [33, 49, 114, 447, 453], "682": 33, "683": 33, "684": [33, 44, 45, 481], "685": [33, 95, 481], "686": [33, 90], "687": 33, "688": 33, "689": 33, "690": [33, 68, 72, 481], "691": 33, "692": 33, "693": [33, 48], "694": 33, "695": 33, "696": 33, "697": 33, "699": 33, "700": [33, 62, 72, 142, 154, 247, 481], "701": 33, "703": [33, 71, 72, 481], "704": 33, "705": 33, "706": 33, "707": 33, "708": 33, "709": 33, "710": [33, 86, 95, 481], "711": 33, "712": 33, "713": 33, "714": [33, 76, 81, 481], "715": 33, "716": 33, "717": [33, 105, 108, 481], "718": 33, "719": 33, "720": 33, "721": 33, "722": 33, "723": 33, "724": 33, "725": 33, "726": 33, "727": 33, "728": 33, "729": [33, 465], "730": 33, "731": 33, "732": 33, "733": [33, 100, 108, 481], "734": 33, "735": 33, "736": 33, "737": 33, "739": 33, "740": 33, "741": 33, "743": 33, "745": 33, "746": 33, "13a": 33, "32a": 33, "bug": [33, 121, 124, 125, 132, 133, 134, 138, 151, 176, 177, 435, 437, 438, 465], "request": [33, 99, 129, 142, 154, 158, 168, 174, 187, 227, 228, 229, 242, 243, 244, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 338, 360, 361, 367, 368, 369, 370, 371, 372, 373, 374, 384, 413, 414, 441, 445, 446, 447, 448, 465, 479, 480], "plot_haxby_glm_decod": [33, 45, 481], "save_as_html": [33, 61, 62, 70, 74, 90, 91, 181, 440, 441, 442, 443, 444, 456, 458, 479], "although": [33, 39, 49, 78, 162, 174, 177, 181], "usual": [33, 48, 76, 78, 93, 149, 154, 160, 162, 163, 164, 169, 171, 174, 176, 177, 180, 237, 293, 294, 304, 310, 313, 378, 430, 446], "classification_accuraci": [33, 97], "chance_level": 33, "4f": [33, 34, 97], "7173": 33, "897": [33, 45, 481], "approach": [34, 40, 41, 48, 49, 65, 67, 114, 139, 154, 157, 160, 161, 162, 166, 168, 169, 170, 171, 175, 295, 341, 364, 365, 460, 464, 480, 482], "maxim": [34, 174, 313, 315, 316, 345, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "signific": [34, 49, 65, 74, 79, 114, 161, 166, 168, 171, 174, 338, 384, 457], "optimist": [34, 161], "lead": [34, 47, 48, 57, 83, 123, 125, 126, 145, 152, 154, 167, 168, 169, 171, 174, 229, 311, 369, 372, 459, 479], "overfit": [34, 162, 166], "loop": [34, 44, 69, 99, 145, 154, 161, 168, 180, 291, 292, 293, 294], "judg": [34, 85], "never": [34, 161, 168, 176, 356, 357], "grid": [34, 51, 66, 78, 83, 98, 162, 167, 174, 180, 229, 270, 272, 291, 292, 293, 294, 327, 328, 329, 333, 334, 335, 356, 395, 397, 400, 414, 419, 424, 427, 431, 432, 433, 434, 479], "difficulti": 34, "composit": 34, "hyperparamet": [34, 42], "param_grid": [34, 98, 110, 124, 154, 162, 291, 292, 293, 294], "sensibl": [34, 161, 164, 228, 231], "dual": [34, 51, 53, 97, 98, 114, 168, 228, 235, 291, 293], "1000": [34, 49, 76, 93, 158, 171, 186, 189, 191, 219, 247, 445, 466], "l1": [34, 43, 114, 162, 163, 167, 228, 231, 291, 292, 293, 296, 297], "800": [34, 86, 247, 323, 336, 420, 458], "complet": [34, 60, 72, 93, 112, 116, 117, 142, 154, 155, 161, 163, 170, 177, 180, 181, 257, 259, 275, 290, 323, 326, 363, 366, 373, 384, 419, 420, 421, 422, 424, 426, 427, 428, 430, 431, 432, 433, 434, 446, 456, 457, 458, 465, 481], "stabl": [34, 48, 56, 97, 114, 123, 139, 154, 160, 162, 163, 168, 176, 239, 279, 291, 292, 293, 294, 298, 299, 364, 442, 464, 480], "cross_valid": [34, 97, 139, 154, 164, 291, 292, 293, 294], "excel": 34, "explan": [34, 83, 101, 161, 162, 163, 164, 169, 179, 181, 189, 236], "best_c": [34, 291, 292, 293, 294], "best_penalti": 34, "best_dual": 34, "cv_score": [34, 97], "9483471074380165": 34, "9177489177489176": 34, "7943722943722944": 34, "7705627705627707": 34, "735930735930736": 34, "screening_percentile_rang": 34, "val_scor": 34, "sp": 34, "sreen": 34, "000": [34, 42, 78, 93, 113, 166], "8204": 34, "4444": 34, "8493": 34, "3889": 34, "8748": 34, "6111": 34, "_base": [34, 39, 48, 49], "1237": 34, "convergencewarn": [34, 39, 91, 103], "liblinear": [34, 291, 293], "fail": [34, 102, 123, 124, 126, 142, 151, 154, 168, 169, 270, 272, 448], "converg": [34, 91, 103, 168, 228, 231, 296, 297, 445], "increas": [34, 43, 44, 65, 68, 78, 88, 91, 102, 103, 124, 136, 154, 165, 166, 168, 171, 174, 180, 217, 231, 338, 365, 378, 384, 419, 432, 433, 434, 441, 446, 459, 482], "iter": [34, 53, 67, 69, 91, 103, 142, 154, 161, 166, 191, 228, 229, 231, 291, 292, 293, 294, 296, 297, 298, 299, 342, 346, 349, 350, 353, 358, 415, 446, 447, 453], "8596": 34, "8852": 34, "5000": [34, 49, 55, 97], "9052": 34, "6667": 34, "kfold": [34, 36, 37, 40, 44, 296, 297], "nested_cv_scor": 34, "6944": 34, "tight": [34, 168], "axhlin": [34, 395, 397, 400, 402, 404, 406, 408, 410, 412], "frameon": [34, 385, 387, 388], "plot_haxby_grid_search": [34, 45, 481], "overal": [35, 65, 68, 124, 154, 168, 169, 208, 296, 297], "non_rest": 35, "unique_condit": 35, "return_index": 35, "appear": [35, 54, 88, 323, 336, 338, 422, 457], "argsort": [35, 42, 43, 102], "fit_transform": [35, 36, 42, 47, 49, 50, 51, 52, 54, 55, 56, 58, 61, 68, 88, 91, 97, 98, 99, 101, 102, 103, 104, 105, 110, 116, 125, 154, 156, 159, 170, 181, 227, 298, 299, 305, 306, 323, 336, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448], "feature_select": [35, 36, 41, 42, 44, 93, 97, 101, 104, 105, 110, 164], "selectkbest": [35, 41, 110, 134, 154], "f_classif": [35, 36, 41, 93, 97, 164], "multiclass": [35, 162], "onevsoneclassifi": [35, 162], "onevsrestclassifi": [35, 162], "svc_ovo": 35, "svc_ova": 35, "cross_val_scor": [35, 97, 164], "cv_scores_ovo": 35, "cv_scores_ova": 35, "ovo": 35, "ova": 35, "601855088049469": 35, "6712058072321548": 35, "boxplot": [35, 93], "text": [35, 74, 93, 97, 104, 114, 161, 169, 178, 191, 206, 212, 216, 217, 225, 251, 259, 269, 310, 314, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 482], "y_pred_ovo": 35, "y_pred_ova": 35, "2769": [35, 45, 466, 481], "plot_haxby_multiclass": [35, 45, 481], "intrins": [36, 114, 158, 191, 219, 221, 225, 247, 248, 251, 365], "process_mask_img": [36, 44, 166, 295], "back": [36, 41, 42, 48, 55, 97, 99, 101, 103, 116, 127, 135, 136, 154, 158, 166, 169, 181, 298, 299, 305, 306, 367, 370, 373, 383, 415, 445, 446, 447], "astyp": [36, 40, 41, 43, 44, 66, 74, 83, 93], "process_mask": [36, 44, 133, 154], "picked_slic": 36, "plot_haxby_searchlight": [36, 45, 481], "parallel": [36, 42, 43, 44, 47, 48, 78, 101, 104, 123, 154, 168, 171, 338, 370, 384], "thread": 36, "progress": [36, 42, 101, 104, 129, 154, 323], "mess": 36, "backend": [36, 42, 43, 44, 48, 101, 104, 124, 129, 139, 144, 149, 154, 299, 439], "lokybackend": [36, 42, 43, 44, 48, 101, 104], "concurr": [36, 42, 43, 44, 48, 100, 101, 104, 107], "worker": [36, 42, 43, 44, 48, 101, 104, 384], "elaps": [36, 42, 43, 44, 48, 101, 104], "finish": [36, 42, 43, 44, 48, 101, 104, 125, 154, 168, 169, 340, 360, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 432, 440, 442, 444], "shuffl": [36, 37, 48, 293, 294], "lt": [36, 74, 88, 90, 91, 466], "0x7f18d68be4e0": 36, "gt": [36, 74, 88, 90, 91, 466], "0x7f18d68bc8c0": 36, "environ": [36, 49, 52, 53, 58, 62, 74, 76, 114, 126, 139, 140, 142, 149, 154, 161, 176, 177, 179, 191, 281, 441, 480], "rerun": [36, 49, 52, 53, 58, 62, 74, 76], "trust": [36, 49, 52, 53, 58, 62, 74, 76, 171], "unabl": [36, 49, 52, 53, 58, 62, 68, 74, 76, 142, 154], "render": [36, 49, 52, 53, 58, 62, 74, 76, 125, 140, 152, 154, 169, 398, 426, 428, 435, 437, 438, 440, 442, 443, 444], "page": [36, 49, 52, 53, 58, 62, 74, 76, 114, 139, 143, 149, 150, 151, 154, 158, 162, 166, 168, 169, 171, 177, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464], "nbviewer": [36, 49, 52, 53, 58, 62, 74, 76], "nbsp": [36, 49, 52, 53, 58, 62, 74, 76], "searchlightifittedsearchlight": 36, "fmri_mask": [36, 91, 97, 101, 104, 105, 116], "p_valu": [36, 44, 76, 78, 93, 106, 146, 154, 311, 323, 336], "log10": [36, 42, 44, 76, 78, 93, 101, 104, 105, 338, 384, 457], "p_unmask": 36, "inverse_transform": [36, 40, 42, 49, 55, 91, 97, 99, 101, 102, 103, 104, 105, 110, 115, 124, 135, 142, 151, 154, 158, 227, 298, 299, 305, 306, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448, 482], "surrog": [36, 101], "mean_fmri": 36, "searchlight_img": 36, "scores_": [36, 44, 166], "hot": 36, "f_score": [36, 165, 482], "p_ma": 36, "f_score_img": 36, "945": [36, 45, 114, 205, 481], "demo": [37, 99, 100, 107, 109, 111, 112, 116, 145, 149, 154, 169, 183, 192, 227, 262, 291, 303, 304, 305, 306, 307, 308, 431, 435, 439, 481], "coars": 37, "pial_mesh": 37, "term": [37, 54, 65, 88, 91, 115, 150, 154, 160, 162, 168, 171, 174, 176, 179, 180, 187, 267, 270, 296, 297, 310, 330, 364, 460, 466], "within": [37, 47, 55, 65, 66, 78, 87, 99, 101, 142, 145, 151, 154, 158, 160, 166, 170, 173, 191, 291, 292, 295, 320, 323, 325, 326, 330, 336, 340, 341, 360, 368, 369, 370, 371, 372, 373, 374, 382, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 420, 421, 446, 449, 458, 460], "adjac": [37, 142, 154, 300], "nearbi": 37, "infl_mesh": 37, "infl_": 37, "nn": 37, "nearestneighbor": 37, "radius_neighbors_graph": 37, "tolil": 37, "linear_model": [37, 40, 41, 44, 110, 299], "ridgeclassifi": 37, "make_pipelin": [37, 40, 44, 110], "standardscal": [37, 39, 40, 41, 44, 110], "search_light": [37, 295], "preced": [37, 169, 181, 323], "search": [37, 88, 124, 154, 169, 177, 229, 291, 292, 293, 294, 361], "light": [37, 134, 140, 142, 154, 169, 338], "sulc_": 37, "yi": [37, 114], "praneeth": [37, 114], "namburi": [37, 114], "lloyd": [37, 114], "elliott": [37, 56, 114, 364, 365], "jakob": [37, 114], "heinzl": [37, 114], "chun": [37, 114], "siong": [37, 114], "soon": [37, 69, 114, 177], "w": [37, 44, 58, 105, 114, 155, 187, 198, 219, 224, 225, 227, 229, 247, 250, 251, 253, 257, 267, 275, 296, 297], "chee": [37, 114], "hayn": [37, 114, 166], "2011": [37, 44, 49, 58, 114, 117, 122, 134, 154, 155, 162, 166, 167, 183, 191, 207, 211, 213, 214, 219, 221, 238, 245, 247, 248, 251, 254, 260, 268, 270, 272, 285, 364, 365], "multivari": [37, 96, 108, 112, 114, 160, 174, 175, 176, 190, 238, 256, 348, 353, 367, 373, 434, 439, 480, 481], "s1053811910010086": [37, 114], "035": [37, 41, 114], "plot_haxby_searchlight_surfac": [37, 45, 481], "overview": [38, 166, 168, 176], "fetch_stimuli": [38, 259], "stimulus_inform": 38, "stim_typ": 38, "skip": [38, 49, 56, 125, 154, 436, 439], "file_nam": [38, 456], "suptitl": [38, 40, 42, 43, 44, 65, 74, 78, 99, 100, 104], "img_path": [38, 362], "ravel": [38, 41, 43, 44, 101, 104, 105], "imread": 38, "plot_haxby_stimuli": [38, 45, 481], "gain": [39, 65, 163, 168, 211, 268], "fetch_mixed_gambl": [39, 150, 154, 211], "zmap_filenam": 39, "zmap": [39, 100, 211, 268], "behavioral_target": 39, "svr": [39, 42, 44, 142, 154, 162, 292, 294, 295], "solver": [39, 114, 167, 291, 293, 296, 297], "termin": [39, 161, 169, 480], "earli": [39, 114, 167, 226, 270, 272, 341, 445, 460], "max_it": [39, 40, 48, 57, 228, 229, 231, 291, 292, 293, 294, 296, 297], "10000": [39, 42, 49, 55, 101, 104, 338, 384], "pre": [39, 70, 93, 100, 124, 134, 139, 151, 154, 171, 181, 196, 314], "minmaxscal": 39, "0x7f18b0a87a40": 39, "observ": [39, 44, 58, 61, 63, 65, 69, 78, 79, 80, 101, 162, 166, 170, 171, 174, 176, 181, 314, 445], "learnt": 39, "impos": [39, 127, 154], "relat": [39, 46, 49, 50, 63, 64, 65, 66, 67, 69, 80, 99, 105, 112, 114, 117, 133, 134, 154, 156, 157, 159, 161, 162, 165, 168, 169, 174, 175, 176, 177, 181, 210, 227, 256, 261, 282, 283, 286, 298, 299, 311, 323, 347, 361, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 446, 448, 461, 480, 482], "guid": [39, 123, 154, 169, 173, 175, 176, 181, 183, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 469, 471, 472, 480], "unstructur": 39, "graph_net": 39, "heavi": [39, 42, 155, 169, 374], "spacenetregressor": [39, 43, 167, 296], "regressor": [39, 43, 56, 61, 62, 63, 65, 99, 100, 104, 107, 123, 145, 146, 150, 154, 156, 162, 170, 267, 292, 294, 297, 319, 323, 325, 330, 338, 364, 365, 384], "tv_l1": 39, "ep": [39, 296, 297], "prefer": [39, 51, 98, 158, 169, 179], "2219": 39, "plot_mixed_gambles_frem": [39, 45, 481], "partli": [40, 42, 168, 171, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 256, 259, 260, 261, 265, 267, 268, 269, 274, 280], "neuron": [40, 41, 58, 114, 166, 212, 218, 254, 269], "sound": [40, 171], "real": [40, 161, 166, 168, 171, 179, 181], "world": [40, 179, 181, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 418, 421, 430], "stimulu": [40, 41, 64, 99, 171], "particip": [40, 56, 65, 110, 114, 169, 171, 174, 189, 216, 364, 365], "10x10": [40, 41], "binari": [40, 41, 65, 74, 123, 151, 154, 174, 177, 181, 261, 291, 292, 293, 294, 296, 297, 433, 457, 460], "pixel": [40, 41, 171, 323, 336, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 440, 443, 458], "fetch_miyawaki2008": [40, 41, 88, 212], "fmri_random_runs_filenam": 40, "stimuli_random_runs_filenam": 40, "multiniftimask": [40, 41, 48, 49, 126, 146, 148, 154, 178, 291, 292, 293, 294, 296, 297, 298, 299, 336, 338, 384, 446, 466, 482], "clean": [40, 43, 49, 52, 53, 56, 58, 68, 102, 114, 123, 124, 126, 132, 138, 139, 142, 146, 147, 149, 154, 177, 180, 181, 227, 298, 299, 323, 341, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 420, 446, 448], "fmri_data": [40, 93, 323, 336], "wiht": 40, "stimulus_shap": 40, "stimulus_run": 40, "reshap": [40, 41, 44, 50, 66, 76, 104, 126, 135, 154, 159, 227], "loadtxt": [40, 41], "pylab": [40, 431], "wspace": [40, 44], "stack": [40, 51, 58, 147, 154, 174, 234], "offset": [40, 51, 83, 145, 154, 180, 246, 247, 356], "begin": [40, 62, 65, 69, 145, 154, 169, 174, 187, 459], "stimuli_run": 40, "2860": 40, "5438": 40, "proce": [40, 55, 64, 116], "independ": [40, 48, 65, 96, 108, 112, 127, 154, 158, 160, 161, 166, 168, 171, 174, 181, 212, 213, 256, 291, 292, 293, 294, 298, 341, 348, 353, 364, 365, 367, 373, 384, 434, 439, 460, 481], "hold": [40, 77, 168, 169, 177, 298, 299, 330, 384, 395, 446], "held": [40, 166, 169, 291, 292, 293, 294, 480], "10th": 40, "r2_score": [40, 297], "multioutput": [40, 297], "raw_valu": 40, "threshold_img": [40, 80, 87, 124, 127, 149, 154, 339, 340], "cut_scor": 40, "bring": [40, 48, 163, 169, 176, 383], "score_map_img": 40, "thresholded_score_map_img": 40, "mark": [40, 56, 99, 114, 155, 187, 267, 364, 365], "four": [40, 44, 65, 149, 154, 181, 225], "coord_transform": [40, 136, 154], "def": [40, 41, 44, 47, 53, 65, 66, 99, 106, 110, 169, 435, 437, 438], "index_to_xy_coord": 40, "newaxi": [40, 44, 79, 83], "xy_indices_of_special_voxel": 40, "marker": [40, 140, 142, 145, 147, 152, 154, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 421, 430, 440, 441, 443, 448, 450, 482], "add_mark": [40, 55, 61, 68, 99, 131, 137, 140, 154, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 479], "magenta": [40, 68, 479], "lw": [40, 68], "construct": [40, 52, 54, 97, 114, 157, 160, 166, 169, 170, 175, 176, 188, 310, 311, 314, 337, 456], "gcf": 40, "set_size_inch": [40, 68], "closer": [40, 49, 168, 457], "presenc": [40, 65, 101, 448, 450], "lasso": [40, 57, 58, 114, 155, 162, 167, 168, 292, 294, 296, 297, 299], "lassolarscv": 40, "sparsiti": [40, 48, 114, 127, 154, 155, 159, 160, 162, 163, 167, 168, 174, 213, 229, 231, 296, 297, 299, 448], "marked_pixel": 40, "gridspec": [40, 147, 154], "gs1": 40, "1780": 40, "1951": [40, 142, 154], "2131": [40, 142, 154, 466], "rf": [40, 66], "named_step": [40, 44, 97], "zeros_lik": [40, 66, 83, 101], "ax_im": 40, "masked_less": [40, 105], "green": [40, 49, 88, 91, 114, 147, 154, 220, 255, 310, 314, 466], "add_patch": 40, "updat": [40, 92, 99, 123, 124, 125, 126, 129, 133, 134, 139, 142, 148, 149, 151, 154, 177, 227, 228, 229, 247, 270, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448], "1935": [40, 114], "rdpu": 40, "0x7f18d6a9ca10": 40, "rel": [40, 49, 58, 64, 65, 90, 169, 171, 174, 177, 291, 292, 293, 294, 295, 296, 297, 323, 325, 330, 345, 440, 442, 444, 466], "roughli": [40, 162, 169, 171, 191], "relationship": [40, 42, 74, 166, 173, 175, 176, 187, 267, 384], "yoichi": [40, 41, 114, 212, 269], "hajim": [40, 41, 114, 212, 269], "uchida": [40, 41, 114, 212, 269], "okito": [40, 41, 114, 212, 269], "yamashita": [40, 41, 114, 212, 269], "masa": [40, 41, 114, 212, 269], "aki": [40, 41, 114, 139, 154, 212, 269], "sato": [40, 41, 114, 212, 269], "yusuk": [40, 41, 114, 212, 269], "morito": [40, 41, 114, 212, 269], "hiroki": [40, 41, 114, 212, 269], "tanab": [40, 41, 114, 212, 269], "norihiro": [40, 41, 114, 212, 269], "sadato": [40, 41, 114, 212, 269], "yukiyasu": [40, 41, 114, 212, 269], "kamitani": [40, 41, 114, 212, 269], "929": [40, 41, 114, 212, 269], "s0896627308009586": [40, 41, 114, 212, 269], "004": [40, 41, 114, 191, 212, 269], "965": [40, 114, 187, 267], "plot_miyawaki_encod": [40, 45, 481], "elabor": [41, 127, 154, 479], "stderr": 41, "miyawaki_dataset": [41, 88], "x_random_filenam": 41, "x_figure_filenam": 41, "y_random_filenam": 41, "y_figure_filenam": 41, "y_shape": 41, "miyawaki2008": [41, 88, 466], "data_figure_run01": [41, 88], "n_featur": [41, 47, 57, 168, 227, 228, 229, 231, 233, 291, 292, 293, 294, 296, 297, 298, 299, 310, 323, 336, 445, 447, 453], "list_of_2d_arrai": 41, "squar": [41, 43, 49, 65, 99, 101, 104, 114, 156, 162, 167, 168, 170, 191, 227, 297, 310, 313, 314, 315, 323, 336, 347, 363, 364, 369, 372, 384, 445, 446, 447, 461], "y_row": 41, "y_col": 41, "height_tf": 41, "width_tf": 41, "yt_tall": 41, "dot": [41, 44, 55, 99, 102, 168, 313, 314, 315, 316, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "yt_larg": 41, "yt_big": 41, "r_": 41, "orthogonalmatchingpursuit": 41, "omp": 41, "clf": [41, 136, 154], "n_clf": 41, "scl": 41, "n_nonzero_coef": 41, "03d": [41, 99], "002": 41, "003": 41, "005": [41, 114, 163, 293, 294], "006": [41, 49, 58, 114, 218, 254], "007": [41, 56, 114, 155, 156, 211, 213, 245, 268], "009": [41, 114, 420], "011": 41, "012": [41, 42, 45, 481], "013": 41, "014": 41, "015": 41, "016": [41, 65], "017": 41, "018": [41, 114, 191, 364, 365], "019": 41, "020": [41, 56, 114, 205, 364, 365], "021": 41, "022": 41, "023": 41, "024": 41, "026": 41, "027": 41, "028": 41, "029": 41, "030": 41, "031": 41, "032": 41, "033": [41, 114, 191, 207, 260, 285], "034": 41, "036": 41, "037": [41, 114], "038": 41, "039": 41, "041": [41, 114, 166], "042": [41, 114, 364, 365, 461], "043": 41, "044": 41, "045": 41, "046": 41, "047": 41, "048": [41, 114, 364], "049": 41, "050": 41, "051": 41, "052": [41, 114, 193, 265], "053": 41, "054": [41, 114, 166], "055": 41, "056": 41, "057": 41, "058": 41, "059": [41, 49, 59, 481], "060": [41, 75, 101, 114, 318, 384], "061": [41, 114, 174, 338, 384], "062": [41, 51, 98, 114, 167], "063": [41, 114, 155], "064": [41, 114, 364, 365], "065": 41, "066": [41, 54, 59, 481], "067": 41, "068": 41, "069": 41, "070": 41, "071": 41, "072": 41, "073": [41, 56, 114, 162, 365], "074": 41, "075": 41, "076": 41, "077": 41, "078": 41, "079": 41, "080": [41, 114], "081": 41, "082": [41, 114, 191, 239], "083": 41, "084": 41, "085": 41, "087": 41, "088": 41, "089": 41, "090": 41, "091": 41, "092": 41, "093": 41, "095": 41, "096": 41, "097": 41, "098": 41, "099": 41, "split_multi_scal": 41, "multi_scal": 41, "yw": 41, "yh": 41, "split_index": 41, "tall": 41, "y_pred_tal": 41, "1x2": 41, "applic": [41, 114, 147, 154, 156, 162, 168, 175, 191, 323, 336, 370, 384, 451, 452, 458, 479, 480, 482], "calculu": 41, "height_tf_i": 41, "y_pred_larg": 41, "2x1": 41, "width_tf_i": 41, "y_pred_big": 41, "2x2": [41, 140, 154, 395, 397, 400, 414, 419, 424, 427, 432, 433, 434, 479], "accuracy_scor": [41, 51], "f1_score": 41, "precision_scor": 41, "recall_scor": 41, "recal": [41, 291, 293], "zero_divis": 41, "f1": [41, 161, 291, 293], "801208": 41, "413969": 41, "572388": 41, "465973": 41, "six": [41, 191], "ground": [41, 44, 57, 161], "truth": [41, 44, 57, 161], "plot_miyawaki_reconstruct": [41, 45, 481], "sp1": 41, "sp2": 41, "sp3": 41, "binar": [41, 93, 148, 154, 235, 340], "miyawaki2008_reconstruction_": 41, "957": [41, 45, 481], "densiti": [42, 57, 74, 168, 173, 175, 207, 216, 235, 260, 274], "agre": [42, 74, 169, 187, 274, 336, 338], "agreement": [42, 62, 74, 187, 216, 220, 274], "spm8": [42, 74, 237, 274], "newseg": [42, 74], "ran": 42, "prepar": [42, 58, 93, 98, 100, 107, 116, 129, 154, 165, 178, 305, 306, 368, 369, 370, 371, 372, 374, 448, 482], "impact": [42, 65, 77, 149, 154, 166, 169, 177, 181, 323, 336, 365], "significantli": [42, 65, 139, 154, 166, 168], "noisi": [42, 91, 155], "detriment": [42, 365], "permut": [42, 76, 78, 101, 104, 114, 123, 145, 154, 164, 166, 171, 338, 355, 384, 473], "exact": [42, 166, 169, 171, 260, 261, 479], "comparison": [42, 49, 51, 57, 62, 65, 80, 92, 98, 99, 101, 114, 117, 155, 158, 165, 166, 167, 172, 174, 190, 194, 238, 482], "clearer": [42, 169], "oasis_dataset": [42, 74], "fetch_oasis_vbm": [42, 43, 74, 216], "gray_matter_map_filenam": [42, 74], "gray_matter_map": [42, 43, 74, 216, 274], "ext_var": [42, 43, 74, 76, 78, 104, 216, 274], "train_test_split": [42, 43], "gm_imgs_train": [42, 43], "gm_imgs_test": [42, 43], "age_train": [42, 43], "age_test": [42, 43], "train_siz": [42, 43], "white_matter_map": [42, 74, 216, 274], "oasis1": [42, 43, 74], "oas1_0001_mr1": [42, 43, 74], "mwrc1oas1_0001_mr1_mpr_anon_fslswapdim_bet": [42, 43, 74], "mwrc2oas1_0001_mr1_mpr_anon_fslswapdim_bet": [42, 74], "cach": [42, 43, 49, 54, 56, 101, 122, 127, 154, 158, 228, 291, 292, 293, 294, 296, 297, 298, 299, 323, 336, 342, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 446, 447, 448, 464], "gm_maps_mask": 42, "variancethreshold": 42, "variance_threshold": 42, "get_support": 42, "decoderregressor": [42, 142, 145, 146, 154, 162, 291, 294], "benefit": [42, 49, 56, 65, 142, 154, 169, 180], "some_high_valu": [42, 43], "advantag": [42, 43, 67, 168, 181], "neg_mean_absolute_error": [42, 292, 294], "trend": [42, 43, 88, 181], "etc": [42, 43, 79, 88, 91, 93, 117, 167, 170, 174, 179, 267, 291, 292, 293, 294, 296, 297, 315, 373, 466], "perm": [42, 43], "age_pr": 42, "prediction_scor": 42, "670599": 42, "bg_filenam": 42, "absolut": [42, 43, 58, 110, 142, 154, 166, 168, 169, 209, 252, 262, 275, 340, 345, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 418, 419, 421, 426, 427, 429, 433, 434, 435, 438, 441, 442, 444, 479], "year": [42, 43, 114, 168, 177, 196, 256, 274], "0x7f18c51204a0": 42, "mass_univari": [42, 78, 101, 104, 145, 151, 154, 166, 173], "permuted_ol": [42, 78, 101, 104, 123, 124, 145, 150, 151, 154, 166, 173, 338], "neg_log_pv": [42, 76, 78, 101], "t_scores_original_data": [42, 101], "intercept": [42, 74, 75, 76, 78, 79, 80, 101, 105, 124, 154, 166, 291, 292, 293, 294, 296, 297, 337, 338, 384], "n_perm": [42, 76, 78, 101, 104, 338, 384], "signed_neg_log_pv": [42, 101], "signed_neg_log_pvals_unmask": [42, 101], "rdbu_r": [42, 44, 101, 431], "log_": [42, 101, 104, 105], "parametr": [42, 64, 65, 76, 78, 101, 104, 105, 114, 166, 173, 174, 311, 312, 317, 341, 460], "n_detect": [42, 101, 104], "detect": [42, 66, 76, 78, 88, 99, 101, 105, 114, 155, 166, 171, 174, 181, 227, 364, 365, 445, 479], "1974": [42, 466], "2284": 42, "plot_oasis_vbm": [42, 45, 142, 154, 481], "ag": [43, 46, 59, 77, 96, 108, 112, 114, 142, 154, 155, 162, 163, 167, 173, 174, 175, 176, 189, 191, 196, 205, 207, 216, 227, 235, 245, 256, 260, 267, 274, 280, 285, 291, 292, 293, 294, 296, 297, 367, 372, 421, 431, 439, 465, 481], "concentr": [43, 169, 171, 174], "ram": 43, "box": [43, 83, 97, 103, 135, 154, 162, 169, 180, 220, 356], "dataset_fil": 43, "gm_img": 43, "check_random_st": [43, 44], "rng": [43, 169], "intermedi": [43, 67, 164, 176], "graph": [43, 47, 53, 57, 155, 157, 167, 168, 174, 175, 291, 292, 296, 297, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 430, 482], "beauti": 43, "tv": [43, 114, 167, 291, 292, 296, 297], "expens": 43, "longer": [43, 103, 121, 123, 124, 125, 126, 136, 140, 142, 145, 147, 149, 151, 154, 171], "runtim": [43, 151, 154, 169, 296, 297], "mse": [43, 296, 297, 315], "oas1_0003_mr1": 43, "mwrc1oas1_0003_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0086_mr1": 43, "mwrc1oas1_0086_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0052_mr1": 43, "mwrc1oas1_0052_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0211_mr1": 43, "mwrc1oas1_0211_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0216_mr1": 43, "mwrc1oas1_0216_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0096_mr1": 43, "mwrc1oas1_0096_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0182_mr1": 43, "mwrc1oas1_0182_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0041_mr1": 43, "mwrc1oas1_0041_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0214_mr1": 43, "mwrc1oas1_0214_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0069_mr1": 43, "mwrc1oas1_0069_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0025_mr1": 43, "mwrc1oas1_0025_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0159_mr1": 43, "mwrc1oas1_0159_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0113_mr1": 43, "mwrc1oas1_0113_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0038_mr1": 43, "mwrc1oas1_0038_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0013_mr1": 43, "mwrc1oas1_0013_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0220_mr1": 43, "mwrc1oas1_0220_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0180_mr1": 43, "mwrc1oas1_0180_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0007_mr1": 43, "mwrc1oas1_0007_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0031_mr1": 43, "mwrc1oas1_0031_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0135_mr1": 43, "mwrc1oas1_0135_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0005_mr1": 43, "mwrc1oas1_0005_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0037_mr1": 43, "mwrc1oas1_0037_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0160_mr1": 43, "mwrc1oas1_0160_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0163_mr1": 43, "mwrc1oas1_0163_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0123_mr1": 43, "mwrc1oas1_0123_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0162_mr1": 43, "mwrc1oas1_0162_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0012_mr1": 43, "mwrc1oas1_0012_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0070_mr1": 43, "mwrc1oas1_0070_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0126_mr1": 43, "mwrc1oas1_0126_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0164_mr1": 43, "mwrc1oas1_0164_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0188_mr1": 43, "mwrc1oas1_0188_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0226_mr1": 43, "mwrc1oas1_0226_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0173_mr1": 43, "mwrc1oas1_0173_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0078_mr1": 43, "mwrc1oas1_0078_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0138_mr1": 43, "mwrc1oas1_0138_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0072_mr1": 43, "mwrc1oas1_0072_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0050_mr1": 43, "mwrc1oas1_0050_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0184_mr1": 43, "mwrc1oas1_0184_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0032_mr1": 43, "mwrc1oas1_0032_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0045_mr1": 43, "mwrc1oas1_0045_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0121_mr1": 43, "mwrc1oas1_0121_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0176_mr1": 43, "mwrc1oas1_0176_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0177_mr1": 43, "mwrc1oas1_0177_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0029_mr1": 43, "mwrc1oas1_0029_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0026_mr1": 43, "mwrc1oas1_0026_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0208_mr1": 43, "mwrc1oas1_0208_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0165_mr1": 43, "mwrc1oas1_0165_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0091_mr1": 43, "mwrc1oas1_0091_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0044_mr1": 43, "mwrc1oas1_0044_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0190_mr1": 43, "mwrc1oas1_0190_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0053_mr1": 43, "mwrc1oas1_0053_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0106_mr1": 43, "mwrc1oas1_0106_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0174_mr1": 43, "mwrc1oas1_0174_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0049_mr1": 43, "mwrc1oas1_0049_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0155_mr1": 43, "mwrc1oas1_0155_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0004_mr1": 43, "mwrc1oas1_0004_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0117_mr1": 43, "mwrc1oas1_0117_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0060_mr1": 43, "mwrc1oas1_0060_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0148_mr1": 43, "mwrc1oas1_0148_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0204_mr1": 43, "mwrc1oas1_0204_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0202_mr1": 43, "mwrc1oas1_0202_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0209_mr1": 43, "mwrc1oas1_0209_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0055_mr1": 43, "mwrc1oas1_0055_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0090_mr1": 43, "mwrc1oas1_0090_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0039_mr1": 43, "mwrc1oas1_0039_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0009_mr1": 43, "mwrc1oas1_0009_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0124_mr1": 43, "mwrc1oas1_0124_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0103_mr1": 43, "mwrc1oas1_0103_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0094_mr1": 43, "mwrc1oas1_0094_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0200_mr1": 43, "mwrc1oas1_0200_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0205_mr1": 43, "mwrc1oas1_0205_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0101_mr1": 43, "mwrc1oas1_0101_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0010_mr1": 43, "mwrc1oas1_0010_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0015_mr1": 43, "mwrc1oas1_0015_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0067_mr1": 43, "mwrc1oas1_0067_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0193_mr1": 43, "mwrc1oas1_0193_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0146_mr1": 43, "mwrc1oas1_0146_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0019_mr1": 43, "mwrc1oas1_0019_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0080_mr1": 43, "mwrc1oas1_0080_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0199_mr1": 43, "mwrc1oas1_0199_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0150_mr1": 43, "mwrc1oas1_0150_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0189_mr1": 43, "mwrc1oas1_0189_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0207_mr1": 43, "mwrc1oas1_0207_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0071_mr1": 43, "mwrc1oas1_0071_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0061_mr1": 43, "mwrc1oas1_0061_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0120_mr1": 43, "mwrc1oas1_0120_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0056_mr1": 43, "mwrc1oas1_0056_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0223_mr1": 43, "mwrc1oas1_0223_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0065_mr1": 43, "mwrc1oas1_0065_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0054_mr1": 43, "mwrc1oas1_0054_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0099_mr1": 43, "mwrc1oas1_0099_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0023_mr1": 43, "mwrc1oas1_0023_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0064_mr1": 43, "mwrc1oas1_0064_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0181_mr1": 43, "mwrc1oas1_0181_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0217_mr1": 43, "mwrc1oas1_0217_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0144_mr1": 43, "mwrc1oas1_0144_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0042_mr1": 43, "mwrc1oas1_0042_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0178_mr1": 43, "mwrc1oas1_0178_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0218_mr1": 43, "mwrc1oas1_0218_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0002_mr1": 43, "mwrc1oas1_0002_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0059_mr1": 43, "mwrc1oas1_0059_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0167_mr1": 43, "mwrc1oas1_0167_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0145_mr1": 43, "mwrc1oas1_0145_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0169_mr1": 43, "mwrc1oas1_0169_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0115_mr1": 43, "mwrc1oas1_0115_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0111_mr1": 43, "mwrc1oas1_0111_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0131_mr1": 43, "mwrc1oas1_0131_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0098_mr1": 43, "mwrc1oas1_0098_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0082_mr1": 43, "mwrc1oas1_0082_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0136_mr1": 43, "mwrc1oas1_0136_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0227_mr1": 43, "mwrc1oas1_0227_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0022_mr1": 43, "mwrc1oas1_0022_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0212_mr1": 43, "mwrc1oas1_0212_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0079_mr1": 43, "mwrc1oas1_0079_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0119_mr1": 43, "mwrc1oas1_0119_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0016_mr1": 43, "mwrc1oas1_0016_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0104_mr1": 43, "mwrc1oas1_0104_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0203_mr1": 43, "mwrc1oas1_0203_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0114_mr1": 43, "mwrc1oas1_0114_mr1_mpr_anon_fslswapdim_bet": 43, "transform_single_img": [43, 49, 52, 53, 56, 58, 152, 154, 367, 368, 369, 370, 371, 372, 373, 374, 448], "plot_oasis_vbm_space_net": [43, 45, 481], "4min": 43, "86448121070862": 43, "7310746868451437": 43, "ax1": [43, 63, 74, 77, 428], "ax2": [43, 63, 428], "2518": [43, 45, 481], "sketch": 44, "mathbf": 44, "opposit": [44, 69, 166], "corner": [44, 132, 154, 169, 358], "middl": [44, 65, 90, 114, 139, 147, 154, 216, 274, 362], "linalg": [44, 168], "ndimag": [44, 93, 180, 261, 283, 286, 350, 376, 377, 378, 380, 381], "gaussian_filt": 44, "f_regress": [44, 101, 104, 105, 110], "create_simulation_data": 44, "snr": [44, 174, 341, 460], "roi_siz": 44, "smooth_x": 44, "xx": 44, "randn": [44, 63], "xi": [44, 114, 219, 247], "norm_nois": 44, "norm": [44, 55, 62, 75, 78, 100, 106, 107, 227, 233, 291, 292, 293, 294, 296, 297, 298, 299, 323, 420, 445, 446, 447, 448], "exp": 44, "noise_coef": 44, "log": [44, 49, 53, 76, 78, 93, 129, 154, 166, 168, 310, 313, 314, 315, 316, 352, 428], "1f": [44, 435, 438], "db": [44, 114, 187, 315, 316], "plot_slic": 44, "hspace": [44, 49, 57], "bool": [44, 93, 102, 227, 228, 229, 231, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 253, 254, 255, 256, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 272, 274, 280, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 318, 320, 323, 336, 338, 339, 340, 341, 345, 347, 351, 354, 356, 357, 360, 361, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 419, 420, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 440, 441, 442, 444, 445, 446, 447, 448, 449, 451, 452, 457, 458, 459, 460, 461], "uint8": [44, 56, 90, 151, 154, 354], "recov": [44, 58, 135, 154, 155], "elast": 44, "bayesian": [44, 171], "metaprior": 44, "ridgecv": [44, 124, 154, 291, 292, 293, 294], "elasticnetcv": 44, "bayesian_ridg": 44, "bayesianridg": 44, "enet_cv": 44, "l1_ratio": [44, 296, 297], "ridge_cv": 44, "r2": [44, 146, 154, 292, 294, 315], "expos": [44, 49, 117, 125, 126, 131, 135, 136, 154, 169, 179, 270, 271, 272, 273], "fairli": [44, 162, 171], "attribut": [44, 48, 49, 50, 83, 88, 116, 117, 125, 126, 137, 146, 147, 149, 150, 151, 154, 155, 158, 159, 160, 166, 169, 179, 181, 191, 194, 217, 227, 228, 229, 236, 240, 242, 245, 256, 258, 259, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 277, 278, 279, 280, 291, 292, 293, 294, 296, 297, 298, 299, 305, 313, 314, 315, 316, 323, 343, 351, 364, 365, 368, 369, 370, 371, 372, 373, 374, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 435, 437, 438, 445, 446, 447, 448, 463, 464], "t1": [44, 74, 148, 154, 188, 191, 205, 207, 237, 260, 282, 284, 285, 287, 419, 479], "els": [44, 47, 66, 68, 71, 93, 99, 268, 291, 292, 293, 294, 296, 297, 436], "elapsed_tim": 44, "__class__": [44, 48, 49], "__name__": [44, 48, 49], "isnan": [44, 76, 93, 101, 104, 105], "exercic": 44, "recurs": [44, 49, 97, 114, 142, 154, 158, 164, 174, 175, 446, 447, 453], "elimin": [44, 97, 164, 167, 432, 433], "rfe": [44, 97, 164], "tip": [44, 176], "ga": [44, 114, 161, 167], "\u00eb": [44, 114, 161, 167], "evelyn": [44, 49, 114, 167], "eger": [44, 49, 114, 167], "variat": [44, 76, 100, 104, 105, 114, 124, 154, 166, 167, 174, 274, 322, 338, 384], "behaviour": [44, 114, 127, 139, 146, 151, 154, 167, 181, 187, 267], "ieee": [44, 48, 49, 114, 160, 167, 188, 197, 298, 299, 447, 453], "transact": [44, 114, 167, 188, 197], "1328": [44, 114, 167], "1340": [44, 114, 167], "februari": [44, 114, 118, 119, 124, 129, 130, 134, 144, 154, 167, 176], "hal": [44, 114, 159, 167, 197, 242, 448], "00563468": [44, 114, 167], "1109": [44, 48, 49, 114, 160, 167, 188, 191, 239, 298, 299, 447, 453], "tmi": [44, 114, 167], "2113378": [44, 114, 167], "plot_simulated_data": [44, 45, 481], "2283": [45, 481], "2218": [45, 481], "964": [45, 481], "turn": [47, 65, 83, 156, 158, 168, 181, 323, 336, 376, 377, 378, 380, 381, 432, 433, 434, 441, 458], "find_parcellation_cut_coord": [47, 58, 139, 149, 154, 156, 417, 421], "find_probabilistic_atlas_cut_coord": [47, 50, 53, 139, 154, 156, 159, 416, 421], "intermediari": 47, "multiniftilabelsmask": [47, 123, 125, 152, 154, 178, 466, 482], "multiniftimapsmask": [47, 123, 125, 152, 154, 178, 466, 482], "connectivitymeasur": [47, 50, 51, 54, 56, 58, 98, 110, 125, 127, 129, 132, 135, 145, 154, 155, 156, 159], "fetch_atlas_yeo_2011": [47, 85, 156, 225], "liber": [47, 78], "thick_17": [47, 225, 251], "yeo_2011": [47, 466], "yeo_jneurophysiol11_mni152": [47, 466], "yeo2011_17networks_mni152_freesurferconformed1mm_liberalmask": [47, 466], "fetch_development_fmri": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 84, 88, 90, 91, 94, 98, 103, 142, 154, 155, 156, 158, 159, 176, 181, 196], "counfound": 47, "development_fmri": [47, 48, 49, 52, 53, 54, 55, 56, 58, 84, 90, 91, 94, 103], "pixar123_task": [47, 48, 49, 52, 53, 54, 55, 56, 58, 84, 90, 91, 94, 103], "pixar_spac": [47, 48, 49, 52, 53, 54, 55, 56, 58, 84, 90, 91, 94, 103], "mni152nlin2009casym_desc": [47, 48, 49, 52, 53, 54, 55, 56, 58, 84, 90, 91, 94, 103], "preproc_bold": [47, 48, 49, 52, 53, 54, 55, 56, 58, 84, 90, 91, 94, 99, 100, 103, 107], "pixar_desc": [47, 52, 53, 55, 56, 58], "reducedconfounds_regressor": [47, 52, 53, 55, 56, 58], "conenctivitymeasur": 47, "connectome_measur": [47, 50, 159], "labels_img": [47, 49, 56, 90, 93, 110, 156, 305, 368, 371, 416, 449, 451, 454, 466], "time_seri": [47, 51, 52, 54, 56, 58, 155, 156], "mean_correlation_matrix": [47, 51], "mean_": [47, 51, 110, 155, 227], "strength": [47, 142, 145, 154, 235, 358, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 479], "0x7f18d6ba78f0": 47, "latter": [47, 162, 168, 227, 228, 229, 243, 244, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448], "lag_correl": 47, "lag_cor": 47, "corrcoef": 47, "lag_correlation_matrix": 47, "03_connect": [47, 48, 49, 55, 59, 142, 154, 481], "plot_atlas_comparison": [47, 59, 481], "adjacency_matrix": [47, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 440], "maps_img": [47, 52, 53, 54, 156, 181, 368, 369, 371, 372, 417, 432, 448, 450, 452, 455, 466], "multi_nifti_maps_mask": 47, "current": [47, 49, 52, 54, 66, 70, 151, 154, 166, 168, 169, 174, 177, 181, 231, 239, 240, 248, 274, 275, 311, 361, 363, 367, 368, 369, 370, 371, 372, 373, 374, 435, 437, 438, 441, 448], "1769": 47, "fmr": 48, "exhibit": [48, 171, 181], "fluctuat": [48, 65, 168, 171, 174, 235], "decomposit": [48, 49, 50, 91, 96, 102, 108, 112, 114, 124, 127, 134, 137, 145, 151, 154, 159, 160, 175, 221, 256, 347, 348, 353, 367, 370, 373, 434, 439, 448, 461, 466, 481], "simultan": [48, 168, 231], "priori": 48, "children": [48, 98, 142, 154, 175, 196, 256], "young": [48, 114, 175, 187, 191, 196, 216, 239, 267, 274], "adult": [48, 51, 98, 114, 142, 154, 175, 191, 196, 216, 256, 274], "watch": [48, 49, 50, 52, 54, 55, 84, 88, 91, 103, 142, 154, 157, 175, 176, 181, 196, 256, 482], "movi": [48, 49, 50, 52, 54, 55, 84, 88, 91, 103, 142, 154, 157, 175, 176, 181, 196, 256, 482], "algorithm": [48, 49, 88, 91, 93, 101, 103, 104, 116, 155, 158, 159, 160, 163, 164, 166, 174, 181, 182, 184, 191, 228, 231, 274, 298, 299, 347, 379, 381, 445, 448, 450, 461], "rest_dataset": [48, 50, 53, 159], "faster": [48, 49, 103, 136, 154, 167, 168, 169, 270, 299, 356, 357, 426, 427, 433, 434, 441, 464], "n_compon": [48, 50, 91, 102, 103, 159, 298, 299, 453], "mask_strategi": [48, 88, 91, 103, 142, 148, 154, 181, 291, 292, 293, 294, 298, 299, 370, 373, 446, 466], "compon": [48, 50, 54, 65, 91, 93, 96, 108, 112, 114, 127, 134, 135, 137, 145, 154, 156, 157, 158, 159, 171, 174, 179, 180, 190, 191, 227, 228, 229, 238, 248, 256, 267, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 313, 315, 316, 323, 336, 348, 350, 353, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 418, 434, 439, 445, 446, 447, 448, 449, 450, 461, 466, 481, 482], "components_img_": [48, 50, 137, 154, 159, 160, 298, 299], "canica_components_img": 48, "components_img": [48, 50, 159], "plot_compare_decomposit": [48, 59, 142, 154, 481], "canica_resting_st": 48, "pixar124_task": 48, "pixar125_task": 48, "pixar126_task": 48, "pixar127_task": 48, "pixar128_task": 48, "pixar001_task": [48, 53, 84], "pixar002_task": [48, 53], "pixar003_task": [48, 53], "pixar004_task": 48, "pixar005_task": 48, "pixar006_task": 48, "pixar007_task": 48, "pixar008_task": 48, "pixar009_task": 48, "pixar010_task": 48, "pixar011_task": 48, "pixar012_task": 48, "pixar013_task": 48, "pixar014_task": 48, "pixar015_task": 48, "pixar016_task": 48, "pixar017_task": 48, "pixar018_task": 48, "pixar019_task": 48, "pixar020_task": 48, "pixar021_task": 48, "pixar022_task": 48, "pixar023_task": 48, "pixar024_task": 48, "functool": 48, "compute_multi_brain_mask": [48, 123, 148, 154, 370], "0x7f18cc853d80": 48, "mask_typ": [48, 377, 380], "887": 48, "extmath": 48, "randomized_svd": 48, "003659": 48, "013254": 48, "012477": 48, "002881": 48, "transpos": [48, 145, 154, 168], "n_iter": [48, 49, 261, 283, 286, 446, 447, 453], "___________________________________________________randomized_svd": 48, "0x7f18d6604590": 48, "cur_img": [48, 86], "ic": [48, 102, 190], "natur": [48, 114, 117, 174, 187, 196, 214, 256, 267, 270, 272], "cleaner": [48, 65, 139, 154], "details": 48, "dictlearn": [48, 50, 124, 127, 137, 154, 159, 160], "dict_learn": [48, 50, 159], "n_epoch": [48, 299], "umask": 48, "dictlearning_components_img": 48, "dictionary_learning_resting_st": 48, "001315": 48, "004387": 48, "011243": 48, "004194": 48, "_compute_load": 48, "002971": 48, "009535": 48, "001195": 48, "005175": 48, "622651": 48, "322742": 48, "777205": 48, "743122": 48, "_________________________________________________compute_load": 48, "_dict_learn": 48, "dict_learning_onlin": 48, "batch_siz": [48, 299, 445], "cd": [48, 177, 299], "dict_init": [48, 299], "150862": 48, "097511": 48, "284606": 48, "035436": 48, "return_cod": 48, "1090": [48, 466], "_____________________________________________dict_learning_onlin": 48, "0x7f18d6881850": 48, "comp": [48, 190, 238], "per_compon": [48, 145, 154, 298, 299, 446], "ticker": [48, 49], "formatstrformatt": 48, "gca": [48, 51, 98], "xaxi": [48, 49], "set_major_formatt": [48, 49], "_explained_vari": 48, "227098e": 48, "322679e": 48, "564968e": 48, "349425e": 48, "persist": [48, 91], "happen": [48, 91, 166, 169, 181, 464], "caus": [48, 49, 83, 91, 127, 154, 359], "wrap": [48, 49, 52, 56, 91, 161, 456], "______________________________________________explained_vari": 48, "3min": 48, "sepideh": [48, 114, 160, 298], "sadaghiani": [48, 114, 160, 298], "pinel": [48, 65, 71, 114, 160, 193, 265, 298], "andrea": [48, 114, 155, 160, 227, 298], "kleinschmidt": [48, 114, 155, 160, 227, 298], "baptist": [48, 49, 71, 114, 155, 158, 160, 193, 214, 228, 265, 270, 272, 298], "polin": [48, 49, 71, 114, 117, 155, 158, 160, 193, 214, 228, 265, 270, 272, 298, 341, 460], "pubm": [48, 114, 160, 162, 191, 237, 298, 364, 365], "ncbi": [48, 70, 114, 160, 162, 191, 199, 298, 364, 365], "nlm": [48, 70, 114, 160, 162, 191, 199, 298, 364, 365], "nih": [48, 70, 114, 160, 162, 191, 199, 298, 364, 365], "gov": [48, 70, 114, 160, 162, 191, 199, 298, 364, 365], "20153834": [48, 114, 160, 298], "compress": [48, 114, 139, 154, 157, 160, 179, 299, 482], "onlin": [48, 114, 160, 169, 194, 299, 480], "2016": [48, 99, 114, 129, 130, 131, 132, 133, 154, 160, 257, 275, 299, 420], "13th": [48, 114, 160, 299], "symposium": [48, 114, 160, 298, 299], "biomed": [48, 114, 160, 216, 298, 299], "isbi": [48, 114, 160, 298, 299], "1282": [48, 114, 160, 299], "1285": [48, 114, 160, 299], "7493501": [48, 114, 160, 299], "2909": [48, 59, 481], "constrain": [49, 50, 114, 158, 175, 194, 206, 213, 220, 221, 240, 245, 259, 446], "agglomer": [49, 114, 174, 175, 293, 294, 445, 446, 447, 453], "regim": 49, "subsequ": [49, 83, 181, 270, 272, 274, 364, 365], "empir": [49, 158, 165, 166, 167, 168, 228, 231, 365, 482], "supervis": [49, 114, 162, 164, 165, 174, 176], "pictur": [49, 116, 158, 166, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464], "discuss": [49, 56, 110, 139, 154, 158, 161, 164, 166, 171, 173, 177, 180, 365, 384, 480], "long": [49, 117, 169, 171, 364, 365, 420], "agglom": [49, 142, 154, 158, 446], "_estimator_fit": 49, "004978": 49, "000718": 49, "00231": 49, "004514": 49, "agglomerativeclust": [49, 446], "24256x24256": 49, "162682": 49, "n_cluster": [49, 445, 447, 453], "_agglom": 49, "ward_tre": 49, "return_dist": 49, "________________________________________________________ward_tre": 49, "____________________________________________________estimator_fit": 49, "980": [49, 78, 114, 205], "labels_img_": [49, 158, 368, 371, 446], "ward_labels_img": 49, "plot_data_driven_parcel": [49, 59, 481], "ward_parcel": 49, "first_plot": 49, "effect": [49, 53, 61, 65, 67, 68, 69, 74, 78, 79, 88, 94, 99, 101, 114, 125, 126, 138, 154, 160, 162, 166, 168, 170, 171, 181, 205, 227, 228, 229, 243, 244, 271, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 311, 312, 313, 315, 316, 317, 319, 320, 323, 326, 336, 338, 365, 367, 368, 369, 370, 371, 372, 373, 374, 384, 419, 432, 433, 434, 439, 441, 445, 446, 447, 448, 456], "approxim": [49, 69, 70, 114, 158, 191, 315, 316, 363, 447, 453], "mask_img_": [49, 65, 76, 78, 88, 91, 116, 181, 291, 292, 293, 294, 296, 297, 298, 299, 306, 368, 370, 371, 373], "original_voxel": 49, "mean_func_img": [49, 91], "min": [49, 53, 55, 58, 101, 102, 147, 148, 154, 356, 357, 419, 420, 424, 426, 427, 429, 430, 432, 433, 434, 435, 437, 438, 441, 442, 444], "opportun": 49, "fmri_reduc": 49, "fmri_compress": 49, "good": [49, 56, 64, 65, 114, 116, 134, 154, 155, 158, 160, 162, 163, 164, 165, 167, 168, 169, 170, 177, 179, 181, 270, 293, 294, 415, 482], "60000": 49, "base_mask": [49, 52, 53, 54, 56, 58, 91], "_filter_and_extract": [49, 52, 53, 54, 56, 58], "0x7f18b2751340": 49, "nifti_labels_mask": [49, 56], "_extractionfunctor": [49, 52, 53, 56, 58], "0x7f18c6200d10": 49, "background_label": [49, 56, 90, 181, 368, 371, 416, 451, 454, 466], "keep_masked_label": [49, 56, 90, 125, 154, 371, 451, 466], "0x7f18d71524b0": 49, "0x7f18b2751460": 49, "niftilabelsmask": [49, 54, 56, 82, 93, 95, 112, 125, 139, 140, 142, 145, 146, 147, 149, 151, 154, 156, 178, 243, 256, 367, 368, 369, 372, 451, 454, 456, 466, 481, 482], "_______________________________________________filter_and_extract": [49, 52, 53, 56, 58], "0x7f18c2e87a40": 49, "But": [49, 79, 97, 159, 168, 171, 181], "10mm": 49, "ON": 49, "001704": 49, "001692": 49, "009671": 49, "000702": 49, "minibatchkmean": [49, 445, 446], "n_init": [49, 298, 445], "kmeans_labels_img": 49, "kmeans_parcel": 49, "grow": [49, 155, 191], "unbalanc": 49, "singleton": [49, 367, 368, 369, 370, 371, 372, 373, 374, 448], "tailor": [49, 67, 158], "enforc": [49, 88, 151, 154, 155, 168, 169, 296, 297, 323], "root": [49, 168, 186, 227, 243, 244, 314, 364, 445, 446, 447], "piec": [49, 179, 482], "adapt": [49, 64, 116, 159, 162, 169, 323, 332, 364, 465, 466], "hierarchical_kmean": [49, 149, 154, 446], "hkmean": 49, "hierarchicalkmean": [49, 149, 154], "x27": [49, 62, 88, 90, 466], "parcellationsifittedparcel": 49, "hkmeans_labels_img": 49, "hierarchical_kmeans_parcel": 49, "count": [49, 100, 125, 154, 270, 272, 313], "kmeans_count": 49, "return_count": 49, "hkmeans_count": 49, "voxel_ratio": 49, "round": [49, 435, 438], "3000": 49, "nrow": [49, 63, 78, 99, 100], "sharex": 49, "gridspec_kw": [49, 79, 99], "height_ratio": 49, "semilogx": 49, "hist": [49, 68, 428], "set_ylim": 49, "scalarformatt": 49, "yaxi": 49, "set_label_coord": 49, "ec": 49, "0x7f18d7151880": 49, "thousand": [49, 181, 446], "properti": [49, 69, 164, 168, 171, 174, 181, 223, 300, 311, 323, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "notabl": [49, 156, 208], "constraint": [49, 158, 168, 361], "0x7f18c4b89c70": 49, "rena_clust": [49, 123, 154], "recursive_neighbor_agglomer": [49, 123, 154], "_________________________________recursive_neighbor_agglomer": 49, "0x7f18d6fae270": 49, "0x7f18c4a80ec0": 49, "0x7f18d68ad8e0": 49, "0x7f18d68ac6b0": 49, "rena_labels_img": 49, "rena_parcel": 49, "0x7f18d7151bb0": 49, "fmri_reduced_rena": 49, "compressed_img_rena": 49, "0x7f18c4dbf530": 49, "0x7f18d6799a30": 49, "0x7f18c61948c0": 49, "0x7f18c6197f20": 49, "0x7f18c4e85010": 49, "notic": [49, 58, 65, 100, 107, 109, 112, 226, 361], "accur": [49, 58, 65, 67, 142, 150, 154, 166, 170, 171], "said": [49, 171], "ga\u00ebl": [49, 51, 56, 98, 114, 155, 156, 158, 163, 197, 213, 242, 245, 293, 294, 298], "2014": [49, 99, 101, 114, 158, 159, 166, 167, 187, 267, 364, 384, 448], "00167": [49, 114, 158], "keribin": [49, 114], "2041": [49, 114], "2049": [49, 114], "s0031320311001439": [49, 114], "patcog": [49, 114], "andr": [49, 114, 161, 176, 447, 453], "kahn": [49, 114, 447, 453], "tran": [49, 114, 237, 447, 453], "anal": [49, 114, 447, 453], "mach": [49, 114, 447, 453], "intel": [49, 114, 447, 453], "2019": [49, 51, 98, 114, 140, 141, 142, 154, 220, 255, 447, 453, 466], "tpami": [49, 114, 447, 453], "2018": [49, 56, 75, 114, 137, 138, 139, 154, 163, 183, 196, 197, 217, 246, 247, 256, 293, 294, 318, 341, 365, 447, 453, 460], "2815524": [49, 114, 447, 453], "2996": [49, 59, 481], "regionextractor": [50, 86, 127, 129, 135, 140, 154, 159, 449, 450], "decompos": [50, 155, 159, 171, 448], "inspir": [50, 167, 169, 177], "idea": [50, 87, 93, 161, 168, 171], "canica": [50, 123, 124, 137, 148, 154, 157, 174, 299, 370, 466, 482], "instanti": [50, 51, 54, 90, 149, 154, 295, 395, 397, 400, 402, 404, 406, 408, 410, 412, 466], "0x7f18b8831850": 50, "nomin": 50, "nonzero": [50, 358, 448], "surviv": [50, 146, 154, 311, 448], "extractor": [50, 86, 159, 448, 450], "thresholding_strategi": [50, 86, 159, 448], "ratio_n_voxel": [50, 159, 448], "local_region": [50, 159, 448, 450], "min_region_s": [50, 86, 87, 159, 448, 450], "1350": [50, 159, 448, 450], "regions_img_": [50, 86, 159, 448], "regions_extracted_img": [50, 159, 450], "index_": [50, 86, 159, 448], "regions_index": [50, 159], "n_regions_extract": [50, 159], "neach": [50, 159], "0x7f18d68fd8e0": 50, "those": [50, 62, 65, 67, 69, 70, 79, 88, 107, 149, 154, 160, 162, 164, 168, 169, 171, 177, 187, 221, 222, 223, 226, 270, 360, 363, 371, 420, 442, 448, 451, 454, 455, 464], "timeseries_each_subject": [50, 159], "mean_correl": [50, 159], "regions_img": [50, 86, 159], "coords_connectom": [50, 159], "0x7f18b28cc440": 50, "find_xyz_cut_coord": [50, 86, 129, 136, 154, 159], "side": [50, 53, 63, 65, 93, 101, 123, 146, 154, 166, 270, 311, 376, 379, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 420, 428, 429, 457, 458], "nice": [50, 159], "regions_indices_of_map3": [50, 159], "rgbcmyk": [50, 159], "each_index_of_map3": [50, 159], "add_overlai": [50, 121, 154, 159, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 424, 426, 427, 432, 433, 434, 479], "alpha_cmap": [50, 159], "1347": 50, "plot_extract_regions_dictlearning_map": [50, 59, 481], "tangent": [51, 98, 135, 154, 159, 227], "embed": [51, 98, 456], "outperform": [51, 98, 155, 160], "dadi": [51, 98, 114, 197, 242], "care": [51, 98, 116, 161, 162, 164, 168, 220, 246, 247, 310], "development_dataset": [51, 98], "msdl_data": [51, 98], "msdl_coord": [51, 98], "region_coord": [51, 52, 54, 98, 131, 154, 245], "n_region": [51, 90], "aud": 51, "striat": 51, "occ": 51, "att": 51, "basal": [51, 220], "vi": 51, "sec": [51, 256], "salienc": [51, 255], "languag": [51, 70, 99, 100, 107, 114, 117, 183, 193, 199, 252, 262, 265], "cereb": 51, "dor": 51, "cing": 51, "Ins": 51, "ant": 51, "ip": 51, "niftimapsmask": [51, 52, 53, 54, 90, 98, 120, 125, 139, 146, 149, 154, 156, 178, 368, 369, 371, 448, 452, 455, 466, 482], "filter": [51, 55, 56, 58, 65, 66, 93, 102, 115, 116, 121, 123, 124, 139, 142, 147, 149, 151, 154, 161, 174, 178, 180, 235, 270, 272, 274, 290, 291, 292, 293, 294, 296, 297, 298, 299, 323, 326, 341, 358, 360, 361, 364, 367, 368, 369, 370, 371, 372, 373, 374, 446, 448, 459, 460, 482], "band": [51, 58, 151, 154, 235, 364, 459, 460], "resampling_target": [51, 53, 54, 90, 93, 98, 181, 368, 369, 371, 372, 466], "phenotyp": [51, 62, 98, 150, 154, 161, 165, 178, 186, 189, 196, 215, 235, 236, 256, 280, 482], "pooled_subject": 51, "func_fil": 51, "confound_fil": 51, "child_adult": [51, 98], "simpler": 51, "commonli": [51, 158, 170, 174, 176, 181, 365], "margin": [51, 356], "pairwis": [51, 155], "correlation_measur": [51, 54, 56], "individu": [51, 58, 62, 65, 67, 71, 75, 77, 78, 79, 80, 93, 99, 100, 107, 114, 155, 160, 173, 174, 176, 178, 181, 186, 187, 191, 193, 198, 205, 208, 227, 228, 253, 265, 338, 382, 436, 466, 482], "2d": [51, 54, 83, 90, 91, 97, 102, 115, 151, 154, 161, 164, 178, 181, 228, 229, 230, 231, 232, 298, 299, 310, 319, 343, 363, 367, 368, 369, 370, 371, 372, 373, 374, 375, 385, 387, 388, 389, 390, 391, 392, 393, 394, 399, 401, 403, 405, 407, 409, 411, 426, 445, 446, 447, 448, 454, 455, 462, 464, 472, 482], "reflect": [51, 100, 155, 169, 171, 191, 235, 239, 432, 433], "visibl": [51, 78, 148, 154, 160, 356, 429, 435, 437, 438, 442, 444, 479], "0x7f18d6916720": 51, "reveal": [51, 100, 101, 166], "partial_correlation_measur": 51, "partial_correlation_matric": 51, "weaker": [51, 65, 78], "0x7f18c4f061b0": 51, "tangent_measur": 51, "deviat": [51, 155, 291, 292, 293, 294, 296, 297], "tangent_matric": 51, "perturb": 51, "anticorrel": [51, 114, 365], "distinguish": [51, 93, 97, 98, 162, 166, 171, 175, 179], "stratifiedshufflesplit": [51, 98], "preserv": [51, 58, 98, 346, 358, 429, 445, 446, 447], "linearsvc": [51, 97, 98, 166, 291, 293], "return_invers": 51, "test_siz": [51, 98], "1d": [51, 101, 104, 105, 116, 151, 154, 179, 181, 227, 295, 313, 315, 316, 319, 325, 341, 363, 367, 368, 369, 370, 371, 372, 373, 374, 395, 402, 406, 412, 415, 448, 449, 454, 459, 460, 462, 464], "mean_scor": [51, 98], "scores_std": [51, 98], "align": [51, 56, 90, 98, 126, 154, 357, 359, 426], "xerr": [51, 98], "set_axisbelow": [51, 98], "axvlin": 51, "linestyl": 51, "showcas": [51, 60, 73, 75, 98, 109, 112, 158, 163, 169], "larger": [51, 74, 79, 85, 98, 160, 162, 166, 168, 169, 171, 296, 297, 419, 432, 433, 434, 441], "cohort": [51, 98], "kamalak": [51, 98, 114, 197, 242], "darya": [51, 98, 114], "chyzhyk": [51, 98, 114], "benchmark": [51, 56, 98, 114, 167, 364, 365], "s1053811919301594": [51, 98, 114], "plot_group_level_connect": [51, 59, 135, 142, 154, 481], "link": [52, 114, 117, 125, 132, 139, 144, 154, 157, 161, 164, 169, 171, 174, 177, 187, 197, 237, 242, 267, 280, 386, 396, 397, 421, 482], "negat": [52, 82, 95, 112, 288, 352, 434, 439, 481], "dens": [52, 54, 155, 168, 378], "highest": [52, 54, 291, 292, 293, 294, 326, 347, 461], "resample_img": [52, 54, 69, 83, 88, 92, 124, 136, 142, 151, 154, 180, 181, 270, 298, 299, 323, 336, 355, 357, 370, 373, 376, 378, 379, 381, 446], "0x7f18d68f7410": 52, "_____________________________________________________resample_img": 52, "nifti_maps_mask": [52, 53], "0x7f18d68f41a0": 52, "allow_overlap": [52, 53, 54, 58, 369, 372, 374, 466], "keep_masked_map": [52, 53, 54, 125, 154, 372, 452, 466], "msdl_atla": [52, 53, 54, 466], "msdl_roi": [52, 53, 54, 213, 245, 466], "graphicallassocv": [52, 53, 57, 58, 155, 168, 229], "scitkit": [52, 57, 58], "v0": [52, 57, 58, 139, 142, 147, 149, 154, 219, 247], "graphlassocv": [52, 57, 58], "graphicallassocvifittedgraphicallassocv": [52, 53, 58], "covariance_": [52, 53, 58, 155], "axesimag": [52, 54, 56], "0x7f18d68db710": 52, "0x7f18d63ae1b0": 52, "precision_": [52, 53, 57, 155], "0x7f18d6e67320": 52, "865": 52, "plot_inverse_covariance_connectom": [52, 59, 481], "plot_matric": 53, "cov": [53, 313, 315, 316, 480], "prec": [53, 168], "put": [53, 54, 69, 70, 97, 121, 154, 169, 227, 291, 292, 293, 294, 298, 299, 323, 368, 369, 370, 371, 372, 373, 374, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 420, 446, 448, 460, 466], "diagon": [53, 54, 56, 58, 85, 132, 154, 168, 180, 227, 231, 233, 234, 355, 356, 415, 431, 449], "clariti": 53, "span": [53, 69, 171, 419, 432, 433, 434, 441], "msdl_atlas_dataset": 53, "subject_time_seri": 53, "confound_filenam": [53, 55], "region_t": 53, "__________________________________________high_variance_confound": 53, "0x7f18d6908620": 53, "174325": 53, "048779": 53, "044073": 53, "155444": 53, "1min": 53, "151677": 53, "057023": 53, "206928": 53, "102714": 53, "0x7f18c6220a40": 53, "127944": 53, "087084": 53, "015679": 53, "02587": 53, "0x7f18c6222420": 53, "089762": 53, "062316": 53, "065223": 53, "022868": 53, "groupsparsecovariancecv": [53, 57, 155, 168], "gsc": [53, 57], "gl": [53, 57], "likelihood": [53, 168, 171, 227, 310, 313, 314, 315, 316], "decreas": [53, 65, 94, 114, 168, 169, 205, 419, 432, 433, 434, 441], "stop": [53, 96, 108, 112, 114, 117, 167, 228, 231, 270, 272, 346, 351, 352, 354, 426, 434, 439, 445, 481], "refin": [53, 57, 58, 229], "optim": [53, 57, 99, 114, 142, 146, 154, 162, 164, 167, 168, 197, 229, 231, 242, 356, 357], "toler": [53, 91, 103, 168, 228, 229, 231, 296, 297, 345], "reach": [53, 168, 169, 171, 176, 270, 364], "841e": 53, "graphical_lasso": 53, "68e": 53, "gap": [53, 228, 231], "123e": 53, "664e": 53, "158e": 53, "389e": 53, "530e": 53, "318e": 53, "844e": 53, "atlas_region_coord": [53, 156], "graphicallasso": [53, 155], "edge_vmax": [53, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421], "edge_vmin": [53, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421], "groupsparsecovari": [53, 155, 168, 229], "precisions_": [53, 57, 155, 228, 229], "covariances_": [53, 155, 228, 229], "plot_multi_subject_connectom": [53, 59, 481], "________________________________________resample_img": 54, "__________________________________filter_and_extract": [54, 56], "generate_report": [54, 58, 70, 88, 90, 91, 125, 126, 149, 154, 181, 323, 336, 368, 369, 370, 371, 372, 373, 374, 448], "displayed_map": [54, 369, 372, 448], "contrarili": [54, 90, 371, 372, 466], "summar": [54, 58, 90, 161, 169, 315, 369, 371, 372, 374, 457, 466], "pca": [54, 298, 369, 372, 466], "miss": [54, 76, 83, 125, 148, 154, 169, 174, 330, 369, 372, 378, 381, 466], "definit": [54, 62, 90, 93, 125, 154, 156, 164, 165, 168, 169, 170, 174, 178, 197, 213, 217, 242, 305, 363, 368, 369, 371, 372, 374, 422, 451, 452, 454, 455, 466, 482], "ref": [54, 90, 466], "correlation_matrix": [54, 56, 479], "major": [54, 93, 169, 176, 221], "fill_diagon": [54, 56], "0x7f18d68ff5f0": 54, "plot_probabilistic_atlas_extract": [54, 59, 481], "depict": [55, 169, 180], "advanc": [55, 108, 114, 161, 163, 164, 169, 170, 176, 180, 259, 291, 293, 294, 348, 367, 373, 420, 434, 481, 482], "lie": [55, 228, 231, 371, 451], "1st": 55, "hard": [55, 156, 168, 174, 179], "drive": 55, "wide": [55, 69, 104, 114, 161, 162, 164, 168, 169, 206, 257, 275, 295], "pcc_coord": [55, 61, 170], "niftispheresmask": [55, 58, 61, 68, 99, 122, 126, 127, 129, 140, 144, 146, 152, 154, 170, 178, 466, 482], "bandpass": 55, "seed_mask": [55, 61, 99, 170], "seed_time_seri": [55, 61, 170], "brain_mask": [55, 99], "brain_time_seri": 55, "n_volum": 55, "32504": 55, "exemplarili": 55, "divid": [55, 75, 76, 78, 110, 132, 154, 162, 171, 174, 233, 446], "seed_to_voxel_correl": 55, "954": [55, 59, 481], "extrem": [55, 121, 154, 457], "seed_to_voxel_correlations_img": 55, "marker_coord": [55, 61, 99, 140, 142, 154, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 443], "At": [55, 63, 64, 67, 76, 79, 90, 159, 176, 177, 336, 338], "plot_seed_to_voxel_correl": [55, 59, 140, 154, 481], "pcc_seed_correl": 55, "seed_to_voxel_correlations_fisher_z": 55, "arctanh": 55, "762": 55, "874f": 55, "eventu": [55, 479], "seed_to_voxel_correlations_fisher_z_img": 55, "pcc_seed_correlation_z": 55, "940": [55, 59, 481], "1144": 55, "movement": [56, 114, 176, 181], "load_confound": [56, 65, 124, 125, 126, 149, 154, 156, 181, 326, 365], "flexibli": 56, "guidelin": [56, 93, 114, 123, 148, 151, 154, 161, 177], "reorder": [56, 137, 154, 355, 415, 431], "reduce_confound": [56, 256], "reduced_confound": 56, "preselect": 56, "metadata": [56, 90, 117, 124, 142, 154, 180, 214, 215, 227, 228, 229, 270, 271, 272, 273, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 363, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448], "nifti1head": [56, 90], "endian": [56, 90, 135, 154, 350, 356], "sizeof_hdr": [56, 90], "data_typ": [56, 90], "db_name": [56, 90], "extent": [56, 90, 94, 174, 397, 400], "session_error": [56, 90], "dim_info": [56, 90], "intent_p1": [56, 90], "intent_p2": [56, 90], "intent_p3": [56, 90], "intent_cod": [56, 90], "datatyp": [56, 90], "bitpix": [56, 90], "slice_start": [56, 90], "pixdim": [56, 90], "vox_offset": [56, 90], "scl_slope": [56, 90], "scl_inter": [56, 90], "slice_end": [56, 90], "slice_cod": [56, 90], "xyzt_unit": [56, 90], "cal_max": [56, 90], "cal_min": [56, 90], "slice_dur": [56, 90], "toffset": [56, 90], "glmax": [56, 90], "glmin": [56, 90], "descrip": [56, 90], "aux_fil": [56, 90], "qform_cod": [56, 90], "sform_cod": [56, 90], "quatern_b": [56, 90], "quatern_c": [56, 90], "quatern_d": [56, 90], "qoffset_x": [56, 90], "qoffset_i": [56, 90], "qoffset_z": [56, 90], "srow_x": [56, 90], "srow_i": [56, 90], "srow_z": [56, 90], "intent_nam": [56, 90], "magic": [56, 90, 419, 426, 427, 429, 433, 434], "0x7f18b28b5070": 56, "0x7f18b288c290": 56, "0x7f18b3d1d400": 56, "cover": [56, 169, 181, 198, 205, 253, 255, 415], "firstli": 56, "did": [56, 91, 103, 133, 149, 154, 171], "bad": [56, 104, 168, 169], "No": [56, 65, 76, 90, 104, 168, 169, 357, 466], "0x7f18ba0e5f70": 56, "0x7f18c5991850": 56, "ensur": [56, 58, 99, 139, 146, 152, 154, 166, 168, 169, 171, 177, 275, 311, 336, 338, 371, 385, 387, 388, 451], "steadi": [56, 65, 147, 154, 323, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 448, 460], "correctli": [56, 65, 92, 126, 140, 142, 143, 151, 154, 164, 171, 177, 323, 364, 365, 480], "confounds_simpl": 56, "wm_csf": [56, 326, 364, 365], "cosine00": 56, "cosine01": 56, "cosine02": 56, "cosine03": 56, "rot_x": 56, "rot_i": 56, "rot_z": 56, "trans_x": 56, "trans_i": 56, "trans_z": 56, "white_matt": 56, "0x7f18b3e38fe0": 56, "109104": 56, "109090": 56, "109066": 56, "026078": 56, "055006": 56, "876886": 56, "108937": 56, "108723": 56, "027587": 56, "049458": 56, "418909": 56, "108990": 56, "108632": 56, "108038": 56, "019085": 56, "075787": 56, "540842": 56, "108875": 56, "108176": 56, "107012": 56, "023900": 56, "053022": 56, "922085": 56, "107567": 56, "105651": 56, "033396": 56, "077764": 56, "843388": 56, "064873": 56, "022169": 56, "221217": 56, "064266": 56, "042248": 56, "237783": 56, "053241": 56, "029500": 56, "590905": 56, "081559": 56, "034236": 56, "122246": 56, "069287": 56, "007294": 56, "000828": 56, "0x7f18c591fb90": 56, "exceed": [56, 136, 154], "framewis": [56, 256, 364], "displac": [56, 191, 256, 364], "standardis": 56, "dvar": [56, 364], "five": [56, 65, 446], "percentag": [56, 161, 188, 291, 292, 293, 294], "volumn": [56, 364], "suitabl": [56, 67, 139, 154, 162, 166, 181, 268, 365], "confounds_scrub": [56, 326], "fd_threshold": [56, 126, 154, 364, 365], "std_dvars_threshold": [56, 126, 154, 364, 365], "0x7f18b09aa150": 56, "108440": 56, "106895": 56, "110644": 56, "026366": 56, "054759": 56, "878390": 56, "108401": 56, "106742": 56, "110301": 56, "027876": 56, "049211": 56, "420413": 56, "108325": 56, "106438": 56, "109616": 56, "019374": 56, "075540": 56, "542346": 56, "108211": 56, "105981": 56, "108591": 56, "024188": 56, "052775": 56, "923589": 56, "108058": 56, "105373": 56, "107229": 56, "033685": 56, "077517": 56, "844892": 56, "109387": 56, "104073": 56, "064585": 56, "022416": 56, "219713": 56, "109540": 56, "105434": 56, "064554": 56, "042495": 56, "236279": 56, "109654": 56, "106460": 56, "052952": 56, "029747": 56, "589401": 56, "109731": 56, "107145": 56, "081847": 56, "034483": 56, "120742": 56, "109769": 56, "107488": 56, "068998": 56, "007541": 56, "999324": 56, "0x7f18ba0e68a0": 56, "grand": [56, 323], "physiolog": [56, 65, 68, 365], "artifact": [56, 114, 181, 341, 364, 365, 460], "minim": [56, 62, 169, 174, 323, 325, 330, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 432], "degre": [56, 66, 99, 106, 171, 235, 311, 314, 320, 365, 435, 437, 438], "freedom": [56, 99, 106, 156, 171, 311, 314, 320, 365], "downsid": [56, 65], "confounds_minimal_no_gsr": 56, "global_sign": [56, 126, 154, 364, 365], "gsr": 56, "0x7f18b152a180": 56, "0x7f18b3d22930": 56, "load_confounds_strategi": [56, 126, 149, 154, 156, 181, 364], "ciric": [56, 114, 364, 365], "park": [56, 114, 365], "compcor": [56, 65, 114, 126, 149, 154, 156, 256, 347, 364, 365, 461], "ica_aroma": [56, 149, 154, 364, 365], "denoise_strategi": [56, 126, 154, 365], "2min": 56, "2013": [56, 114, 142, 154, 155, 156, 166, 167, 186, 191, 197, 213, 235, 239, 245, 364], "s1053811913003340": [56, 114, 155, 156, 213, 245], "rastko": [56, 114, 364, 365], "h": [56, 64, 114, 195, 200, 201, 202, 203, 204, 216, 224, 241, 250, 257, 274, 275, 279, 310, 314, 364, 365], "wolf": [56, 58, 114, 168, 364, 365], "jonathan": [56, 58, 75, 114, 167, 191, 198, 218, 219, 225, 247, 251, 253, 254, 318, 364, 365, 420], "roalf": [56, 114, 364, 365], "graham": [56, 114, 364, 365], "baum": [56, 114, 364, 365], "kosha": [56, 114, 364, 365], "ruparel": [56, 114, 364, 365], "shinohara": [56, 114, 364, 365], "eickhoff": [56, 114, 219, 221, 247, 248, 364, 365], "christo": [56, 114, 364, 365], "davatziko": [56, 114, 364, 365], "ruben": [56, 114, 364, 365], "gur": [56, 114, 364, 365], "raquel": [56, 114, 364, 365], "bassett": [56, 114, 364, 365], "theodor": [56, 114, 364, 365], "satterthwait": [56, 114, 364, 365], "2017": [56, 114, 134, 135, 136, 154, 161, 163, 193, 217, 219, 246, 247, 265, 293, 294, 364, 365, 420, 466], "linden": [56, 114, 365], "fulcher": [56, 114, 365], "murat": [56, 114, 365], "y\u00fccel": [56, 114, 365], "fornito": [56, 114, 156, 365], "evalu": [56, 114, 164, 168, 174, 194, 222, 224, 250, 291, 292, 293, 294, 310, 314, 365, 457, 458], "efficaci": [56, 114, 365], "reliabl": [56, 114, 139, 154, 171, 193, 265, 365], "plot_signal_extract": [56, 59, 181, 481], "_util": [57, 110, 124, 126, 129, 148, 151, 154, 168, 169, 177], "data_gen": [57, 124, 151, 154, 168], "generate_group_sparse_gaussian_graph": [57, 168], "n_displai": 57, "min_n_sampl": 57, "max_n_sampl": 57, "max_precis": 57, "alpha_": [57, 229], "group_sparse_cov": 57, "instabl": [57, 65, 168, 459], "818": [57, 59, 481], "plot_simulated_connectom": [57, 59, 481], "spheric": 58, "dmn_coord": [58, 181, 479], "temporopariet": 58, "junction": 58, "prefront": 58, "sequenc": [58, 61, 65, 67, 78, 110, 125, 154, 161, 170, 174, 179, 181, 265, 291, 292, 293, 294, 313, 315, 316, 323, 336, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 435, 437, 438, 440, 458, 459, 464], "clean__butterworth__padtyp": 58, "butterworth": [58, 123, 124, 147, 151, 154, 341, 368, 369, 370, 371, 372, 373, 374, 460], "confounds_filenam": 58, "nifti_spheres_mask": 58, "0x7f18d68d8140": 58, "butterworth__padtyp": 58, "tweak": [58, 88, 159], "displayed_spher": [58, 374], "knowledg": [58, 115, 156, 171, 374, 466], "brows": [58, 117, 149, 154, 214, 466], "button": [58, 65, 67, 71, 75, 76, 78, 79, 104, 149, 154, 169, 171, 263, 265, 273, 466], "2144": 58, "ledoit": [58, 168], "connectivity_measur": 58, "partial_correlation_matrix": 58, "0x7f18b3e3a840": 58, "suppli": [58, 295, 296, 297, 330, 364, 371, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 451, 460], "fetch_coords_power_2011": [58, 218], "dict_kei": 58, "collect": [58, 99, 102, 106, 114, 115, 169, 174, 186, 190, 194, 212, 214, 270, 271, 272, 273, 364, 482], "spheres_mask": 58, "exce": [58, 229], "graphic": [58, 114, 155, 168, 169, 182, 228, 231], "covariance_estim": 58, "_method": 58, "runtimewarn": [58, 76, 78, 110], "invalid": [58, 110, 123, 129, 154, 372, 452], "encount": [58, 76, 78, 110, 435, 437, 438], "subtract": [58, 65, 100, 176, 271], "strongest": 58, "node_s": [58, 140, 142, 149, 154, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 430, 440], "0x7f18c591f890": 58, "sometim": [58, 65, 79, 117, 121, 125, 154, 161, 169, 174, 310, 314], "overwhelm": 58, "plot_mark": [58, 145, 149, 151, 154, 479], "node_strength": 58, "0x7f18b1394a70": 58, "clip": [58, 83, 356, 357], "positive_edg": 58, "negative_edg": 58, "node_strength_posit": 58, "node_strength_neg": 58, "node_cmap": [58, 430], "ylorrd": 58, "pubu": 58, "0x7f18c61b61b0": 58, "fetch_coords_dosenbach_2010": [58, 130, 133, 154, 198], "0x7f18ac354740": 58, "cerebellum": [58, 114, 187, 198, 220, 253, 255, 267], "cingulo": 58, "opercular": [58, 90], "fronto": [58, 100], "occipit": [58, 90], "sensorimotor": 58, "alexand": [58, 114, 186, 198, 218, 219, 235, 247, 253, 254], "cohen": [58, 114, 198, 218, 253, 254], "nelson": [58, 114, 198, 218, 253, 254], "gagan": [58, 114, 198, 218, 253, 254], "wig": [58, 114, 198, 218, 253, 254], "barn": [58, 114, 191, 198, 218, 253, 254, 364, 365], "jessica": [58, 114, 190, 198, 218, 221, 238, 248, 253, 254], "church": [58, 114, 198, 218, 253, 254], "alecia": [58, 114, 198, 218, 253, 254], "timothi": [58, 114, 187, 218, 219, 247, 254, 267, 364], "o": [58, 99, 114, 129, 154, 161, 169, 187, 188, 205, 218, 219, 235, 237, 247, 254, 267, 364], "laumann": [58, 114, 218, 219, 247, 254, 364], "fran": [58, 114, 218, 254], "miezin": [58, 114, 218, 254], "bradlei": [58, 114, 187, 191, 198, 205, 218, 220, 253, 254, 255, 267, 364, 365], "schlaggar": [58, 114, 191, 198, 218, 220, 253, 254, 255, 364, 365], "petersen": [58, 114, 191, 198, 218, 220, 253, 254, 255, 364, 365], "nov": [58, 114, 218, 254], "nico": [58, 114, 198, 220, 253, 255], "binyam": [58, 114, 198, 253], "nardo": [58, 114, 198, 253], "damien": [58, 114, 198, 253], "lessov": [58, 114, 198, 253], "joseph": [58, 114, 155, 190, 198, 238, 253], "dubi": [58, 114, 198, 253], "feczko": [58, 114, 198, 253], "rebecca": [58, 114, 196, 198, 253, 256], "coalson": [58, 114, 198, 253], "pruett": [58, 114, 198, 253], "deanna": [58, 114, 187, 198, 220, 253, 255, 267], "barch": [58, 114, 187, 197, 198, 253, 267], "matur": [58, 114, 198, 253], "5997": [58, 114, 198, 253], "1358": [58, 114, 198, 253], "1361": [58, 114, 198, 253, 466], "1194144": [58, 114, 198, 253], "955": 58, "plot_sphere_based_connectom": [58, 59, 142, 154, 481], "1346": [59, 481], "1768": [59, 481], "1187": [59, 108, 481], "864": [59, 481], "1143": [59, 466, 481], "focus": [60, 73, 97, 109, 112, 116, 131, 137, 154, 162, 165, 166, 169], "adhd": [60, 72, 84, 112, 142, 151, 154, 155, 170, 183, 236, 323, 330, 367, 374, 397, 434, 456, 458, 466, 476, 481], "finit": [60, 72, 76, 78, 102, 112, 135, 154, 170, 174, 266, 323, 325, 330, 341, 358, 375, 378, 419, 422, 423, 433, 434, 460, 481], "impul": [60, 72, 112, 266, 323, 422, 423, 434, 481], "fir": [60, 63, 72, 112, 152, 154, 170, 174, 266, 323, 325, 330, 422, 423, 434, 481], "residu": [60, 62, 72, 112, 149, 154, 166, 172, 191, 277, 297, 310, 311, 314, 315, 316, 323, 336, 341, 342, 353, 358, 367, 374, 378, 412, 434, 457, 481, 482], "openneuro": [60, 72, 112, 170, 196, 211, 256, 257, 275, 276, 290, 323, 326, 363, 366, 373, 422, 426, 428, 456, 457, 458, 465, 481], "understand": [60, 72, 82, 95, 112, 133, 154, 162, 164, 169, 176, 178, 213, 256, 261, 263, 264, 266, 269, 323, 347, 348, 353, 357, 364, 367, 373, 378, 422, 423, 424, 433, 434, 439, 456, 481, 482], "workflow": [61, 169, 177, 365], "determin": [61, 78, 93, 99, 100, 101, 106, 166, 168, 169, 194, 208, 229, 297, 326, 337, 361, 376, 377, 378, 379, 380, 381, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 426, 427, 429, 433, 434, 441, 445, 464], "make_first_level_design_matrix": [61, 63, 67, 69, 107, 149, 154, 170], "frametim": 61, "add_subplot": [61, 90], "set_titl": [61, 63, 68, 77, 78, 79, 90, 99, 104], "add_reg": [61, 63, 107, 170, 330], "add_reg_nam": [61, 63, 330], "pcc_seed": 61, "dmn_contrast": 61, "seed_based_glm": [61, 465], "setup": [61, 67, 107, 124, 150, 154, 173, 235, 236, 237, 238, 239, 240, 241, 245, 248, 249, 251, 259, 260, 263, 264, 265, 268, 269, 274, 280, 448, 480], "first_level_model": [61, 64, 65], "run_img": [61, 100, 107, 323], "design_matric": [61, 62, 69, 70, 99, 170, 323], "snapshot": 61, "dmn_z_map": 61, "portabl": [61, 74, 181], "readi": [61, 74, 116, 133, 154, 160, 169, 177], "pertin": [61, 74], "min_dist": [61, 323, 336, 457, 458], "plot_typ": [61, 323, 336, 458], "plot_adhd_dmn": [61, 72, 481], "786": [61, 72, 75, 114, 318, 481], "750": [61, 72, 481], "exploit": [62, 160, 168], "io": [62, 100, 147, 154, 159, 177, 186, 192, 196, 197, 209, 217, 242, 246, 256, 265, 442, 480], "s3": 62, "bucket": 62, "assur": 62, "against": [62, 161, 170, 174, 270, 338, 384, 431], "stopsign": 62, "ds000030": [62, 257], "v4": [62, 126, 154], "emploi": [62, 173, 174, 206, 457, 458], "fetch_ds000030_url": [62, 151, 154, 275], "fetch_openneuro_dataset": 62, "select_from_index": 62, "exclusion_pattern": 62, "mriqc": 62, "parameter_plot": 62, "physio_plot": 62, "t1w": 62, "dwi": 62, "beh": 62, "bart": 62, "scap": 62, "exclusion_filt": [62, 290], "data_dir": [62, 99, 100, 107, 148, 154, 179, 209, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281], "subject_id": [62, 100, 107, 277, 278], "moreov": [62, 100, 107, 151, 154, 169, 176, 226, 361], "task_label": [62, 100, 107, 326], "space_label": [62, 326], "folder": [62, 93, 100, 107, 149, 154, 169, 177, 179, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 274, 275, 276, 277, 278, 279, 280, 281, 326, 351, 361], "fmriprep": [62, 65, 125, 126, 149, 151, 154, 156, 160, 171, 174, 181, 256, 260, 261, 285, 326], "app": [62, 114, 187, 267, 326], "first_level_from_bid": [62, 99, 100, 107, 124, 125, 126, 154, 425], "mni152nlin2009casym": 62, "derivatives_fold": [62, 326], "models_run_img": [62, 99, 100, 107, 326], "models_ev": [62, 100, 107, 326], "models_confound": [62, 99, 100, 107, 326], "minimize_memori": [62, 68, 70, 170, 323, 326, 336], "overrid": [62, 99, 110, 146, 154, 235, 236, 237, 238, 239, 240, 241, 245, 248, 249, 251, 259, 260, 263, 264, 265, 268, 269, 274, 280, 446], "interfac": [62, 126, 145, 149, 152, 154, 160, 168, 169, 174, 291, 292], "get_design_from_fslmat": [62, 149, 154], "fsl_design_matrix_path": [62, 366], "feat": 62, "mat": [62, 366, 431], "column_nam": [62, 366], "stopsuccess": [62, 465], "design_column": [62, 321], "cond_": 62, "10159": [62, 465], "firstlevelmodelifittedfirstlevelmodel": 62, "nib": 62, "fsl_z_map": 62, "zstat12": 62, "isf": [62, 75, 78, 100, 106, 107], "unc": [62, 78, 79, 100], "plot_img_comparison": 62, "masker_": [62, 65, 76, 78, 291, 292, 293, 294, 296, 297, 298, 299, 446], "ref_label": [62, 428], "src_label": [62, 428], "latex": [62, 123, 154, 177], "purpos": [62, 67, 69, 70, 78, 100, 107, 116, 168, 173, 181, 186, 189, 193, 196, 197, 213, 217, 222, 256, 323, 336, 386, 458, 479], "to_latex": 62, "tabular": 62, "llrrrrl": 62, "toprul": 62, "midrul": 62, "000000": [62, 65], "307532": 62, "6300": 62, "668929": 62, "534376": 62, "254210": 62, "918703": 62, "2520": 62, "715845": 62, "2b": [62, 465], "683343": 62, "2c": [62, 465], "587956": 62, "692869": 62, "664250": 62, "461193": 62, "257986": 62, "078390": 62, "815609": 62, "5c": 62, "798387": 62, "208105": 62, "348351": 62, "190472": 62, "385929": 62, "163956": 62, "079389": 62, "056165": 62, "10a": [62, 465], "726486": 62, "10b": 62, "710553": 62, "043724": 62, "950054": 62, "937283": 62, "906274": 62, "756": [62, 99, 114, 465], "14a": [62, 465], "882906": 62, "776293": 62, "bottomrul": 62, "plot_bids_featur": [62, 72, 481], "save_glm_to_bid": [62, 123, 151, 152, 154], "contrast_typ": [62, 126, 154, 311, 319, 363], "out_dir": [62, 363], "nilearn_glm": 62, "prefix": [62, 326, 341, 363, 368, 369, 370, 371, 372, 373, 374, 460], "_task": [62, 326], "stopsuccessminusgo": 62, "r_squar": [62, 68, 149, 154, 315, 323, 336], "glob": [62, 127, 137, 154, 178, 342, 361, 482], "join": [62, 102, 169, 464, 480], "relative_to": 62, "dataset_descript": [62, 363], "json": [62, 99, 100, 107, 117, 152, 154, 326, 361, 363, 364, 365], "10159_task": 62, "stopsignal_contrast": 62, "stopsuccessminusgo_design": 62, "stopsuccessminusgo_stat": 62, "effect_statmap": [62, 363], "p_statmap": 62, "t_statmap": 62, "variance_statmap": [62, 363], "z_statmap": 62, "stopsignal_design": 62, "stopsignal_stat": 62, "errorts_statmap": [62, 363], "rsquare_statmap": [62, 363], "stopsignal_statmap": 62, "compris": [63, 65, 85, 449, 457], "trial": [63, 65, 71, 114, 125, 154, 161, 170, 174, 268], "c0": 63, "c1": 63, "c3": 63, "motion": [63, 65, 68, 100, 114, 147, 154, 170, 191, 256, 323, 326, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 448, 460], "jointli": [63, 169, 353, 429, 435, 437, 438, 442, 444], "cumsum": 63, "translat": [63, 142, 154, 180, 323, 326, 336, 339, 364, 458], "rigid": [63, 191], "bodi": [63, 191, 456], "tx": 63, "ty": 63, "tz": 63, "rx": 63, "ry": 63, "rz": 63, "varieti": [63, 99, 160, 161, 162, 163, 164, 169, 174], "x1": [63, 93, 464], "polynomi": [63, 65, 170, 323, 330], "x2": [63, 93], "x3": 63, "fir_delai": [63, 64, 323, 325, 326, 330], "ax3": 63, "hemodyam": 64, "audio_comput": [64, 65, 67, 210], "audio_left_hand_button_press": [64, 65, 67, 210], "audio_right_hand_button_press": [64, 65, 67, 210], "horizontal_checkerboard": [64, 65, 210], "sentence_listen": [64, 65, 67, 210], "sentence_read": [64, 65, 67, 210], "vertical_checkerboard": [64, 65, 210], "visual_comput": [64, 65, 67, 210], "visual_left_hand_button_press": [64, 65, 67, 210], "visual_right_hand_button_press": [64, 65, 67, 210], "fetch_localizer_first_level": [64, 65, 67, 210], "epi_img": [64, 65, 67, 88, 181, 210, 266, 378, 381, 424], "events_fil": [64, 65, 67], "impuls": [64, 66, 170, 171, 174, 323, 325, 330], "behind": 64, "concret": [64, 169, 171], "interv": [64, 65, 99, 291, 292, 293, 294, 296, 297, 313, 315, 316, 447, 453, 464], "character": [64, 65, 114, 176, 207, 364], "hairi": 64, "sorri": 64, "price": [64, 166], "flexibl": [64, 128, 154], "contrast_matrix": [64, 65, 67, 69], "audio": [64, 65, 67], "video": [64, 169], "sentenc": [64, 65, 67, 70, 71, 80, 100, 114, 199, 209, 265], "breath": [64, 65], "contrast_id": [64, 65, 67, 69, 70], "contrast_v": [64, 65, 67, 69, 70], "ask": [64, 117, 139, 142, 154, 169, 177, 214], "yet": [64, 79, 103, 114, 149, 154, 161, 169, 176, 432], "plot_fir_model": [64, 72, 481], "clarifi": [65, 147, 154], "exploratori": 65, "increment": [65, 94, 176, 177], "outcom": [65, 174, 365], "reader": [65, 176, 482], "familiar": [65, 169, 176], "concept": [65, 97, 142, 154, 161, 162, 169, 174, 178, 208, 482], "paradigm": [65, 67, 69, 96, 108, 112, 117, 161, 171, 210, 223, 266, 272, 330, 346, 351, 352, 354, 426, 434, 439, 481], "bmc": [65, 71, 114, 193, 265], "2007": [65, 71, 114, 183, 193, 205, 216, 265, 274, 347, 364, 365, 461], "probe": [65, 67, 165, 174], "press": [65, 67, 71, 75, 76, 78, 79, 104, 114, 171, 263, 265, 273, 315, 316], "horizont": [65, 71, 79, 152, 154, 265, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "checkerboard": [65, 71, 79, 265], "listen": [65, 67, 80, 265], "short": [65, 99, 109, 111, 112, 117, 168, 169, 174, 219, 227, 246, 247, 250, 270, 271, 272, 273, 291, 303, 304, 305, 306, 307, 308, 431, 435, 439, 481], "epoch": [65, 299], "100m": 65, "male": [65, 205, 235], "voic": 65, "instruct": [65, 67, 71, 112, 123, 150, 154, 169, 175, 177, 271, 480], "passiv": 65, "verifi": [65, 100, 169, 181], "understood": [65, 270], "flash": 65, "narr": [65, 80, 169], "400000": 65, "700000": 65, "399994": 65, "700012": 65, "make_localizer_contrast": 65, "involv": [65, 67, 69, 99, 114, 171, 176, 186, 235], "differenti": [65, 69], "stori": [65, 67, 114, 211, 268], "comptat": 65, "encapsul": [65, 227, 228, 229, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448], "plot_contrast": 65, "discret": [65, 69, 123, 146, 147, 154, 191, 323, 332, 351, 364, 368, 369, 370, 371, 372, 373, 374, 460], "spuriou": [65, 114, 159, 169, 191, 364, 365, 449], "heart": 65, "scanner": [65, 171, 174, 364], "01hz": [65, 235], "longest": 65, "multipli": [65, 83, 89, 132, 154, 166, 168, 234, 310, 313, 315, 316, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 429, 435, 437, 438, 442, 444], "shall": 65, "wors": [65, 297], "poorli": [65, 93, 181], "mayb": [65, 117, 384], "useless": 65, "haven": [65, 102], "basi": [65, 67, 107, 170, 191, 323, 325, 330, 364], "undershoot": 65, "strong": [65, 88, 168, 169], "seem": [65, 74, 97, 168], "someth": 65, "inclus": [65, 290], "sole": [65, 117, 168, 305, 306, 368, 369, 370, 371, 372, 373], "discount": 65, "misspecif": 65, "hint": [65, 155, 156], "misfit": 65, "valuabl": [65, 169], "shift": [65, 145, 151, 154, 368, 369, 370, 371, 372, 373, 374, 460], "mi": 65, "sake": [65, 78, 104], "simplic": [65, 67, 161], "readabl": [65, 124, 154], "drop": [65, 68, 99, 134, 135, 136, 140, 154, 169, 176, 177], "far": [65, 107, 168, 356, 362], "implicitli": [65, 67, 79, 101, 107, 161, 168], "autoregress": [65, 323, 332], "ordinari": [65, 101, 104, 314, 384], "least": [65, 66, 99, 101, 102, 104, 114, 161, 167, 169, 299, 310, 314, 323, 332, 336, 337, 338, 369, 372, 374, 378, 384, 415, 480], "assum": [65, 69, 70, 77, 78, 166, 171, 177, 234, 275, 276, 313, 314, 315, 316, 320, 323, 336, 338, 341, 356, 359, 383, 431, 459, 460], "recomput": [65, 97, 166, 320], "obviou": 65, "stick": 65, "arguabl": 65, "greater": [65, 99, 147, 149, 154, 171, 191, 323, 332, 340, 347, 360, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 426, 429, 430, 434, 438, 440, 442, 444, 457, 461, 464], "complex": [65, 76, 86, 114, 117, 161, 163, 166, 169, 173, 176, 181], "ar3": [65, 332], "wish": [65, 78, 104, 149, 154, 169, 174, 177, 222, 260, 261, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 421, 424, 426, 427, 430, 432, 433, 434], "computation": [65, 162, 166], "problemat": 65, "uncontrol": 65, "spike": 65, "phenomena": 65, "respir": 65, "blood": [65, 171, 174], "oxygen": [65, 171, 174], "themselv": [65, 117, 181], "routin": [65, 88, 179, 268, 479], "percentil": [65, 86, 87, 97, 291, 292, 293, 294, 296, 297, 340, 347, 360, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 403, 405, 406, 407, 409, 411, 412, 418, 421, 432, 440, 441, 442, 444, 448, 461], "kill": 65, "somewhat": 65, "colinear": 65, "scrub": [65, 123, 147, 149, 154, 156, 191, 323, 326, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 448, 460], "scenario": [65, 170, 171, 181], "exclud": [65, 117, 449], "unwant": [65, 114, 191], "discrep": [65, 168], "drawback": 65, "bias": 65, "mild": 65, "5mm": [65, 94, 176, 209], "smoother": 65, "firstlevemodel": 65, "grei": [65, 88, 132, 142, 148, 154, 180, 181, 207, 260, 261, 283, 284, 285, 287, 377, 380], "fetch_icbm152_brain_gm_mask": [65, 74, 132, 154, 207, 260], "data_mask": [65, 103], "icbm_mask": 65, "driven": [65, 160, 169, 176, 191, 239, 330], "resample_to_img": [65, 74, 92, 131, 154, 180, 181, 356], "resampled_icbm_mask": 65, "spot": 65, "interestingli": 65, "resili": 65, "reassur": 65, "plot_first_level_detail": [65, 72, 481], "hemodynam": [66, 69, 161, 174], "propos": [66, 99, 169, 170, 177, 188, 194, 378], "primat": 66, "agent": 66, "mion": 66, "monkei": 66, "coupl": [66, 110, 155, 177], "metabol": [66, 171, 174], "phenomenolog": 66, "framework": [66, 155, 256], "whenev": [66, 162, 339], "uncertainti": [66, 75, 78, 168, 170, 171, 174], "issu": [66, 134, 135, 136, 137, 138, 146, 148, 149, 151, 168, 169, 171, 173, 174, 345, 350], "occur": [66, 127, 154, 171, 174, 235, 480], "time_length": [66, 327, 328, 329, 333, 334, 335], "amplitud": [66, 235, 325, 330, 440, 442, 444], "exp_condit": [66, 325], "stim": 66, "oversampl": [66, 323, 325, 327, 328, 329, 330, 333, 334, 335], "gamma": [66, 151, 154, 170], "mion_response_funct": 66, "factor": [66, 68, 99, 103, 114, 136, 154, 163, 174, 191, 197, 199, 313, 315, 316, 325, 327, 328, 329, 330, 333, 334, 335, 339, 419, 432, 433, 434, 441], "response_funct": 66, "dt": 66, "time_stamp": 66, "rint": 66, "delai": [66, 152, 154, 177, 323, 325, 330], "mion_time_deriv": 66, "drf": 66, "derived_response_funct": 66, "rf_model": 66, "main_deriv": 66, "compute_regressor": [66, 124, 149, 154, 170], "model_titl": 66, "convolut": [66, 171, 325, 330], "_label": 66, "con_id": [66, 325], "plot_hrf": [66, 72, 481], "capabl": [67, 149, 154, 181], "coregist": [67, 191], "obvious": 67, "geometri": [67, 114, 174, 352, 429, 435, 436, 437, 438, 444, 463, 464], "resort": 67, "basic_contrast": [67, 69, 170], "dict": [67, 88, 104, 117, 125, 154, 188, 190, 227, 228, 229, 238, 239, 240, 248, 270, 271, 272, 273, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 306, 310, 314, 319, 323, 326, 332, 336, 338, 341, 362, 363, 367, 368, 369, 370, 371, 372, 373, 374, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 420, 421, 429, 430, 437, 438, 442, 445, 446, 447, 448, 456, 458, 460], "Of": 67, "cours": [67, 158, 171, 174, 369, 372], "stat_typ": [67, 68, 107, 126, 152, 154, 311, 319, 323], "impress": 67, "littl": [67, 74, 161, 162, 169], "plot_localizer_surface_analysi": [67, 72, 481], "assess": [68, 77, 114, 161, 168, 169, 170, 189, 235, 295, 384, 420], "clean_img": [68, 126, 132, 134, 139, 149, 154, 180, 460], "0x7f18c286f890": 68, "set_index": 68, "head": [68, 323, 336, 364, 456, 458], "real_timeseri": 68, "predicted_timeseri": [68, 170], "navi": 68, "purpl": 68, "teal": 68, "fig1": 68, "axs1": 68, "labelpad": 68, "resid": [68, 151, 154, 364, 365], "fig2": 68, "axs2": 68, "0023749453300866787": 68, "0016934773463517239": 68, "018509907565882628": 68, "07049870657346953": 68, "031008074173867566": 68, "62193288008469e": 68, "markedli": 68, "deep": [68, 227, 228, 229, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448], "awai": [68, 168, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "receiv": [68, 99, 161, 174, 428], "coil": 68, "salt": 68, "necessarili": [68, 159, 171, 191], "influenc": [68, 168, 235, 297], "0x7f18c58ee720": 68, "tell": [68, 85, 114, 168, 211, 268], "everywher": [68, 167], "z_map_ftest": 68, "0x7f18d652c1a0": 68, "plot_predictions_residu": [68, 72, 481], "percept": [69, 114, 142, 154, 171, 193, 223, 265], "realign": [69, 209, 223, 268], "scrambl": [69, 93, 170, 223], "supposedli": [69, 223], "henson": [69, 99, 114, 223], "multimodal_fac": 69, "fetch_spm_multimodal_fmri": [69, 170, 223], "catch_warn": [69, 102], "simplefilt": [69, 102], "func1": [69, 70, 199, 223, 258, 278], "auto_resampl": [69, 342], "func2": [69, 70, 199, 223, 258, 278], "mean_imag": 69, "idx": [69, 247], "revious": 69, "tail": [69, 313, 315, 316, 457], "tcontrast": [69, 313, 315, 316], "sophist": [69, 97, 164], "04_glm_first_level": [69, 70, 71, 72, 481], "plot_spm_multimodal_fac": [69, 72, 481], "implic": [69, 99, 114], "portion": 69, "sparser": [69, 93, 160, 296, 297, 448, 450], "anterior": [69, 90, 102, 114, 136, 154, 205, 253, 255, 355, 435, 437, 438], "frontal": [69, 90, 114, 166, 419, 424, 426, 427, 433, 434], "lobe": [69, 250], "goshen": [69, 114], "gottstein": [69, 114], "ganel": [69, 114], "otten": [69, 114], "quayl": [69, 114], "rugg": [69, 114], "electrophysiolog": [69, 114], "haemodynam": [69, 114, 170, 171, 174], "prime": [69, 114], "cerebr": [69, 114, 171, 187, 193, 195, 198, 205, 219, 225, 241, 247, 251, 253, 265, 267], "793": [69, 114, 127, 154], "805": [69, 114], "2003": [69, 114, 310, 314, 466], "1093": [69, 114, 155, 187, 195, 219, 241, 247, 267], "cercor": [69, 114, 187, 195, 219, 241, 247, 267], "academ": [69, 114, 155, 187, 195, 219, 241, 247, 267], "oup": [69, 114, 155, 187, 195, 219, 241, 247, 267], "9752528": [69, 114], "1300793": [69, 114], "877": 69, "fiac": [70, 183, 258, 476], "dehaen": [70, 71, 114, 176, 193, 199, 265], "lambertz": [70, 114, 199], "plot_two_runs_model": [70, 72, 126, 154, 481], "retain": [70, 149, 154, 161, 162, 171, 227, 228, 229, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 364, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448, 451, 452], "fetch_fiac_first_level": [70, 199], "design_fil": 70, "design_matrix1": [70, 199, 258], "design_matrix2": [70, 199, 258], "df": [70, 99, 106, 457], "dst_minus_sst": [70, 465], "fmri_glm_run_1": 70, "summary_statistics_run_1": 70, "pad": [70, 126, 142, 154, 180, 181, 345, 356, 357, 378, 381, 385, 387, 388, 459], "0x7f18b9a6e690": 70, "fmri_glm_run_2": 70, "summary_statistics_run_2": 70, "0x7f18b99c61b0": 70, "compute_fixed_effect": 70, "contrast_img": [70, 320], "variance_img": [70, 320], "effect_vari": [70, 79, 311, 323, 336], "fixed_fx_contrast": 70, "fixed_fx_vari": 70, "fixed_fx_stat": 70, "0x7f18b8c46720": 70, "unexpectedli": 70, "ratio": [70, 93, 138, 154, 174, 256, 296, 298, 299, 446, 448], "straightforward": [70, 168, 311], "reus": 70, "fmri_glm_multirun": 70, "safe": [70, 134, 154], "investig": [70, 93, 97, 160, 206, 212, 295], "therefor": [70, 149, 154, 160, 166, 168, 191, 237, 239], "move": [70, 124, 125, 126, 127, 134, 147, 154], "beyond": [70, 150, 154], "n_column": [70, 171, 234], "sstssp_minus_dstdsp": [70, 465], "dstdsp_minus_sstssp": [70, 465], "dsp_minus_ssp": [70, 465], "dst_minus_sst_for_dsp": [70, 465], "dsp_minus_ssp_for_dst": [70, 465], "deactiv": [70, 465], "02g": 70, "contast": 70, "z_image_path": 70, "_z_map": 70, "glm_report": 70, "plot_oasi": [70, 74, 81, 481], "ghislain": [70, 114, 199], "stanisla": [70, 71, 114, 176, 193, 199, 265], "luc": [70, 114, 199], "anton": [70, 114, 199], "aureli": [70, 114, 199], "campagn": [70, 114, 199], "ciuciu": [70, 114, 199, 298], "isabel": [70, 114, 199], "denghien": [70, 114, 199], "antoinett": [70, 71, 114, 193, 199, 265], "jobert": [70, 71, 114, 193, 199, 265], "deni": [70, 71, 114, 161, 193, 199, 265], "lebihan": [70, 114, 199], "mariano": [70, 114, 199], "sigman": [70, 114, 199], "segreg": [70, 114, 199], "2006": [70, 114, 166, 176, 191, 199, 205, 295, 315, 316], "pmc": [70, 114, 199], "pmc6871319": [70, 114, 199], "protocol": [71, 174, 193, 265], "archi": 71, "plot_ev": [71, 145, 154, 170], "hardcod": [71, 123, 154, 289], "fmt": 71, "trial_type_idx": 71, "condition_id": 71, "instantan": 71, "null_duration_tri": 71, "export": [71, 177, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438], "plot_write_events_fil": [71, 72, 481], "tsvfile": 71, "localizer_ev": 71, "experimental_paradigm": [71, 125, 154], "null": [71, 78, 150, 154, 161, 166, 171, 174, 311, 338, 384], "\u00e9": [71, 114, 161, 193, 205, 207, 260, 265], "bastien": [71, 114, 193, 265], "meriaux": [71, 114, 193, 265], "julien": [71, 114, 193, 265], "serr": [71, 114, 193, 265], "le": [71, 114, 193, 265], "bihan": [71, 114, 193, 265], "identif": [71, 93, 114, 174, 187, 193, 235, 265], "databas": [71, 102, 114, 193, 221, 265, 270], "876": [72, 481], "unpair": [73, 81, 112, 173, 265, 336, 396, 423, 426, 439, 481], "sex": [74, 77, 114, 173, 189, 205, 235, 267, 280, 291, 292, 293, 294, 296, 297, 465], "mf": [74, 114, 187, 267], "gm_mask": 74, "adequ": [74, 194], "second_level": [74, 75, 76, 77, 78, 79, 80, 100, 151, 154, 173, 458], "secondlevelmodel": [74, 75, 76, 78, 79, 80, 100, 126, 149, 154, 173, 323, 363, 458], "second_level_model": [74, 75, 78, 80, 100], "0x7f18b7518800": 74, "secondlevelmodelifittedsecondlevelmodel": [74, 76], "second_level_contrast": [74, 76, 78, 323, 336, 338, 458], "03g": 74, "40175": 74, "0x7f18b99f7890": 74, "icbm152_2009": 74, "892": [74, 81, 481], "1333": 74, "rosenblatt": [75, 114, 318], "circular": [75, 191], "fetch_localizer_contrast": [75, 76, 78, 79, 104, 132, 154, 193, 263, 264], "second_level_input": [75, 78, 79, 100, 149, 151, 154, 336, 338], "p_val": [75, 76, 78], "p001_uncorrect": 75, "cluster_level_infer": [75, 149, 154, 173], "proportion_true_discoveries_img": [75, 318], "livio": [75, 114, 318], "fino": [75, 114, 318], "wouter": [75, 114, 318], "weeda": [75, 114, 318], "aldo": [75, 114, 318], "solari": [75, 114, 318], "goeman": [75, 114, 318], "796": [75, 114, 318], "novemb": [75, 114, 136, 139, 142, 145, 154, 318], "plot_proportion_activated_voxel": [75, 81, 481], "cue": [76, 104, 264, 265], "pseudo": [76, 104, 298, 299, 315, 338, 340, 446], "brainomics_loc": [76, 104], "brainomics_data": [76, 104], "s01": [76, 104], "cmaps_leftauditoryclick": [76, 104], "tested_var": [76, 104, 105, 384], "float64": 76, "worth": 76, "aualiti": 76, "mask_quality_check": [76, 104], "contrast_map_filenam": [76, 104], "ones_lik": 76, "fluenci": 76, "math_img": [76, 78, 82, 84, 95, 106, 112, 130, 154, 180, 288, 353, 434, 439, 481], "logarithm": [76, 78, 338], "equal": [76, 97, 142, 149, 151, 154, 164, 191, 240, 245, 246, 247, 251, 291, 292, 293, 294, 296, 297, 311, 336, 353, 356, 360, 376, 378, 379, 381, 441, 442, 444, 446], "fwer": [76, 80, 173, 174, 338], "1317": 76, "non_parametric_infer": [76, 78, 123, 124, 149, 151, 154, 173], "neg_log_pvals_permuted_ols_unmask": [76, 104], "model_intercept": [76, 78, 104, 338, 384], "two_sided_test": [76, 78, 101, 166, 338, 384], "cap": [76, 78], "1e3": 76, "plot_second_level_association_test": [76, 81, 481], "characterist": [77, 161, 174, 365], "subjects_label": [77, 337], "extra": [77, 117, 163, 177, 178, 235, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 424, 425, 426, 427, 431, 432, 433, 434, 436, 479, 482], "extra_info_subject": 77, "make_second_level_design_matrix": [77, 173], "attent": [77, 330], "singular": [77, 313, 315, 316, 347, 461], "aberr": 77, "plot_second_level_design_matrix": [77, 81, 481], "elicit": 78, "get_tmap": [78, 265], "participant_id": 78, "tolist": [78, 99], "cidx": 78, "p001_unc": [78, 100], "nonparametr": 78, "pend": 78, "reformat": [78, 124, 154], "assumpt": [78, 166, 171, 213], "job": [78, 117, 323, 336, 338, 384], "out_dict": 78, "ideal": [78, 104, 158, 171, 177, 191, 239], "permuted_least_squar": [78, 151, 154], "tend": [78, 99, 163, 168, 179], "itertool": 78, "logp_max_t": [78, 104, 338, 384], "logp_max_s": [78, 338, 384], "logp_max_mass": [78, 338, 384], "img_count": 78, "i_row": 78, "j_col": 78, "1471": 78, "plot_second_level_one_sample_test": [78, 81, 481], "retinotop": 79, "distinct": [79, 99, 114, 168, 187, 241, 267], "border": [79, 345, 376, 379, 385, 387, 388], "primari": [79, 169, 323, 336, 458], "sample_vert": 79, "sample_horizont": 79, "s1": 79, "s2": 79, "condition_effect": 79, "doesn": [79, 102, 169], "subject_effect": 79, "02d": 79, "assembl": [79, 115, 171], "unpaired_design_matrix": 79, "paired_design_matrix": 79, "ax_unpair": 79, "ax_pair": 79, "width_ratio": [79, 99], "second_level_model_unpair": 79, "second_level_model_pair": 79, "stat_maps_unpair": 79, "stat_maps_pair": 79, "881784197001252e": 79, "unsurprisingli": 79, "776": [79, 81, 481], "plot_second_level_two_sample_test": [79, 81, 481], "bunch": [80, 116, 126, 134, 154, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 278, 279, 280], "oppos": [80, 180, 181], "fetch_localizer_calculation_task": [80, 105, 263, 265], "statstic": 80, "cmap_filenam": [80, 105], "trivial": 80, "two_sid": [80, 126, 146, 149, 154, 339, 340, 360, 457, 458], "0x7f18d68eb590": 80, "thresholded_map1": 80, "threshold1": 80, "thresholded_map2": 80, "threshold2": 80, "3g": 80, "thresholded_map3": 80, "threshold3": 80, "raw": [80, 91, 100, 107, 146, 154, 161, 179, 181, 196, 197, 211, 242, 291, 292, 293, 294, 298, 299, 370, 373, 427, 434, 446, 456], "0x7f18c4b44350": 80, "0x7f18c61b75f0": 80, "fourth": [80, 83, 147, 154, 323, 338, 348, 349, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 417, 448, 460], "0x7f18c61b7a40": 80, "plot_threshold": [80, 81, 481], "868": 81, "05_glm_second_level": [81, 481], "1332": [81, 481], "4x4": [83, 180, 291, 292, 293, 294, 296, 297, 298, 299, 323, 336, 343, 353, 354, 356, 370, 373, 376, 378, 379, 381, 387, 388, 446], "millimet": [83, 166, 181, 291, 292, 293, 294, 295, 298, 299, 323, 336, 338, 358, 368, 369, 370, 371, 372, 373, 374, 375, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 446, 448, 450, 457], "entri": [83, 123, 125, 154, 169, 177, 291, 292, 293, 294, 313, 315, 316, 345, 436, 464], "3x3": [83, 180, 291, 292, 293, 294, 296, 297, 298, 299, 323, 336, 353, 356, 370, 373, 376, 378, 379, 381, 446], "closest": [83, 356], "union": [83, 379, 381, 382], "messag": [83, 129, 154, 177, 228, 231, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 273, 274, 275, 276, 277, 278, 280, 291, 292, 293, 294, 295, 296, 297, 336, 338, 342, 353, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 380, 384, 446, 447, 448], "circl": 83, "diamond": 83, "source_affin": 83, "rotation_matrix": 83, "0mm": [83, 176], "img_in_mm_spac": 83, "target_affine_3x3": 83, "target_affine_4x4": 83, "img_3d_affin": 83, "img_4d_affin": 83, "target_affine_mm_space_offset_chang": 83, "img_3d_affine_in_mm_spac": 83, "img_4d_affine_in_mm_spac": 83, "06_manipulating_imag": [83, 85, 90, 93, 95, 481], "plot_affine_transform": [83, 95, 481], "anchor": 83, "821": [83, 95, 481], "goal": [84, 89, 92, 116, 168, 169], "result_img": [84, 179, 352], "img1": [84, 352], "img2": [84, 352], "952": [84, 95, 481], "766": [84, 99, 114], "plot_compare_mean_imag": [84, 95, 481], "connected_label_region": [85, 134, 154, 158, 180, 448, 450], "oper": [85, 88, 90, 93, 103, 116, 147, 154, 161, 168, 169, 171, 174, 178, 179, 181, 227, 228, 261, 290, 323, 336, 338, 350, 352, 353, 376, 377, 378, 380, 381, 422, 468, 472, 482], "atlas_yeo_2011": 85, "atlas_yeo": 85, "thick_7": [85, 225, 251], "0x7f18c2ebca70": 85, "apart": [85, 134, 154, 158, 159, 168], "region_label": 85, "region_extractor": [85, 149, 154], "0x7f18b1451f40": 85, "difficult": [85, 155, 162, 167, 181], "eg": [85, 88, 136, 139, 145, 154, 155, 156, 161, 180, 181, 416, 417, 456], "broken": [85, 132, 140, 154, 166], "plot_extract_regions_labels_imag": [85, 95, 481], "relabeled_yeo_atla": 85, "connect_diag": [85, 449], "region_labels_not_diag": 85, "0x7f18b3e7f470": 85, "100mm": 85, "region_labels_min_s": 85, "atlas_network": 86, "dmn_network": 86, "regions_indices_network3": 86, "blob": [86, 93, 160, 180, 247], "network3": 86, "plot_extract_rois_smith_atla": [86, 95, 481], "fetch_neurovault_auditory_computation_task": [87, 139, 154, 273], "foreground": [87, 159], "connected_region": [87, 127, 140, 154, 159, 180, 448, 449], "scoreatpercentil": [87, 102, 360], "threshold_percentile_img": 87, "threshold_value_img": 87, "0x7f18b30d4650": 87, "regions_percentile_img": 87, "1500": 87, "regions_value_img": 87, "plot_extract_rois_statistical_map": [87, 95, 481], "homogen": [88, 126, 154, 158, 180, 194, 235, 240, 291, 292, 293, 294, 298, 299, 356, 370, 373, 446], "miyawaki_filenam": [88, 181], "miyawaki_mean_img": [88, 181], "0x7f18b3c7f5f0": 88, "0x7f18ba0d2bd0": 88, "mask_arg": [88, 91, 181, 298, 299, 370, 373, 446, 466], "uniform": 88, "epi_filenam": [88, 181], "0x7f18c92861b0": 88, "eros": [88, 174, 261, 283, 286, 376, 377, 378, 380, 381], "dilat": [88, 93, 174, 180, 261, 283, 286, 376, 377, 378, 380, 381], "layer": 88, "skull": [88, 260, 376, 377, 378, 380, 381], "lower_cutoff": [88, 378, 381], "upper_cutoff": [88, 378, 379, 381], "bright": 88, "hover": 88, "trended_data": 88, "detrended_data": 88, "plot_mask_comput": [88, 95, 181, 481], "negative_stat_img": 89, "plot_negate_imag": [89, 95, 481], "output_filepath": [90, 91, 181], "plot_nifti_labels_simpl": [90, 95, 481], "mni152templ": [90, 323, 336, 419, 432, 433, 434, 458, 466], "ward": [90, 158, 174, 175, 191, 371, 446, 466], "pole": 90, "123176": 90, "insular": [90, 114, 205], "18728": 90, "superior": [90, 102, 167, 355], "40640": 90, "42528": 90, "inferior": 90, "par": 90, "triangulari": 90, "8824": 90, "operculari": 90, "11072": 90, "68584": 90, "37688": 90, "4168": [90, 126, 154], "14640": 90, "6784": 90, "20200": 90, "temporooccipit": 90, "16032": 90, "5176": 90, "15536": 90, "11760": 90, "55160": 90, "lobul": [90, 114, 205], "23264": 90, "supramargin": 90, "13936": 90, "18072": 90, "angular": 90, "19272": 90, "78232": 90, "32712": 90, "intracalcarin": 90, "11208": 90, "7808": 90, "juxtaposit": 90, "formerli": [90, 139, 154], "supplementari": [90, 116, 166], "11872": 90, "subcallos": 90, "9136": 90, "paracingul": 90, "23552": 90, "20736": 90, "19296": 90, "precun": 90, "44984": 90, "cuneal": 90, "9816": 90, "orbit": 90, "25184": 90, "parahippocamp": 90, "9984": 90, "5680": 90, "lingual": 90, "27048": 90, "fusiform": [90, 166], "4880": 90, "12752": 90, "11752": 90, "14448": 90, "5496": 90, "15088": 90, "8952": 90, "planum": [90, 102], "polar": [90, 227, 298, 299, 306, 323, 336, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448], "5992": 90, "heschl": 90, "h1": 90, "h2": 90, "4832": 90, "temporal": [90, 102], "7616": 90, "supracalcarin": 90, "2088": 90, "42208": 90, "quot": 90, "niftilablesmask": 90, "n_time_point": [90, 91, 331, 332], "label_idx": 90, "804": [90, 95, 99, 108, 481], "0x7f18b8014dd0": 91, "fastica": [91, 102, 103, 298], "components_mask": [91, 103], "_fastica": [91, 103], "revers": [91, 135, 142, 154], "826": 91, "plot_nifti_simpl": [91, 95, 181, 481], "load_mni152_templ": [92, 148, 154, 207, 260, 261, 282, 284, 287, 340, 343, 348, 352, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 464], "resampled_stat_img": 92, "tmap_img": 92, "original_shap": 92, "original_affin": 92, "resampled_shap": 92, "resampled_affin": 92, "template_img": 92, "template_shap": 92, "template_affin": 92, "plot_resample_to_templ": [92, 95, 481], "allevi": 93, "curs": 93, "aris": [93, 114, 171, 191, 364, 365], "context": [93, 99, 114, 125, 126, 154, 169, 174], "chain": [93, 180, 227, 228], "clear": [93, 117, 123, 142, 151, 154, 169, 291, 292, 293, 294, 298, 299, 370, 373, 446], "run_target": 93, "student": [93, 171, 180, 217, 311, 482], "haxby_label": 93, "txt": [93, 274], "especi": [93, 140, 149, 154, 155, 161, 179, 442, 482], "Such": [93, 155, 361], "4mm": [93, 159, 166, 196, 256, 299], "12mm": 93, "anisotropi": 93, "indent": 93, "analog": 93, "0x7f18c501b200": 93, "brief": [93, 169, 171], "motiv": 93, "realm": 93, "ttest_ind": [93, 180], "establish": [93, 167, 169, 220], "log_p_valu": 93, "log_p_values_img": 93, "0x7f18ac37aa20": 93, "extend": [93, 125, 145, 150, 154, 171, 181, 220, 356], "annot": [93, 115, 125, 134, 145, 154, 195, 214, 219, 224, 247, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 421, 424, 426, 427, 430, 432, 433, 434, 435, 436, 437, 438, 441, 444, 462, 479, 482], "0x7f18d6bbf8f0": 93, "intersect": [93, 180, 188, 379, 381, 382, 452], "bin_p_valu": 93, "boolean": [93, 117, 146, 151, 154, 233, 259, 265, 274, 295, 298, 299, 323, 342, 354, 367, 374, 376, 377, 378, 380, 381, 419, 424, 426, 428, 433, 436, 441, 454, 455, 460], "logic": [93, 117, 169, 290], "logical_and": [93, 101], "jargon": 93, "AND": [93, 117, 126, 154], "conjunct": 93, "bin_p_values_and_vt": 93, "otherwis": [93, 101, 102, 139, 154, 171, 177, 227, 228, 229, 233, 235, 241, 242, 253, 254, 255, 263, 264, 265, 267, 274, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 326, 336, 351, 355, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 429, 432, 435, 437, 438, 441, 442, 444, 445, 446, 447, 448, 449, 460, 464], "bin_p_values_and_vt_img": 93, "plot_roi_extract": [93, 95, 481], "0x7f18c5018410": 93, "consolid": [93, 150, 154], "toward": [93, 149, 154, 197, 227, 351, 368, 369, 370, 371, 372, 373, 374, 482], "morpholog": [93, 180, 376, 377, 378, 380, 381], "forget": [93, 169], "hole": 93, "binary_dil": [93, 180, 376, 377, 378, 380, 381], "dil_bin_p_values_and_vt": 93, "dil_bin_p_values_and_vt_img": 93, "0x7f18b3edeb70": 93, "immedi": [93, 365], "first_roi_data": 93, "second_roi_data": 93, "first_roi_img": 93, "second_roi_img": 93, "0x7f18c2ebc5c0": 93, "suit": [93, 99, 156, 162, 176, 191, 239], "condition_nam": [93, 99], "n_cond_img": 93, "n_cond": 93, "gather": [93, 169, 171, 226], "cond": [93, 99, 325], "cond_map": 93, "mask_data": 93, "mask_atla": 93, "844": [93, 95, 481], "first_epi_fil": 94, "mean_func": 94, "20mm": [94, 176], "smoothed_img": [94, 179], "plot_smooth_mean_imag": [94, 95, 481], "923": 95, "2263": [95, 481], "825": [95, 481], "765": [95, 481], "massiv": [96, 108, 112, 165, 259, 264, 265, 346, 348, 353, 367, 373, 384, 412, 426, 434, 439, 473, 481, 482], "bridg": 97, "integr": [97, 127, 142, 154, 169, 180, 370, 466], "usecas": [97, 158, 162, 164, 169], "pointer": [97, 164], "unclear": 97, "n_timepoint": [97, 161, 164], "meaning": [97, 99, 129, 139, 142, 154, 169, 171, 197, 209, 341, 460], "stipul": 97, "823": 97, "processor": [97, 164], "858": [97, 466], "dummyclassifi": [97, 98, 147, 154, 164, 291, 292, 293, 294], "pure": [97, 101, 296, 297], "slower": [97, 164, 168, 356], "permutation_test_scor": [97, 164], "null_cv_scor": 97, "selectpercentil": [97, 134, 154], "linear_svc": 97, "anova_svc": 97, "return_estim": 97, "fitted_pipelin": 97, "test_scor": 97, "801": 97, "first_pipelin": 97, "svc_coef": 97, "invert": [97, 103, 125, 145, 154, 168, 181, 227, 313, 315, 316, 367, 370, 373, 385, 419, 421, 424, 426, 427, 430, 432, 433, 434], "full_coef": 97, "0x7f18c61b74d0": 97, "fisher": [97, 114, 311], "lda": 97, "discriminant_analysi": 97, "lineardiscriminantanalysi": 97, "anova_lda": 97, "n_condit": 97, "8009": 97, "principl": [97, 158, 161, 165, 167, 174, 295, 482], "fanci": 97, "n_features_to_select": 97, "rfe_svc": 97, "awar": [97, 229, 459], "plot_advanced_decoding_scikit": [97, 108, 481], "gridsearchcv": [98, 164], "pipe": 98, "most_frequ": 98, "connectivity__kind": 98, "labelencod": 98, "pheno": 98, "refit": 98, "cv_results_": 98, "mean_test_scor": 98, "std_test_scor": 98, "candid": 98, "param_connectivity__kind": 98, "plot_age_group_prediction_cross_v": [98, 108, 142, 154, 481], "substitut": [99, 456], "psychophysiolog": 99, "ppi": 99, "cisler": [99, 114], "rissman": [99, 114], "mumford": [99, 114, 161, 176, 257, 275], "turner": [99, 114, 161, 190, 221, 238, 248], "everyth": [99, 177], "systemat": [99, 114, 129, 154, 191, 265, 364, 365], "incorpor": [99, 160], "literatur": [99, 156, 220, 235, 347, 365, 461], "mention": [99, 123, 125, 126, 154, 169, 170, 171], "abdulrahman": [99, 114], "decis": [99, 114, 162, 166, 291, 292, 293, 294, 296, 297, 311], "inter": [99, 104, 156, 180, 181, 191, 208, 379, 381], "primarili": 99, "fetch_language_localizer_demo_dataset": [99, 100, 107, 126, 154, 170, 192, 209, 252], "legacy_output": [99, 100, 107, 262], "events_df": 99, "languageloc": [99, 100, 107], "img_filt": [99, 100, 107, 326], "desc": [99, 100, 107, 326, 364, 365], "preproc": [99, 100, 107, 326], "standard_glm": 99, "fmri_fil": 99, "glm_paramet": 99, "get_param": [99, 227, 228, 229, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448], "1369": [99, 100, 107], "starttim": [99, 100, 107], "01_task": [99, 100, 107], "languagelocalizer_desc": [99, 100, 107], "highlight": [99, 177], "lsa_events_df": 99, "condition_count": 99, "i_trial": 99, "iterrow": 99, "trial_condit": 99, "__": [99, 227, 228, 229, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448], "shouldn": [99, 177, 237], "trial_nam": 99, "lsa_glm": 99, "lsa_beta_map": 99, "trialwise_condit": 99, "beta_map": 99, "relabel": [99, 449], "lss_transform": 99, "row_numb": 99, "compliant": [99, 124, 154, 169, 181, 275, 289, 365], "trial_type_seri": 99, "trial_type_list": 99, "trial_numb": 99, "left_001": 99, "track": [99, 102, 168, 177], "lss_beta_map": 99, "lss_design_matric": 99, "lss_events_df": 99, "lss_glm": 99, "dm_titl": 99, "i_ax": 99, "though": [99, 103, 161, 314, 435, 437, 438, 459], "vastli": 99, "quick": [99, 176], "neurosynth": [99, 102, 115, 214, 270, 272, 482], "lang_seed_beta_seri": 99, "lang_beta_seri": 99, "lang_corr": 99, "language_connectivity_img": 99, "string_seed_beta_seri": 99, "string_beta_seri": 99, "string_corr": 99, "string_connectivity_img": 99, "josh": [99, 114], "keith": [99, 114], "bush": [99, 114], "scott": [99, 114, 220, 255], "steel": [99, 114], "1042": [99, 114], "1052": [99, 114], "jess": [99, 114], "adam": [99, 114], "gazzalei": [99, 114], "esposito": [99, 114], "stage": [99, 114, 169, 176], "752": [99, 114], "763": [99, 114], "2004": [99, 114, 195, 241, 315, 316], "jeanett": [99, 114, 161, 176], "benjamin": [99, 114, 161, 220, 255], "gregori": [99, 114, 161], "ashbi": [99, 114, 161], "poldrack": [99, 114, 117, 161, 176, 197, 211, 214, 257, 268, 270, 272, 275], "deconvolv": [99, 114, 161], "multivoxel": [99, 114, 161, 211, 268], "2636": [99, 114, 161], "2643": [99, 114, 146, 154, 161], "spatiotempor": [99, 114], "rapid": [99, 114, 209], "1429": [99, 114], "1438": [99, 114, 466], "hunar": [99, 114], "richard": [99, 114], "plot_beta_seri": [99, 108, 481], "consult": [100, 187], "simplifi": [100, 107, 116, 132, 142, 150, 154, 181, 263, 264], "05_task": 100, "rotx": 100, "roti": 100, "rotz": 100, "conson": [100, 209], "value_count": 100, "scalar": [100, 166, 181, 310, 311, 313, 314, 315, 316, 358, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 421, 430], "model_and_arg": 100, "midx": 100, "share": [100, 114, 117, 145, 154, 155, 160, 169, 179, 186, 187, 193, 194, 197, 214, 231, 240, 243, 244, 265, 270, 272], "8mm": 100, "first_level_contrast": [100, 149, 154, 336, 338], "1072": [100, 108, 481], "plot_bids_analysi": [100, 108, 481], "behav": [101, 323, 325, 330], "exchang": [101, 103, 186, 235], "winkler": [101, 114, 187, 267, 384], "anderson": [101, 114, 186, 187, 235, 267, 384], "robinson": [101, 114, 187, 267, 384], "conditions_encod": 101, "func_reduc": 101, "n_run": 101, "conditions_per_run": 101, "grouped_fmri_mask": 101, "grouped_conditions_encod": 101, "run_mask": 101, "run_house_mask": 101, "run_face_mask": 101, "ol": [101, 104, 313, 315, 316, 323, 332, 384, 473], "trace": 101, "pvals_bonferroni": 101, "neg_log_pvals_bonferroni": 101, "neg_log_pvals_bonferroni_unmask": 101, "1300": [101, 104, 105], "dataconversionwarn": [101, 104, 105], "mean_fmri_img": 101, "neg_log_pvals_bonferroni_data": 101, "gerard": [101, 114, 384], "ridgwai": [101, 114, 384], "webster": [101, 114, 155, 384], "nichol": [101, 114, 117, 155, 174, 176, 187, 214, 267, 270, 272, 338, 378, 384], "s1053811914000913": [101, 114, 384], "marti": [101, 114, 224, 250, 384], "australian": [101, 114, 384], "zealand": [101, 114, 384], "journal": [101, 114, 166, 176, 191, 205, 216, 219, 221, 225, 247, 248, 251, 274, 384], "onlinelibrari": [101, 114, 194, 200, 201, 202, 203, 204, 224, 240, 250, 279, 341, 384, 460], "wilei": [101, 114, 194, 200, 201, 202, 203, 204, 224, 240, 250, 279, 315, 316, 341, 384, 460], "1111": [101, 114, 384], "1467": [101, 114, 384], "842x": [101, 114, 384], "00156": [101, 114, 384], "950": 101, "plot_haxby_mass_univari": [101, 108, 481], "fetch_neurovault": [102, 106, 117, 135, 142, 146, 154, 271, 272, 273], "load_mni152_brain_mask": [102, 132, 148, 154, 207, 260], "nv_data": [102, 106], "max_imag": [102, 106, 117, 270], "fetch_neurosynth_word": [102, 117, 270, 272], "term_weight": 102, "word_frequ": [102, 117, 214, 270, 272], "vocabulari": [102, 117, 174, 176, 214, 270, 272], "total_scor": 102, "ntop": 102, "term_idx": 102, "1307": 102, "insula": 102, "nreshap": 102, "deprecationwarn": [102, 239, 240, 248, 320, 367, 368, 369, 370, 371, 372, 373, 374, 448], "failur": [102, 134, 154, 169, 378], "is_us": 102, "image_path": 102, "images_meta": [102, 106, 117, 214, 270, 271, 272, 273], "collection_id": [102, 106, 117, 270, 272], "fast_ica": 102, "ica_map": 102, "term_weights_for_compon": 102, "components_": [102, 137, 154, 298, 299], "ic_map": 102, "ic_term": 102, "ic_threshold": 102, "ic_img": 102, "important_term": 102, "neurolog": [102, 171, 174, 188, 191, 237], "780": [102, 108, 481], "plot_ica_neurovault": [102, 108, 481], "advis": [103, 169, 179, 261, 378, 446], "unsupervis": [103, 174, 298, 299, 323, 336, 445, 447], "latent": [103, 174], "sens": [103, 161, 176, 291, 292, 293, 294, 313, 315, 316, 388, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411], "component_img": 103, "plot_ica_resting_st": [103, 108, 481], "pvals_anova": [104, 105], "neg_log_pvals_anova": [104, 105], "neg_log_pvals_anova_unmask": [104, 105], "fwe": [104, 384], "tfce": [104, 123, 151, 154, 174, 338, 384], "ols_output": 104, "neg_log_pvals_tfce_unmask": 104, "logp_max_tfc": [104, 338, 384], "amax": 104, "images_to_plot": 104, "i_col": 104, "new_titl": 104, "sig": 104, "849": [104, 108, 481], "plot_localizer_mass_univariate_method": [104, 105, 108, 481], "plotted_slic": 105, "masked_pv": 105, "plot_localizer_simple_analysi": [105, 108, 481], "fetch_neurovault_id": [106, 117, 135, 154, 270, 271, 273], "stop_go_image_id": 106, "3041": 106, "3042": [106, 149, 154], "2676": 106, "2675": 106, "2818": 106, "2834": 106, "queri": [106, 270, 272, 290], "cognitive_paradigm_cogatla": 106, "contrast_definit": 106, "succ": 106, "map_typ": [106, 270], "image_id": [106, 117, 272], "nplot": 106, "absolute_path": 106, "t_to_z": 106, "t_score": 106, "deg_of_freedom": 106, "sf": 106, "z_valu": 106, "z_img": 106, "current_collect": 106, "ncomput": 106, "this_meta": 106, "ncollect": 106, "t_img": 106, "number_of_subject": 106, "meta_analysis_img": 106, "sqrt": [106, 132, 154, 233, 234, 315, 316], "plot_neurovault_meta_analysi": [106, 108, 481], "downsampl": [107, 159, 180, 196, 256, 420], "10k": 107, "sidecar": 107, "json_fil": 107, "repetitiontim": 107, "z_scores_right": 107, "z_scores_left": 107, "contrast_valu": 107, "accumul": [107, 479], "z_score_left": 107, "az_scores_right": 107, "popul": [107, 114, 155, 170, 187, 205, 207, 228, 267, 368, 369, 370, 371, 372, 373, 374, 460], "ttest_1samp": 107, "pval_left": 107, "pval_right": 107, "z_val_left": 107, "z_val_right": 107, "plot_surface_bids_analysi": [107, 108, 481], "07_advanc": [108, 481], "949": [108, 481], "sandbox": 110, "tent": 110, "incomplet": [110, 125, 154, 226], "deprec": [110, 123, 124, 125, 126, 129, 133, 134, 135, 136, 137, 139, 140, 142, 144, 145, 147, 149, 151, 154, 169, 177, 192, 226, 227, 239, 240, 248, 252, 276, 291, 292, 293, 294, 298, 299, 311, 319, 326, 364, 367, 368, 369, 370, 371, 372, 373, 374, 384, 420, 446, 448, 451, 452, 456], "cycl": [110, 124, 125, 154, 226], "plot_surf_img": 110, "surfaceimag": [110, 291, 292, 293, 294, 305, 306], "polymesh": 110, "subplot_kw": [110, 435, 436, 437, 438], "mesh_part": 110, "plot_surf": [110, 123, 134, 136, 142, 146, 147, 148, 149, 152, 154, 169, 170, 436, 437, 438, 479], "isinst": 110, "fetch_nki": 110, "surfacemask": [110, 291, 292, 293, 294], "mean_data": 110, "895": 110, "20484": 110, "label_nam": [110, 305], "fetch_destrieux": 110, "avg_method": [110, 125, 147, 152, 154, 435, 437, 438], "median": [110, 142, 154, 191, 368, 371, 435, 437, 438, 451], "labels_mask": 110, "label_names_": [110, 305], "param_valid": [110, 134, 154], "disabl": [110, 117, 125, 126, 140, 142, 146, 154, 168, 445], "monkeypatch_masker_check": 110, "adjust_screening_percentil": 110, "randomst": [110, 298, 299, 323, 332, 338, 384, 445, 446], "masker_valid": 110, "_univariate_select": 110, "20206": 110, "20207": 110, "20208": 110, "4991939095387371": 110, "5115891053391053": 110, "48466810966810964": 110, "score_func": 110, "atleast_2d": 110, "dp": 110, "cold_hot": [110, 138, 154, 429, 434, 438, 441, 442, 444], "1454": 110, "plot_surface_image_and_mask": [110, 111, 481], "08_experiment": [111, 481], "1453": [111, 481], "permiss": [112, 142, 154], "auto_examples_python": 112, "auto_examples_jupyt": 112, "arrang": [114, 140, 154, 395, 397, 400, 414, 419, 424, 427, 432, 433, 434, 479], "alphabet": [114, 142, 154, 177, 179], "bib": 114, "samara": [114, 159, 168, 228, 231, 448], "septemb": [114, 125, 133, 148, 154, 159, 448], "01093944": [114, 159, 448], "elena": [114, 190, 238], "erik": [114, 190, 238], "erhardt": [114, 190, 238], "eswar": [114, 190, 238], "damaraju": [114, 190, 238], "gruner": [114, 190, 238], "judith": [114, 190, 238], "segal": [114, 190, 238], "roger": [114, 190, 200, 201, 202, 203, 204, 238, 279], "silva": [114, 190, 238], "havlicek": [114, 190, 238], "sriniva": [114, 190, 238], "rachakonda": [114, 190, 238], "jill": [114, 187, 190, 195, 205, 238, 241, 267], "fri": [114, 190, 238], "ravi": [114, 190, 238], "kalyanam": [114, 190, 238], "andrew": [114, 156, 186, 190, 194, 207, 235, 238, 240, 260], "arvind": [114, 190, 238], "caprihan": [114, 190, 238], "eichel": [114, 190, 238], "adelsheim": [114, 190, 238], "angela": [114, 190, 221, 238, 248], "bryan": [114, 190, 238], "juan": [114, 190, 238], "bustillo": [114, 190, 238], "sarah": [114, 190, 238], "feldstein": [114, 190, 238], "ew": [114, 190, 238], "francesca": [114, 190, 238], "filbei": [114, 190, 238], "corei": [114, 190, 238], "ford": [114, 190, 238], "kent": [114, 190, 238], "hutchison": [114, 190, 238], "rex": [114, 190, 238], "jung": [114, 190, 238], "kiehl": [114, 190, 238], "piyadasa": [114, 190, 238], "kodituwakku": [114, 190, 238], "yuko": [114, 190, 238], "komesu": [114, 190, 238], "mayer": [114, 190, 238], "godfrei": [114, 190, 238], "pearlson": [114, 190, 238], "phillip": [114, 176, 190, 238], "sadek": [114, 190, 238], "ursina": [114, 190, 238], "teuscher": [114, 190, 238], "vinc": [114, 190, 238], "fnsy": [114, 190, 238], "00002": [114, 190, 238], "katrin": 114, "amunt": [114, 208], "hartmut": 114, "mohlberg": 114, "sebastian": 114, "bludau": 114, "zill": 114, "julich": [114, 208], "cytoarchitectur": 114, "6506": 114, "988": 114, "992": 114, "august": [114, 132, 139, 151, 154], "2020": [114, 143, 144, 145, 154, 197, 220, 242, 255], "abb4588": 114, "visit": [114, 155, 176, 191, 205], "2024": [114, 155, 176, 191, 205], "luca": [114, 167, 191], "baldassarr": [114, 167, 191], "janaina": [114, 167, 176, 191], "mourao": [114, 167, 191], "miranda": [114, 167, 176, 191], "massimiliano": [114, 167, 191], "pontil": [114, 167, 191], "civet": [114, 191], "fulli": [114, 168, 171, 191, 480], "autom": [114, 117, 177, 188, 191, 205, 214, 224, 237, 250, 270, 272], "comprehens": [114, 169, 176, 191, 193, 265, 289], "proceed": [114, 166, 170, 176, 187, 191, 221, 248, 267, 295, 365], "12th": [114, 191], "annual": [114, 187, 191, 267], "meet": [114, 151, 154, 187, 191, 267, 480], "bic": [114, 191, 207, 260, 313], "ca": [114, 191, 207, 260], "yaddab": [114, 191], "yasser": [114, 191], "hbm2006": [114, 191], "poster": [114, 191], "workshop": [114, 167, 191, 239], "www0": [114, 167], "ac": [114, 167, 205, 207, 208, 221, 222, 223, 248, 260, 277, 278, 285], "staff": [114, 167], "neurosparse_prni": [114, 167], "prni": [114, 167, 191, 239], "yashar": [114, 364, 365, 461], "behzadi": [114, 347, 364, 365, 461], "khale": [114, 364, 365, 461], "restom": [114, 364, 365, 461], "joi": [114, 364, 365, 461], "liau": [114, 364, 365, 461], "liu": [114, 191, 219, 225, 247, 251, 364, 365, 461], "perfus": [114, 364, 365, 461], "s1053811907003837": [114, 364, 365, 461], "mine": [114, 176, 191, 239], "hierarchi": [114, 191, 239], "pedro": [114, 191, 239], "rosa": [114, 191, 239], "neto": [114, 191, 239], "lyttelton": [114, 191, 239], "habib": [114, 191, 239], "benali": [114, 191, 239], "alan": [114, 191, 207, 239, 260, 285], "bootstrap": [114, 239], "1139": [114, 191, 239], "s1053811910002697": [114, 191, 239], "lorrain": [114, 166], "tyler": [114, 166], "semant": [114, 147, 149, 154, 166], "perirhin": [114, 166], "4766": [114, 166], "4775": [114, 166], "jneurosci": [114, 166], "1523": [114, 136, 154, 166], "2828": [114, 166], "loui": [114, 191, 207, 260, 285], "collin": [114, 188, 191, 207, 237, 260, 285], "anim": [114, 191, 207, 260], "nonlinear": [114, 191, 207, 260, 285], "registr": [114, 156, 171, 191, 207, 357, 479], "artifici": [114, 191], "1271": [114, 191], "1294": [114, 191], "1997": [114, 142, 154, 191, 224, 250], "zijdenbo": [114, 188, 207, 260], "wim": [114, 207, 260], "baar": [114, 207, 260], "insect": [114, 207, 260], "attila": [114, 207, 260], "kuba": [114, 207, 260], "\u0161": [114, 207, 260], "\u00e1": [114, 207, 260], "amal": [114, 207, 260], "todd": [114, 166, 205, 207, 260], "pokropek": [114, 207, 260], "editor": [114, 155, 207, 227, 260], "springer": [114, 155, 207, 213, 227, 245, 260], "kollokian": [114, 188], "sled": [114, 188], "kabani": [114, 188], "holm": [114, 188, 219, 247, 341, 460], "realist": [114, 188, 256, 435, 437, 438, 444], "digit": [114, 188], "phantom": [114, 188], "712135": [114, 188], "holtzheim": [114, 194, 240], "iii": [114, 194, 240], "xiaop": [114, 194, 240], "hu": [114, 194, 240], "helen": [114, 194, 240], "mayberg": [114, 194, 240], "1914": [114, 194, 240], "1928": [114, 194, 240], "1002": [114, 194, 200, 201, 202, 203, 204, 224, 240, 250, 279, 341, 460], "hbm": [114, 194, 240, 341, 460], "21333": [114, 194, 240], "antonia": [114, 197, 242], "machlouzarid": [114, 197, 242], "shalit": [114, 197, 242], "krzysztof": [114, 197, 214, 242, 270, 272], "117126": [114, 197, 242], "02904869": [114, 197, 242], "davidson": [114, 315, 316], "mackinnon": [114, 315, 316], "econometr": [114, 310, 314, 315, 316], "theori": [114, 174, 211, 268, 315, 316], "univ": [114, 315, 316], "ny": [114, 315, 316], "isbn": [114, 310, 314, 315, 316], "512372": [114, 315, 316], "gso": [114, 315, 316], "gbv": [114, 315, 316], "cmd": [114, 315, 316], "srcha": [114, 315, 316], "srt": [114, 315, 316], "yop": [114, 315, 316], "ikt": [114, 315, 316], "trm": [114, 315, 316], "ppn": [114, 315, 316], "393847152": [114, 315, 316], "sourceid": [114, 315, 316], "fbw_bibsonomi": [114, 315, 316], "desikan": [114, 205], "gonn": [114, 205], "quinn": [114, 205], "bradford": [114, 205], "dickerson": [114, 205], "deborah": [114, 205], "blacker": [114, 205], "randi": [114, 191, 205, 216, 219, 225, 247, 251, 274], "buckner": [114, 191, 205, 216, 219, 225, 247, 251, 274], "maguir": [114, 205], "hyman": [114, 205], "subdivid": [114, 205, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "gyral": [114, 195, 205], "968": [114, 205], "supplement": [114, 195, 207, 241, 260, 285], "s151": [114, 195, 241], "s1053": [114, 195, 207, 241, 260, 285], "8119": [114, 195, 207, 241, 260, 285], "71561": [114, 195, 241], "graphnet": [114, 167], "june": [114, 132, 135, 138, 147, 154, 167, 176], "2015": [114, 117, 118, 119, 120, 121, 122, 127, 128, 154, 167, 187, 193, 213, 214, 228, 231, 245, 265, 267, 270, 272, 364, 365], "01147731": [114, 167], "\u00fc": [114, 167], "bingen": [114, 167], "00991743": [114, 167], "dosenbach": [114, 130, 154, 183, 220, 235, 253, 255], "duchi": [114, 168], "gould": [114, 168], "daphn": [114, 168], "koller": [114, 168], "subgradi": [114, 168], "1206": [114, 168], "3249": [114, 168], "joset": [114, 166], "etzel": [114, 166], "jeffrei": [114, 166, 186, 235], "zack": [114, 166], "braver": [114, 166], "promis": [114, 166], "pitfal": [114, 161, 166], "s1053811913002917": [114, 166], "filippini": [114, 187, 221, 248, 267], "macintosh": [114, 187, 267], "morgan": [114, 187, 267], "hough": [114, 187, 267], "gui": [114, 187, 267], "goodwin": [114, 187, 267], "giovanni": [114, 187, 267], "frisoni": [114, 187, 267], "beckmann": [114, 155, 187, 221, 248, 267, 364, 365], "mackai": [114, 187, 221, 248, 267], "carrier": [114, 187, 267], "apo": [114, 187, 267], "\u03b54": [114, 187, 267], "allel": [114, 187, 267], "academi": [114, 166, 176, 187, 191, 221, 248, 267, 295, 365], "7209": [114, 187, 267], "7214": [114, 187, 267], "pna": [114, 166, 176, 187, 191, 221, 248, 267, 365], "1073": [114, 166, 176, 187, 191, 221, 248, 267, 365], "0811879106": [114, 187, 267], "tootel": [114, 200, 201, 202, 203, 204, 279], "intersubject": [114, 200, 201, 202, 203, 204, 279], "28sici": [114, 200, 201, 202, 203, 204, 224, 250, 279], "291097": [114, 200, 201, 202, 203, 204, 224, 250, 279], "0193": [114, 200, 201, 202, 203, 204, 224, 250, 279], "281999": [114, 200, 201, 202, 203, 204, 279], "3a4": [114, 200, 201, 202, 203, 204, 224, 250, 279], "3c272": [114, 200, 201, 202, 203, 204, 279], "3aaid": [114, 200, 201, 202, 203, 204, 224, 250, 279], "hbm10": [114, 200, 201, 202, 203, 204, 279], "3e3": [114, 200, 201, 202, 203, 204, 224, 250, 279], "3b2": [114, 200, 201, 202, 203, 204, 224, 250, 279], "sici": [114, 200, 201, 202, 203, 204, 224, 250, 279], "1097": [114, 200, 201, 202, 203, 204, 224, 250, 279], "aid": [114, 200, 201, 202, 203, 204, 224, 250, 279], "van": [114, 117, 187, 195, 214, 241, 267, 270, 272, 364, 365], "der": [114, 195, 241], "kouw": [114, 195, 241], "s\u00e9gonn": [114, 195, 241], "salat": [114, 195, 241], "evelina": [114, 195, 241], "busa": [114, 195, 241], "larri": [114, 195, 205, 241], "seidman": [114, 195, 205, 241], "goldstein": [114, 195, 205, 241], "kennedi": [114, 195, 205, 241], "vern": [114, 195, 205, 241], "cavi": [114, 195, 205, 241], "niko": [114, 195, 205, 241], "makri": [114, 195, 205, 241], "rosen": [114, 195, 241], "bhg087": [114, 195, 241], "1193353": [114, 195, 241], "boyd": 114, "edinburgh": 114, "fletcher": [114, 186, 235], "sarang": 114, "joshi": 114, "riemannian": 114, "diffus": [114, 161, 174], "tensor": 114, "s0165168406001691": 114, "sigpro": 114, "2005": [114, 205, 365], "vladimir": [114, 191, 207, 260, 285], "fonov": [114, 191, 207, 260, 285], "botteron": [114, 191, 207, 260, 285], "almli": [114, 191, 207, 260, 285], "mckinstri": [114, 191, 207, 260, 285], "unbias": [114, 161, 191, 207, 260, 285], "pediatr": [114, 191, 205, 207, 260, 285], "s1053811910010062": [114, 191, 207, 260, 285], "rc": [114, 207, 260, 285], "cr": [114, 207, 260, 285], "dl": [114, 207, 260, 285], "birth": [114, 207, 260, 285], "adulthood": [114, 207, 260, 285], "s102": [114, 207, 260, 285], "70884": [114, 207, 260, 285], "fox": [114, 221, 224, 248, 250, 365], "snyder": [114, 191, 364, 365], "justin": [114, 365], "maurizio": [114, 365], "corbetta": [114, 365], "essen": [114, 117, 187, 214, 267, 270, 272, 365], "marcu": [114, 166, 187, 216, 267, 274, 365], "raichl": [114, 365], "9673": [114, 365], "9678": [114, 365], "juli": [114, 122, 154, 155, 365], "0504136102": [114, 365], "frazier": [114, 205], "sufen": [114, 205], "chiu": [114, 205], "jani": [114, 205], "breez": [114, 205], "nichola": [114, 186, 205, 235], "lang": [114, 186, 188, 205, 235, 237], "martha": [114, 205], "herbert": [114, 205], "eileen": [114, 205], "bent": [114, 205], "vamsi": [114, 205], "koneru": [114, 205], "megan": [114, 205], "dieterich": [114, 205], "limbic": [114, 205], "thalam": [114, 205], "bipolar": [114, 205], "disord": [114, 174, 176, 205], "american": [114, 205], "1256": [114, 205, 466], "1265": [114, 205], "freedman": [114, 384], "nonstochast": [114, 384], "busi": [114, 384], "econom": [114, 384], "1983": [114, 384], "tandfonlin": [114, 384], "1080": [114, 384], "07350015": [114, 384], "10509354": [114, 384], "friedman": [114, 155], "hasti": [114, 155], "tibshirani": [114, 155], "lookup": [114, 155], "kxm045": [114, 155], "worslei": [114, 341, 460], "frith": [114, 341, 460], "frackowiak": [114, 341, 460], "1994": [114, 341, 460], "460020402": [114, 341, 460], "federico": [114, 191], "giov": [114, 191], "tommaso": [114, 191], "gili": [114, 191], "vittorio": [114, 191], "iacovella": [114, 191], "emiliano": [114, 191], "macaluso": [114, 191], "bruno": [114, 191], "maraviglia": [114, 191], "suppress": [114, 191], "1058": [114, 191], "1064": [114, 191], "octob": [114, 139, 142, 154, 191], "linkinghub": [114, 155, 191, 205], "elsevi": [114, 155, 191, 205], "s0730725x09001696": [114, 191], "ahern": [114, 205], "liam": [114, 205], "brien": [114, 205], "jr": [114, 205], "faraon": [114, 205], "ming": [114, 205], "tsuang": [114, 205], "hypothalam": [114, 205], "abnorm": [114, 205], "schizophrenia": [114, 134, 154, 174, 205], "genet": [114, 205], "vulner": [114, 148, 154, 205], "biolog": [114, 205], "935": [114, 205], "gabriel": [114, 214, 270, 272], "rivera": [114, 117, 214, 270, 272], "yannick": [114, 118, 154, 161, 163, 193, 214, 265, 270, 272, 293, 294], "schwarz": [114, 214, 270, 272], "satrajit": [114, 214, 270, 272], "ghosh": [114, 117, 214, 270, 272], "camil": [114, 214, 270, 272], "maumet": [114, 117, 214, 270, 272], "vanessa": [114, 214, 270, 272], "sochat": [114, 117, 214, 270, 272], "tal": [114, 117, 181, 214, 270, 272, 374], "yarkoni": [114, 117, 214, 270, 272], "marguli": [114, 117, 214, 270, 272], "neuroinformat": [114, 197, 214, 216, 270, 272], "fninf": [114, 117, 214, 270, 272], "00008": [114, 117, 214, 270, 272], "philadelphia": [114, 167], "00839984": [114, 167], "educ": [114, 222, 267, 274, 310, 314, 441], "fifth": [114, 261, 310, 314], "edit": [114, 147, 154, 169, 177, 310, 314], "066189": [114, 310, 314], "stern": [114, 310, 314], "nyu": [114, 125, 154, 310, 314], "edu": [114, 216, 220, 221, 225, 248, 251, 274, 310, 314], "wgreen": [114, 310, 314], "econometricanalysi": [114, 310, 314], "htm": [114, 310, 314], "logan": [114, 167], "grosenick": [114, 167], "brad": [114, 167], "klingenberg": [114, 167], "kiefer": [114, 167], "katovich": [114, 167], "knutson": [114, 167], "s1053811912012487": [114, 167], "honorio": [114, 168, 228, 231], "tommi": [114, 168, 228, 231], "jaakkola": [114, 168, 228, 231], "backslash": [114, 126, 154, 168], "ell_": [114, 168], "preprint": [114, 168], "1207": [114, 168, 228, 231], "4255": [114, 152, 154, 168, 228, 231], "rena": [114, 142, 154, 158, 163, 174, 175, 293, 294, 446, 453], "schwartz": [114, 117, 118, 154, 161, 163, 193, 265, 293, 294], "scalabl": [114, 163, 293, 294], "s1053811917308182": [114, 163, 293, 294], "koji": [114, 211, 268], "complementari": [114, 211, 268], "neuropsychologia": [114, 211, 268], "s0028393211005070": [114, 211, 268], "thorsten": [114, 166], "kahnt": [114, 166], "grueschow": [114, 166], "speck": [114, 166], "perceptu": [114, 166], "s0896627311002960": [114, 166], "knop": [114, 176], "edward": [114, 176], "hubbard": [114, 176], "recruit": [114, 176], "arithmet": [114, 176], "5934": [114, 176], "1583": [114, 176], "1585": [114, 176], "1171599": [114, 176], "nikolau": [114, 166, 176, 295], "kriegeskort": [114, 166, 176, 295], "rainer": [114, 166, 176, 295], "goebel": [114, 166, 176, 295], "peter": [114, 166, 176, 221, 224, 248, 250, 295], "bandettini": [114, 166, 176, 295], "3863": [114, 166, 176, 295], "3868": [114, 166, 176, 295], "0600244103": [114, 166, 176], "laird": [114, 221, 248], "mickl": [114, 221, 248], "kimberli": [114, 221, 248], "rai": [114, 221, 248], "rees": [114, 221, 248], "mckai": [114, 221, 248], "glahn": [114, 221, 248], "4022": [114, 221, 248], "4037": [114, 221, 248], "1162": [114, 216, 221, 248, 274], "jocn": [114, 216, 221, 248, 274], "_a": [114, 221, 248], "_00077": [114, 221, 248], "1777164": [114, 221, 248], "jocn_a_00077": [114, 221, 248], "lancast": [114, 224, 250], "rainei": [114, 224, 250], "summerlin": [114, 224, 250], "freita": [114, 224, 250], "toga": [114, 224, 250], "mazziotta": [114, 224, 250], "preliminari": [114, 189, 224, 250], "forward": [114, 224, 250], "281997": [114, 224, 250], "3c238": [114, 224, 250], "hbm6": [114, 224, 250], "jack": [114, 162, 224, 250], "woldorff": [114, 224, 250], "lawrenc": [114, 224, 250], "parson": [114, 224, 250], "mario": [114, 224, 250], "liotti": [114, 224, 250], "catarina": [114, 224, 250], "laci": [114, 224, 250], "kochunov": [114, 224, 250], "nickerson": [114, 224, 250], "shawn": [114, 224, 250], "mikiten": [114, 224, 250], "talairach": [114, 136, 154, 173, 183, 235, 250], "28200007": [114, 224, 250], "2910": [114, 224, 250], "3a3": [114, 224, 250], "3c120": [114, 224, 250], "hbm30": [114, 224, 250], "200007": [114, 224, 250], "lindquist": [114, 139, 154, 341, 460], "stephan": [114, 341, 460], "geuter": [114, 341, 460], "tor": [114, 117, 214, 270, 272, 341, 460], "wager": [114, 117, 214, 270, 272, 341, 460], "caffo": [114, 341, 460], "modular": [114, 169, 198, 341, 460], "reintroduc": [114, 341, 460], "biorxiv": [114, 341, 460], "407676": [114, 341, 460], "1101": [114, 220, 255, 341, 460], "hesheng": [114, 191, 219, 225, 247, 251], "stufflebeam": [114, 191], "jorg": [114, 191, 219, 225, 247, 251], "sepulcr": [114, 191, 219, 225, 247, 251], "trei": [114, 191], "hedden": [114, 191], "evid": [114, 191], "asymmetri": [114, 191], "20499": [114, 191], "20503": [114, 191], "decemb": [114, 127, 128, 142, 154, 191, 257, 275], "0908073106": [114, 191], "hodg": [114, 205], "april": [114, 124, 131, 134, 140, 141, 150, 154, 187, 205], "s0920996405004998": [114, 205], "schre": [114, 205], "traci": [114, 216, 274], "jami": [114, 216, 274], "parker": [114, 216, 274], "csernanski": [114, 216, 274], "morri": [114, 216, 274], "nondement": [114, 216, 274], "dement": [114, 216, 274], "1498": [114, 216, 274, 466], "1507": [114, 216, 274], "1756878": [114, 216, 274], "dougla": [114, 315, 316], "montgomeri": [114, 315, 316], "peck": [114, 315, 316], "geoffrei": [114, 315, 316], "vine": [114, 315, 316], "ed": [114, 156, 315, 316], "son": [114, 315, 316], "0471754951": [114, 315, 316], "mour\u00e3o": [114, 176], "leticia": [114, 176], "oliveira": [114, 176], "cecil": [114, 176], "ladouceur": [114, 176], "marquand": [114, 176], "brammer": [114, 176], "bori": [114, 176], "birmah": [114, 176], "axelson": [114, 176], "mari": [114, 176], "healthi": [114, 174, 176, 186, 190, 191, 205, 221, 239], "adolesc": [114, 176], "mood": [114, 176], "plo": [114, 176], "ONE": [114, 176], "e29482": [114, 176], "dx": [114, 176], "1371": [114, 176], "pone": [114, 176], "0029482": [114, 176], "naselari": [114, 162], "kendrick": [114, 162], "kai": [114, 162], "shinji": [114, 162], "nishimoto": [114, 162], "gallant": [114, 162], "20691790": [114, 162], "pmid": [114, 162, 219, 225, 247, 251], "jare": [114, 186, 235], "nielsen": [114, 186, 235], "brandon": [114, 186, 235], "zielinski": [114, 186, 235], "erin": [114, 186, 235], "bigler": [114, 186, 235], "janet": [114, 186, 235], "lainhart": [114, 186, 235], "multisit": [114, 186, 235], "autism": [114, 186, 235], "fnhum": [114, 186, 235], "00599": [114, 186, 235], "reilli": [114, 187, 267], "valentina": [114, 187, 267], "tomassini": [114, 187, 267], "narend": [114, 187, 267], "ramnani": [114, 187, 267], "heidi": [114, 187, 267], "johansen": [114, 187, 267], "berg": [114, 187, 267], "zone": [114, 187, 267], "953": [114, 187, 267], "bhp157": [114, 187, 267], "17303287": [114, 187, 267], "wolfgang": [114, 217, 246], "amanda": [114, 217, 246], "nili": [114, 217, 246], "tyszka": [114, 217, 246], "vivo": [114, 217, 246], "nuclei": [114, 217, 246], "scientif": [114, 146, 149, 154, 169, 176, 186, 193, 208, 216, 217, 246, 257, 265, 275, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 424, 426, 427, 429, 433, 434, 435, 437, 438], "180063": [114, 217, 246], "apr": [114, 217, 246], "1038": [114, 217, 246, 257, 275], "sdata": [114, 217, 246, 257, 275], "congdon": [114, 257, 275], "triplett": [114, 257, 275], "karlsgodt": [114, 257, 275], "sabb": [114, 257, 275], "freimer": [114, 257, 275], "cannon": [114, 257, 275], "bilder": [114, 257, 275], "phenom": [114, 257, 275], "160110": [114, 257, 275], "mitig": [114, 420], "s1053811916303871": [114, 420], "2142": [114, 191, 364, 365], "2154": [114, 191, 364, 365, 466], "22019881": [114, 191, 364, 365], "pubmedcentr": [114, 191, 364, 365], "articlerend": [114, 191, 364, 365], "fcgi": [114, 191, 364, 365], "artid": [114, 191, 364, 365], "pmc3254728": [114, 191, 364, 365], "anish": [114, 364], "mitra": [114, 364], "s1053811913009117": [114, 364], "raimon": [114, 364, 365], "pruim": [114, 364, 365], "daan": [114, 364, 365], "rooij": [114, 364, 365], "alberto": [114, 364, 365], "llera": [114, 364, 365], "buitelaar": [114, 364, 365], "aroma": [114, 156, 364, 365], "hilari": [114, 196, 256], "richardson": [114, 196, 256], "grace": [114, 196, 256], "lisandrelli": [114, 196, 256], "alexa": [114, 196, 256], "riobueno": [114, 196, 256], "naylor": [114, 196, 256], "sax": [114, 196, 256], "social": [114, 196, 256], "twelv": [114, 196, 256], "schaefer": [114, 183, 247], "ru": [114, 219, 247], "kong": [114, 219, 247], "gordon": [114, 219, 247], "nian": [114, 219, 247], "zuo": [114, 219, 247], "avram": [114, 219, 247], "yeo": [114, 183, 219, 247, 251, 416], "3095": [114, 219, 247, 466], "3114": [114, 219, 247], "bhx179": [114, 219, 247], "25696344": [114, 219, 247], "_schaeferfullsupp": [114, 219, 247], "seitzman": [114, 142, 154, 183, 255], "caterina": [114, 220, 255], "gratton": [114, 220, 255], "marek": [114, 220, 255], "raut": [114, 220, 255], "116290": [114, 220, 255], "s105381191930881x": [114, 220, 255], "450452": [114, 220, 255], "zarrar": 114, "shehzad": 114, "gee": 114, "kristin": 114, "gotim": 114, "lucina": 114, "q": [114, 155, 171, 177, 228, 319, 323, 336, 339, 458], "uddin": 114, "sang": 114, "han": 114, "lee": 114, "ami": 114, "krain": 114, "xavier": 114, "unconstrain": [114, 221], "2209": 114, "2229": 114, "bhn256": 114, "17300841": 114, "sm": [114, 187, 267], "glasser": [114, 187, 267], "salimi": [114, 155, 187, 267], "khorshidi": [114, 155, 187, 267], "duff": [114, 187, 267], "dc": [114, 187, 267], "mw": [114, 187, 267], "woolrich": [114, 155, 187, 267], "jenkinson": [114, 187, 267], "cf": [114, 181, 187, 267], "rfmri": [114, 187, 267], "ohbm": [114, 138, 154, 187, 267], "address": [114, 171, 173, 174, 177, 338, 384], "localis": [114, 174, 338, 384], "vidaurr": [114, 187, 267], "ej": [114, 187, 267], "behren": [114, 187, 267], "kamil": [114, 187, 267], "ugurbil": [114, 187, 267], "karla": [114, 155, 187, 221, 248, 267], "miller": [114, 155, 187, 221, 248, 267], "demograph": [114, 187, 267], "1565": [114, 187, 267], "1567": [114, 187, 267], "watkin": [114, 221, 248], "toro": [114, 221, 248], "textquoteright": [114, 221, 248], "architectur": [114, 158, 221, 248], "13040": [114, 221, 248], "13045": [114, 221, 248], "0905267106": [114, 221, 248], "gholamreza": [114, 155], "ramsei": [114, 155], "875": [114, 127, 154, 155], "891": [114, 155], "januari": [114, 123, 143, 149, 154, 155], "s1053811910011602": [114, 155], "mccarthi": [114, 187, 267], "emma": [114, 187, 267], "clair": [114, 187, 267], "xu": [114, 187, 267], "horton": [114, 187, 267], "eugen": [114, 187, 267], "\u00e2": [114, 187, 267], "mil": [114, 187, 267], "u\u011furbil": [114, 187, 267], "humanconnectom": [114, 187, 267], "storag": [114, 181, 187, 267, 271, 273], "media": [114, 187, 267], "s500": [114, 187, 267], "hcp500_megatrawl_april2015": [114, 187, 267], "fenna": [114, 219, 225, 247, 251], "krienen": [114, 219, 225, 247, 251], "mert": [114, 219, 225, 247, 251], "sabuncu": [114, 219, 225, 247, 251], "danial": [114, 219, 225, 247, 251], "lashkari": [114, 219, 225, 247, 251], "marisa": [114, 219, 225, 247, 251], "hollinshead": [114, 219, 225, 247, 251], "roffman": [114, 219, 225, 247, 251], "jordan": [114, 219, 225, 247, 251], "smoller": [114, 219, 225, 247, 251], "lilla": [114, 219, 225, 247, 251], "z\u00f6llei": [114, 219, 225, 247, 251], "polimeni": [114, 219, 225, 247, 251], "neurophysiologi": [114, 219, 225, 247, 251], "1125": [114, 219, 225, 247, 251], "1165": [114, 219, 225, 247, 251], "21653723": [114, 219, 225, 247, 251], "1152": [114, 219, 225, 247, 251], "jn": [114, 219, 225, 247, 251], "00338": [114, 219, 225, 247, 251], "tzourio": [114, 188, 237], "mazoy": [114, 188, 237], "landeau": [114, 188, 237], "papathanassi": [114, 188, 237], "crivello": [114, 188, 237], "etard": [114, 188, 237], "delcroix": [114, 188, 237], "joliot": [114, 188, 237], "macroscop": [114, 188, 237], "2002": [114, 188, 237], "s1053811901909784": [114, 188, 237], "0978": [114, 188, 237], "flore": [114, 155, 227], "baronnet": [114, 155, 227], "fillard": [114, 155, 227], "stroke": [114, 155, 227], "patient": [114, 155, 174, 227], "tianzi": [114, 155, 227], "jiang": [114, 155, 227], "nassir": [114, 155, 227], "navab": [114, 155, 227], "josien": [114, 155, 227], "pluim": [114, 155, 227], "viergev": [114, 155, 227], "assist": [114, 155, 227], "intervent": [114, 155, 227], "miccai": [114, 155, 227], "lectur": [114, 155, 176, 227], "cn2h9c": [114, 155, 227], "spontan": [114, 213, 245], "1008": [114, 155, 228], "5071": [114, 155, 228], "bio": [114, 155, 228], "recoveri": [114, 298], "6447": 114, "engemann": [114, 161], "caveat": [114, 161], "1606": [114, 161], "05201": [114, 161], "merlin": [114, 298], "keller": [114, 298], "nano": [114, 298], "macro": [114, 298], "1177": [114, 298], "1180": [114, 298], "5490204": [114, 298], "synthesi": [114, 117, 168, 214, 270, 272], "zaleski": [114, 156], "bullmor": [114, 156], "2096": [114, 156], "2106": [114, 156], "adelstein": 114, "donald": 114, "klein": 114, "retest": 114, "2163": [114, 466], "2177": [114, 142, 154, 466], "s1053811909011525": 114, "di": 114, "martino": 114, "1432": 114, "1445": 114, "s1053811909010167": 114, "antonio": [114, 193, 265], "frouin": [114, 193, 265], "brainom": [114, 139, 154, 183, 265], "s1053811915008745": [114, 193, 265], "abstract": [115, 367], "beaten": 115, "mask_face_littl": [116, 179, 206, 259], "mask_house_littl": [116, 179, 206, 259], "comfort": [116, 169], "plenti": 116, "hesit": [116, 169], "rarr": [116, 181], "tube": 116, "clever": [116, 168], "resp": 116, "brighter": 116, "scratch": 116, "elementari": 116, "introduc": [117, 132, 142, 151, 154, 161, 162, 166, 169, 181, 227, 228, 235, 298, 299, 306, 323, 336, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448], "upload": 117, "modal": [117, 161, 169, 223, 278, 361], "went": 117, "webpag": 117, "click": [117, 171, 181, 265, 479], "brainpedia": 117, "1952": [117, 142, 154], "brainpedia_subset": 117, "32015": 117, "32016": 117, "criteria": [117, 169, 174, 220, 235, 270], "collection_term": [117, 270], "collection_metadata": [117, 270], "everi": [117, 155, 156, 160, 161, 162, 166, 168, 169, 171, 177, 181, 229, 243, 244, 270, 369, 372, 419, 424, 427, 432, 433, 434, 436, 451, 452, 458, 480], "image_term": [117, 270], "snippet": 117, "wait": [117, 168], "is_valid": [117, 142, 154], "treat": 117, "cbf": 117, "cbv": 117, "express": [117, 123, 127, 154, 174, 179, 270, 296, 297, 321, 323, 326, 351, 432], "ignorecas": 117, "special": [117, 124, 142, 154, 169], "isnul": [117, 270], "notnul": [117, 270], "notequ": [117, 270], "greaterorequ": [117, 270], "greaterthan": [117, 270], "lessorequ": [117, 270], "lessthan": [117, 270], "notin": [117, 270], "notcontain": [117, 270], "resultfilt": [117, 270], "OR": 117, "xor": 117, "NOT": 117, "conveni": [117, 180, 181, 196, 256], "collection_filt": [117, 270], "callabl": [117, 149, 154, 231, 270, 291, 292, 293, 294, 295], "image_filt": [117, 270], "anyth": [117, 168, 169], "lambda": 117, "rewritten": 117, "suppos": [117, 168, 177, 179, 181, 315, 316], "weird": 117, "small_meta_imag": 117, "collections_meta": [117, 214, 270, 271, 272, 273], "platform": [117, 135, 154, 177, 214], "unless": [117, 168, 169, 275, 338, 384, 429, 460], "vectorize_word": [117, 270, 272], "kj": 117, "ss": 117, "vv": 117, "te": 117, "ra": [117, 355], "front": [117, 310, 313], "neuroinform": 117, "contributor": [118, 119, 121, 122, 169, 177], "git": [118, 119, 121, 122, 127, 129, 132, 154, 169, 177], "shortlog": [118, 119, 121, 122, 127, 129, 132, 154], "march": [120, 137, 146, 154, 295], "bugfix": [120, 121, 128, 129, 132, 150, 154, 169], "minor": [121, 135, 137, 152, 154, 161], "rewamp": [121, 154], "brok": [121, 154], "maint": [122, 123, 124, 125, 126, 127, 129, 132, 133, 134, 136, 139, 142, 144, 147, 148, 149, 150, 151, 152, 154, 169], "obei": [122, 154], "debian": [122, 154], "rule": [122, 154, 161, 162, 169, 187, 291, 292, 293, 294], "2023": [123, 124, 125, 154], "bump": [123, 126, 139, 142, 147, 148, 149, 154, 162, 164, 177], "v1": [123, 126, 139, 147, 149, 154], "v3": [123, 154], "3237": [123, 154], "3196": [123, 151, 154], "3181": [123, 151, 154], "2715": [123, 151, 154], "doc": [123, 124, 125, 126, 127, 132, 134, 135, 139, 142, 144, 145, 148, 149, 150, 151, 152, 154, 169], "theme": [123, 151, 154], "furo": [123, 151, 154], "3125": [123, 151, 154, 466], "3374": [123, 154], "3385": [123, 154], "3430": [123, 154], "tick": [123, 126, 154, 169, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 424, 426, 427, 429, 433, 434, 435, 437, 438, 440, 442, 444], "3105": [123, 154, 169], "test_cluster_level_parameters_smok": [123, 154], "3436": [123, 154], "compute_multi_epi_mask": [123, 154, 180, 370], "3412": [123, 154], "3403": [123, 154], "valueerror": [123, 126, 154, 351, 355, 368, 369, 371, 372, 464], "3390": [123, 154], "creation": [123, 142, 154, 298, 299, 323, 336, 458], "3453": [123, 154, 466], "imput": [123, 154], "cubic": [123, 154, 181, 231, 460], "spline": [123, 154, 426, 427, 433, 434, 441, 460], "3452": [123, 154], "3439": [123, 154], "friendli": [123, 154, 480], "rework": [123, 129, 135, 142, 148, 154], "3380": [123, 154], "contribut": [123, 136, 139, 140, 141, 142, 143, 144, 148, 149, 151, 154, 162, 171, 177, 217, 480], "changelog": [123, 134, 177], "whatsnew": [123, 154], "3446": [123, 154], "deploi": [123, 154], "3426": [123, 154], "privat": [123, 125, 126, 151, 154], "weighted_connectivity_graph": [123, 154], "nearest_neighbor_group": [123, 154], "renam": [123, 126, 135, 139, 154, 177], "3347": [123, 154], "alias": [123, 154], "builtin": [123, 154], "3422": [123, 154], "compute_multi_gray_matter_mask": [123, 154], "3427": [123, 154], "3429": [123, 154], "3440": [123, 154, 466], "3433": [123, 154], "3424": [123, 154], "docstr": [123, 124, 140, 145, 148, 151, 154, 169, 313, 315, 316], "nistat": [123, 128, 145, 154], "migrat": [123, 154], "nistats_migr": [123, 154], "rst": [123, 154, 169, 177], "3449": [123, 154], "_safe_cach": [123, 154], "deem": [123, 154], "outdat": [123, 133, 154], "anymor": [123, 151, 154], "3375": [123, 154], "3498": [124, 154], "3444": [124, 154], "predefin": [124, 154], "3259": [124, 154, 466], "3531": [124, 154], "3600": [124, 154], "3563": [124, 154], "refactor": [124, 125, 126, 133, 147, 149, 151, 154, 177], "create_fake_bids_dataset": [124, 154], "3525": [124, 154], "3362": [124, 154], "3605": [124, 154], "standardize_sign": [124, 126, 154], "3474": [124, 154], "confus": [124, 154, 162, 359], "3483": [124, 154], "3173": [124, 154], "sub_label": [124, 154, 326, 361], "3351": [124, 154], "ridgeclassifiercv": [124, 154, 291, 292, 293, 294], "3626": [124, 154], "3631": [124, 154], "3414": [124, 154], "fetch_atlas_craddock_2012": [124, 125, 154, 156, 194], "3353": [124, 154], "helper": [124, 127, 134, 135, 154, 169, 183, 270], "img_to_signals_label": [124, 126, 139, 142, 154, 452, 454], "signals_to_img_label": [124, 154, 451, 455], "img_to_signals_map": [124, 154, 451, 455], "signals_to_img_map": [124, 154, 452, 454], "3523": [124, 154], "3557": [124, 154, 466], "bibtex": [124, 151, 154], "3558": [124, 154], "3548": [124, 125, 154], "pep8": [124, 125, 126, 154, 169, 177], "3549": [124, 154], "3550": [124, 154], "3551": [124, 154], "3552": [124, 154], "3553": [124, 154], "3554": [124, 154], "3555": [124, 154], "setuptool": [124, 154], "pyproject": [124, 154, 169, 177, 480], "toml": [124, 154, 169, 177, 480], "hatchl": [124, 154, 177], "met": [124, 154], "3635": [124, 154], "3465": [124, 154], "restor": [124, 154], "spatialimag": [124, 154, 179, 344], "3462": [124, 154], "3478": [124, 154], "3477": [124, 154], "3445": [124, 154], "3485": [124, 154], "3491": [124, 154], "3484": [124, 154], "lassocv": [125, 154, 291, 292, 293, 294], "3781": [125, 154], "3873": [125, 154], "3203": [125, 154], "facilit": [125, 154, 176, 177, 181, 197], "downstream": [125, 154], "3856": [125, 154], "logisticregressioncv": [125, 154, 291, 292, 293, 294], "3736": [125, 154], "3172": [125, 154], "3987": [125, 154], "transform_img": [125, 154, 368, 369, 370], "3971": [125, 154], "3644": [125, 154, 466], "prevent": [125, 154, 356, 357, 376, 377, 378, 380, 381], "gifti": [125, 154, 200, 201, 202, 203, 204, 279, 280, 300, 301, 302], "3819": [125, 154], "3879": [125, 154], "entiti": [125, 154], "3742": [125, 154], "throw": [125, 152, 154, 374], "3811": [125, 154], "fitter": [125, 154], "had": [125, 138, 154], "grid_param": [125, 154], "3733": [125, 154, 466], "3794": [125, 154], "relax": [125, 154, 207], "3816": [125, 154], "3723": [125, 154], "3897": [125, 154], "plotli": [125, 126, 149, 154, 398, 435, 437, 438, 479, 480], "3945": [125, 154], "clearli": [125, 149, 154, 169], "3973": [125, 154], "_plot_surf_matplotlib": [125, 154], "3860": [125, 154], "3942": [125, 154], "3797": [125, 154], "2804": [125, 154], "3857": [125, 154], "3597": [125, 154], "3774": [125, 154], "test_sign": [125, 154], "4208": [125, 154], "3927": [125, 154], "3994": [125, 154], "check_ev": [125, 154], "3943": [125, 154], "meanwhil": [125, 126, 154], "3722": [125, 154], "3732": [125, 154, 466], "_compute_facecolors_matplotlib": [125, 154], "html_surfac": [125, 154], "_get_vertexcolor": [125, 154], "gh": [125, 154, 169], "3855": [125, 154], "doctest": [125, 154], "3681": [125, 154], "3753": [125, 154], "shorten": [125, 151, 154], "3934": [125, 154], "old": [125, 142, 148, 149, 154], "cobr": [125, 130, 134, 154], "3743": [125, 154, 466], "isort": [125, 154, 169], "complianc": [125, 154, 169], "codebas": [125, 154, 169], "3538": [125, 154], "3566": [125, 154], "3556": [125, 154], "3601": [125, 154], "3609": [125, 154], "3646": [125, 154], "3650": [125, 154], "3647": [125, 154], "3640": [125, 154], "3615": [125, 154], "3614": [125, 154], "3648": [125, 154], "3651": [125, 154], "3836": [125, 154], "3833": [125, 154], "3827": [125, 154], "3810": [125, 154], "3803": [125, 154], "3802": [125, 154], "3795": [125, 154], "3790": [125, 154], "3783": [125, 154], "3777": [125, 154], "3838": [125, 154], "one_mesh_info": [125, 154], "full_brain_info": [125, 154], "_one_mesh_info": [125, 154], "_full_brain_info": [125, 154], "3847": [125, 154], "manag": [125, 126, 154, 169, 177, 480], "3854": [125, 154], "BY": [125, 154, 209], "_mix_colormap": [125, 154], "3919": [125, 154], "decor": [125, 148, 154, 169], "3921": [125, 154], "4103": [126, 154, 466], "fewer": [126, 154, 168, 420], "4067": [126, 154], "3102": [126, 154], "3285": [126, 154], "plot_fixed_effect": [126, 154], "plot_fiac_analysi": [126, 154], "3191": [126, 154], "3993": [126, 154], "2833": [126, 154], "temp_file_lifetim": [126, 154, 456], "4180": [126, 154], "4001": [126, 154], "4215": [126, 154], "simpleregressionresult": [126, 151, 154, 323], "accommod": [126, 139, 154], "lack": [126, 154], "4071": [126, 154], "clean__sample_mask": [126, 154], "4051": [126, 154], "4204": [126, 154], "psc": [126, 142, 146, 154, 368, 369, 370, 371, 372, 373, 374, 460], "normalis": [126, 154, 358], "4116": [126, 154], "4188": [126, 154, 466], "4233": [126, 154], "4070": [126, 154], "5d": [126, 154, 181], "3935": [126, 154], "4225": [126, 154], "binarize_img": [126, 148, 154], "4121": [126, 154], "4099": [126, 154], "4122": [126, 154], "4042": [126, 154], "lss": [126, 154], "4141": [126, 154], "aren": [126, 154, 179], "4136": [126, 154], "fetch_abide_pcp": [126, 150, 154, 186], "4159": [126, 154], "cubicsplin": [126, 154], "extrapol": [126, 154, 356, 460], "censor": [126, 151, 154, 460], "4028": [126, 154], "_get_clusters_t": [126, 154], "copy_img": [126, 127, 154], "4166": [126, 154], "write_tmp_img": [126, 154], "write_imgs_to_path": [126, 154], "4094": [126, 154], "concat_niimg": [126, 154], "niimg_convers": [126, 154], "4167": [126, 154], "underscor": [126, 154, 169], "4086": [126, 154], "proximal_oper": [126, 154], "4153": [126, 154], "masked_atla": [126, 154, 451], "return_masked_atla": [126, 154, 451], "3761": [126, 154], "4191": [126, 154], "4131": [126, 154], "fetch_bids_langloc_dataset": [126, 154], "simuilar": [126, 154], "4219": [126, 154], "switch": [126, 134, 141, 154, 169, 177, 426], "tox": [126, 154], "pip": [126, 134, 139, 142, 154, 169, 177, 480], "4029": [126, 154], "sym_to_vec": [127, 132, 135, 147, 154], "modernis": [127, 154], "784": [127, 154], "indexerror": [127, 149, 154], "fast_abs_percentil": [127, 154], "n_cut": [127, 154, 415], "find_cut_slic": [127, 134, 154], "group_sparse_covari": [127, 154, 168, 229], "targett": [128, 154], "renew": [129, 154], "flake8": [129, 151, 154, 169], "pull": [129, 151, 154, 174, 176], "symmetric_split": [129, 154, 243, 244], "numpy_convers": [129, 154], "csv_to_arrai": [129, 154], "mac": [129, 154], "refresh": [129, 154], "sparsifi": [129, 154], "circleci": [129, 134, 154], "brainhack": [130, 135, 154], "fetch_cobr": [130, 134, 145, 149, 154], "basc": [130, 154, 183, 239], "expand": [131, 154, 174, 179, 351, 445, 447], "homedir": [131, 154], "uniformli": [131, 154, 162, 429, 435, 437, 438, 442, 444], "aal": [131, 154, 183, 237], "fetch_atlas_a": [131, 150, 154, 188], "wrong": [132, 150, 154, 171], "ivan": [132, 139, 154], "gonzalez": [132, 139, 154], "resolv": [133, 143, 154], "1238": [133, 154], "get_affin": [133, 154, 179, 343], "checkout": [134, 154, 169, 177], "latest": [134, 154, 169, 177, 365], "_get_mask_volum": [134, 154], "_adjust_screening_percentil": [134, 154], "uncompress": [134, 138, 154], "tar": [134, 154, 177], "set_axis_bgcolor": [134, 154], "fast_svd": [134, 154], "lapack": [134, 154, 168], "svd": [134, 154, 299, 347, 446, 461], "heurist": [134, 154, 167, 168, 229, 378, 419, 432, 433, 434, 441, 479], "cov_to_corr": [134, 154], "prec_to_parti": [134, 154], "_safe_get_data": [134, 154], "ensure_finit": [134, 154, 341, 375, 378, 460], "qualit": [134, 154], "fetch_surf_fsaverage5": [134, 139, 154], "coveral": [134, 154], "codecov": [134, 154], "sym_matrix_to_vec": [135, 154, 234], "largest_connected_compon": [135, 154], "workaround": [135, 154], "vec_to_sym_matrix": [135, 154], "largest_connected_component_img": [135, 154], "largest": [135, 154, 168, 350, 376, 377, 378, 379, 380, 381, 382, 418], "plot_connectivity_measur": [135, 154], "tighter": [135, 154, 168], "resampling_interpol": [136, 154, 426, 427, 433, 434, 441], "joe": [136, 154], "necu": [136, 154], "fetch_atlas_talairach": [136, 154, 224], "cautious": [136, 154], "backward": [136, 149, 154, 169, 226, 243, 244, 456], "incompat": [136, 154, 323], "anat_img": [136, 154, 419], "jeff": [136, 154], "chiang": [136, 154], "analu": [136, 139, 154], "madhyastha": [136, 139, 154], "meghana": [136, 139, 154], "sfvnmac": [136, 139, 154], "bedetti": [136, 139, 154], "griffith": [136, 154], "lannuzel": [136, 139, 154], "1536": [137, 154], "1370": [137, 154], "usabl": [137, 154, 166, 168, 189, 269, 295], "nifti2imag": [137, 154], "node_color": [137, 147, 154, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 440], "1595": [137, 154], "confer": [138, 154], "lock": [138, 154], "whitespac": [138, 154], "attributeerror": [138, 154], "httperror": [138, 154], "view_mark": [139, 140, 142, 147, 154, 440, 441, 479], "orthogon": [139, 154, 174, 323, 325, 330, 336, 341, 386, 395, 396, 397, 400, 414, 419, 421, 424, 426, 427, 430, 432, 433, 434, 458, 460], "view_stat_map": [139, 154], "python2": [139, 140, 141, 142, 154], "layout": [139, 154, 295, 386], "navig": [139, 154], "anaconda": [139, 154, 480], "thank": [139, 154, 169, 336, 337, 338], "miykael": [139, 154], "feel": [139, 154, 169], "shout": [139, 154], "pbellec": [139, 154], "great": [139, 154], "awesom": [139, 154], "sportingli": [139, 154], "feedback": [139, 154, 169, 177, 226], "brainsprit": [139, 140, 154, 479], "himanshupathak21061998": [139, 140, 154], "uniti": [139, 154], "channel": [139, 154], "life": [139, 154], "js_plotting_util": [139, 154], "remi": [139, 154], "akshai": [139, 154], "erramuzp": [139, 154], "foucault": [139, 154], "jehan": [139, 154], "nikolaidi": [139, 154], "dillon": [139, 154], "plunkett": [139, 154], "operto": [139, 154], "dtyulman": [139, 154], "0a0": 139, "1705": [139, 154], "grid_search": [139, 154, 291, 292, 293, 294], "menuet": [139, 154], "romuald": [139, 154], "fetch_atlas_schaefer_2018": [140, 142, 154, 219], "fetch_coords_seitzman_2018": [140, 154, 220], "consum": [140, 154, 164, 168, 177, 179, 374], "noteworthi": [140, 154, 162], "node_coord": [140, 142, 154, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 430, 440], "edge_cmap": [140, 142, 154, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 440], "load_niimg": [140, 154], "silent": [140, 149, 154], "book": [140, 154], "signatur": [140, 154, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464], "mgz": [140, 141, 154, 435, 436, 437, 438, 444, 462], "mne": [140, 141, 154], "lowest": [141, 154], "broke": [141, 154], "v2": [142, 147, 154], "viewabl": [142, 154], "vscode": [142, 154], "biap8": [142, 154], "input_output": [142, 154], "2172": [142, 154], "giant": [142, 154], "1336": [142, 154], "1953": [142, 154], "2025": [142, 154, 466], "plot_connectome_strength": [142, 145, 149, 154], "2028": [142, 154], "standard_devi": [142, 154, 368, 371, 451], "2221": [142, 154], "ticklabel": [142, 154], "2057": [142, 154], "2157": [142, 154], "truncat": [142, 154], "2195": [142, 154], "det": [142, 154, 246], "2235": [142, 154, 466], "2255": [142, 154], "2240": [142, 154], "2248": [142, 154], "ndarrai": [142, 154, 227, 228, 229, 230, 231, 232, 233, 234, 235, 247, 249, 253, 255, 256, 267, 268, 291, 292, 293, 294, 296, 297, 298, 299, 305, 306, 310, 313, 314, 315, 316, 319, 323, 336, 338, 341, 343, 346, 347, 353, 354, 356, 358, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 381, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 422, 428, 431, 435, 436, 437, 438, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 462, 463, 464], "2107": [142, 154], "attempt": [142, 154, 326], "2212": [142, 154], "nose": [142, 154], "2231": [142, 154], "2169": [142, 154], "05_advanc": [142, 154], "2063": [142, 154], "2090": [142, 154], "merg": [142, 154, 158, 169, 174, 177, 180, 447], "plot_adhd_spher": [142, 154], "duplic": [142, 154, 192], "review": [142, 154, 166, 177, 187, 208], "plot_canica_analysi": [142, 154], "plot_haxby_decod": [142, 154], "unsuit": [142, 154], "redund": [142, 154, 169], "2166": [142, 154], "2118": [142, 154], "900": [142, 154, 247, 466], "2138": [142, 154], "faulti": [142, 154], "crash": [142, 154], "1888": [142, 154], "2083": [142, 154], "2052": [142, 154, 466], "2272": [143, 154], "developmental_fmri": [143, 154], "2290": [143, 154], "2429": [144, 154], "launch": [144, 154, 161], "2300": [144, 154], "typo": [144, 152, 154], "2312": [144, 154, 466], "2302": [144, 154], "fetch_nyu_rest": [144, 147, 154], "2308": [144, 154], "2299": [145, 154], "2304": [145, 154], "2307": [145, 154], "2509": [145, 154], "2327": [145, 154], "art": [145, 154, 162, 291, 292, 293, 294], "interchang": [145, 154], "nodal": [145, 154, 430, 479], "decim": [145, 154, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 427], "compute_brain_mask": [145, 148, 154, 180, 291, 292, 293, 294, 298, 299, 373, 380, 446], "compute_gray_matter_mask": [145, 149, 154], "regard": [145, 154, 167, 261, 285, 365], "erron": [145, 154, 247], "readm": [145, 154, 196], "2021": [146, 147, 148, 154, 188, 189, 194, 213, 216, 217, 219, 222, 223, 224, 225, 236, 237, 240, 245, 246, 247, 250, 251, 274, 277, 278, 280, 466], "serv": [146, 154, 169, 177, 197, 242, 256], "1024": [146, 154, 197, 242], "2619": [146, 154], "2622": [146, 154], "2684": [146, 154], "2702": [146, 154], "one_minus_pvalu": [146, 154, 311], "stabil": [146, 154, 160, 191, 293, 294, 311], "cumul": [146, 154, 311], "2567": [146, 154], "2674": [146, 154, 466], "2553": [146, 154, 466], "arm": [146, 154], "2606": [146, 154], "2719": [146, 154, 466], "2714": [146, 154], "handi": [146, 154, 170], "2696": [146, 154], "whatev": [146, 154], "2669": [146, 154], "2697": [146, 154], "2712": [146, 154], "notat": [146, 149, 154, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 424, 426, 427, 429, 433, 434, 435, 437, 438], "2707": [147, 154], "2858": [147, 154], "inher": [147, 154], "basemask": [147, 154], "fsaverage3": [147, 154, 183, 279, 442], "fsaverage4": [147, 154, 183, 279, 442], "fsaverage6": [147, 154, 183, 279, 442], "2815": [147, 154], "curv": [147, 154, 161, 162, 164, 168, 174, 435, 436, 437, 438, 444, 462], "2532": [147, 154], "_get_voxelwise_model_attribut": [147, 154], "2792": [147, 154], "inconsist": [147, 154, 336, 338], "2767": [147, 154], "2826": [147, 154, 466], "2730": [147, 154], "2732": [147, 154], "struct": [147, 154], "footcit": [147, 149, 151, 154, 176], "footbibliographi": [147, 149, 151, 154], "2806": [147, 154, 466], "ascend": [147, 154, 351], "1155": [147, 154], "2831": [147, 154], "zoom": [147, 154], "surround": [147, 154, 464], "2798": [147, 154], "2821": [147, 149, 154], "butterwoth": [147, 154], "stratifi": [147, 154, 161, 291, 293, 295], "marker_label": [147, 154, 443], "2745": [147, 154], "2790": [147, 154], "2805": [147, 154], "2810": [147, 154], "flow": [147, 154, 171, 174], "2869": [147, 154], "2867": [147, 154], "2868": [147, 154], "juelich": [148, 154, 183, 244], "2723": [148, 154], "load_mni152_gm_templ": [148, 154, 207, 260, 283, 285, 286, 287], "load_mni152_wm_templ": [148, 154, 207, 260, 284, 285, 286], "load_mni152_gm_mask": [148, 154, 207, 260], "load_mni152_wm_mask": [148, 154, 207, 260], "2738": [148, 154], "2900": [148, 154], "2755": [148, 154, 466], "2904": [148, 154, 466], "skullstrip": [148, 154, 174, 285], "compute_multi_grey_matter_mask": [148, 154], "2876": [148, 154], "2941": [148, 154], "affect": [148, 154, 171, 174], "2928": [148, 154, 466], "preset": [148, 149, 154, 365, 479], "nevertheless": [148, 154], "8339": [148, 154], "fill_doc": [148, 154], "2875": [148, 154], "jqueri": [148, 154], "2944": [148, 154], "2022": [149, 150, 151, 154], "3061": [149, 154], "2946": [149, 154], "3016": [149, 154], "kmean": [149, 151, 154, 158, 175, 180, 323, 332, 445, 446], "2282": [149, 154], "2880": [149, 154], "3065": [149, 154, 466], "mainten": [149, 154], "3010": [149, 154, 466], "2902": [149, 154], "submodul": [149, 151, 154, 169], "3126": [149, 154], "get_bids_fil": [149, 154], "parse_bids_filenam": [149, 154], "subpart": [149, 154], "encourag": [149, 154, 169], "3026": [149, 154], "3036": [149, 154], "3009": [149, 154], "threw": [149, 154], "typeerror": [149, 154, 351], "3035": [149, 154], "3078": [149, 154], "hommel": [149, 154], "3109": [149, 154, 466], "benjamini": [149, 154, 171, 322], "hocheberg": [149, 154], "3137": [149, 154], "3135": [149, 154, 466], "3111": [149, 154], "3013": [149, 154], "2965": [149, 154], "demean": [149, 154, 364, 365], "3003": [149, 154], "triag": [149, 154], "polici": [149, 154, 186], "spm_hrf": [149, 154, 323, 325, 330], "2942": [149, 154], "3033": [149, 154], "3008": [149, 154], "test_img_plot": [149, 154], "reorgan": [149, 154, 169], "3015": [149, 154], "3077": [149, 154], "2859": [149, 154], "3106": [149, 154], "3081": [149, 154], "3082": [149, 154], "3090": [149, 154], "3093": [149, 154, 466], "3133": [149, 154], "cond_id": [149, 154], "ex": [149, 154, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 424, 426, 427, 429, 433, 434, 435, 437, 438], "3025": [149, 154], "3039": [149, 154], "slicer": [149, 154, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 479], "projector": [149, 154, 413], "3073": [149, 154], "byte": [149, 154, 169, 350, 356], "2655": [149, 154], "recarrai": [149, 154, 235, 241, 242, 253, 254, 255, 263, 264, 265, 274], "2829": [149, 154], "3098": [150, 154], "h0_fmax": [150, 154, 384], "3184": [150, 154], "func_preproc": [150, 154, 235], "3174": [150, 154], "3179": [150, 154], "_apply_cluster_size_threshold": [150, 154], "cluster_s": [150, 154], "3201": [150, 154], "newest": [150, 154, 270], "3188": [150, 154], "3165": [150, 154], "3127": [150, 154], "determinist": [150, 152, 154, 174, 237, 239, 241, 243, 244, 246, 247, 249, 250, 251, 445], "glossari": [150, 152, 154], "3152": [150, 154, 466], "3207": [150, 154], "3178": [150, 154], "cfg": [150, 154], "2953": [150, 154], "3241": [151, 154], "_check_second_level_input": [151, 154], "flm_object": [151, 154], "3283": [151, 154], "c_ra": [151, 154], "3235": [151, 154], "3284": [151, 154], "_gamma_difference_hrf": [151, 154], "hemodynamic_model": [151, 154], "slight": [151, 154], "distort": [151, 154, 364], "3297": [151, 154], "0rc1": [151, 154], "wn": [151, 154], "unfilt": [151, 154], "3293": [151, 154], "typograph": [151, 154], "3337": [151, 154], "_neurovault_base_url": [151, 154], "_neurosynth_fetch_words_url": [151, 154], "3281": [151, 154], "3222": [151, 154], "3233": [151, 154], "3255": [151, 154], "3220": [151, 154, 466], "3306": [151, 154], "3312": [151, 154], "3193": [151, 154], "3185": [151, 154], "3322": [151, 154], "n_elements_": [151, 154, 368, 369, 370, 371, 372, 373, 374], "3311": [151, 154], "fall": [151, 154, 169, 429, 464], "3292": [151, 154], "3030": [151, 154], "branch": [151, 154, 169, 177], "diff": [151, 154], "3317": [151, 154], "filesystem": [151, 154], "3300": [151, 154], "conform": [151, 154, 171], "3262": [151, 154], "3333": [151, 154], "int8": [151, 154, 354], "3286": [151, 154], "fsaverage5_spher": [151, 154], "3229": [151, 154], "regressionresult": [151, 154, 310, 314, 319, 323, 332], "olsmodel": [151, 154, 313, 315, 316], "likelihoodmodelresult": [151, 154, 315, 316], "df_resid": [151, 154], "wdesign": [151, 154], "wresid": [151, 154], "norm_resid": [151, 154], "wy": [151, 154], "fetch_openneuro_dataset_index": [151, 154], "favor": [151, 154], "3216": [151, 154], "afni": [151, 154], "nipi": [151, 154, 169, 175], "1046": [151, 154], "pr": [151, 154, 177], "1082": [151, 154], "overflow": [151, 154], "3227": [151, 154], "pars": [151, 154, 362], "3274": [151, 154], "charact": [151, 154, 332], "3141": [151, 154], "3302": [151, 154], "carpet_plot": [151, 154], "deleg": [151, 154], "cmap_label": [151, 154, 420], "3209": [151, 154, 466], "4279": [152, 154], "errant": [152, 154], "4257": [152, 154], "4258": [152, 154], "4310": [152, 154], "scrollabl": [152, 154], "4308": [152, 154], "region_names_": [152, 154, 371], "consecut": [152, 154, 237, 239, 241, 247, 250, 251, 445], "region_id": [152, 154], "4274": [152, 154], "serial": [152, 154, 168, 209], "4325": [152, 154], "4297": [152, 154], "4285": [152, 154], "4304": [152, 154], "properli": [152, 154, 166, 181, 421, 426], "4269": [152, 154], "miscellan": [152, 154], "4266": [152, 154], "4343": [152, 154], "4298": [152, 154], "plolti": [152, 154], "4267": [152, 154], "4295": [152, 154], "4284": [152, 154], "4232": [152, 154], "unus": [152, 154, 305, 306, 368, 369, 370, 371, 372, 373, 374], "4270": [152, 154], "css": [152, 154, 235], "lint": [152, 154, 169, 177], "4302": [152, 154], "focuss": 155, "naturalist": [155, 156, 158, 159, 196], "indirect": [155, 156], "Its": [155, 163, 168, 295, 316, 323, 336, 339, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 458], "time_series_1": 155, "time_series_2": 155, "challeng": 155, "toll": 155, "stronger": 155, "geometr": [155, 227], "group_connect": 155, "heterogen": 155, "easiest": [156, 161, 162], "frmi_fil": 156, "confounds_datafram": 156, "imperfect": 156, "boundari": [156, 166, 180, 432, 433, 435, 437, 438], "csv_file": 156, "consider": [156, 162, 220, 235, 338, 384], "readili": [156, 161, 164, 176, 179, 180, 448], "rise": 158, "debat": 158, "cite": [158, 193, 208, 213, 245, 256, 265], "quicker": [158, 169], "loss": [158, 163, 296, 365], "downsiz": 158, "hierarch": [158, 174, 175, 191, 445], "neighborhood": 158, "tree": [158, 219, 247], "admittedli": 158, "isotrop": [159, 191], "publicli": 159, "osf": [159, 192, 196, 197, 209, 217, 242, 246, 256, 265], "5hju4": [159, 196, 256], "walker": [159, 448, 450], "likewis": 159, "sphinx_gallery_dummy_imag": [159, 180], "newer": [160, 270, 272], "arriv": 160, "consensu": [160, 169, 191], "explor": [160, 164, 168, 170, 175, 176, 222, 229, 257, 270, 276, 291, 292, 293, 294], "resembl": 160, "coactiv": 160, "neuro": [160, 174, 291, 359], "offer": [160, 170, 172, 479], "articul": 161, "diagnost": [161, 165, 189], "statu": [161, 174, 189, 274], "vbm": [161, 174, 176], "fa": 161, "unusu": 161, "rich": 161, "strongli": [161, 169, 174], "genfromtxt": 161, "seemingli": 161, "misleadingli": 161, "chose": 161, "Be": [161, 162, 169, 229, 310, 459], "got": [161, 169], "thumb": [161, 169], "advic": [161, 187], "worst": 161, "entir": [161, 166, 181, 371, 451], "imbalanc": 161, "domin": [161, 280], "roc": [161, 174], "guess": [161, 168, 376, 441], "notion": [161, 166, 362, 430], "tackl": [162, 177], "extern": [162, 165, 274], "trait": 162, "userguid": 162, "categor": [162, 177], "harder": 162, "vote": 162, "costli": [162, 166, 338, 384], "former": [162, 168, 270, 426, 429, 434, 438], "penal": [162, 168, 229, 296, 297], "variant": [162, 185, 187, 213], "counterpart": 162, "ridge_regressor": [162, 292, 294], "lasso_regressor": [162, 292, 294], "dummy_regressor": [162, 292, 294], "lunch": 162, "insensit": 162, "cheap": 162, "ill": 162, "importantli": [162, 164, 169], "ugli": 162, "nuisanc": [162, 174, 189, 191, 196, 236, 310, 313, 314, 315, 365, 460], "hyper": [162, 163], "computationnali": 162, "bia": [162, 291, 292, 293, 294, 296, 297], "cancel": 162, "hood": [162, 167], "promot": [162, 163, 177], "memor": [163, 171], "versatil": [164, 175, 480], "mimic": [164, 243, 244], "unfortun": [164, 168], "prognosi": [165, 176], "reduct": [165, 299, 446, 482], "bag": [165, 296, 297, 482], "briefli": 166, "critic": [166, 168], "lorocv": 166, "isovoxel": 166, "volunt": 166, "theoret": 166, "hypothesi": [166, 171, 295, 311, 338, 384], "swap": [166, 180, 274, 359], "descriptor": [166, 324, 384], "herebi": 166, "rank": [166, 313, 314, 315, 316, 360, 384], "phenomenon": 166, "statistician": 166, "crucial": 166, "symmetri": [166, 168], "adopt": [166, 174], "spacenetclassifi": [167, 291, 292, 297], "tvl1": 167, "blobbi": 167, "mainli": 168, "devis": 168, "descent": [168, 299], "innermost": 168, "hoc": 168, "histori": 168, "prove": [168, 181], "amplifi": 168, "mandatori": [168, 341], "_update_submatrix": 168, "perfect": 168, "newton": 168, "raphson": 168, "debug": [168, 169, 176, 229, 231], "kern": 168, "bottleneck": 168, "overhead": 168, "neglig": [168, 345], "evenli": [168, 341, 460], "highli": [168, 169], "boil": 168, "written": [168, 222, 456], "inlin": [168, 456], "naiv": 168, "clock": 168, "nr": 168, "loos": 168, "fortran": [168, 356, 357, 384], "couldn": 168, "weren": 168, "ubuntu": 168, "synthes": 168, "wasn": 168, "hopefulli": 168, "topologi": 168, "govern": 168, "hardest": 168, "unrealist": 168, "perfectli": 168, "spectrum": 168, "decorrel": 168, "whatsoev": 168, "mostli": [168, 360], "weakli": 168, "optimum": 168, "wast": 168, "convex": 168, "group_sparse_covariance_cost": 168, "feasibl": 168, "semi": [168, 205], "primal": 168, "satisfi": [168, 177], "quantiti": [168, 311], "lost": 168, "rapidli": 168, "prohibit": 168, "slowli": 168, "tricki": 168, "paragraph": 168, "dwindl": 168, "speedup": 168, "complic": [168, 179, 313, 315, 316], "program": [168, 479], "earlystopprob": 168, "unpen": 168, "fastest": 168, "compute_alpha_max": 168, "sequenti": [168, 179, 432], "trajectori": 168, "smallest": 168, "fact": [168, 171, 174], "energi": [168, 191], "brute": 168, "slowest": 168, "hardwar": 168, "commod": 168, "moder": 168, "sought": [168, 174], "push": [168, 169, 177], "stress": 168, "rare": 168, "spent": 168, "early_stop": [168, 229], "team": [169, 176, 177, 213, 245, 480], "neurostar": [169, 176, 177], "forum": 169, "weekli": [169, 176], "hour": [169, 176, 177, 338, 384], "wednesdai": [169, 480], "4pm": [169, 480], "5pm": [169, 480], "utc": [169, 480], "week": [169, 177], "troubleshoot": 169, "appreci": [169, 179], "topic": [169, 177], "burn": 169, "board": 169, "welcom": [169, 177, 480], "think": [169, 171, 181], "runnabl": 169, "ongo": 169, "comment": [169, 181], "opinion": 169, "approv": [169, 187], "burden": 169, "member": [169, 177, 480], "expert": [169, 176], "eas": 169, "prototyp": [169, 226], "beginn": [169, 176], "parsimoni": 169, "concern": [169, 174], "sustain": 169, "weigh": 169, "exhaust": [169, 176], "thoroughli": [169, 226], "discourag": 169, "intent": 169, "dedic": [169, 274], "host": 169, "templateflow": [169, 260, 261], "neuromap": 169, "neuroparc": 169, "modif": [169, 171, 174], "ultim": [169, 314, 419, 424, 426, 427, 432, 433, 434], "emerg": 169, "effort": [169, 177], "everyon": [169, 187], "send": [169, 445, 447], "infrastructur": [169, 177], "gigabyt": 169, "deploy": 169, "xxxx": 169, "unrel": [169, 181], "numpydoc": 169, "versionad": [169, 177], "versionchang": [169, 177, 354], "dev": [169, 177, 206, 259], "coverag": [169, 480], "mock": 169, "atom": [169, 174], "convei": [169, 384], "smoothen": 169, "wip": 169, "draft": 169, "mrg": 169, "enh": 169, "adher": 169, "badg": [169, 177], "cff": 169, "bdg": [169, 177], "secondari": 169, "success": [169, 171, 177, 181, 222], "info": [169, 177, 192, 270, 272, 429, 435, 436, 437, 438], "danger": [169, 171], "dimitripapadopoulo": 169, "affili": 169, "orcid": 169, "0000": 169, "0002": 169, "1242": 169, "8990": 169, "a_nice_funct": 169, "init": [169, 445], "camelcas": 169, "statement": 169, "obj": [169, 240, 248], "enclos": 169, "__all__": 169, "__init__": [169, 227, 228, 229, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 310, 311, 312, 313, 314, 315, 316, 317, 323, 336, 367, 368, 369, 370, 371, 372, 373, 374, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 445, 446, 447, 448, 456], "_valid": 169, "check_mask_img": 169, "validationerror": 169, "symbol": [169, 170, 351], "_check_mask_shap": 169, "_check_mask_valu": 169, "_validate_shap": 169, "doubl": [169, 170, 243, 244], "alon": [169, 171, 479], "hook": 169, "linter": 169, "autoformatt": 169, "pytest": [169, 177, 480], "test_imag": 169, "didn": 169, "test_modul": 169, "recogniz": 169, "conftest": 169, "fixur": 169, "default_rng": 169, "test_someth": 169, "my_numb": 169, "he": 169, "plain": 169, "repo": [169, 177, 480], "fork": 169, "clone": 169, "your_usernam": 169, "virtual": [169, 480], "wor": 169, "whichev": 169, "venv": [169, 480], "conda": [169, 480], "__version__": 169, "command": [169, 176, 177, 480], "upstream": [169, 177], "remot": [169, 270, 272], "your_branch": 169, "path_to_edited_fil": 169, "test_surf_plot": 169, "your_fork": 169, "restructuredtext": 169, "strict": 169, "window": [169, 323, 336, 458, 480], "_build": 169, "doctre": 169, "noplot": 169, "ci": [169, 177, 313, 315, 316], "filename_pattern": 169, "sphinx_gallery_conf": 169, "thorough": 169, "servic": 169, "temporarili": 169, "unavail": [169, 259], "frustrat": 169, "successfulli": 169, "get_dataset_dir": 169, "fetch_fil": 169, "server": [169, 270, 272], "fake": 169, "request_mock": 169, "_test": 169, "sender": 169, "essenc": 170, "timecours": [170, 364], "convolv": [170, 325], "plug": [170, 181, 310, 314], "ascertain": 170, "spm_multimodal_fmri": [170, 278], "referenc": 170, "fistlevelmodel": 170, "flag": [170, 364, 365], "observed_timeseri": 170, "oxyhaemoglobin": [171, 174], "carri": [171, 174], "deoxyhaemoglobin": [171, 174], "deliv": [171, 174], "diamagnet": [171, 174], "paramagnet": [171, 174], "mr": 171, "irrespect": [171, 432], "microarchitectur": 171, "regist": [171, 187, 191, 205, 239], "montreal": [171, 174, 188, 191, 237], "nipyp": 171, "action": [171, 177, 193, 265], "sensori": 171, "stimui": 171, "hypothes": [171, 174], "oxi": 171, "deoxi": 171, "haemoglobin": 171, "sluggish": 171, "plai": [171, 181], "remark": 171, "respond": 171, "enter": 171, "conceptu": 171, "physic": [171, 385, 387, 388], "decid": 171, "dof": [171, 311, 320], "_scan": 171, "_column": 171, "quantil": 171, "reject": [171, 174], "frequent": 171, "misconcept": 171, "frequentist": 171, "wikipedia": 171, "wiki": 171, "frequentist_infer": 171, "cumbersom": 171, "absenc": [171, 177, 451], "_voxel": 171, "frac": [171, 297, 310, 314], "truli": [171, 207], "surpass": 171, "proportion": 171, "compromis": [171, 365], "hochberg": [171, 322], "supra": 171, "rational": 171, "primer": [172, 482], "broader": [173, 186], "morphologi": 174, "treatment": [174, 176], "contrari": [174, 362, 368, 369, 466], "fundament": 174, "eeg": 174, "electroencephalographi": 174, "monitor": 174, "electr": 174, "echo": [174, 326], "planar": 174, "triangular": [174, 227, 233, 234, 431], "incorrect": 174, "unwarp": 174, "submit": [174, 177], "diamet": 174, "tradition": 174, "subcompon": 174, "meg": 174, "magnetoencephalographi": 174, "mni305": 174, "pe": 174, "signifi": [174, 291, 292, 293, 294], "soft": 174, "tpr": 174, "unlabel": 174, "emot": 174, "reaction": 174, "iq": [174, 189, 291, 292, 293, 294], "diagnosi": [174, 176], "outlier": [174, 274, 364, 365, 367, 370, 373], "magnitud": [174, 423], "benedikt": 174, "ehing": 174, "coher": [174, 176], "neurobiolog": 174, "subgroup": 174, "psychiatr": 174, "plural": 174, "toolbox": [175, 480], "quickstart": 175, "ecosystem": 175, "domain": [176, 299], "ok": 176, "walk": 176, "manner": [176, 426], "dive": 176, "oftentim": 176, "comer": 176, "gentl": 176, "scientififc": 176, "greatli": 176, "visualis": 176, "besid": 176, "transfer": 176, "psycholog": 176, "despit": 176, "varoquaux2012": 176, "connection": 176, "tracker": 177, "mislabel": 177, "seriou": 177, "dai": 177, "decent": 177, "quantifi": 177, "prioriti": [177, 179, 281], "urgent": 177, "month": 177, "medium": [177, 279, 442], "kindli": [177, 205], "repli": 177, "redirect": 177, "ping": 177, "stall": 177, "ini": 177, "test_plot": 177, "test_contrast": 177, "exec": 177, "test_latest": 177, "test_data_gen": 177, "hatch": 177, "vc": 177, "sdist": 177, "wheel": 177, "beforehand": 177, "tehn": 177, "currentmodul": 177, "whats_new": 177, "_latest": 177, "_vx": 177, "commit": 177, "master": [177, 247], "_version": 177, "yml": 177, "trigger": 177, "tab": [177, 181], "workspac": 177, "dist": 177, "rm": 177, "twine": 177, "subfold": 177, "packagenam": 177, "packagevers": 177, "pythonvers": 177, "pythoncvers": 177, "whl": 177, "drag": 177, "dvipng": 177, "texliv": 177, "wget": 177, "mirror": [177, 235, 236, 237, 238, 239, 240, 241, 245, 248, 249, 251, 259, 260, 263, 264, 265, 268, 269, 274, 280], "ctan": 177, "dviwar": 177, "unzip": 177, "linux": 177, "pkg": 177, "versiontag": 177, "abbrev": 177, "bewar": [177, 179], "expans": [178, 482], "resiz": [178, 180, 291, 292, 293, 294, 296, 297, 336, 353, 356, 376, 378, 379, 381, 440, 442, 443, 444, 446, 456, 482], "t_map001": 179, "abbrevi": 179, "subject1": 179, "subject2": 179, "unix": [179, 290], "shell": [179, 290], "subject_01": 179, "subject_03": 179, "subject_": 179, "subj1": 179, "nilearn_shared_data": [179, 281], "get_head": 179, "memoryerror": 179, "decompress": 179, "uncach": 179, "comma": 179, "chapter": [180, 181], "swap_img_hemispher": 180, "fslview": 180, "crop": [180, 181, 345], "consumpt": [180, 323, 336, 369, 372, 459], "3x3x3": [180, 270, 272, 448, 450], "diag": [180, 431], "compute_background_mask": [180, 291, 292, 293, 294, 298, 299, 370, 373, 446], "compute_multi_background_mask": [180, 370], "intersect_mask": 180, "restructur": 180, "recip": 180, "cube": [181, 457], "swiss": 181, "armi": 181, "knive": 181, "intend": [181, 207, 316, 356, 357], "set_config": [181, 227, 228, 229, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448], "print_changed_onli": 181, "fight": 181, "neuroanatomi": 181, "anisotrop": 181, "convers": [181, 237], "loss_pass": 181, "prespecifi": 181, "abrupt": 181, "transient": 181, "acquis": 181, "saniti": 181, "recast": 181, "brought": 181, "represenet": 181, "excerpt": 181, "disadvantag": 181, "nonpres": 181, "linearli": [181, 191], "nor": 181, "pcp": [183, 235], "multimod": 183, "asd": 186, "grass": 186, "1112": 186, "nearli": [186, 296, 297], "childmind": 186, "unrestrict": [186, 189, 193, 196, 197, 213], "commerci": [186, 189, 191, 193, 194, 196, 197, 213, 240], "ts2": 187, "ts3": 187, "hcp500": 187, "connectomedb": 187, "compli": [187, 364], "regul": 187, "irb": 187, "ethic": 187, "committe": 187, "law": 187, "certif": 187, "extremum": 188, "avoi": 188, "gin": [188, 237], "symptom": 189, "quotient": 189, "lifetim": 189, "ftp": [189, 236], "htdoc": [189, 236], "adhd200": [189, 236], "adhd200_40sub_preprocess": [189, 236], "tgz": [189, 236], "rsn_indic": [190, 238], "rsn_name": 190, "mialab": [190, 238], "mrn": [190, 238], "2093": 190, "image_m": 190, "g004": 190, "jpg": 190, "creativ": [191, 194, 240], "mstep": [191, 239], "markdown": 191, "scale007": [191, 239], "scale012": [191, 239], "scale020": [191, 239], "scale036": [191, 239], "scale064": [191, 239], "scale122": [191, 239], "scale197": [191, 239], "scale325": [191, 239], "scale444": [191, 239], "brain_parcellation_cambridge_basc_multiscale_": 191, "asym": [191, 239], "_scale": 191, "nnn": 191, "2009a": 191, "nii_sym": 191, "nii_asym": 191, "asymmetr": [191, 239, 260, 261], "homotop": [191, 235, 239], "kit": 191, "niak": [191, 235], "cento": 191, "octav": 191, "minc": 191, "minctracc": 191, "stereotax": 191, "excess": [191, 364], "unscrub": 191, "princip": [191, 267, 365], "blur": 191, "replic": 191, "criterion": [191, 384, 447], "pool": [191, 199], "fashion": [191, 207], "u5mzi": 192, "methodolog": 194, "trade": [194, 293, 294], "ncut": 194, "scorr_2level": [194, 240], "emphas": [194, 240], "scorr_mean": [194, 240], "tcorr_2level": [194, 240], "tcorr_mean": [194, 240], "cluster_roi": [194, 240], "alik": [194, 217, 240], "licenc": [194, 205, 208, 237, 238, 240, 247, 251], "sulco": [195, 249], "wjtyq": [196, 256], "ds000228": [196, 256], "gender": [196, 256, 274], "handed": [196, 256], "idp": 197, "pqu9r": [197, 242], "wjvd5": [197, 242], "3vrct": [197, 242], "9b76y": [197, 242], "34792": [197, 242], "mairal": 197, "stochast": 197, "subsampl": 197, "mitchel": 197, "openfmri": 197, "contest": 199, "sst": 199, "dst": 199, "speaker": 199, "ssp": 199, "dsp": 199, "sstssp": 199, "sstdsp": 199, "dstssp": 199, "dstdsp": 199, "npz": [199, 258], "area_left": [200, 201, 202, 203, 204, 279], "area_right": [200, 201, 202, 203, 204, 279], "flat_right": [200, 201, 202, 203, 204, 279], "sphere_left": [200, 201, 202, 203, 204, 279], "sphere_right": [200, 201, 202, 203, 204, 279], "thick_left": [200, 201, 202, 203, 204, 279], "thick_right": [200, 201, 202, 203, 204, 279], "white_left": [200, 201, 202, 203, 204, 279, 464], "white_right": [200, 201, 202, 203, 204, 279], "morphometr": 205, "femal": [205, 235], "cma": 205, "flirt": 205, "fmrib": [205, 208, 221, 248], "ox": [205, 208, 221, 248], "fslwiki": [205, 208], "repons": [206, 259], "pymvpa": [206, 259], "datadb": [206, 259], "proton": [207, 260], "t2": [207, 260, 424, 479], "t2_relax": [207, 260], "eye_mask": [207, 260], "face_mask": [207, 260], "servicesatlas": [207, 260], "icbm152nlin2009": [207, 260], "cytoarchitecton": 208, "colin27": 208, "mortem": 208, "methodologi": 208, "covertli": 209, "5x1": 209, "5x4": 209, "k4jp8": 209, "downloaded_fil": [209, 252, 275], "odc": 209, "sa": [209, 240], "ds000005": 211, "00001": 211, "Their": 212, "capit": 212, "mask_roi": 212, "rh": 212, "lh": 212, "vxxx": 212, "cn": 212, "atr": 212, "jp": 212, "dni": 212, "spatial_pattern": 213, "cc0": 214, "nathan": 215, "kline": 215, "func_right": [215, 280], "freeli": [216, 222], "alzheim": 216, "diseas": 216, "dr": 216, "howard": 216, "hugh": 216, "hhmi": 216, "nrg": 216, "medicin": 216, "birn": 216, "data_usage_agr": [216, 274], "dua": 216, "crowd": 217, "invit": 217, "r2hvk": [217, 246], "ucc": 217, "thomasyeolab": [219, 247], "cbig": [219, 247], "update_yeo2011_schaefer2018_labelnam": [219, 247], "stable_project": [219, 247], "brain_parcel": [219, 247], "schaefer2018_localglob": [219, 247], "cerebellar": [220, 255], "winner": 220, "novel": 220, "thalamu": [220, 255], "ganglia": 220, "amygdala": [220, 255], "hippocampu": [220, 255], "recapitul": 220, "greenelab": 220, "wustl": 220, "data_softwar": 220, "twpyb1pflj6vrlxgh3rohyqanxbdpelw": 220, "rsn20": [221, 248], "rsn10": [221, 248], "rsn70": [221, 248], "bm20": [221, 248], "bm10": [221, 248], "bm70": [221, 248], "rt": 222, "geriant": 222, "ion": [222, 223, 277, 278], "equip": 222, "person": 222, "contact": 222, "trials_ses1": [223, 278], "trials_ses2": [223, 278], "mmface": [223, 278], "thin": [225, 251], "thin_7": [225, 251], "thin_17": [225, 251], "colors_7": [225, 251], "colors_17": [225, 251], "surfer": [225, 251], "nmr": [225, 251], "mgh": [225, 251], "fswiki": [225, 251], "corticalparcellation_yeo2011": [225, 251], "cov_estim": 227, "ledoitwolf": 227, "store_precis": 227, "discard_diagon": [227, 233], "shrunk": 227, "cov_estimator_": 227, "whitening_": 227, "connectivitymatrix": 227, "n_confound": [227, 347, 461], "vetor": 227, "get_metadata_rout": [227, 228, 229, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448], "rout": [227, 228, 229, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448], "metadatarequest": [227, 228, 229, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448], "subobject": [227, 228, 229, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448], "param": [227, 228, 229, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448], "set_inverse_transform_request": [227, 298, 299, 306, 368, 369, 371, 372, 374, 445, 446, 447, 448], "enable_metadata_rout": [227, 228, 229, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448], "alia": [227, 228, 229, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 306, 323, 336, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448, 479], "metadata_rout": [227, 228, 229, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448], "set_output": [227, 298, 299, 306, 323, 336, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448], "set_param": [227, 228, 229, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 367, 368, 369, 370, 371, 372, 373, 374, 445, 446, 447, 448], "set_transform_request": [227, 298, 299, 306, 367, 368, 369, 370, 371, 372, 373, 374, 446, 448], "tol": [228, 229, 231, 296, 297], "aggress": [228, 365], "ndarray": 228, "set_fit_request": [228, 229, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 323, 336, 368, 369, 370, 371, 372, 373, 446, 448], "n_refin": 229, "tol_cv": 229, "max_iter_cv": 229, "phase": 229, "cv_alphas_": 229, "n_alpha": [229, 296, 297], "probe_funct": 231, "precisions_init": 231, "dualiti": 231, "prematur": 231, "emp_cov": 231, "vec": 234, "encompass": 234, "cpac": 235, "band_pass_filt": 235, "global_signal_regress": 235, "quality_check": 235, "wrt": 235, "dparsf": 235, "cc": 235, "controversi": 235, "1hz": 235, "alff": 235, "degree_binar": 235, "degree_weight": 235, "dual_regress": 235, "eigenvector_binar": 235, "eigenvector_weight": 235, "falff": 235, "func_mask": 235, "func_mean": 235, "lfcd": 235, "reho": 235, "rois_aal": 235, "rois_cc200": 235, "rois_cc400": 235, "rois_dosenbach160": 235, "rois_ez": 235, "rois_ho": 235, "rois_tt": 235, "vmhc": 235, "rater": 235, "sub_id": 235, "50001": 235, "50607": 235, "dx_group": 235, "dsm_iv_tr": 235, "asperg": 235, "ppd": 235, "NOS": 235, "age_at_scan": 235, "handedness_categori": 235, "ambi": 235, "ambidextr": 235, "handedness_scor": 235, "eigenvector": 235, "fraction": [235, 323, 326, 378, 379, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 464], "ez": 235, "resum": [236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 256, 259, 260, 261, 265, 267, 268, 269, 274, 280], "spm12": 237, "med": 237, "5021": 237, "lingual_l": 237, "precentral_l": 237, "spm5": 237, "ob": 239, "figshar": 239, "1285615": 239, "grp_mean": 240, "group_mean": 240, "creativecommon": 240, "nc": 240, "rec": [241, 253, 254, 255, 326], "atlas_nam": [243, 244], "cortl": 243, "thr50": [243, 244], "usr": [243, 244], "strictli": [243, 244], "probabilit": 246, "prepend": [246, 247, 362, 363], "nac": 246, "idx_nac": 246, "n_roi": 247, "yeo_network": 247, "base_url": 247, "7networks_lh_vis_3": [247, 466], "update_20190916_readm": 247, "e501": 247, "bandwidth": 248, "gryal": 249, "level_nam": 250, "ba": 250, "brodmann": 250, "tick_7": 251, "tick_17": 251, "ordered_region": [253, 255], "cinguloopercular": 255, "defaultmod": 255, "dorsalattent": 255, "frontopariet": 255, "medialtemporallob": 255, "parietomedi": 255, "reward": 255, "somatomotordors": 255, "somatomotorlater": 255, "ventralattent": 255, "cortexl": 255, "cortexr": 255, "basalganglia": 255, "cortexmid": 255, "age_group": 256, "ucla": [257, 275], "consortium": [257, 275], "neuropsychiatr": [257, 275], "la5c": [257, 275], "urls_path": [257, 276], "fullbrain": 259, "mni152nlin2009csasym": [260, 261], "relaxometri": 260, "vfonov": 260, "mni_icbm152_nlin_sym_09a_nifti": 260, "tpl": 260, "mni152nlin2009csym": 260, "binary_clos": [261, 283, 286], "gm_mask_img": [261, 283], "particularli": [261, 448], "caller": [263, 264], "get_mask": 265, "get_anat": 265, "vhtf6": 265, "multiple_spatial_regress": 267, "full_correl": 267, "return_raw_data": 268, "betamap": 268, "make_xi": 268, "153mb": 269, "brainlin": 269, "number_of_imag": 270, "_empty_filt": 270, "image_typ": 270, "is_threshold": 270, "not_mni": 270, "download_new": [270, 272], "kwarg_image_filt": 270, "until": [270, 384], "skim": 270, "basic_collection_term": 270, "empty_filt": 270, "basic_image_term": 270, "image_metadata": 270, "offlin": [270, 272, 482], "regardless": [270, 272, 296], "subdirectori": [270, 272], "countvector": [270, 272], "concis": 270, "_col_filters_available_on_serv": 270, "owner": 270, "modify_d": 270, "auditory_calculation_vs_baselin": 271, "32980": 271, "10426": 273, "dartel_vers": 274, "dartel": 274, "archiv": 274, "gross": 274, "intracrani": 274, "socioeconom": 274, "dementia": 274, "demand": 274, "openli": 274, "dataset_vers": [275, 276], "ds000030_r1": [275, 276], "patch_openneuro_dataset": 275, "symlink": [275, 289], "data_nam": [277, 278], "2562": [279, 442], "10242": [279, 429, 442], "40962": [279, 442], "fsaverage7": [279, 442], "163842": [279, 429, 442], "gm_mni152_templ": 284, "mni152_templ": 285, "wm_mask_img": 286, "wm_mni152_templ": 287, "file_list": 289, "inclusion_filt": 290, "exclus": [290, 296, 297], "wrapper": [291, 292, 338], "1e4": [291, 292, 293, 294], "logisticregress": [291, 293], "inbuilt": [291, 292, 293, 294], "model_evalu": [291, 292, 293, 294], "scorer": [291, 292, 293, 294], "hertz": [291, 292, 293, 294, 296, 297, 341, 368, 369, 370, 371, 372, 373, 374, 446, 448, 459, 460], "rough": [291, 292, 293, 294, 296, 297, 298, 299, 323, 336, 342, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448], "decision_funct": [291, 292, 293, 294, 296, 297], "learner": [291, 292, 293, 294, 296, 297], "ye": [291, 292, 293, 294], "leavepgroupsout": [291, 292, 293, 294], "classes_": [291, 292, 293, 294, 296, 297], "screening_percentile_": [291, 292, 293, 294, 296, 297], "n_class": [291, 292, 293, 294, 296, 297], "intercept_": [291, 292, 293, 294, 296, 297], "nclass": [291, 292, 293, 294], "cv_": [291, 292, 293, 294, 296, 297], "std_coef_": [291, 292, 293, 294], "std_coef_img_": [291, 292, 293, 294], "inner": [291, 292, 293, 294, 361, 464], "best_alpha": [291, 292, 293, 294], "scorer_": [291, 292, 293, 294], "misclassif": [291, 292, 293, 294, 296, 297], "n_outputs_": [291, 292, 293, 294], "dummy_output_": [291, 292, 293, 294], "class_prior": [291, 292, 293, 294], "dummyregressor": [291, 292, 293, 294], "confid": [291, 292, 293, 294, 296, 297, 313, 315, 316], "sample_weight": [291, 292, 293, 294, 296, 297], "neg_mean_squared_error": [292, 294], "cluster_percentil": [293, 294], "america": 295, "vol": 295, "0001": [296, 297], "fit_intercept": [296, 297], "debia": [296, 297], "hybrid": [296, 297], "mutual": [296, 297], "alpha_min": [296, 297], "alpha_max": [296, 297], "premultipli": 296, "debias": [296, 297], "all_coef_": [296, 297], "n_l1_ratio": [296, 297], "alpha_grids_": [296, 297], "best_model_params_": [296, 297], "n_paramet": [296, 297], "n_classes_": 296, "mask_": [296, 297], "memory_": [296, 297], "narrai": [296, 297], "w_": [296, 297], "ymean_": [296, 297], "xmean_": [296, 297], "xstd_": [296, 297], "supported_loss": [296, 297], "supported_penalti": [296, 297], "check_param": [296, 297], "sane": [296, 297], "hyperplan": [296, 297], "qi": [296, 297], "set_score_request": [296, 297, 298, 299, 446], "y_true": 297, "disregard": 297, "n_samples_fit": 297, "n_output": [297, 298, 299, 323, 336, 445, 447], "uniform_averag": 297, "multioutputregressor": 297, "do_cca": 298, "6mm": [298, 448], "restart": 298, "fit_param": [298, 299, 323, 336, 367, 370, 373, 445, 447], "x_new": [298, 299, 323, 336, 367, 370, 373, 445, 447], "n_features_new": [298, 299, 323, 336, 367, 370, 373, 445, 447], "reconstructed_img": [298, 299], "decompositionestim": [298, 299, 446], "squeez": [298, 299, 446], "reduction_ratio": 299, "batch": [299, 445], "lar": 299, "lars_path": 299, "file_path": [300, 362], "n_vertic": [300, 301, 302], "to_gifti": [300, 301, 302], "gifti_fil": [300, 301, 302], "labels_data_": 305, "labels_": [305, 323, 445, 447], "masked_img": [305, 306], "output_dimension_": 306, "mesh_nam": 309, "rho": 310, "likelihoodmodel": [310, 313], "sigma": [310, 313, 314, 315, 316], "whiten": [310, 314, 315, 316], "whitened_x": [310, 314], "logl": [310, 313, 314, 315, 316], "loglikelihood": [310, 314], "df_model": [310, 313, 314], "loglf": [310, 314], "ell": [310, 314], "hat": [310, 314], "sse": [310, 314, 315, 316], "10000000000": 311, "tini": 311, "dofmax": 311, "breakag": 311, "contrast_dim": 311, "def_dofmax": 311, "def_tini": 311, "underflow": 311, "h0": [311, 384], "df_num": [312, 313, 315, 316], "df_den": [312, 313, 315, 316, 317], "theta": [313, 315, 316], "aic": 313, "llf": 313, "wald": [313, 315, 316], "vcov": [313, 315, 316], "sd": [313, 315, 316, 317], "tcontrastresult": [313, 315, 316], "fcontrast": [313, 315, 316], "invcov": [313, 315, 316], "px": [313, 315, 316], "f_re": [313, 315, 316], "fcontrastresult": [313, 315, 316], "conf_int": [313, 315, 316], "col": [313, 315, 316], "standard_norm": [313, 315, 316], "stan": [313, 315, 316], "confidence_interv": [313, 315, 316], "whitened_design": 314, "calc_beta": 314, "moor": 314, "penros": 314, "pseudoinvers": 314, "normalized_cov_beta": 314, "df_residu": 314, "__init___": 314, "wlsmodel": 314, "armodel": 314, "whitened_i": 315, "whitened_residu": 315, "normalized_residu": [315, 316], "d_i": [315, 316], "e_i": [315, 316], "ms_e": [315, 316], "presum": [318, 339], "regression_result": 319, "con_val": 319, "con": 319, "precision_weight": 320, "return_z_scor": 320, "fixed_fx_z_score_img": 320, "fixed_fx_contrast_img": 320, "fixed_fx_variance_img": 320, "fixed_fx_stat_img": 320, "z_val": 322, "min_onset": [323, 325, 326, 330], "plu": [323, 325, 330], "spm_time_deriv": [323, 325, 330], "idem": [323, 325, 330], "spm_dispersion_deriv": [323, 325, 330], "glover_hrf": [323, 325, 330], "glover_time_deriv": [323, 325, 330], "glover_dispersion_deriv": [323, 325, 330], "dirac": [323, 325, 330], "n_onset": [323, 330], "rid": [323, 336], "results_": 323, "array_lik": [323, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 430], "histogram": [323, 332, 378, 381, 428], "quantif": [323, 332], "contrast_def": [323, 336, 422, 458], "t_map": [323, 336], "n_col": [323, 336, 338, 363, 422], "eval": [323, 336, 338, 422], "report_dim": [323, 336, 458], "1600": [323, 336, 458, 466], "htmlreport": [323, 336, 369, 372, 374, 448, 458], "standalon": [323, 336, 458], "ce": [323, 326, 336, 458], "autogener": [323, 336, 458], "subpeak": [323, 336, 457, 458], "report_text": [323, 336, 458], "voxelwis": [323, 336], "triplet": [324, 325, 374, 443], "n_frame": [324, 330], "n_regressor": [324, 332, 338, 384], "n_event": [324, 325, 330], "computed_regressor": 325, "n_reg": 325, "reg_nam": 325, "dataset_path": 326, "_space": 326, "acq": 326, "dir": [326, 361], "den": 326, "confounds_": 326, "path_to_a_bids_dataset": 326, "tasknam": 326, "confounds_strategi": 326, "confounds_mot": 326, "confounds_wm_csf": 326, "confounds_fd_threshold": 326, "confounds_std_dvars_threshold": 326, "dhrf": [327, 329, 333, 335], "n_add_reg": 330, "reg_i": 330, "frames_tim": 330, "map_nam": [336, 338], "effects_map_path": [336, 338], "liter": [336, 338], "second_level_stat_typ": 336, "output_imag": 336, "unsign": [338, 384], "neg_log10_vfwe_pvals_img": 338, "explanatori": [338, 384], "n_descriptor": [338, 384], "thresholded_map": 339, "prescrib": 339, "rigor": 339, "anatomical_imag": [340, 352], "brainmask": 340, "instant": [341, 460], "clean__": [341, 368, 369, 370, 371, 372, 373, 374], "butterworth__": [341, 368, 369, 370, 371, 372, 373, 374, 460], "clean__butterworth__": [341, 368, 369, 370, 371, 372, 373, 374], "ensure_ndim": 342, "img_copi": 344, "rtol": 345, "return_offset": 345, "Will": [345, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 438], "touch": 345, "croppabl": 345, "toggl": 345, "x1_pre": 345, "x1_post": 345, "x2_pre": 345, "x2_post": 345, "xn_pre": 345, "xn_post": 345, "number_of_scan": 347, "joint_mni_imag": 348, "single_mni_imag": 348, "five_mni_imag": 348, "first_three_imag": 348, "imcal": 352, "fslmath": 352, "log_img": 352, "ref_niimg": 354, "copy_head": 354, "imposs": 355, "fill_valu": [356, 357], "force_resampl": [356, 357], "boundingboxerror": 356, "crop_img": 356, "infinit": 356, "gracefulli": 356, "source_img": 357, "target_img": [357, 377, 380], "cllip": 357, "arr": 358, "filtered_img": 358, "synchron": 359, "sagit": 359, "caution": 359, "radio": 359, "main_path": 361, "file_tag": [361, 362], "file_typ": [361, 362], "modality_fold": 361, "sub_fold": 361, "se": 361, "ap": 361, "file_basenam": 362, "file_field": 362, "_tag": 362, "revis": 362, "parser": 362, "statmap": 363, "_stat": 363, "_statmap": 363, "_design": 363, "img_fil": [364, 365], "anat_combin": [364, 365], "n_compcor": [364, 365], "dtseri": [364, 365], "non_steady_st": 364, "power2": 364, "quadrat": 364, "power2d": 364, "var": 364, "anat_separ": 364, "temporal_anat_combin": 364, "temporal_anat_separ": 364, "acompcor_combin": 364, "smootharomanonaggr_bold": [364, 365], "nifitmask": 364, "denois": 365, "srub": 365, "physiologi": 365, "suffer": 365, "golobal_sign": 365, "tunabl": 365, "aggres": 365, "suffix": 365, "mni152nlin6asym": 365, "niprep": 365, "region_sign": [367, 368, 369, 370, 371, 372, 373, 374, 446, 448, 452, 455], "imgs_list": [367, 368, 369, 370, 373], "ddof": [368, 369, 370, 371, 372, 373, 374, 460], "maps_img_": [369, 372], "html_report": [369, 372, 374, 448], "voxel_sign": [369, 372, 374, 448], "multipca": [370, 466], "affine_": [370, 373], "region_ids_": 371, "region_atlas_": 371, "trim": [372, 452], "seeds_": 374, "run_seri": 375, "data_img": [376, 379], "border_s": [376, 379], "binary_eros": [376, 377, 378, 380, 381], "exclude_zero": [378, 379, 381], "reslic": [378, 381], "grp_mask": 382, "ndim": 383, "target_var": 384, "confounding_var": 384, "legaci": 384, "amongst": [384, 479], "n_covar": 384, "pval": 384, "score_orig_data": 384, "h0_max_t": 384, "h0_max_tfc": 384, "h0_max_siz": 384, "h0_max_mass": 384, "mpl": [385, 387, 388], "transform_to_2d": [385, 387, 388], "add_object_bound": [385, 387, 388], "draw_2d": [385, 387, 388], "data_2d": [385, 387, 388], "data_bound": [385, 387, 388], "bounding_box": [385, 387, 388], "get_object_bound": [385, 387, 388], "draw_left_right": [385, 387, 388], "bg_color": [385, 387, 388], "draw_scale_bar": [385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "fontproperti": [385, 387, 388], "borderpad": [385, 387, 388], "size_vert": [385, 387, 388], "label_top": [385, 387, 388], "font": [385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 435, 437, 438], "anchoredoffsetbox": [385, 387, 388], "draw_posit": [385, 387, 388], "brain_color": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "frame_ax": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "find_cut_coord": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "placehold": 386, "classmethod": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "init_with_figur": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "leave_spac": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "bgcolor": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "2g": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 424, 426, 427, 429, 433, 434, 435, 437, 438], "cbar_vmin": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 435], "cbar_vmax": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 435], "contour_fil": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "add_edg": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 479], "n_marker": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "left_right": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "scale_loc": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "leak": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "dpi": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "inch": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "schemat": [388, 421, 426, 430], "glassbrainax": [389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411], "add_graph": [389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411], "linearsegmentedcolormap": [389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 419, 420, 421, 424, 431, 432, 433, 434, 440, 441, 442, 444], "edge_kwarg": [389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421], "node_kwarg": [389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 430], "undirect": [389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421], "draw_cross": [389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 424, 427, 432, 433, 434, 441], "crossbar": [395, 397, 400, 402, 404, 406, 408, 410, 412], "cutax": [402, 404, 406, 408, 410, 412], "baseslic": 414, "img_length": 415, "return_label_nam": 416, "label_hemispher": 416, "n_label": 416, "labels_list": 416, "n_map": 417, "activation_threshold": 418, "tupleof": [419, 420, 421, 424, 426, 427, 430, 432, 433, 434], "ymin": [419, 420, 421, 424, 426, 427, 430, 432, 433, 434], "pronounc": [419, 432, 433, 434, 441], "get_zoom": 420, "matlotlib": 421, "nipy_spectr": 424, "model_ev": 425, "fig_kwarg": 425, "stat_map_img": [426, 434, 441, 442], "destin": [426, 427, 433, 434, 441], "noisier": [426, 427, 433, 434, 441], "ref_img": 428, "src_img": 428, "plot_hist": 428, "superimpos": 428, "nifti_lik": 428, "surf_data": [429, 435, 437, 438, 442, 444, 462, 464], "montag": 429, "node_valu": 430, "listedcolormap": 430, "node_vmin": 430, "node_vmax": 430, "node_threshold": 430, "viridis_r": 430, "auto_fit": 431, "newli": 431, "room": 431, "linkag": 431, "sent": 431, "gist_rainbow": 432, "surf_map": [435, 444], "title_font_s": [435, 437, 438], "orig": [435, 436, 437, 438, 444, 463, 464], "sulc": [435, 436, 437, 438, 444, 462], "underneath": [435, 437, 438, 444], "greyscal": [435, 437, 438, 444], "sharp": [435, 437, 438, 479], "apply_along_axi": [435, 437, 438], "custom_funct": [435, 437, 438], "tab20": 436, "rgba": [436, 443], "3dev": 438, "agg": 439, "emit": 439, "colorbar_height": [440, 442, 444], "colorbar_fonts": [440, 442, 444], "title_fonts": [440, 442, 443, 444], "n_node": [440, 443], "connectomeview": [440, 443], "opac": 441, "th": 441, "opaqu": 441, "html_view": [441, 479], "plane": 441, "surfaceview": [442, 444], "hex": 443, "gnist_ncar": 444, "max_no_improv": 445, "smart": 445, "k_init": 445, "centroid": 445, "mini": 445, "inertia": 445, "reassign": 445, "sizes_": [445, 447], "x_red": [445, 447], "x_inv": [445, 447], "fit_predict": [445, 447], "connectivity_": 446, "valid_method": 446, "eccentr": [447, 453], "n_clusters_": 447, "27mm": [448, 450], "1350mm": [448, 450], "img_valu": 448, "connected_compon": [448, 450], "ly": 448, "min_siz": 449, "new_labels_img": 449, "new_label": 449, "extract_typ": 450, "smooth_arrai": 450, "index_of_each_map": 450, "head_tpl": 456, "head_valu": 456, "html_document": 456, "htmldocument": 456, "get_ifram": 456, "get_standalon": 456, "temporari": 456, "return_label_map": 457, "letter": 457, "label_map": 457, "destination_path": 458, "sampling_r": 459, "padtyp": 459, "odd": 459, "padlen": 459, "n_sourc": 459, "decai": 459, "ring": 459, "sharpen": 459, "filtfilt": 459, "inplac": 459, "filtered_sign": 459, "cleaned_sign": 460, "namedtupl": [463, 464], "neighbourhood": 464, "trilinear": 464, "x20": 464, "regularli": 464, "halfwai": 464, "inward": 464, "surface_mesh": 464, "neighbour": 464, "00e": 465, "12393": 465, "5562": 465, "4a": 465, "11a": 465, "flm": 465, "4176": 465, "2196": 465, "1116": 465, "828": 465, "18a": 465, "19a": 465, "19b": 465, "29a": 465, "6408": 465, "5220": 465, "3c": 465, "1224": [465, 466], "936": 465, "35a": 465, "37a": 465, "37b": 465, "7networks_lh_vis_1": 466, "2797": 466, "7networks_lh_vis_2": 466, "3344": 466, "2494": 466, "7networks_lh_vis_4": 466, "3169": 466, "7networks_lh_vis_5": 466, "3356": 466, "7networks_lh_vis_6": 466, "2827": 466, "7networks_lh_vis_7": 466, "1483": 466, "7networks_lh_vis_8": 466, "3737": 466, "7networks_lh_vis_9": 466, "2637": 466, "7networks_lh_vis_10": 466, "2175": 466, "7networks_lh_vis_11": 466, "2467": 466, "7networks_lh_vis_12": 466, "4236": 466, "7networks_lh_vis_13": 466, "946": 466, "7networks_lh_vis_14": 466, "3087": 466, "7networks_lh_vis_15": 466, "4087": 466, "7networks_lh_vis_16": 466, "1617": 466, "7networks_lh_vis_17": 466, "7networks_lh_vis_18": 466, "3324": 466, "7networks_lh_vis_19": 466, "4720": 466, "7networks_lh_vis_20": 466, "970": 466, "7networks_lh_vis_21": 466, "3735": 466, "7networks_lh_vis_22": 466, "1941": 466, "7networks_lh_vis_23": 466, "4515": 466, "7networks_lh_vis_24": 466, "4743": 466, "7networks_lh_vis_25": 466, "3649": 466, "7networks_lh_vis_26": 466, "2251": 466, "7networks_lh_vis_27": 466, "2783": 466, "7networks_lh_vis_28": 466, "1842": 466, "7networks_lh_vis_29": 466, "2650": 466, "7networks_lh_vis_30": 466, "7networks_lh_vis_31": 466, "2043": 466, "7networks_lh_sommot_1": 466, "7networks_lh_sommot_2": 466, "3982": 466, "7networks_lh_sommot_3": 466, "1214": 466, "7networks_lh_sommot_4": 466, "1985": 466, "7networks_lh_sommot_5": 466, "1435": 466, "7networks_lh_sommot_6": 466, "2358": 466, "7networks_lh_sommot_7": 466, "1621": 466, "7networks_lh_sommot_8": 466, "1906": 466, "7networks_lh_sommot_9": 466, "1804": 466, "7networks_lh_sommot_10": 466, "1631": 466, "7networks_lh_sommot_11": 466, "7networks_lh_sommot_12": 466, "2246": 466, "7networks_lh_sommot_13": 466, "1640": 466, "7networks_lh_sommot_14": 466, "1458": 466, "7networks_lh_sommot_15": 466, "7networks_lh_sommot_16": 466, "2388": 466, "7networks_lh_sommot_17": 466, "1389": 466, "7networks_lh_sommot_18": 466, "2531": 466, "7networks_lh_sommot_19": 466, "1527": 466, "7networks_lh_sommot_20": 466, "1646": 466, "7networks_lh_sommot_21": 466, "2774": 466, "7networks_lh_sommot_22": 466, "983": 466, "7networks_lh_sommot_23": 466, "1095": 466, "7networks_lh_sommot_24": 466, "1694": 466, "7networks_lh_sommot_25": 466, "7networks_lh_sommot_26": 466, "3730": 466, "7networks_lh_sommot_27": 466, "2757": 466, "7networks_lh_sommot_28": 466, "7networks_lh_sommot_29": 466, "2245": 466, "7networks_lh_sommot_30": 466, "2919": 466, "7networks_lh_sommot_31": 466, "1098": 466, "7networks_lh_sommot_32": 466, "2162": 466, "7networks_lh_sommot_33": 466, "2717": 466, "7networks_lh_sommot_34": 466, "1836": 466, "7networks_lh_sommot_35": 466, "2186": 466, "7networks_lh_sommot_36": 466, "2064": 466, "7networks_lh_sommot_37": 466, "7networks_lh_dorsattn_post_1": 466, "7networks_lh_dorsattn_post_2": 466, "4725": 466, "7networks_lh_dorsattn_post_3": 466, "4434": 466, "7networks_lh_dorsattn_post_4": 466, "2816": 466, "7networks_lh_dorsattn_post_5": 466, "1339": 466, "7networks_lh_dorsattn_post_6": 466, "2465": 466, "7networks_lh_dorsattn_post_7": 466, "2058": 466, "7networks_lh_dorsattn_post_8": 466, "1627": 466, "7networks_lh_dorsattn_post_9": 466, "7networks_lh_dorsattn_post_10": 466, "1261": 466, "7networks_lh_dorsattn_post_11": 466, "2319": 466, "7networks_lh_dorsattn_post_12": 466, "1637": 466, "7networks_lh_dorsattn_post_13": 466, "7networks_lh_dorsattn_post_14": 466, "1671": 466, "7networks_lh_dorsattn_post_15": 466, "2224": 466, "7networks_lh_dorsattn_post_16": 466, "2775": 466, "7networks_lh_dorsattn_post_17": 466, "907": 466, "7networks_lh_dorsattn_fef_1": 466, "2506": 466, "7networks_lh_dorsattn_fef_2": 466, "2945": 466, "7networks_lh_dorsattn_fef_3": 466, "1466": 466, "7networks_lh_dorsattn_fef_4": 466, "3629": 466, "7networks_lh_dorsattn_prcv_1": 466, "2462": 466, "7networks_lh_dorsattn_prcv_2": 466, "7networks_lh_salventattn_paroper_1": 466, "7networks_lh_salventattn_paroper_2": 466, "2243": 466, "7networks_lh_salventattn_paroper_3": 466, "3228": 466, "7networks_lh_salventattn_paroper_4": 466, "2395": 466, "7networks_lh_salventattn_tempocc_1": 466, "7networks_lh_salventattn_froperins_1": 466, "2167": 466, "7networks_lh_salventattn_froperins_2": 466, "3768": 466, "7networks_lh_salventattn_froperins_3": 466, "1619": 466, "7networks_lh_salventattn_froperins_4": 466, "1866": 466, "7networks_lh_salventattn_froperins_5": 466, "1993": 466, "7networks_lh_salventattn_froperins_6": 466, "1122": 466, "7networks_lh_salventattn_froperins_7": 466, "1289": 466, "7networks_lh_salventattn_froperins_8": 466, "2155": 466, "7networks_lh_salventattn_froperins_9": 466, "2617": 466, "7networks_lh_salventattn_pfcl_1": 466, "5177": 466, "7networks_lh_salventattn_med_1": 466, "3120": 466, "7networks_lh_salventattn_med_2": 466, "3040": 466, "7networks_lh_salventattn_med_3": 466, "2278": 466, "7networks_lh_salventattn_med_4": 466, "3132": 466, "7networks_lh_salventattn_med_5": 466, "7networks_lh_salventattn_med_6": 466, "2074": 466, "7networks_lh_salventattn_med_7": 466, "1638": 466, "7networks_lh_limbic_ofc_1": 466, "2446": 466, "7networks_lh_limbic_ofc_2": 466, "4203": 466, "7networks_lh_limbic_ofc_3": 466, "4903": 466, "7networks_lh_limbic_ofc_4": 466, "3084": 466, "7networks_lh_limbic_ofc_5": 466, "3691": 466, "7networks_lh_limbic_temppole_1": 466, "4998": 466, "7networks_lh_limbic_temppole_2": 466, "3186": 466, "7networks_lh_limbic_temppole_3": 466, "2555": 466, "7networks_lh_limbic_temppole_4": 466, "7networks_lh_limbic_temppole_5": 466, "7networks_lh_limbic_temppole_6": 466, "6058": 466, "7networks_lh_limbic_temppole_7": 466, "3392": 466, "7networks_lh_limbic_temppole_8": 466, "1582": 466, "7networks_lh_cont_par_1": 466, "7networks_lh_cont_par_2": 466, "1550": 466, "7networks_lh_cont_par_3": 466, "2478": 466, "7networks_lh_cont_par_4": 466, "2594": 466, "7networks_lh_cont_par_5": 466, "7networks_lh_cont_par_6": 466, "2649": 466, "7networks_lh_cont_temp_1": 466, "3327": 466, "7networks_lh_cont_ofc_1": 466, "2836": 466, "7networks_lh_cont_pfcl_1": 466, "4475": 466, "7networks_lh_cont_pfcl_2": 466, "7networks_lh_cont_pfcl_3": 466, "3717": 466, "7networks_lh_cont_pfcl_4": 466, "3238": 466, "7networks_lh_cont_pfcl_5": 466, "4403": 466, "7networks_lh_cont_pfcl_6": 466, "5773": 466, "7networks_lh_cont_pfcl_7": 466, "1920": 466, "7networks_lh_cont_pfcl_8": 466, "3118": 466, "7networks_lh_cont_pfcv_1": 466, "1372": 466, "7networks_lh_cont_pcun_1": 466, "2110": 466, "7networks_lh_cont_pcun_2": 466, "2037": 466, "7networks_lh_cont_cing_1": 466, "7networks_lh_cont_cing_2": 466, "7networks_lh_cont_pfcmp_1": 466, "3665": 466, "7networks_lh_default_temp_1": 466, "4224": 466, "7networks_lh_default_temp_2": 466, "3593": 466, "7networks_lh_default_temp_3": 466, "4399": 466, "7networks_lh_default_temp_4": 466, "4126": 466, "7networks_lh_default_temp_5": 466, "7networks_lh_default_temp_6": 466, "7networks_lh_default_temp_7": 466, "1869": 466, "7networks_lh_default_temp_8": 466, "1898": 466, "7networks_lh_default_temp_9": 466, "7networks_lh_default_temp_10": 466, "7networks_lh_default_par_1": 466, "2029": 466, "7networks_lh_default_par_2": 466, "7networks_lh_default_par_3": 466, "3700": 466, "7networks_lh_default_par_4": 466, "3710": 466, "7networks_lh_default_par_5": 466, "3037": 466, "7networks_lh_default_par_6": 466, "7networks_lh_default_par_7": 466, "2409": 466, "7networks_lh_default_pfc_1": 466, "3355": 466, "7networks_lh_default_pfc_2": 466, "1808": 466, "7networks_lh_default_pfc_3": 466, "2835": 466, "7networks_lh_default_pfc_4": 466, "3676": 466, "7networks_lh_default_pfc_5": 466, "7networks_lh_default_pfc_6": 466, "2539": 466, "7networks_lh_default_pfc_7": 466, "3115": 466, "7networks_lh_default_pfc_8": 466, "7networks_lh_default_pfc_9": 466, "4263": 466, "7networks_lh_default_pfc_10": 466, "4058": 466, "7networks_lh_default_pfc_11": 466, "2678": 466, "7networks_lh_default_pfc_12": 466, "3642": 466, "7networks_lh_default_pfc_13": 466, "6330": 466, "7networks_lh_default_pfc_14": 466, "3765": 466, "7networks_lh_default_pfc_15": 466, "3346": 466, "7networks_lh_default_pfc_16": 466, "2194": 466, "7networks_lh_default_pfc_17": 466, "4307": 466, "7networks_lh_default_pfc_18": 466, "1905": 466, "7networks_lh_default_pfc_19": 466, "2128": 466, "7networks_lh_default_pfc_20": 466, "3289": 466, "7networks_lh_default_pfc_21": 466, "2234": 466, "7networks_lh_default_pfc_22": 466, "7networks_lh_default_pfc_23": 466, "3089": 466, "7networks_lh_default_pfc_24": 466, "3270": 466, "7networks_lh_default_pcunpcc_1": 466, "1375": 466, "7networks_lh_default_pcunpcc_2": 466, "2153": 466, "7networks_lh_default_pcunpcc_3": 466, "1691": 466, "7networks_lh_default_pcunpcc_4": 466, "7networks_lh_default_pcunpcc_5": 466, "2054": 466, "7networks_lh_default_pcunpcc_6": 466, "2807": 466, "7networks_lh_default_pcunpcc_7": 466, "7networks_lh_default_pcunpcc_8": 466, "1792": 466, "7networks_lh_default_pcunpcc_9": 466, "1539": 466, "7networks_lh_default_pcunpcc_10": 466, "1190": 466, "7networks_lh_default_pcunpcc_11": 466, "7networks_rh_vis_1": 466, "2934": 466, "7networks_rh_vis_2": 466, "7networks_rh_vis_3": 466, "2725": 466, "7networks_rh_vis_4": 466, "3045": 466, "7networks_rh_vis_5": 466, "3603": 466, "7networks_rh_vis_6": 466, "4391": 466, "7networks_rh_vis_7": 466, "1078": 466, "7networks_rh_vis_8": 466, "2207": 466, "7networks_rh_vis_9": 466, "4487": 466, "7networks_rh_vis_10": 466, "2148": 466, "7networks_rh_vis_11": 466, "2630": 466, "7networks_rh_vis_12": 466, "7networks_rh_vis_13": 466, "3450": 466, "7networks_rh_vis_14": 466, "1730": 466, "7networks_rh_vis_15": 466, "5861": 466, "7networks_rh_vis_16": 466, "5082": 466, "7networks_rh_vis_17": 466, "973": 466, "7networks_rh_vis_18": 466, "3054": 466, "7networks_rh_vis_19": 466, "5048": 466, "7networks_rh_vis_20": 466, "2544": 466, "7networks_rh_vis_21": 466, "2453": 466, "7networks_rh_vis_22": 466, "4590": 466, "7networks_rh_vis_23": 466, "3764": 466, "7networks_rh_vis_24": 466, "7networks_rh_vis_25": 466, "2466": 466, "7networks_rh_vis_26": 466, "7networks_rh_vis_27": 466, "2401": 466, "7networks_rh_vis_28": 466, "7networks_rh_vis_29": 466, "3410": 466, "7networks_rh_vis_30": 466, "2551": 466, "7networks_rh_sommot_1": 466, "3905": 466, "7networks_rh_sommot_2": 466, "7networks_rh_sommot_3": 466, "3460": 466, "7networks_rh_sommot_4": 466, "7networks_rh_sommot_5": 466, "967": 466, "7networks_rh_sommot_6": 466, "832": 466, "7networks_rh_sommot_7": 466, "2511": 466, "7networks_rh_sommot_8": 466, "7networks_rh_sommot_9": 466, "7networks_rh_sommot_10": 466, "1987": 466, "7networks_rh_sommot_11": 466, "1161": 466, "7networks_rh_sommot_12": 466, "7networks_rh_sommot_13": 466, "1355": 466, "7networks_rh_sommot_14": 466, "1396": 466, "7networks_rh_sommot_15": 466, "1257": 466, "7networks_rh_sommot_16": 466, "3751": 466, "7networks_rh_sommot_17": 466, "7networks_rh_sommot_18": 466, "2033": 466, "7networks_rh_sommot_19": 466, "7networks_rh_sommot_20": 466, "7networks_rh_sommot_21": 466, "7networks_rh_sommot_22": 466, "1822": 466, "7networks_rh_sommot_23": 466, "2608": 466, "7networks_rh_sommot_24": 466, "3085": 466, "7networks_rh_sommot_25": 466, "1491": 466, "7networks_rh_sommot_26": 466, "7networks_rh_sommot_27": 466, "1377": 466, "7networks_rh_sommot_28": 466, "1917": 466, "7networks_rh_sommot_29": 466, "1577": 466, "7networks_rh_sommot_30": 466, "2239": 466, "7networks_rh_sommot_31": 466, "2031": 466, "7networks_rh_sommot_32": 466, "7networks_rh_sommot_33": 466, "999": 466, "7networks_rh_sommot_34": 466, "1062": 466, "7networks_rh_sommot_35": 466, "1246": 466, "7networks_rh_sommot_36": 466, "1796": 466, "7networks_rh_sommot_37": 466, "1955": 466, "7networks_rh_sommot_38": 466, "2136": 466, "7networks_rh_sommot_39": 466, "2202": 466, "7networks_rh_sommot_40": 466, "1156": 466, "7networks_rh_dorsattn_post_1": 466, "5818": 466, "7networks_rh_dorsattn_post_2": 466, "2743": 466, "7networks_rh_dorsattn_post_3": 466, "2663": 466, "7networks_rh_dorsattn_post_4": 466, "3382": 466, "7networks_rh_dorsattn_post_5": 466, "2181": 466, "7networks_rh_dorsattn_post_6": 466, "1327": 466, "7networks_rh_dorsattn_post_7": 466, "1054": 466, "7networks_rh_dorsattn_post_8": 466, "1789": 466, "7networks_rh_dorsattn_post_9": 466, "1699": 466, "7networks_rh_dorsattn_post_10": 466, "1716": 466, "7networks_rh_dorsattn_post_11": 466, "2379": 466, "7networks_rh_dorsattn_post_12": 466, "2962": 466, "7networks_rh_dorsattn_post_13": 466, "1757": 466, "7networks_rh_dorsattn_post_14": 466, "3113": 466, "7networks_rh_dorsattn_post_15": 466, "7networks_rh_dorsattn_post_16": 466, "3204": 466, "7networks_rh_dorsattn_post_17": 466, "4108": 466, "7networks_rh_dorsattn_post_18": 466, "2070": 466, "7networks_rh_dorsattn_post_19": 466, "2890": 466, "7networks_rh_dorsattn_fef_1": 466, "2588": 466, "7networks_rh_dorsattn_fef_2": 466, "2385": 466, "7networks_rh_dorsattn_fef_3": 466, "1273": 466, "7networks_rh_dorsattn_prcv_1": 466, "3134": 466, "7networks_rh_salventattn_tempoccpar_1": 466, "7networks_rh_salventattn_tempoccpar_2": 466, "1460": 466, "7networks_rh_salventattn_tempoccpar_3": 466, "7networks_rh_salventattn_tempoccpar_4": 466, "7networks_rh_salventattn_tempoccpar_5": 466, "2411": 466, "7networks_rh_salventattn_tempoccpar_6": 466, "2410": 466, "7networks_rh_salventattn_tempoccpar_7": 466, "7networks_rh_salventattn_prc_1": 466, "2561": 466, "7networks_rh_salventattn_froperins_1": 466, "2269": 466, "7networks_rh_salventattn_froperins_2": 466, "2104": 466, "7networks_rh_salventattn_froperins_3": 466, "2053": 466, "7networks_rh_salventattn_froperins_4": 466, "1384": 466, "7networks_rh_salventattn_froperins_5": 466, "3487": 466, "7networks_rh_salventattn_froperins_6": 466, "1230": 466, "7networks_rh_salventattn_froperins_7": 466, "2449": 466, "7networks_rh_salventattn_froperins_8": 466, "2565": 466, "7networks_rh_salventattn_pfcl_1": 466, "5188": 466, "7networks_rh_salventattn_med_1": 466, "4518": 466, "7networks_rh_salventattn_med_2": 466, "3572": 466, "7networks_rh_salventattn_med_3": 466, "1971": 466, "7networks_rh_salventattn_med_4": 466, "1775": 466, "7networks_rh_salventattn_med_5": 466, "1357": 466, "7networks_rh_salventattn_med_6": 466, "1497": 466, "7networks_rh_salventattn_med_7": 466, "2485": 466, "7networks_rh_salventattn_med_8": 466, "1314": 466, "7networks_rh_limbic_ofc_1": 466, "7networks_rh_limbic_ofc_2": 466, "2823": 466, "7networks_rh_limbic_ofc_3": 466, "2986": 466, "7networks_rh_limbic_ofc_4": 466, "1845": 466, "7networks_rh_limbic_ofc_5": 466, "2482": 466, "7networks_rh_limbic_ofc_6": 466, "2598": 466, "7networks_rh_limbic_temppole_1": 466, "5576": 466, "7networks_rh_limbic_temppole_2": 466, "4643": 466, "7networks_rh_limbic_temppole_3": 466, "3160": 466, "7networks_rh_limbic_temppole_4": 466, "3766": 466, "7networks_rh_limbic_temppole_5": 466, "7networks_rh_limbic_temppole_6": 466, "7networks_rh_limbic_temppole_7": 466, "7networks_rh_cont_par_1": 466, "3468": 466, "7networks_rh_cont_par_2": 466, "7networks_rh_cont_par_3": 466, "7networks_rh_cont_par_4": 466, "1395": 466, "7networks_rh_cont_par_5": 466, "1255": 466, "7networks_rh_cont_par_6": 466, "7networks_rh_cont_temp_1": 466, "4452": 466, "7networks_rh_cont_temp_2": 466, "3673": 466, "7networks_rh_cont_pfcv_1": 466, "1673": 466, "7networks_rh_cont_pfcl_1": 466, "7networks_rh_cont_pfcl_2": 466, "4081": 466, "7networks_rh_cont_pfcl_3": 466, "7218": 466, "7networks_rh_cont_pfcl_4": 466, "2277": 466, "7networks_rh_cont_pfcl_5": 466, "5134": 466, "7networks_rh_cont_pfcl_6": 466, "2325": 466, "7networks_rh_cont_pfcl_7": 466, "2242": 466, "7networks_rh_cont_pfcl_8": 466, "3258": 466, "7networks_rh_cont_pfcl_9": 466, "7networks_rh_cont_pfcl_10": 466, "2750": 466, "7networks_rh_cont_pfcl_11": 466, "7networks_rh_cont_pfcl_12": 466, "4138": 466, "7networks_rh_cont_pfcl_13": 466, "2309": 466, "7networks_rh_cont_pfcl_14": 466, "4195": 466, "7networks_rh_cont_pfcl_15": 466, "3527": 466, "7networks_rh_cont_pcun_1": 466, "2471": 466, "7networks_rh_cont_pcun_2": 466, "1704": 466, "7networks_rh_cont_cing_1": 466, "1170": 466, "7networks_rh_cont_cing_2": 466, "947": 466, "7networks_rh_cont_pfcmp_1": 466, "7networks_rh_cont_pfcmp_2": 466, "2635": 466, "7networks_rh_default_par_1": 466, "1570": 466, "7networks_rh_default_par_2": 466, "3763": 466, "7networks_rh_default_par_3": 466, "7networks_rh_default_par_4": 466, "1851": 466, "7networks_rh_default_par_5": 466, "3437": 466, "7networks_rh_default_temp_1": 466, "4435": 466, "7networks_rh_default_temp_2": 466, "4737": 466, "7networks_rh_default_temp_3": 466, "7networks_rh_default_temp_4": 466, "4734": 466, "7networks_rh_default_temp_5": 466, "7networks_rh_default_temp_6": 466, "1215": 466, "7networks_rh_default_temp_7": 466, "7networks_rh_default_temp_8": 466, "2479": 466, "7networks_rh_default_pfcv_1": 466, "2789": 466, "7networks_rh_default_pfcv_2": 466, "7networks_rh_default_pfcv_3": 466, "3995": 466, "7networks_rh_default_pfcv_4": 466, "4172": 466, "7networks_rh_default_pfcdpfcm_1": 466, "5339": 466, "7networks_rh_default_pfcdpfcm_2": 466, "2543": 466, "7networks_rh_default_pfcdpfcm_3": 466, "3908": 466, "7networks_rh_default_pfcdpfcm_4": 466, "4657": 466, "7networks_rh_default_pfcdpfcm_5": 466, "3189": 466, "7networks_rh_default_pfcdpfcm_6": 466, "1335": 466, "7networks_rh_default_pfcdpfcm_7": 466, "2440": 466, "7networks_rh_default_pfcdpfcm_8": 466, "2939": 466, "7networks_rh_default_pfcdpfcm_9": 466, "2274": 466, "7networks_rh_default_pfcdpfcm_10": 466, "3250": 466, "7networks_rh_default_pfcdpfcm_11": 466, "3622": 466, "7networks_rh_default_pfcdpfcm_12": 466, "3086": 466, "7networks_rh_default_pfcdpfcm_13": 466, "3219": 466, "7networks_rh_default_pcunpcc_1": 466, "7networks_rh_default_pcunpcc_2": 466, "7networks_rh_default_pcunpcc_3": 466, "1290": 466, "7networks_rh_default_pcunpcc_4": 466, "2152": 466, "7networks_rh_default_pcunpcc_5": 466, "1397": 466, "7networks_rh_default_pcunpcc_6": 466, "7networks_rh_default_pcunpcc_7": 466, "2047": 466, "7networks_rh_default_pcunpcc_8": 466, "1402": 466, "7networks_rh_default_pcunpcc_9": 466, "1991": 466, "schaefer_2018": 466, "schaefer2018_400parcels_7networks_order_fslmni152_1mm": 466, "91435": 466, "58911": 466, "74432": 466, "63812": 466, "68292": 466, "54584": 466, "68151": 466, "63369": 466, "51633": 466, "39346": 466, "22802": 466, "70012": 466, "79848": 466, "34372": 466, "21449": 466, "91520": 466, "100765": 466, "difumo_atlas": 466, "tour": 479, "canni": 479, "purple_green": 479, "pretty_brain": 479, "rememb": 479, "emb": 479, "surface_plot": 479, "cyan": 479, "orang": 479, "offici": 480, "miniconda": 480, "path_to_new_env": 480, "bat": 480, "prompt": 480, "jitsi": 480, "anyon": 480, "engag": 480, "grad": 482, "biologi": 482, "throughout": 482}, "objects": {"nilearn": [[182, 0, 0, "-", "connectome"], [183, 0, 0, "-", "datasets"], [184, 0, 0, "-", "decoding"], [185, 0, 0, "-", "decomposition"], [226, 0, 0, "-", "experimental"], [467, 0, 0, "-", "glm"], [468, 0, 0, "-", "image"], [470, 0, 0, "-", "interfaces"], [471, 0, 0, "-", "maskers"], [472, 0, 0, "-", "masking"], [473, 0, 0, "-", "mass_univariate"], [474, 0, 0, "-", "plotting"], [475, 0, 0, "-", "regions"], [476, 0, 0, "-", "reporting"], [477, 0, 0, "-", "signal"], [478, 0, 0, "-", "surface"]], "nilearn.connectome": [[227, 1, 1, "", "ConnectivityMeasure"], [228, 1, 1, "", "GroupSparseCovariance"], [229, 1, 1, "", "GroupSparseCovarianceCV"], [230, 3, 1, "", "cov_to_corr"], [231, 3, 1, "", "group_sparse_covariance"], [232, 3, 1, "", "prec_to_partial"], [233, 3, 1, "", "sym_matrix_to_vec"], [234, 3, 1, "", "vec_to_sym_matrix"]], "nilearn.connectome.ConnectivityMeasure": [[227, 2, 1, "", "__init__"], [227, 2, 1, "", "fit"], [227, 2, 1, "", "fit_transform"], [227, 2, 1, "", "get_metadata_routing"], [227, 2, 1, "", "get_params"], [227, 2, 1, "", "inverse_transform"], [227, 2, 1, "", "set_inverse_transform_request"], [227, 2, 1, "", "set_output"], [227, 2, 1, "", "set_params"], [227, 2, 1, "", "set_transform_request"], [227, 2, 1, "", "transform"]], "nilearn.connectome.GroupSparseCovariance": [[228, 2, 1, "", "__init__"], [228, 2, 1, "", "fit"], [228, 2, 1, "", "get_metadata_routing"], [228, 2, 1, "", "get_params"], [228, 2, 1, "", "set_fit_request"], [228, 2, 1, "", "set_params"]], "nilearn.connectome.GroupSparseCovarianceCV": [[229, 2, 1, "", "__init__"], [229, 2, 1, "", "fit"], [229, 2, 1, "", "get_metadata_routing"], [229, 2, 1, "", "get_params"], [229, 2, 1, "", "set_fit_request"], [229, 2, 1, "", "set_params"]], "nilearn.datasets": [[235, 3, 1, "", "fetch_abide_pcp"], [236, 3, 1, "", "fetch_adhd"], [237, 3, 1, "", "fetch_atlas_aal"], [238, 3, 1, "", "fetch_atlas_allen_2011"], [239, 3, 1, "", "fetch_atlas_basc_multiscale_2015"], [240, 3, 1, "", "fetch_atlas_craddock_2012"], [241, 3, 1, "", "fetch_atlas_destrieux_2009"], [242, 3, 1, "", "fetch_atlas_difumo"], [243, 3, 1, "", "fetch_atlas_harvard_oxford"], [244, 3, 1, "", "fetch_atlas_juelich"], [245, 3, 1, "", "fetch_atlas_msdl"], [246, 3, 1, "", "fetch_atlas_pauli_2017"], [247, 3, 1, "", "fetch_atlas_schaefer_2018"], [248, 3, 1, "", "fetch_atlas_smith_2009"], [249, 3, 1, "", "fetch_atlas_surf_destrieux"], [250, 3, 1, "", "fetch_atlas_talairach"], [251, 3, 1, "", "fetch_atlas_yeo_2011"], [252, 3, 1, "", "fetch_bids_langloc_dataset"], [253, 3, 1, "", "fetch_coords_dosenbach_2010"], [254, 3, 1, "", "fetch_coords_power_2011"], [255, 3, 1, "", "fetch_coords_seitzman_2018"], [256, 3, 1, "", "fetch_development_fmri"], [257, 3, 1, "", "fetch_ds000030_urls"], [258, 3, 1, "", "fetch_fiac_first_level"], [259, 3, 1, "", "fetch_haxby"], [260, 3, 1, "", "fetch_icbm152_2009"], [261, 3, 1, "", "fetch_icbm152_brain_gm_mask"], [262, 3, 1, "", "fetch_language_localizer_demo_dataset"], [263, 3, 1, "", "fetch_localizer_button_task"], [264, 3, 1, "", "fetch_localizer_calculation_task"], [265, 3, 1, "", "fetch_localizer_contrasts"], [266, 3, 1, "", "fetch_localizer_first_level"], [267, 3, 1, "", "fetch_megatrawls_netmats"], [268, 3, 1, "", "fetch_mixed_gambles"], [269, 3, 1, "", "fetch_miyawaki2008"], [270, 3, 1, "", "fetch_neurovault"], [271, 3, 1, "", "fetch_neurovault_auditory_computation_task"], [272, 3, 1, "", "fetch_neurovault_ids"], [273, 3, 1, "", "fetch_neurovault_motor_task"], [274, 3, 1, "", "fetch_oasis_vbm"], [275, 3, 1, "", "fetch_openneuro_dataset"], [276, 3, 1, "", "fetch_openneuro_dataset_index"], [277, 3, 1, "", "fetch_spm_auditory"], [278, 3, 1, "", "fetch_spm_multimodal_fmri"], [279, 3, 1, "", "fetch_surf_fsaverage"], [280, 3, 1, "", "fetch_surf_nki_enhanced"], [281, 3, 1, "", "get_data_dirs"], [282, 3, 1, "", "load_mni152_brain_mask"], [283, 3, 1, "", "load_mni152_gm_mask"], [284, 3, 1, "", "load_mni152_gm_template"], [285, 3, 1, "", "load_mni152_template"], [286, 3, 1, "", "load_mni152_wm_mask"], [287, 3, 1, "", "load_mni152_wm_template"], [288, 3, 1, "", "load_sample_motor_activation_image"], [289, 3, 1, "", "patch_openneuro_dataset"], [290, 3, 1, "", "select_from_index"]], "nilearn.decoding": [[291, 1, 1, "", "Decoder"], [292, 1, 1, "", "DecoderRegressor"], [293, 1, 1, "", "FREMClassifier"], [294, 1, 1, "", "FREMRegressor"], [295, 1, 1, "", "SearchLight"], [296, 1, 1, "", "SpaceNetClassifier"], [297, 1, 1, "", "SpaceNetRegressor"]], "nilearn.decoding.Decoder": [[291, 2, 1, "", "__init__"], [291, 2, 1, "", "decision_function"], [291, 2, 1, "", "fit"], [291, 2, 1, "", "get_metadata_routing"], [291, 2, 1, "", "get_params"], [291, 2, 1, "", "predict"], [291, 2, 1, "", "score"], [291, 2, 1, "", "set_fit_request"], [291, 2, 1, "", "set_params"]], "nilearn.decoding.DecoderRegressor": [[292, 2, 1, "", "__init__"], [292, 2, 1, "", "decision_function"], [292, 2, 1, "", "fit"], [292, 2, 1, "", "get_metadata_routing"], [292, 2, 1, "", "get_params"], [292, 2, 1, "", "predict"], [292, 2, 1, "", "score"], [292, 2, 1, "", "set_fit_request"], [292, 2, 1, "", "set_params"]], "nilearn.decoding.FREMClassifier": [[293, 2, 1, "", "__init__"], [293, 2, 1, "", "decision_function"], [293, 2, 1, "", "fit"], [293, 2, 1, "", "get_metadata_routing"], [293, 2, 1, "", "get_params"], [293, 2, 1, "", "predict"], [293, 2, 1, "", "score"], [293, 2, 1, "", "set_fit_request"], [293, 2, 1, "", "set_params"]], "nilearn.decoding.FREMRegressor": [[294, 2, 1, "", "__init__"], [294, 2, 1, "", "decision_function"], [294, 2, 1, "", "fit"], [294, 2, 1, "", "get_metadata_routing"], [294, 2, 1, "", "get_params"], [294, 2, 1, "", "predict"], [294, 2, 1, "", "score"], [294, 2, 1, "", "set_fit_request"], [294, 2, 1, "", "set_params"]], "nilearn.decoding.SearchLight": [[295, 2, 1, "", "__init__"], [295, 2, 1, "", "fit"], [295, 2, 1, "", "get_metadata_routing"], [295, 2, 1, "", "get_params"], [295, 2, 1, "", "set_fit_request"], [295, 2, 1, "", "set_params"]], "nilearn.decoding.SpaceNetClassifier": [[296, 4, 1, "", "SUPPORTED_LOSSES"], [296, 4, 1, "", "SUPPORTED_PENALTIES"], [296, 2, 1, "", "__init__"], [296, 2, 1, "", "check_params"], [296, 2, 1, "", "decision_function"], [296, 2, 1, "", "fit"], [296, 2, 1, "", "get_metadata_routing"], [296, 2, 1, "", "get_params"], [296, 2, 1, "", "predict"], [296, 2, 1, "", "score"], [296, 2, 1, "", "set_fit_request"], [296, 2, 1, "", "set_params"], [296, 2, 1, "", "set_score_request"]], "nilearn.decoding.SpaceNetRegressor": [[297, 4, 1, "", "SUPPORTED_LOSSES"], [297, 4, 1, "", "SUPPORTED_PENALTIES"], [297, 2, 1, "", "__init__"], [297, 2, 1, "", "check_params"], [297, 2, 1, "", "decision_function"], [297, 2, 1, "", "fit"], [297, 2, 1, "", "get_metadata_routing"], [297, 2, 1, "", "get_params"], [297, 2, 1, "", "predict"], [297, 2, 1, "", "score"], [297, 2, 1, "", "set_fit_request"], [297, 2, 1, "", "set_params"], [297, 2, 1, "", "set_score_request"]], "nilearn.decomposition": [[298, 1, 1, "", "CanICA"], [299, 1, 1, "", "DictLearning"]], "nilearn.decomposition.CanICA": [[298, 2, 1, "", "__init__"], [298, 2, 1, "", "fit"], [298, 2, 1, "", "fit_transform"], [298, 2, 1, "", "get_metadata_routing"], [298, 2, 1, "", "get_params"], [298, 2, 1, "", "inverse_transform"], [298, 2, 1, "", "score"], [298, 2, 1, "", "set_fit_request"], [298, 2, 1, "", "set_inverse_transform_request"], [298, 2, 1, "", "set_output"], [298, 2, 1, "", "set_params"], [298, 2, 1, "", "set_score_request"], [298, 2, 1, "", "set_transform_request"], [298, 2, 1, "", "transform"]], "nilearn.decomposition.DictLearning": [[299, 2, 1, "", "__init__"], [299, 2, 1, "", "fit"], [299, 2, 1, "", "fit_transform"], [299, 2, 1, "", "get_metadata_routing"], [299, 2, 1, "", "get_params"], [299, 2, 1, "", "inverse_transform"], [299, 2, 1, "", "score"], [299, 2, 1, "", "set_fit_request"], [299, 2, 1, "", "set_inverse_transform_request"], [299, 2, 1, "", "set_output"], [299, 2, 1, "", "set_params"], [299, 2, 1, "", "set_score_request"], [299, 2, 1, "", "set_transform_request"], [299, 2, 1, "", "transform"]], "nilearn.experimental": [[226, 0, 0, "-", "surface"]], "nilearn.experimental.surface": [[300, 1, 1, "", "FileMesh"], [301, 1, 1, "", "InMemoryMesh"], [302, 1, 1, "", "Mesh"], [303, 4, 1, "", "PolyMesh"], [304, 1, 1, "", "SurfaceImage"], [305, 1, 1, "", "SurfaceLabelsMasker"], [306, 1, 1, "", "SurfaceMasker"], [307, 3, 1, "", "fetch_destrieux"], [308, 3, 1, "", "fetch_nki"], [309, 3, 1, "", "load_fsaverage"]], "nilearn.experimental.surface.FileMesh": [[300, 2, 1, "", "__init__"], [300, 5, 1, "", "coordinates"], [300, 5, 1, "", "faces"], [300, 4, 1, "", "file_path"], [300, 2, 1, "", "loaded"], [300, 4, 1, "", "n_vertices"], [300, 2, 1, "", "to_gifti"]], "nilearn.experimental.surface.InMemoryMesh": [[301, 2, 1, "", "__init__"], [301, 4, 1, "", "coordinates"], [301, 4, 1, "", "faces"], [301, 4, 1, "", "n_vertices"], [301, 2, 1, "", "to_gifti"]], "nilearn.experimental.surface.Mesh": [[302, 2, 1, "", "__init__"], [302, 4, 1, "", "coordinates"], [302, 4, 1, "", "faces"], [302, 4, 1, "", "n_vertices"], [302, 2, 1, "", "to_gifti"]], "nilearn.experimental.surface.SurfaceImage": [[304, 2, 1, "", "__init__"], [304, 4, 1, "", "data"], [304, 4, 1, "", "mesh"], [304, 4, 1, "", "shape"]], "nilearn.experimental.surface.SurfaceLabelsMasker": [[305, 2, 1, "", "__init__"], [305, 2, 1, "", "fit"], [305, 2, 1, "", "fit_transform"], [305, 2, 1, "", "inverse_transform"], [305, 4, 1, "", "label_names"], [305, 4, 1, "", "label_names_"], [305, 4, 1, "", "labels_"], [305, 4, 1, "", "labels_data_"], [305, 4, 1, "", "labels_img"], [305, 2, 1, "", "transform"]], "nilearn.experimental.surface.SurfaceMasker": [[306, 2, 1, "", "__init__"], [306, 2, 1, "", "fit"], [306, 2, 1, "", "fit_transform"], [306, 2, 1, "", "get_metadata_routing"], [306, 2, 1, "", "get_params"], [306, 2, 1, "", "inverse_transform"], [306, 4, 1, "", "mask_img"], [306, 4, 1, "", "mask_img_"], [306, 4, 1, "", "output_dimension_"], [306, 2, 1, "", "set_fit_request"], [306, 2, 1, "", "set_inverse_transform_request"], [306, 2, 1, "", "set_output"], [306, 2, 1, "", "set_params"], [306, 2, 1, "", "set_transform_request"], [306, 2, 1, "", "transform"]], "nilearn.glm": [[310, 1, 1, "", "ARModel"], [311, 1, 1, "", "Contrast"], [312, 1, 1, "", "FContrastResults"], [313, 1, 1, "", "LikelihoodModelResults"], [314, 1, 1, "", "OLSModel"], [315, 1, 1, "", "RegressionResults"], [316, 1, 1, "", "SimpleRegressionResults"], [317, 1, 1, "", "TContrastResults"], [318, 3, 1, "", "cluster_level_inference"], [319, 3, 1, "", "compute_contrast"], [320, 3, 1, "", "compute_fixed_effects"], [321, 3, 1, "", "expression_to_contrast_vector"], [322, 3, 1, "", "fdr_threshold"], [467, 0, 0, "-", "first_level"], [467, 0, 0, "-", "second_level"], [339, 3, 1, "", "threshold_stats_img"]], "nilearn.glm.ARModel": [[310, 2, 1, "", "__init__"], [310, 2, 1, "", "fit"], [310, 2, 1, "", "initialize"], [310, 2, 1, "", "logL"], [310, 2, 1, "", "whiten"]], "nilearn.glm.Contrast": [[311, 2, 1, "", "__init__"], [311, 5, 1, "", "contrast_type"], [311, 2, 1, "", "effect_size"], [311, 2, 1, "", "effect_variance"], [311, 2, 1, "", "one_minus_pvalue"], [311, 2, 1, "", "p_value"], [311, 2, 1, "", "stat"], [311, 2, 1, "", "z_score"]], "nilearn.glm.FContrastResults": [[312, 2, 1, "", "__init__"]], "nilearn.glm.LikelihoodModelResults": [[313, 2, 1, "", "Fcontrast"], [313, 2, 1, "", "Tcontrast"], [313, 2, 1, "", "__init__"], [313, 2, 1, "", "conf_int"], [313, 2, 1, "", "logL"], [313, 2, 1, "", "t"], [313, 2, 1, "", "vcov"]], "nilearn.glm.OLSModel": [[314, 2, 1, "", "__init__"], [314, 2, 1, "", "fit"], [314, 2, 1, "", "initialize"], [314, 2, 1, "", "logL"], [314, 2, 1, "", "whiten"]], "nilearn.glm.RegressionResults": [[315, 2, 1, "", "Fcontrast"], [315, 2, 1, "", "MSE"], [315, 2, 1, "", "SSE"], [315, 2, 1, "", "Tcontrast"], [315, 2, 1, "", "__init__"], [315, 2, 1, "", "conf_int"], [315, 2, 1, "", "logL"], [315, 2, 1, "", "normalized_residuals"], [315, 2, 1, "", "predicted"], [315, 2, 1, "", "r_square"], [315, 2, 1, "", "residuals"], [315, 2, 1, "", "t"], [315, 2, 1, "", "vcov"]], "nilearn.glm.SimpleRegressionResults": [[316, 2, 1, "", "Fcontrast"], [316, 2, 1, "", "Tcontrast"], [316, 2, 1, "", "__init__"], [316, 2, 1, "", "conf_int"], [316, 2, 1, "", "logL"], [316, 2, 1, "", "normalized_residuals"], [316, 2, 1, "", "predicted"], [316, 2, 1, "", "residuals"], [316, 2, 1, "", "t"], [316, 2, 1, "", "vcov"]], "nilearn.glm.TContrastResults": [[317, 2, 1, "", "__init__"]], "nilearn.glm.first_level": [[323, 1, 1, "", "FirstLevelModel"], [324, 3, 1, "", "check_design_matrix"], [325, 3, 1, "", "compute_regressor"], [326, 3, 1, "", "first_level_from_bids"], [327, 3, 1, "", "glover_dispersion_derivative"], [328, 3, 1, "", "glover_hrf"], [329, 3, 1, "", "glover_time_derivative"], [330, 3, 1, "", "make_first_level_design_matrix"], [331, 3, 1, "", "mean_scaling"], [332, 3, 1, "", "run_glm"], [333, 3, 1, "", "spm_dispersion_derivative"], [334, 3, 1, "", "spm_hrf"], [335, 3, 1, "", "spm_time_derivative"]], "nilearn.glm.first_level.FirstLevelModel": [[323, 2, 1, "", "__init__"], [323, 2, 1, "", "compute_contrast"], [323, 2, 1, "", "fit"], [323, 2, 1, "", "fit_transform"], [323, 2, 1, "", "generate_report"], [323, 2, 1, "", "get_metadata_routing"], [323, 2, 1, "", "get_params"], [323, 2, 1, "", "predicted"], [323, 2, 1, "", "r_square"], [323, 2, 1, "", "residuals"], [323, 5, 1, "", "scaling_axis"], [323, 2, 1, "", "set_fit_request"], [323, 2, 1, "", "set_output"], [323, 2, 1, "", "set_params"]], "nilearn.glm.second_level": [[336, 1, 1, "", "SecondLevelModel"], [337, 3, 1, "", "make_second_level_design_matrix"], [338, 3, 1, "", "non_parametric_inference"]], "nilearn.glm.second_level.SecondLevelModel": [[336, 2, 1, "", "__init__"], [336, 2, 1, "", "compute_contrast"], [336, 2, 1, "", "fit"], [336, 2, 1, "", "fit_transform"], [336, 2, 1, "", "generate_report"], [336, 2, 1, "", "get_metadata_routing"], [336, 2, 1, "", "get_params"], [336, 2, 1, "", "predicted"], [336, 2, 1, "", "r_square"], [336, 2, 1, "", "residuals"], [336, 2, 1, "", "set_fit_request"], [336, 2, 1, "", "set_output"], [336, 2, 1, "", "set_params"]], "nilearn.image": [[340, 3, 1, "", "binarize_img"], [341, 3, 1, "", "clean_img"], [342, 3, 1, "", "concat_imgs"], [343, 3, 1, "", "coord_transform"], [344, 3, 1, "", "copy_img"], [345, 3, 1, "", "crop_img"], [346, 3, 1, "", "get_data"], [347, 3, 1, "", "high_variance_confounds"], [348, 3, 1, "", "index_img"], [349, 3, 1, "", "iter_img"], [350, 3, 1, "", "largest_connected_component_img"], [351, 3, 1, "", "load_img"], [352, 3, 1, "", "math_img"], [353, 3, 1, "", "mean_img"], [354, 3, 1, "", "new_img_like"], [355, 3, 1, "", "reorder_img"], [356, 3, 1, "", "resample_img"], [357, 3, 1, "", "resample_to_img"], [358, 3, 1, "", "smooth_img"], [359, 3, 1, "", "swap_img_hemispheres"], [360, 3, 1, "", "threshold_img"]], "nilearn.interfaces": [[470, 0, 0, "-", "bids"], [470, 0, 0, "-", "fmriprep"], [470, 0, 0, "-", "fsl"]], "nilearn.interfaces.bids": [[361, 3, 1, "", "get_bids_files"], [362, 3, 1, "", "parse_bids_filename"], [363, 3, 1, "", "save_glm_to_bids"]], "nilearn.interfaces.fmriprep": [[364, 3, 1, "", "load_confounds"], [365, 3, 1, "", "load_confounds_strategy"]], "nilearn.interfaces.fsl": [[366, 3, 1, "", "get_design_from_fslmat"]], "nilearn.maskers": [[367, 1, 1, "", "BaseMasker"], [368, 1, 1, "", "MultiNiftiLabelsMasker"], [369, 1, 1, "", "MultiNiftiMapsMasker"], [370, 1, 1, "", "MultiNiftiMasker"], [371, 1, 1, "", "NiftiLabelsMasker"], [372, 1, 1, "", "NiftiMapsMasker"], [373, 1, 1, "", "NiftiMasker"], [374, 1, 1, "", "NiftiSpheresMasker"]], "nilearn.maskers.BaseMasker": [[367, 2, 1, "", "__init__"], [367, 2, 1, "", "fit_transform"], [367, 2, 1, "", "get_metadata_routing"], [367, 2, 1, "", "get_params"], [367, 2, 1, "", "inverse_transform"], [367, 2, 1, "", "set_output"], [367, 2, 1, "", "set_params"], [367, 2, 1, "", "set_transform_request"], [367, 2, 1, "", "transform"], [367, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiLabelsMasker": [[368, 2, 1, "", "__init__"], [368, 2, 1, "", "fit"], [368, 2, 1, "", "fit_transform"], [368, 2, 1, "", "generate_report"], [368, 2, 1, "", "get_metadata_routing"], [368, 2, 1, "", "get_params"], [368, 2, 1, "", "inverse_transform"], [368, 2, 1, "", "set_fit_request"], [368, 2, 1, "", "set_inverse_transform_request"], [368, 2, 1, "", "set_output"], [368, 2, 1, "", "set_params"], [368, 2, 1, "", "set_transform_request"], [368, 2, 1, "", "transform"], [368, 2, 1, "", "transform_imgs"], [368, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiMapsMasker": [[369, 2, 1, "", "__init__"], [369, 2, 1, "", "fit"], [369, 2, 1, "", "fit_transform"], [369, 2, 1, "", "generate_report"], [369, 2, 1, "", "get_metadata_routing"], [369, 2, 1, "", "get_params"], [369, 2, 1, "", "inverse_transform"], [369, 2, 1, "", "set_fit_request"], [369, 2, 1, "", "set_inverse_transform_request"], [369, 2, 1, "", "set_output"], [369, 2, 1, "", "set_params"], [369, 2, 1, "", "set_transform_request"], [369, 2, 1, "", "transform"], [369, 2, 1, "", "transform_imgs"], [369, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiMasker": [[370, 2, 1, "", "__init__"], [370, 2, 1, "", "fit"], [370, 2, 1, "", "fit_transform"], [370, 2, 1, "", "generate_report"], [370, 2, 1, "", "get_metadata_routing"], [370, 2, 1, "", "get_params"], [370, 2, 1, "", "inverse_transform"], [370, 2, 1, "", "set_fit_request"], [370, 2, 1, "", "set_output"], [370, 2, 1, "", "set_params"], [370, 2, 1, "", "set_transform_request"], [370, 2, 1, "", "transform"], [370, 2, 1, "", "transform_imgs"], [370, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiLabelsMasker": [[371, 2, 1, "", "__init__"], [371, 2, 1, "", "fit"], [371, 2, 1, "", "fit_transform"], [371, 2, 1, "", "generate_report"], [371, 2, 1, "", "get_metadata_routing"], [371, 2, 1, "", "get_params"], [371, 2, 1, "", "inverse_transform"], [371, 2, 1, "", "set_fit_request"], [371, 2, 1, "", "set_inverse_transform_request"], [371, 2, 1, "", "set_output"], [371, 2, 1, "", "set_params"], [371, 2, 1, "", "set_transform_request"], [371, 2, 1, "", "transform"], [371, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiMapsMasker": [[372, 2, 1, "", "__init__"], [372, 2, 1, "", "fit"], [372, 2, 1, "", "fit_transform"], [372, 2, 1, "", "generate_report"], [372, 2, 1, "", "get_metadata_routing"], [372, 2, 1, "", "get_params"], [372, 2, 1, "", "inverse_transform"], [372, 2, 1, "", "set_fit_request"], [372, 2, 1, "", "set_inverse_transform_request"], [372, 2, 1, "", "set_output"], [372, 2, 1, "", "set_params"], [372, 2, 1, "", "set_transform_request"], [372, 2, 1, "", "transform"], [372, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiMasker": [[373, 2, 1, "", "__init__"], [373, 2, 1, "", "fit"], [373, 2, 1, "", "fit_transform"], [373, 2, 1, "", "generate_report"], [373, 2, 1, "", "get_metadata_routing"], [373, 2, 1, "", "get_params"], [373, 2, 1, "", "inverse_transform"], [373, 2, 1, "", "set_fit_request"], [373, 2, 1, "", "set_output"], [373, 2, 1, "", "set_params"], [373, 2, 1, "", "set_transform_request"], [373, 2, 1, "", "transform"], [373, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiSpheresMasker": [[374, 2, 1, "", "__init__"], [374, 2, 1, "", "fit"], [374, 2, 1, "", "fit_transform"], [374, 2, 1, "", "generate_report"], [374, 2, 1, "", "get_metadata_routing"], [374, 2, 1, "", "get_params"], [374, 2, 1, "", "inverse_transform"], [374, 2, 1, "", "set_inverse_transform_request"], [374, 2, 1, "", "set_output"], [374, 2, 1, "", "set_params"], [374, 2, 1, "", "set_transform_request"], [374, 2, 1, "", "transform"], [374, 2, 1, "", "transform_single_imgs"]], "nilearn.masking": [[375, 3, 1, "", "apply_mask"], [376, 3, 1, "", "compute_background_mask"], [377, 3, 1, "", "compute_brain_mask"], [378, 3, 1, "", "compute_epi_mask"], [379, 3, 1, "", "compute_multi_background_mask"], [380, 3, 1, "", "compute_multi_brain_mask"], [381, 3, 1, "", "compute_multi_epi_mask"], [382, 3, 1, "", "intersect_masks"], [383, 3, 1, "", "unmask"]], "nilearn.mass_univariate": [[384, 3, 1, "", "permuted_ols"]], "nilearn.plotting": [[474, 0, 0, "-", "displays"], [415, 3, 1, "", "find_cut_slices"], [416, 3, 1, "", "find_parcellation_cut_coords"], [417, 3, 1, "", "find_probabilistic_atlas_cut_coords"], [418, 3, 1, "", "find_xyz_cut_coords"], [419, 3, 1, "", "plot_anat"], [420, 3, 1, "", "plot_carpet"], [421, 3, 1, "", "plot_connectome"], [422, 3, 1, "", "plot_contrast_matrix"], [423, 3, 1, "", "plot_design_matrix"], [424, 3, 1, "", "plot_epi"], [425, 3, 1, "", "plot_event"], [426, 3, 1, "", "plot_glass_brain"], [427, 3, 1, "", "plot_img"], [428, 3, 1, "", "plot_img_comparison"], [429, 3, 1, "", "plot_img_on_surf"], [430, 3, 1, "", "plot_markers"], [431, 3, 1, "", "plot_matrix"], [432, 3, 1, "", "plot_prob_atlas"], [433, 3, 1, "", "plot_roi"], [434, 3, 1, "", "plot_stat_map"], [435, 3, 1, "", "plot_surf"], [436, 3, 1, "", "plot_surf_contours"], [437, 3, 1, "", "plot_surf_roi"], [438, 3, 1, "", "plot_surf_stat_map"], [439, 3, 1, "", "show"], [440, 3, 1, "", "view_connectome"], [441, 3, 1, "", "view_img"], [442, 3, 1, "", "view_img_on_surf"], [443, 3, 1, "", "view_markers"], [444, 3, 1, "", "view_surf"]], "nilearn.plotting.displays": [[385, 1, 1, "", "BaseAxes"], [386, 1, 1, "", "BaseSlicer"], [387, 1, 1, "", "CutAxes"], [388, 1, 1, "", "GlassBrainAxes"], [389, 1, 1, "", "LProjector"], [390, 1, 1, "", "LRProjector"], [391, 1, 1, "", "LYRProjector"], [392, 1, 1, "", "LYRZProjector"], [393, 1, 1, "", "LZRProjector"], [394, 1, 1, "", "LZRYProjector"], [395, 1, 1, "", "MosaicSlicer"], [396, 1, 1, "", "OrthoProjector"], [397, 1, 1, "", "OrthoSlicer"], [398, 1, 1, "", "PlotlySurfaceFigure"], [399, 1, 1, "", "RProjector"], [400, 1, 1, "", "TiledSlicer"], [401, 1, 1, "", "XProjector"], [402, 1, 1, "", "XSlicer"], [403, 1, 1, "", "XZProjector"], [404, 1, 1, "", "XZSlicer"], [405, 1, 1, "", "YProjector"], [406, 1, 1, "", "YSlicer"], [407, 1, 1, "", "YXProjector"], [408, 1, 1, "", "YXSlicer"], [409, 1, 1, "", "YZProjector"], [410, 1, 1, "", "YZSlicer"], [411, 1, 1, "", "ZProjector"], [412, 1, 1, "", "ZSlicer"], [413, 3, 1, "", "get_projector"], [414, 3, 1, "", "get_slicer"]], "nilearn.plotting.displays.BaseAxes": [[385, 2, 1, "", "__init__"], [385, 2, 1, "", "add_object_bounds"], [385, 2, 1, "", "draw_2d"], [385, 2, 1, "", "draw_left_right"], [385, 2, 1, "", "draw_position"], [385, 2, 1, "", "draw_scale_bar"], [385, 2, 1, "", "get_object_bounds"], [385, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.BaseSlicer": [[386, 2, 1, "", "__init__"], [386, 2, 1, "", "add_contours"], [386, 2, 1, "", "add_edges"], [386, 2, 1, "", "add_markers"], [386, 2, 1, "", "add_overlay"], [386, 2, 1, "", "annotate"], [386, 5, 1, "", "black_bg"], [386, 5, 1, "", "brain_color"], [386, 2, 1, "", "close"], [386, 2, 1, "", "find_cut_coords"], [386, 2, 1, "", "init_with_figure"], [386, 2, 1, "", "savefig"], [386, 2, 1, "", "title"]], "nilearn.plotting.displays.CutAxes": [[387, 2, 1, "", "__init__"], [387, 2, 1, "", "add_object_bounds"], [387, 2, 1, "", "draw_2d"], [387, 2, 1, "", "draw_left_right"], [387, 2, 1, "", "draw_position"], [387, 2, 1, "", "draw_scale_bar"], [387, 2, 1, "", "get_object_bounds"], [387, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.GlassBrainAxes": [[388, 2, 1, "", "__init__"], [388, 2, 1, "", "add_object_bounds"], [388, 2, 1, "", "draw_2d"], [388, 2, 1, "", "draw_left_right"], [388, 2, 1, "", "draw_position"], [388, 2, 1, "", "draw_scale_bar"], [388, 2, 1, "", "get_object_bounds"], [388, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.LProjector": [[389, 2, 1, "", "__init__"], [389, 2, 1, "", "add_contours"], [389, 2, 1, "", "add_edges"], [389, 2, 1, "", "add_graph"], [389, 2, 1, "", "add_markers"], [389, 2, 1, "", "add_overlay"], [389, 2, 1, "", "annotate"], [389, 5, 1, "", "black_bg"], [389, 5, 1, "", "brain_color"], [389, 2, 1, "", "close"], [389, 2, 1, "", "draw_cross"], [389, 2, 1, "", "find_cut_coords"], [389, 2, 1, "", "init_with_figure"], [389, 2, 1, "", "savefig"], [389, 2, 1, "", "title"]], "nilearn.plotting.displays.LRProjector": [[390, 2, 1, "", "__init__"], [390, 2, 1, "", "add_contours"], [390, 2, 1, "", "add_edges"], [390, 2, 1, "", "add_graph"], [390, 2, 1, "", "add_markers"], [390, 2, 1, "", "add_overlay"], [390, 2, 1, "", "annotate"], [390, 5, 1, "", "black_bg"], [390, 5, 1, "", "brain_color"], [390, 2, 1, "", "close"], [390, 2, 1, "", "draw_cross"], [390, 2, 1, "", "find_cut_coords"], [390, 2, 1, "", "init_with_figure"], [390, 2, 1, "", "savefig"], [390, 2, 1, "", "title"]], "nilearn.plotting.displays.LYRProjector": [[391, 2, 1, "", "__init__"], [391, 2, 1, "", "add_contours"], [391, 2, 1, "", "add_edges"], [391, 2, 1, "", "add_graph"], [391, 2, 1, "", "add_markers"], [391, 2, 1, "", "add_overlay"], [391, 2, 1, "", "annotate"], [391, 5, 1, "", "black_bg"], [391, 5, 1, "", "brain_color"], [391, 2, 1, "", "close"], [391, 2, 1, "", "draw_cross"], [391, 2, 1, "", "find_cut_coords"], [391, 2, 1, "", "init_with_figure"], [391, 2, 1, "", "savefig"], [391, 2, 1, "", "title"]], "nilearn.plotting.displays.LYRZProjector": [[392, 2, 1, "", "__init__"], [392, 2, 1, "", "add_contours"], [392, 2, 1, "", "add_edges"], [392, 2, 1, "", "add_graph"], [392, 2, 1, "", "add_markers"], [392, 2, 1, "", "add_overlay"], [392, 2, 1, "", "annotate"], [392, 5, 1, "", "black_bg"], [392, 5, 1, "", "brain_color"], [392, 2, 1, "", "close"], [392, 2, 1, "", "draw_cross"], [392, 2, 1, "", "find_cut_coords"], [392, 2, 1, "", "init_with_figure"], [392, 2, 1, "", "savefig"], [392, 2, 1, "", "title"]], "nilearn.plotting.displays.LZRProjector": [[393, 2, 1, "", "__init__"], [393, 2, 1, "", "add_contours"], [393, 2, 1, "", "add_edges"], [393, 2, 1, "", "add_graph"], [393, 2, 1, "", "add_markers"], [393, 2, 1, "", "add_overlay"], [393, 2, 1, "", "annotate"], [393, 5, 1, "", "black_bg"], [393, 5, 1, "", "brain_color"], [393, 2, 1, "", "close"], [393, 2, 1, "", "draw_cross"], [393, 2, 1, "", "find_cut_coords"], [393, 2, 1, "", "init_with_figure"], [393, 2, 1, "", "savefig"], [393, 2, 1, "", "title"]], "nilearn.plotting.displays.LZRYProjector": [[394, 2, 1, "", "__init__"], [394, 2, 1, "", "add_contours"], [394, 2, 1, "", "add_edges"], [394, 2, 1, "", "add_graph"], [394, 2, 1, "", "add_markers"], [394, 2, 1, "", "add_overlay"], [394, 2, 1, "", "annotate"], [394, 5, 1, "", "black_bg"], [394, 5, 1, "", "brain_color"], [394, 2, 1, "", "close"], [394, 2, 1, "", "draw_cross"], [394, 2, 1, "", "find_cut_coords"], [394, 2, 1, "", "init_with_figure"], [394, 2, 1, "", "savefig"], [394, 2, 1, "", "title"]], "nilearn.plotting.displays.MosaicSlicer": [[395, 2, 1, "", "__init__"], [395, 2, 1, "", "add_contours"], [395, 2, 1, "", "add_edges"], [395, 2, 1, "", "add_markers"], [395, 2, 1, "", "add_overlay"], [395, 2, 1, "", "annotate"], [395, 5, 1, "", "black_bg"], [395, 5, 1, "", "brain_color"], [395, 2, 1, "", "close"], [395, 2, 1, "", "draw_cross"], [395, 2, 1, "", "find_cut_coords"], [395, 2, 1, "", "init_with_figure"], [395, 2, 1, "", "savefig"], [395, 2, 1, "", "title"]], "nilearn.plotting.displays.OrthoProjector": [[396, 2, 1, "", "__init__"], [396, 2, 1, "", "add_contours"], [396, 2, 1, "", "add_edges"], [396, 2, 1, "", "add_graph"], [396, 2, 1, "", "add_markers"], [396, 2, 1, "", "add_overlay"], [396, 2, 1, "", "annotate"], [396, 5, 1, "", "black_bg"], [396, 5, 1, "", "brain_color"], [396, 2, 1, "", "close"], [396, 2, 1, "", "draw_cross"], [396, 2, 1, "", "find_cut_coords"], [396, 2, 1, "", "init_with_figure"], [396, 2, 1, "", "savefig"], [396, 2, 1, "", "title"]], "nilearn.plotting.displays.OrthoSlicer": [[397, 2, 1, "", "__init__"], [397, 2, 1, "", "add_contours"], [397, 2, 1, "", "add_edges"], [397, 2, 1, "", "add_markers"], [397, 2, 1, "", "add_overlay"], [397, 2, 1, "", "annotate"], [397, 5, 1, "", "black_bg"], [397, 5, 1, "", "brain_color"], [397, 2, 1, "", "close"], [397, 2, 1, "", "draw_cross"], [397, 2, 1, "", "find_cut_coords"], [397, 2, 1, "", "init_with_figure"], [397, 2, 1, "", "savefig"], [397, 2, 1, "", "title"]], "nilearn.plotting.displays.PlotlySurfaceFigure": [[398, 2, 1, "", "__init__"], [398, 2, 1, "", "savefig"], [398, 2, 1, "", "show"]], "nilearn.plotting.displays.RProjector": [[399, 2, 1, "", "__init__"], [399, 2, 1, "", "add_contours"], [399, 2, 1, "", "add_edges"], [399, 2, 1, "", "add_graph"], [399, 2, 1, "", "add_markers"], [399, 2, 1, "", "add_overlay"], [399, 2, 1, "", "annotate"], [399, 5, 1, "", "black_bg"], [399, 5, 1, "", "brain_color"], [399, 2, 1, "", "close"], [399, 2, 1, "", "draw_cross"], [399, 2, 1, "", "find_cut_coords"], [399, 2, 1, "", "init_with_figure"], [399, 2, 1, "", "savefig"], [399, 2, 1, "", "title"]], "nilearn.plotting.displays.TiledSlicer": [[400, 2, 1, "", "__init__"], [400, 2, 1, "", "add_contours"], [400, 2, 1, "", "add_edges"], [400, 2, 1, "", "add_markers"], [400, 2, 1, "", "add_overlay"], [400, 2, 1, "", "annotate"], [400, 5, 1, "", "black_bg"], [400, 5, 1, "", "brain_color"], [400, 2, 1, "", "close"], [400, 2, 1, "", "draw_cross"], [400, 2, 1, "", "find_cut_coords"], [400, 2, 1, "", "init_with_figure"], [400, 2, 1, "", "savefig"], [400, 2, 1, "", "title"]], "nilearn.plotting.displays.XProjector": [[401, 2, 1, "", "__init__"], [401, 2, 1, "", "add_contours"], [401, 2, 1, "", "add_edges"], [401, 2, 1, "", "add_graph"], [401, 2, 1, "", "add_markers"], [401, 2, 1, "", "add_overlay"], [401, 2, 1, "", "annotate"], [401, 5, 1, "", "black_bg"], [401, 5, 1, "", "brain_color"], [401, 2, 1, "", "close"], [401, 2, 1, "", "draw_cross"], [401, 2, 1, "", "find_cut_coords"], [401, 2, 1, "", "init_with_figure"], [401, 2, 1, "", "savefig"], [401, 2, 1, "", "title"]], "nilearn.plotting.displays.XSlicer": [[402, 2, 1, "", "__init__"], [402, 2, 1, "", "add_contours"], [402, 2, 1, "", "add_edges"], [402, 2, 1, "", "add_markers"], [402, 2, 1, "", "add_overlay"], [402, 2, 1, "", "annotate"], [402, 5, 1, "", "black_bg"], [402, 5, 1, "", "brain_color"], [402, 2, 1, "", "close"], [402, 2, 1, "", "draw_cross"], [402, 2, 1, "", "find_cut_coords"], [402, 2, 1, "", "init_with_figure"], [402, 2, 1, "", "savefig"], [402, 2, 1, "", "title"]], "nilearn.plotting.displays.XZProjector": [[403, 2, 1, "", "__init__"], [403, 2, 1, "", "add_contours"], [403, 2, 1, "", "add_edges"], [403, 2, 1, "", "add_graph"], [403, 2, 1, "", "add_markers"], [403, 2, 1, "", "add_overlay"], [403, 2, 1, "", "annotate"], [403, 5, 1, "", "black_bg"], [403, 5, 1, "", "brain_color"], [403, 2, 1, "", "close"], [403, 2, 1, "", "draw_cross"], [403, 2, 1, "", "find_cut_coords"], [403, 2, 1, "", "init_with_figure"], [403, 2, 1, "", "savefig"], [403, 2, 1, "", "title"]], "nilearn.plotting.displays.XZSlicer": [[404, 2, 1, "", "__init__"], [404, 2, 1, "", "add_contours"], [404, 2, 1, "", "add_edges"], [404, 2, 1, "", "add_markers"], [404, 2, 1, "", "add_overlay"], [404, 2, 1, "", "annotate"], [404, 5, 1, "", "black_bg"], [404, 5, 1, "", "brain_color"], [404, 2, 1, "", "close"], [404, 2, 1, "", "draw_cross"], [404, 2, 1, "", "find_cut_coords"], [404, 2, 1, "", "init_with_figure"], [404, 2, 1, "", "savefig"], [404, 2, 1, "", "title"]], "nilearn.plotting.displays.YProjector": [[405, 2, 1, "", "__init__"], [405, 2, 1, "", "add_contours"], [405, 2, 1, "", "add_edges"], [405, 2, 1, "", "add_graph"], [405, 2, 1, "", "add_markers"], [405, 2, 1, "", "add_overlay"], [405, 2, 1, "", "annotate"], [405, 5, 1, "", "black_bg"], [405, 5, 1, "", "brain_color"], [405, 2, 1, "", "close"], [405, 2, 1, "", "draw_cross"], [405, 2, 1, "", "find_cut_coords"], [405, 2, 1, "", "init_with_figure"], [405, 2, 1, "", "savefig"], [405, 2, 1, "", "title"]], "nilearn.plotting.displays.YSlicer": [[406, 2, 1, "", "__init__"], [406, 2, 1, "", "add_contours"], [406, 2, 1, "", "add_edges"], [406, 2, 1, "", "add_markers"], [406, 2, 1, "", "add_overlay"], [406, 2, 1, "", "annotate"], [406, 5, 1, "", "black_bg"], [406, 5, 1, "", "brain_color"], [406, 2, 1, "", "close"], [406, 2, 1, "", "draw_cross"], [406, 2, 1, "", "find_cut_coords"], [406, 2, 1, "", "init_with_figure"], [406, 2, 1, "", "savefig"], [406, 2, 1, "", "title"]], "nilearn.plotting.displays.YXProjector": [[407, 2, 1, "", "__init__"], [407, 2, 1, "", "add_contours"], [407, 2, 1, "", "add_edges"], [407, 2, 1, "", "add_graph"], [407, 2, 1, "", "add_markers"], [407, 2, 1, "", "add_overlay"], [407, 2, 1, "", "annotate"], [407, 5, 1, "", "black_bg"], [407, 5, 1, "", "brain_color"], [407, 2, 1, "", "close"], [407, 2, 1, "", "draw_cross"], [407, 2, 1, "", "find_cut_coords"], [407, 2, 1, "", "init_with_figure"], [407, 2, 1, "", "savefig"], [407, 2, 1, "", "title"]], "nilearn.plotting.displays.YXSlicer": [[408, 2, 1, "", "__init__"], [408, 2, 1, "", "add_contours"], [408, 2, 1, "", "add_edges"], [408, 2, 1, "", "add_markers"], [408, 2, 1, "", "add_overlay"], [408, 2, 1, "", "annotate"], [408, 5, 1, "", "black_bg"], [408, 5, 1, "", "brain_color"], [408, 2, 1, "", "close"], [408, 2, 1, "", "draw_cross"], [408, 2, 1, "", "find_cut_coords"], [408, 2, 1, "", "init_with_figure"], [408, 2, 1, "", "savefig"], [408, 2, 1, "", "title"]], "nilearn.plotting.displays.YZProjector": [[409, 2, 1, "", "__init__"], [409, 2, 1, "", "add_contours"], [409, 2, 1, "", "add_edges"], [409, 2, 1, "", "add_graph"], [409, 2, 1, "", "add_markers"], [409, 2, 1, "", "add_overlay"], [409, 2, 1, "", "annotate"], [409, 5, 1, "", "black_bg"], [409, 5, 1, "", "brain_color"], [409, 2, 1, "", "close"], [409, 2, 1, "", "draw_cross"], [409, 2, 1, "", "find_cut_coords"], [409, 2, 1, "", "init_with_figure"], [409, 2, 1, "", "savefig"], [409, 2, 1, "", "title"]], "nilearn.plotting.displays.YZSlicer": [[410, 2, 1, "", "__init__"], [410, 2, 1, "", "add_contours"], [410, 2, 1, "", "add_edges"], [410, 2, 1, "", "add_markers"], [410, 2, 1, "", "add_overlay"], [410, 2, 1, "", "annotate"], [410, 5, 1, "", "black_bg"], [410, 5, 1, "", "brain_color"], [410, 2, 1, "", "close"], [410, 2, 1, "", "draw_cross"], [410, 2, 1, "", "find_cut_coords"], [410, 2, 1, "", "init_with_figure"], [410, 2, 1, "", "savefig"], [410, 2, 1, "", "title"]], "nilearn.plotting.displays.ZProjector": [[411, 2, 1, "", "__init__"], [411, 2, 1, "", "add_contours"], [411, 2, 1, "", "add_edges"], [411, 2, 1, "", "add_graph"], [411, 2, 1, "", "add_markers"], [411, 2, 1, "", "add_overlay"], [411, 2, 1, "", "annotate"], [411, 5, 1, "", "black_bg"], [411, 5, 1, "", "brain_color"], [411, 2, 1, "", "close"], [411, 2, 1, "", "draw_cross"], [411, 2, 1, "", "find_cut_coords"], [411, 2, 1, "", "init_with_figure"], [411, 2, 1, "", "savefig"], [411, 2, 1, "", "title"]], "nilearn.plotting.displays.ZSlicer": [[412, 2, 1, "", "__init__"], [412, 2, 1, "", "add_contours"], [412, 2, 1, "", "add_edges"], [412, 2, 1, "", "add_markers"], [412, 2, 1, "", "add_overlay"], [412, 2, 1, "", "annotate"], [412, 5, 1, "", "black_bg"], [412, 5, 1, "", "brain_color"], [412, 2, 1, "", "close"], [412, 2, 1, "", "draw_cross"], [412, 2, 1, "", "find_cut_coords"], [412, 2, 1, "", "init_with_figure"], [412, 2, 1, "", "savefig"], [412, 2, 1, "", "title"]], "nilearn.regions": [[445, 1, 1, "", "HierarchicalKMeans"], [446, 1, 1, "", "Parcellations"], [447, 1, 1, "", "ReNA"], [448, 1, 1, "", "RegionExtractor"], [449, 3, 1, "", "connected_label_regions"], [450, 3, 1, "", "connected_regions"], [451, 3, 1, "", "img_to_signals_labels"], [452, 3, 1, "", "img_to_signals_maps"], [453, 3, 1, "", "recursive_neighbor_agglomeration"], [454, 3, 1, "", "signals_to_img_labels"], [455, 3, 1, "", "signals_to_img_maps"]], "nilearn.regions.HierarchicalKMeans": [[445, 2, 1, "", "__init__"], [445, 2, 1, "", "fit"], [445, 2, 1, "", "fit_predict"], [445, 2, 1, "", "fit_transform"], [445, 2, 1, "", "get_metadata_routing"], [445, 2, 1, "", "get_params"], [445, 2, 1, "", "inverse_transform"], [445, 2, 1, "", "set_inverse_transform_request"], [445, 2, 1, "", "set_output"], [445, 2, 1, "", "set_params"], [445, 2, 1, "", "transform"]], "nilearn.regions.Parcellations": [[446, 4, 1, "", "VALID_METHODS"], [446, 2, 1, "", "__init__"], [446, 2, 1, "", "fit"], [446, 2, 1, "", "fit_transform"], [446, 2, 1, "", "get_metadata_routing"], [446, 2, 1, "", "get_params"], [446, 2, 1, "", "inverse_transform"], [446, 2, 1, "", "score"], [446, 2, 1, "", "set_fit_request"], [446, 2, 1, "", "set_inverse_transform_request"], [446, 2, 1, "", "set_output"], [446, 2, 1, "", "set_params"], [446, 2, 1, "", "set_score_request"], [446, 2, 1, "", "set_transform_request"], [446, 2, 1, "", "transform"]], "nilearn.regions.ReNA": [[447, 2, 1, "", "__init__"], [447, 2, 1, "", "fit"], [447, 2, 1, "", "fit_predict"], [447, 2, 1, "", "fit_transform"], [447, 2, 1, "", "get_metadata_routing"], [447, 2, 1, "", "get_params"], [447, 2, 1, "", "inverse_transform"], [447, 2, 1, "", "set_inverse_transform_request"], [447, 2, 1, "", "set_output"], [447, 2, 1, "", "set_params"], [447, 2, 1, "", "transform"]], "nilearn.regions.RegionExtractor": [[448, 2, 1, "", "__init__"], [448, 2, 1, "", "fit"], [448, 2, 1, "", "fit_transform"], [448, 2, 1, "", "generate_report"], [448, 2, 1, "", "get_metadata_routing"], [448, 2, 1, "", "get_params"], [448, 2, 1, "", "inverse_transform"], [448, 2, 1, "", "set_fit_request"], [448, 2, 1, "", "set_inverse_transform_request"], [448, 2, 1, "", "set_output"], [448, 2, 1, "", "set_params"], [448, 2, 1, "", "set_transform_request"], [448, 2, 1, "", "transform"], [448, 2, 1, "", "transform_single_imgs"]], "nilearn.reporting": [[456, 1, 1, "", "HTMLReport"], [457, 3, 1, "", "get_clusters_table"], [458, 3, 1, "", "make_glm_report"]], "nilearn.reporting.HTMLReport": [[456, 2, 1, "", "__init__"], [456, 2, 1, "", "get_iframe"], [456, 2, 1, "", "get_standalone"], [456, 2, 1, "", "open_in_browser"], [456, 2, 1, "", "resize"], [456, 2, 1, "", "save_as_html"]], "nilearn.signal": [[459, 3, 1, "", "butterworth"], [460, 3, 1, "", "clean"], [461, 3, 1, "", "high_variance_confounds"]], "nilearn.surface": [[462, 3, 1, "", "load_surf_data"], [463, 3, 1, "", "load_surf_mesh"], [464, 3, 1, "", "vol_to_surf"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute", "5": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"]}, "titleterms": {"team": 0, "core": 0, "develop": [0, 48, 49, 50, 51, 58, 98, 196, 480], "other": [0, 21, 164], "contributor": [0, 127, 129, 132, 136, 139, 140, 141, 142, 143, 144, 154], "fund": 0, "cite": 0, "nilearn": [0, 4, 12, 13, 14, 15, 16, 21, 29, 34, 160, 161, 169, 175, 176, 178, 182, 183, 184, 185, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480], "scikit": [0, 35, 97, 110, 116, 164, 181], "learn": [0, 35, 48, 49, 50, 97, 110, 116, 159, 160, 164, 176, 181], "basic": [1, 4, 5, 10, 65, 112], "tutori": [1, 2, 3, 112], "3d": [2, 4, 9, 22, 52, 54, 58, 87, 179, 479], "4d": [2, 21, 116, 179, 180], "niimg": [2, 179], "handl": 2, "visual": [2, 3, 8, 9, 10, 11, 15, 16, 19, 20, 21, 22, 25, 26, 29, 30, 31, 36, 37, 40, 41, 42, 43, 49, 52, 54, 58, 80, 83, 97, 106, 112, 116, 158, 159, 160, 161, 166, 181, 479], "download": [2, 3, 49, 97, 116, 117, 179], "dataset": [2, 6, 11, 15, 16, 17, 18, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 48, 49, 50, 51, 53, 58, 61, 62, 64, 74, 75, 78, 79, 98, 100, 104, 105, 107, 159, 163, 168, 169, 179, 183, 186, 189, 196, 199, 206, 209, 210, 212, 215, 222, 223, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290], "from": [2, 3, 11, 15, 16, 24, 26, 28, 33, 39, 40, 41, 48, 49, 50, 56, 58, 62, 88, 90, 93, 97, 99, 104, 105, 112, 116, 117, 156, 165, 179, 180, 181, 470, 471], "internet": [2, 179], "file": [2, 4, 15, 29, 56, 71, 179, 479], "one": [2, 50, 62, 78, 180], "volum": [2, 3, 4, 9, 24, 25, 65, 82, 112, 178, 180, 181, 216], "loop": [2, 3], "all": [2, 14, 161], "through": 2, "select": [2, 97, 117, 155, 161], "A": [3, 4, 44, 65, 110, 156, 161, 171], "introduct": [3, 161, 171, 176], "fmri": [3, 6, 35, 48, 49, 51, 58, 64, 67, 70, 75, 78, 79, 97, 98, 103, 155, 156, 161, 171, 172, 196], "decod": [3, 28, 29, 30, 31, 32, 33, 34, 35, 37, 41, 43, 97, 99, 110, 112, 161, 163, 164, 165, 167, 184, 291, 292, 293, 294, 295, 296, 297], "retriev": [3, 6, 10, 15, 16, 17, 19, 23, 29, 52, 54, 56, 58, 65, 97], "load": [3, 13, 14, 18, 22, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 47, 48, 51, 56, 74, 93, 97, 98, 116, 158, 161, 179, 181, 470], "data": [3, 4, 6, 9, 10, 11, 13, 14, 15, 16, 17, 22, 23, 25, 29, 30, 32, 33, 35, 39, 40, 41, 42, 44, 47, 48, 49, 52, 54, 55, 56, 57, 61, 65, 67, 69, 74, 88, 93, 97, 99, 102, 106, 116, 155, 158, 160, 161, 164, 166, 171, 179, 180, 181, 472, 474, 478], "haxbi": [3, 18, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 97, 161, 163, 206], "studi": [3, 51, 97, 102, 106, 107, 163], "first": [3, 4, 15, 41, 60, 61, 62, 65, 67, 97, 99, 100, 107, 112, 161, 170, 176, 181, 199, 210, 465], "featur": [3, 15, 97, 127, 130, 154, 161, 175, 465], "extract": [3, 23, 25, 33, 47, 50, 51, 52, 53, 54, 55, 56, 58, 61, 68, 86, 87, 88, 90, 155, 156, 159, 160, 170, 180, 181, 471], "matrix": [3, 31, 35, 49, 52, 54, 56, 58, 77, 155, 156, 170], "behavior": [3, 29, 33, 179], "label": [3, 11, 56, 85, 177, 466], "restrict": [3, 36, 37], "analysi": [3, 6, 32, 36, 42, 55, 60, 61, 62, 64, 67, 73, 74, 80, 96, 99, 100, 101, 103, 104, 105, 106, 107, 112, 161, 164, 166, 170, 171, 191, 473], "cat": 3, "face": [3, 29, 30, 31, 36, 37, 101], "support": 3, "vector": 3, "machin": [3, 116, 176], "measur": [3, 47, 97, 161, 164], "predict": [3, 28, 29, 34, 35, 41, 42, 43, 68, 97, 98, 112, 161, 162, 165, 170], "score": [3, 6, 29, 34, 35, 36, 40, 166], "us": [3, 9, 15, 34, 35, 39, 48, 50, 51, 56, 86, 87, 90, 91, 97, 110, 117, 158, 159, 161, 164, 172, 176, 177, 179, 227, 229, 236, 238, 239, 241, 242, 243, 244, 245, 248, 249, 251, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 285, 288, 290, 291, 292, 293, 294, 295, 297, 298, 299, 303, 304, 305, 306, 307, 308, 311, 318, 319, 320, 323, 325, 326, 330, 332, 336, 337, 338, 339, 341, 342, 343, 346, 347, 348, 349, 351, 352, 353, 354, 356, 357, 358, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 383, 384, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 446, 448, 449, 450, 456, 457, 458, 462, 463, 464, 479], "cross": [3, 29, 34, 35, 97, 102, 161, 164, 166, 168], "valid": [3, 29, 34, 35, 97, 159, 161, 164, 166, 168], "manual": [3, 93, 115, 177, 180], "leav": 3, "out": 3, "implement": 3, "kfold": 3, "inspect": 3, "model": [3, 40, 42, 62, 64, 65, 66, 68, 70, 75, 76, 78, 79, 99, 100, 160, 162, 163, 164, 170, 171, 173, 467], "weight": [3, 31, 97, 161], "turn": [3, 49], "nifti": [3, 55, 179, 180, 466], "imag": [3, 4, 8, 9, 16, 17, 28, 67, 80, 82, 84, 89, 92, 94, 96, 102, 106, 110, 112, 116, 117, 165, 179, 180, 181, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 468, 471, 479], "plot": [3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 24, 31, 32, 34, 35, 44, 47, 50, 55, 58, 65, 66, 68, 79, 106, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 474, 479], "svm": [3, 29, 97, 161, 164], "what": [3, 51, 98, 154, 169, 171, 176], "i": [3, 51, 98, 171, 176, 179, 181], "chanc": [3, 97, 161, 164], "level": [3, 60, 61, 62, 65, 67, 73, 75, 76, 77, 78, 79, 80, 97, 100, 107, 112, 155, 161, 164, 170, 173, 199, 210, 465], "accuraci": [3, 161], "refer": [3, 22, 23, 31, 32, 37, 38, 40, 41, 44, 47, 48, 49, 51, 56, 58, 69, 70, 71, 75, 97, 98, 99, 101, 117, 155, 156, 158, 159, 160, 161, 162, 163, 166, 167, 168, 174, 176, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 469], "see": [3, 49, 58], "also": [3, 49, 58], "exampl": [4, 33, 39, 44, 63, 66, 67, 70, 76, 77, 91, 100, 107, 109, 112, 117, 155, 156, 158, 160, 161, 166, 167, 175, 176, 180, 181, 227, 229, 236, 238, 239, 241, 242, 243, 244, 245, 248, 249, 251, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 285, 288, 290, 291, 292, 293, 294, 295, 297, 298, 299, 303, 304, 305, 306, 307, 308, 311, 318, 319, 320, 323, 325, 326, 330, 332, 336, 337, 338, 339, 341, 342, 343, 346, 347, 348, 349, 351, 352, 353, 354, 356, 357, 358, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 383, 384, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 446, 448, 449, 450, 456, 457, 458, 462, 463, 464, 465, 466, 479], "manipul": [4, 82, 112, 178, 180, 478], "look": 4, "step": [4, 176, 181], "our": [4, 41], "simpl": [4, 32, 44, 62, 70, 77, 80, 91, 161], "smooth": [4, 65, 94, 180, 181], "glob": [4, 179], "over": [4, 11, 47], "multipl": [4, 9, 15, 155, 171, 173, 181], "save": [4, 15, 55, 62, 479], "result": [4, 9, 29, 32, 50, 53, 79, 80, 116, 158, 159, 160, 161], "numer": [5, 168], "python": [5, 179], "intro": 6, "glm": [6, 33, 60, 70, 73, 112, 171, 172, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 465, 467], "singl": [6, 15, 55, 69], "run": [6, 33, 41, 44, 65, 69, 70, 102, 164], "subject": [6, 51, 53, 55, 62, 69, 78, 155, 160, 181], "The": [6, 35, 56, 65, 85, 161, 167, 181], "specifi": 6, "experiment": [6, 77, 109, 112, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309], "paradigm": [6, 77, 106], "perform": [6, 55, 61, 67, 80, 97, 161, 163, 164], "detect": 6, "voxel": [6, 42, 43, 55, 74, 93, 166, 173, 180], "signific": [6, 68], "effect": [6, 70], "threshold": [6, 62, 173], "z": [6, 55, 106], "map": [6, 9, 12, 16, 17, 21, 30, 40, 42, 43, 47, 48, 55, 87, 93, 99, 102, 106, 117, 159, 161, 163, 167, 173, 183, 211, 214, 216, 466, 479], "an": [6, 9, 44, 58, 64, 71, 85, 89, 92, 94, 160, 161, 169, 171, 479], "f": [6, 36, 68], "test": [6, 68, 78, 79, 80, 93, 97, 169], "comput": [7, 27, 34, 35, 36, 37, 45, 50, 52, 53, 56, 58, 59, 70, 72, 81, 88, 93, 95, 106, 108, 111, 113, 116, 155, 156, 159, 170, 180, 181, 481], "time": [7, 11, 23, 25, 27, 45, 52, 54, 55, 58, 59, 61, 65, 68, 72, 81, 88, 95, 108, 111, 113, 156, 168, 170, 176, 181, 477, 481], "brain": [8, 13, 14, 16, 19, 25, 28, 40, 42, 47, 48, 49, 50, 51, 56, 58, 82, 90, 96, 98, 112, 156, 158, 159, 160, 165, 178, 180, 471, 474, 479], "make": [9, 16, 32, 169, 177], "surfac": [9, 22, 23, 24, 37, 67, 107, 110, 170, 215, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 462, 463, 464, 478, 479], "statist": [9, 16, 62, 80, 87, 93, 96, 106, 112, 117, 171, 173, 183, 211, 214, 479], "get": [9, 24, 55, 68, 102, 169], "cortic": [9, 22, 37, 479], "mesh": [9, 24, 302, 479], "sampl": [9, 24, 66, 78, 79], "around": [9, 51, 58], "each": [9, 33], "node": 9, "interact": [9, 16, 155, 156, 474, 479], "plotli": 9, "comparison": [9, 163, 171, 173], "atla": [9, 10, 20, 21, 22, 47, 51, 52, 54, 56, 58, 85, 86, 98, 110, 156, 169, 188, 190, 191, 194, 195, 197, 198, 205, 208, 213, 217, 218, 219, 220, 221, 224, 225], "choos": [9, 99, 161, 162], "region": [9, 50, 51, 53, 54, 61, 85, 86, 87, 90, 93, 156, 158, 159, 181, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 475], "outlin": 9, "displai": [9, 14, 15, 52, 53, 54, 56, 58, 78, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 474, 479], "interest": [9, 93], "top": 9, "higher": [9, 65], "resolut": [9, 180, 181], "view": [9, 15], "web": [9, 22, 52, 54, 58], "browser": [9, 22, 52, 54, 58], "impact": [9, 56], "paramet": [9, 34, 61, 63, 65, 66, 67, 85, 97, 99, 155, 162, 164, 181], "harvard": [10, 205], "oxford": [10, 205], "juelich": [10, 208], "contour": [10, 14, 479], "global": [11, 56], "pattern": [11, 44], "carpet": 11, "fetch": [11, 20, 25, 26, 33, 47, 50, 53, 62, 75, 78, 79, 100, 106, 107, 159, 179, 183], "adhd": [11, 61, 189, 465], "deriv": [11, 48, 65, 183], "mask": [11, 16, 18, 25, 32, 36, 41, 65, 88, 93, 97, 102, 116, 161, 164, 166, 180, 181, 375, 376, 377, 378, 379, 380, 381, 382, 383, 472], "base": [11, 23, 32, 37, 42, 43, 56, 67, 74, 99, 107, 159, 170, 173, 216], "separ": [11, 85], "tissu": 11, "type": 11, "matplotlib": [12, 34], "colormap": [12, 479], "color": 12, "glass": [13, 14, 16], "whole": 13, "sagitt": [13, 15], "cut": [13, 15], "black": 13, "background": [13, 17, 88], "hemispher": [13, 14, 67], "option": 14, "demo": [14, 110, 209], "differ": [14, 30, 32, 34, 35, 44, 47, 85, 155, 162, 181, 479], "project": [14, 26, 67, 169, 177], "left": [14, 67], "right": [14, 15, 99, 162], "fill": [14, 479], "both": [14, 70], "more": [15, 17, 164], "tool": [15, 16], "we": [15, 32, 35, 41, 169], "provid": [15, 16], "gener": [15, 16, 33, 44, 61, 62, 70, 71, 74, 76, 102, 114, 183, 467], "purpos": [15, 16], "coron": 15, "axial": 15, "given": [15, 180], "coordin": [15, 47, 58, 156], "number": [15, 168], "5": [15, 17, 132, 139, 140, 141, 154], "onli": [15, 50, 181], "two": [15, 69, 70, 79, 162], "slice": [15, 44, 479], "without": [15, 56, 97, 161, 164], "colorbar": 15, "side": 15, "chang": [15, 17, 65, 97, 123, 124, 125, 126, 127, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 144, 145, 147, 148, 149, 150, 151, 152, 154, 181], "now": [15, 35, 52, 54], "ar": [15, 65], "three": [15, 99], "2x2": 15, "fashion": 15, "along": 15, "row": 15, "column": 15, "anoth": [15, 180], "wai": 15, "limit": 15, "demonstr": 15, "variou": 15, "show": [15, 38, 99, 439], "how": [15, 169, 177, 181], "add_edg": 15, "add_contour": 15, "seed": [15, 23, 55, 58, 61, 169, 181], "add_mark": 15, "annot": [15, 117], "function": [16, 19, 23, 41, 44, 46, 47, 50, 51, 54, 66, 98, 99, 112, 155, 156, 157, 159, 160, 164, 166, 169, 180, 182, 183, 476, 479], "plot_stat_map": [16, 20, 434], "view_img": [16, 441], "plot_glass_brain": [16, 426], "anatom": 16, "plot_anat": [16, 419], "roi": [16, 32, 51, 93, 180], "here": [16, 41], "plot_roi": [16, 433], "epi": [16, 88], "plot_epi": [16, 424], "control": [17, 164, 181], "contrast": [17, 61, 62, 65, 67, 68, 70, 170, 311], "when": [17, 179], "local": [17, 71, 104, 105, 192, 193, 209, 210], "enhanc": [17, 123, 124, 125, 126, 127, 129, 133, 134, 135, 136, 137, 139, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 154, 169, 215], "dim": 17, "0": [17, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154], "decreas": [17, 179], "1": [17, 65, 118, 119, 120, 121, 122, 124, 128, 132, 135, 137, 140, 143, 146, 148, 150, 154], "multiscal": [19, 191], "parcel": [19, 47, 49, 56, 156, 158, 159, 446], "group": [19, 48, 51, 53, 98, 107, 155, 168], "probabilist": [20, 21, 47, 54, 156], "default": [20, 58, 61, 86], "mode": [20, 58, 61, 85, 86, 479], "msdl": [20, 51, 98, 213], "add_overlai": 20, "object": [20, 29, 31, 34, 62, 100, 107, 160, 179, 181], "plot_prob_atla": [20, 432], "atlas": [21, 47, 156, 169, 183, 479], "access": [21, 180, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], "fetcher": [22, 169], "connect": [23, 46, 47, 51, 56, 57, 85, 98, 99, 110, 112, 155, 157, 159, 182], "seri": [23, 25, 52, 54, 55, 58, 68, 88, 99, 156, 170, 181, 477], "calcul": [23, 68, 105], "technic": 24, "point": [24, 181], "illustr": 24, "scheme": 24, "build": [24, 33, 35, 40, 54, 93, 116, 156, 169, 177], "cylind": 24, "locat": 24, "which": [24, 158], "vol_to_surf": [24, 464], "would": 24, "draw": 24, "its": 24, "adjust": 24, "neuroimag": [25, 116, 162, 176, 179, 181], "appli": [25, 48, 116, 158, 180, 181], "correspond": [25, 52, 54], "megatrawl": [26, 187], "network": [26, 50, 58, 61, 86, 160, 187], "matric": [26, 53, 63, 99, 159, 181, 187], "human": 26, "connectom": [26, 47, 50, 52, 53, 58, 155, 156, 182, 227, 228, 229, 230, 231, 232, 233, 234, 479], "anova": [29, 34, 97, 161, 164], "v": [29, 30, 31, 36, 101], "hous": [29, 30, 31, 36, 37, 101], "pipelin": [29, 33, 34, 110, 115, 116, 163, 164, 181], "fit": [29, 31, 33, 34, 39, 43, 62, 68, 70, 100, 107, 160, 170, 173], "obtain": [29, 62, 100, 107], "via": 29, "classifi": [30, 166], "train": 30, "frem": [31, 39, 163], "chair": 31, "recognit": [31, 36, 44, 101], "confus": [31, 35], "et": [32, 38, 39, 40, 41], "al": [32, 38, 39, 40, 41], "prepar": [32, 35, 36, 41, 61, 67, 80, 99, 161, 166, 177, 180, 181], "bar": [32, 479], "summar": 32, "after": [33, 88], "signal": [33, 51, 53, 54, 56, 58, 90, 156, 181, 459, 460, 461, 471, 477], "proper": 33, "event": [33, 71, 170], "structur": [33, 57, 167, 169], "instanti": 33, "firstlevelmodel": [33, 62, 100, 107, 323], "report": [33, 58, 61, 62, 70, 74, 169, 456, 457, 458, 465, 466, 476], "set": [34, 70, 162, 164, 166, 169], "respons": [34, 37, 64, 65, 66], "valu": [34, 168], "screen": 34, "percentil": 34, "nest": 34, "multi": [35, 53, 160, 162], "class": [35, 162], "strategi": [35, 56, 161, 181], "barplot": 35, "searchlight": [36, 37, 166, 295], "bold": [37, 171], "stimuli": [38, 40, 41], "jimura": 39, "mix": [39, 163, 211], "gambl": [39, 163, 211], "experi": [39, 116, 161], "tv": 39, "l1": 39, "spacenet": [39, 43, 167], "encod": 40, "miyawaki": [40, 41, 212], "2008": [40, 41, 212], "estim": [40, 44, 57, 58, 61, 62, 65, 67, 75, 76, 78, 79, 97, 100, 161, 162, 164, 168], "recept": 40, "field": 40, "reconstruct": 41, "Then": 41, "defin": [41, 56, 63, 66, 99], "itself": 41, "let": 41, "u": 41, "quantifi": 41, "error": 41, "morphometri": [42, 43, 74, 173, 216], "oasi": [42, 43, 74, 216], "vbm": [42, 43, 74], "bio": 42, "marker": [42, 479], "ag": [42, 51, 74, 98], "mass": [42, 473], "univari": [42, 101, 104, 105, 166, 473], "preprocess": [42, 116, 183, 191, 477], "qualiti": [42, 43, 93], "infer": 42, "massiv": [42, 101, 104, 105, 166], "space": [43, 69, 155], "net": 43, "prior": 43, "simul": [44, 57, 155, 164], "creat": [44, 63, 77, 180], "exercis": [44, 155, 156, 181], "go": [44, 97, 106, 116, 164], "further": [44, 97, 116, 164, 166], "compar": [47, 48, 49, 70, 84, 99, 155, 166], "yeo": [47, 85, 225], "direct": [47, 155], "asymmetr": 47, "iter": [47, 168], "spatial": [48, 163, 167, 180], "ica": [48, 102, 160], "dictionari": [48, 50, 159, 160], "canica": [48, 160, 298], "cluster": [49, 68, 75, 158, 191], "method": [49, 116], "ward": 49, "compress": [49, 158], "represent": [49, 158, 179], "kmean": 49, "hierarch": 49, "those": 49, "rena": [49, 447], "correl": [50, 51, 54, 55, 56, 58, 155, 156], "coeffici": 50, "specif": [50, 70, 117, 180], "classif": [51, 98, 162], "children": 51, "partial": [51, 58], "variabl": 51, "kind": [51, 98], "most": [51, 68, 98], "power": [51, 98, 218], "spars": [52, 53, 155, 168], "invers": [52, 53, 155, 181], "covari": [52, 53, 155, 168], "And": [52, 54], "graph": [52, 54, 58, 156], "precis": 53, "produc": 55, "fisher": 55, "transform": [55, 180, 181], "confound": [56, 65, 181], "remov": [56, 65, 181], "flexibl": 56, "fmriprep": [56, 364, 365, 470], "interfac": [56, 361, 362, 363, 364, 365, 366, 470], "motion": 56, "scrub": 56, "predefin": 56, "sphere": [58, 166, 466], "dmn": 58, "summari": [58, 127, 154, 155, 156, 159, 160, 170, 173], "within": 58, "averag": 58, "strength": 58, "dosenbach": [58, 198], "": [58, 61, 97, 154, 161], "cours": 61, "complet": 62, "bid": [62, 100, 107, 192, 361, 362, 363, 465, 470], "openneuro": 62, "automat": [62, 100, 107, 116, 183], "argument": [62, 100, 107, 181], "output": [62, 117, 179], "disk": 62, "design": [63, 65, 76, 77, 99, 170, 181], "finit": 64, "impul": 64, "fir": 64, "understand": [65, 88, 179, 181], "drift": 65, "hemodynam": 65, "ad": [65, 169, 479], "nois": 65, "ol": 65, "order": 65, "censor": 65, "conclus": 65, "mri": 66, "stimulu": 66, "analys": [67, 74], "residu": [68, 170], "import": [68, 480], "modul": [68, 109, 112, 226], "largest": 68, "actual": 68, "6": [68, 133, 142, 143, 144, 154], "distribut": [68, 177], "r": 68, "squar": 68, "nativ": 69, "up": [70, 115, 166, 169], "initi": [70, 168], "fix": [70, 121, 123, 124, 125, 126, 127, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154], "rang": 70, "across": 70, "tsv": 71, "neurospin": 71, "task": [71, 99, 104, 105], "second": [73, 75, 76, 77, 78, 79, 80, 100, 107, 112, 173, 465], "true": 75, "posit": 75, "proport": 75, "t_map": 78, "unpair": 79, "pair": 79, "some": 80, "t": [80, 87], "affin": [83, 179, 180], "resampl": [83, 88, 92, 180, 181, 468], "mean": 84, "2": [84, 120, 125, 127, 128, 129, 130, 131, 132, 133, 138, 141, 144, 151, 154], "break": 85, "origin": 85, "relabel": 85, "min_siz": 85, "smith": [86, 221], "niftimask": [88, 91, 181, 373], "raw": 88, "mni": 88, "templat": [88, 92, 183, 200, 201, 202, 203, 204, 207], "negat": 89, "math_img": [89, 352], "niftilabelsmask": [90, 181, 371], "find": [93, 166, 176], "thi": 93, "improv": 93, "advanc": [96, 97, 112, 115, 181], "tune": 97, "dummi": 97, "permut": 97, "lean": 97, "svc": 97, "discrimin": 97, "engin": 97, "beta": [99, 134, 139, 154, 161], "your": [99, 116, 169], "standard": 99, "lsa": 99, "aggreg": 99, "condit": 99, "lss": 99, "few": [99, 161], "trial": 99, "approach": [99, 155], "applic": [99, 176], "quick": 100, "saniti": 100, "check": [100, 480], "neurovault": [102, 106, 117, 214], "term": 102, "reshap": 102, "compon": [102, 103, 160, 470], "figur": [102, 474], "multivari": [103, 185], "decomposit": [103, 185, 298, 299], "independ": 103, "motor": 104, "meta": 106, "stop": [106, 168], "success": 106, "minu": 106, "like": [106, 179], "protocol": 106, "combin": 106, "short": 110, "masker": [110, 181, 367, 368, 369, 370, 371, 372, 373, 374, 466, 471], "surfacelabelsmask": [110, 305], "bibliographi": 114, "usag": [115, 181], "scale": [115, 479], "own": 116, "non": 116, "descript": [116, 168, 183], "2d": [116, 180], "arrai": [116, 180], "unmask": [116, 181, 383], "inverse_transform": 116, "repositori": 117, "collect": 117, "filter": [117, 181], "neurosynth": 117, "changelog": [118, 119, 120, 121, 127, 128, 130, 154, 169], "3": [121, 126, 130, 134, 135, 154], "4": [122, 131, 136, 137, 138, 152, 154], "highlight": [122, 123, 125, 126, 134, 135, 136, 139, 142, 145, 146, 147, 148, 149, 151, 154], "10": [123, 124, 125, 126, 152, 154], "new": [123, 124, 125, 126, 127, 129, 130, 131, 132, 139, 140, 141, 142, 145, 146, 147, 148, 149, 151, 154], "1rc1": [124, 154], "bug": [127, 130, 137, 154, 169], "api": [127, 154, 176, 469], "rc": [139, 154], "alpha": [139, 154, 168], "known": [140, 154], "issu": [140, 154, 177], "0rc": [142, 154], "0b0": [142, 154], "0a0": [142, 154], "7": [145, 146, 154], "8": [147, 148, 154], "9": [149, 150, 151, 154], "dev": [152, 154], "page": [155, 156, 159, 160, 170, 173], "full": [155, 156, 161], "rest": [155, 156, 157], "link": [155, 480], "total": 155, "tangent": 155, "maxprob": 156, "state": 157, "movi": [158, 159], "watch": [158, 159], "code": [158, 161, 163, 166, 169, 177, 180, 479], "better": [159, 167, 181], "relat": [160, 167], "interpret": 160, "altern": 160, "2001": 161, "definit": [161, 181], "made": 161, "easi": 161, "good": 161, "choic": 161, "put": 161, "togeth": 161, "dimens": 161, "reduct": 161, "final": 161, "script": 161, "regress": 162, "linear": [162, 467], "bag": 162, "sever": 162, "fast": 163, "ensembl": 163, "regular": 163, "robust": 163, "empir": 163, "increas": 163, "ani": 164, "mvpa": 165, "contain": 166, "inform": 166, "principl": [166, 168], "read": [166, 179], "radiu": 166, "f_score": 166, "spm": [166, 222, 223], "stabil": 168, "execut": 168, "synthet": 168, "criteria": 168, "maximum": 168, "dualiti": 168, "gap": 168, "variat": 168, "norm": 168, "modifi": 168, "criterion": 168, "algorithm": 168, "bound": 168, "grid": 168, "search": 168, "warm": 168, "restart": 168, "contribut": 169, "conduct": 169, "help": [169, 176], "discuss": 169, "idea": 169, "answer": 169, "question": 169, "review": 169, "pull": [169, 177], "request": [169, 177], "do": 169, "decid": 169, "goe": 169, "scope": 169, "who": 169, "decis": 169, "guidelin": 169, "pr": 169, "style": 169, "privat": 169, "html": 169, "css": 169, "pre": 169, "commit": 169, "fixtur": 169, "document": [169, 177], "environ": 169, "instal": [169, 480], "recommend": 169, "addit": 169, "case": [169, 180], "mainten": [169, 177], "hrf": 170, "primer": 171, "analyz": [172, 179], "correct": 173, "glossari": 174, "organ": 177, "close": 177, "polici": 177, "tox": 177, "releas": [177, 480], "stabl": [177, 191], "doc": 177, "upload": 177, "them": 177, "pypi": 177, "deploi": 177, "post": 177, "input": 179, "name": 179, "match": [179, 180], "user": [179, 482], "path": 179, "expans": 179, "open": [179, 181], "nilearn_data": 179, "where": 179, "store": 179, "format": 179, "shape": [179, 180], "memori": 179, "text": 179, "phenotyp": 179, "csv": 179, "panda": 179, "target": 180, "special": 180, "size": 180, "individu": 180, "oper": [180, 475], "concept": 181, "philosophi": 181, "custom": 181, "100": 181, "extra": 181, "cutoff": 181, "common": 181, "dtype": 181, "tempor": 181, "resiz": 181, "niftimapsmask": [181, 372], "multiniftimask": [181, 370], "multiniftilabelsmask": [181, 368], "multiniftimapsmask": [181, 369], "niftispheresmask": [181, 374], "abid": 186, "pcp": 186, "note": [186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], "content": [186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 482], "licens": [186, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], "hcp": 187, "disclaim": 187, "aal": 188, "allen": 190, "2011": [190, 218, 225], "basc": 191, "bootstrap": 191, "languag": [192, 209], "brainom": 193, "craddock": 194, "2012": 194, "destrieux": 195, "difumo": 197, "2010": 198, "fiac": [199, 465], "fsaverag": 200, "fsaverage3": 201, "fsaverage4": 202, "fsaverage5": 203, "fsaverage6": 204, "icbm": 207, "152": 207, "nki": 215, "pauli": 217, "2007": 217, "schaefer": 219, "2018": [219, 220], "seitzman": 220, "2009": 221, "auditori": 222, "multimod": 223, "talairach": 224, "connectivitymeasur": 227, "groupsparsecovari": 228, "groupsparsecovariancecv": 229, "cov_to_corr": 230, "group_sparse_covari": 231, "prec_to_parti": 232, "sym_matrix_to_vec": 233, "vec_to_sym_matrix": 234, "fetch_abide_pcp": 235, "fetch_adhd": 236, "fetch_atlas_a": 237, "fetch_atlas_allen_2011": 238, "fetch_atlas_basc_multiscale_2015": 239, "fetch_atlas_craddock_2012": 240, "fetch_atlas_destrieux_2009": 241, "fetch_atlas_difumo": 242, "fetch_atlas_harvard_oxford": 243, "fetch_atlas_juelich": 244, "fetch_atlas_msdl": 245, "fetch_atlas_pauli_2017": 246, "fetch_atlas_schaefer_2018": 247, "fetch_atlas_smith_2009": 248, "fetch_atlas_surf_destrieux": 249, "fetch_atlas_talairach": 250, "fetch_atlas_yeo_2011": 251, "fetch_bids_langloc_dataset": 252, "fetch_coords_dosenbach_2010": 253, "fetch_coords_power_2011": 254, "fetch_coords_seitzman_2018": 255, "fetch_development_fmri": 256, "fetch_ds000030_url": 257, "fetch_fiac_first_level": 258, "fetch_haxbi": 259, "fetch_icbm152_2009": 260, "fetch_icbm152_brain_gm_mask": 261, "fetch_language_localizer_demo_dataset": 262, "fetch_localizer_button_task": 263, "fetch_localizer_calculation_task": 264, "fetch_localizer_contrast": 265, "fetch_localizer_first_level": 266, "fetch_megatrawls_netmat": 267, "fetch_mixed_gambl": 268, "fetch_miyawaki2008": 269, "fetch_neurovault": 270, "fetch_neurovault_auditory_computation_task": 271, "fetch_neurovault_id": 272, "fetch_neurovault_motor_task": 273, "fetch_oasis_vbm": 274, "fetch_openneuro_dataset": 275, "fetch_openneuro_dataset_index": 276, "fetch_spm_auditori": 277, "fetch_spm_multimodal_fmri": 278, "fetch_surf_fsaverag": 279, "fetch_surf_nki_enhanc": 280, "get_data_dir": 281, "load_mni152_brain_mask": 282, "load_mni152_gm_mask": 283, "load_mni152_gm_templ": 284, "load_mni152_templ": 285, "load_mni152_wm_mask": 286, "load_mni152_wm_templ": 287, "load_sample_motor_activation_imag": 288, "patch_openneuro_dataset": 289, "select_from_index": 290, "decoderregressor": 292, "fremclassifi": 293, "fremregressor": 294, "spacenetclassifi": 296, "spacenetregressor": 297, "dictlearn": 299, "filemesh": 300, "inmemorymesh": 301, "polymesh": 303, "surfaceimag": 304, "surfacemask": 306, "fetch_destrieux": 307, "fetch_nki": 308, "load_fsaverag": 309, "armodel": 310, "fcontrastresult": 312, "likelihoodmodelresult": 313, "olsmodel": 314, "regressionresult": 315, "simpleregressionresult": 316, "tcontrastresult": 317, "cluster_level_infer": 318, "compute_contrast": 319, "compute_fixed_effect": 320, "expression_to_contrast_vector": 321, "fdr_threshold": 322, "first_level": [323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 467], "check_design_matrix": 324, "compute_regressor": 325, "first_level_from_bid": 326, "glover_dispersion_deriv": 327, "glover_hrf": 328, "glover_time_deriv": 329, "make_first_level_design_matrix": 330, "mean_scal": 331, "run_glm": 332, "spm_dispersion_deriv": 333, "spm_hrf": 334, "spm_time_deriv": 335, "second_level": [336, 337, 338, 467], "secondlevelmodel": 336, "make_second_level_design_matrix": 337, "non_parametric_infer": 338, "threshold_stats_img": 339, "binarize_img": 340, "clean_img": 341, "concat_img": 342, "coord_transform": 343, "copy_img": 344, "crop_img": 345, "get_data": 346, "high_variance_confound": [347, 461], "index_img": 348, "iter_img": 349, "largest_connected_component_img": 350, "load_img": 351, "mean_img": 353, "new_img_lik": 354, "reorder_img": 355, "resample_img": 356, "resample_to_img": 357, "smooth_img": 358, "swap_img_hemispher": 359, "threshold_img": 360, "get_bids_fil": 361, "parse_bids_filenam": 362, "save_glm_to_bid": 363, "load_confound": 364, "load_confounds_strategi": 365, "fsl": [366, 470], "get_design_from_fslmat": 366, "basemask": 367, "apply_mask": 375, "compute_background_mask": 376, "compute_brain_mask": 377, "compute_epi_mask": 378, "compute_multi_background_mask": 379, "compute_multi_brain_mask": 380, "compute_multi_epi_mask": 381, "intersect_mask": 382, "mass_univari": [384, 473], "permuted_ol": 384, "baseax": 385, "baseslic": 386, "cutax": 387, "glassbrainax": 388, "lprojector": 389, "lrprojector": 390, "lyrprojector": 391, "lyrzprojector": 392, "lzrprojector": 393, "lzryprojector": 394, "mosaicslic": 395, "orthoprojector": 396, "orthoslic": 397, "plotlysurfacefigur": 398, "rprojector": 399, "tiledslic": 400, "xprojector": 401, "xslicer": 402, "xzprojector": 403, "xzslicer": 404, "yprojector": 405, "yslicer": 406, "yxprojector": 407, "yxslicer": 408, "yzprojector": 409, "yzslicer": 410, "zprojector": 411, "zslicer": 412, "get_projector": 413, "get_slic": 414, "find_cut_slic": 415, "find_parcellation_cut_coord": 416, "find_probabilistic_atlas_cut_coord": 417, "find_xyz_cut_coord": 418, "plot_carpet": 420, "plot_connectom": 421, "plot_contrast_matrix": 422, "plot_design_matrix": 423, "plot_ev": 425, "plot_img": 427, "plot_img_comparison": 428, "plot_img_on_surf": 429, "plot_mark": 430, "plot_matrix": 431, "plot_surf": 435, "plot_surf_contour": 436, "plot_surf_roi": 437, "plot_surf_stat_map": [438, 479], "view_connectom": 440, "view_img_on_surf": [442, 479], "view_mark": 443, "view_surf": [444, 479], "hierarchicalkmean": 445, "regionextractor": 448, "connected_label_region": 449, "connected_region": 450, "img_to_signals_label": 451, "img_to_signals_map": 452, "recursive_neighbor_agglomer": 453, "signals_to_img_label": 454, "signals_to_img_map": 455, "htmlreport": 456, "get_clusters_t": 457, "make_glm_report": 458, "butterworth": 459, "clean": 460, "load_surf_data": 462, "load_surf_mesh": 463, "process": 468, "util": [468, 472], "avail": 479, "overlai": 479, "edg": 479, "quickstart": 480, "latest": 480, "version": 480, "drop": 480, "hour": 480, "depend": 480, "guid": 482, "tabl": 482}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinxcontrib.bibtex": 9, "sphinx": 60}, "alltitles": {"Team": [[0, "team"]], "Core developers": [[0, "core-developers"]], "Other contributors": [[0, "other-contributors"]], "Funding": [[0, "funding"]], "Citing nilearn": [[0, "citing-nilearn"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Basic tutorials": [[1, "basic-tutorials"], [112, "basic-tutorials"]], "3D and 4D niimgs: handling and visualizing": [[2, "d-and-4d-niimgs-handling-and-visualizing"]], "Downloading tutorial datasets from Internet": [[2, "downloading-tutorial-datasets-from-internet"]], "Visualizing a 3D file": [[2, "visualizing-a-3d-file"]], "Visualizing one volume in a 4D file": [[2, "visualizing-one-volume-in-a-4d-file"]], "Looping on all volumes in a 4D file": [[2, "looping-on-all-volumes-in-a-4d-file"]], "Looping through selected volumes in a 4D file": [[2, "looping-through-selected-volumes-in-a-4d-file"]], "A introduction tutorial to fMRI decoding": [[3, "a-introduction-tutorial-to-fmri-decoding"]], "Retrieve and load the fMRI data from the Haxby study": [[3, "retrieve-and-load-the-fmri-data-from-the-haxby-study"], [97, "retrieve-and-load-the-fmri-data-from-the-haxby-study"]], "First download the data": [[3, "first-download-the-data"], [97, "first-download-the-data"]], "Visualizing the fMRI volume": [[3, "visualizing-the-fmri-volume"]], "Feature extraction: from fMRI volumes to a data matrix": [[3, "feature-extraction-from-fmri-volumes-to-a-data-matrix"]], "Load the behavioral labels": [[3, "load-the-behavioral-labels"]], "Restrict the analysis to cats and faces": [[3, "restrict-the-analysis-to-cats-and-faces"]], "Decoding with Support Vector Machine": [[3, "decoding-with-support-vector-machine"]], "Measuring prediction scores using cross-validation": [[3, "measuring-prediction-scores-using-cross-validation"]], "Manually leaving out data": [[3, "manually-leaving-out-data"]], "Implementing a KFold loop": [[3, "implementing-a-kfold-loop"]], "Cross-validation with the decoder": [[3, "cross-validation-with-the-decoder"]], "Inspecting the model weights": [[3, "inspecting-the-model-weights"]], "Turning the weights into a nifti image": [[3, "turning-the-weights-into-a-nifti-image"]], "Plotting the SVM weights": [[3, "plotting-the-svm-weights"]], "What is the chance level accuracy?": [[3, "what-is-the-chance-level-accuracy"]], "References": [[3, "references"], [22, "references"], [23, "references"], [31, "references"], [32, "references"], [37, "references"], [38, "references"], [40, "references"], [41, "references"], [44, "references"], [48, "references"], [49, "references"], [51, "references"], [56, "references"], [58, "references"], [69, "references"], [70, "references"], [71, "references"], [75, "references"], [97, "references"], [98, "references"], [99, "references"], [101, "references"], [117, "references"], [155, null], [155, "references"], [156, null], [156, null], [156, "references"], [158, "references"], [159, null], [159, "references"], [160, null], [160, null], [160, "references"], [161, "references"], [162, "references"], [163, "references"], [166, "references"], [167, "references"], [168, "references"], [174, "references"], [176, "references"], [186, "references"], [187, "references"], [188, "references"], [189, "references"], [190, "references"], [191, "references"], [193, "references"], [194, "references"], [195, "references"], [196, "references"], [197, "references"], [198, "references"], [199, "references"], [200, "references"], [201, "references"], [202, "references"], [203, "references"], [204, "references"], [205, "references"], [206, "references"], [207, "references"], [208, "references"], [209, "references"], [210, "references"], [211, "references"], [212, "references"], [213, "references"], [214, "references"], [215, "references"], [216, "references"], [217, "references"], [218, "references"], [219, "references"], [220, "references"], [221, "references"], [222, "references"], [223, "references"], [224, "references"], [225, "references"]], "See also": [[3, "see-also"], [58, "see-also"]], "Basic nilearn example: manipulating and looking at data": [[4, "basic-nilearn-example-manipulating-and-looking-at-data"]], "A first step: looking at our data": [[4, "a-first-step-looking-at-our-data"]], "Simple image manipulation: smoothing": [[4, "simple-image-manipulation-smoothing"]], "Globbing over multiple 3D volumes": [[4, "globbing-over-multiple-3d-volumes"]], "Saving results to a file": [[4, "saving-results-to-a-file"]], "Basic numerics and plotting with Python": [[5, "basic-numerics-and-plotting-with-python"]], "Intro to GLM Analysis: a single-run, single-subject fMRI dataset": [[6, "intro-to-glm-analysis-a-single-run-single-subject-fmri-dataset"]], "The data": [[6, "the-data"]], "Retrieving the data": [[6, "retrieving-the-data"], [23, "retrieving-the-data"], [65, "retrieving-the-data"]], "Specifying the experimental paradigm": [[6, "specifying-the-experimental-paradigm"]], "Performing the GLM analysis": [[6, "performing-the-glm-analysis"]], "Detecting voxels with significant effects": [[6, "detecting-voxels-with-significant-effects"]], "Plot thresholded z scores map": [[6, "plot-thresholded-z-scores-map"]], "Performing an F-test": [[6, "performing-an-f-test"]], "Computation times": [[7, "computation-times"], [27, "computation-times"], [45, "computation-times"], [59, "computation-times"], [72, "computation-times"], [81, "computation-times"], [95, "computation-times"], [108, "computation-times"], [111, "computation-times"], [113, "computation-times"], [481, "computation-times"]], "Visualization of brain images": [[8, "visualization-of-brain-images"], [112, "visualization-of-brain-images"]], "Making a surface plot of a 3D statistical map": [[9, "making-a-surface-plot-of-a-3d-statistical-map"]], "Get a statistical map": [[9, "get-a-statistical-map"]], "Get a cortical mesh": [[9, "get-a-cortical-mesh"]], "Sample the 3D data around each node of the mesh": [[9, "sample-the-3d-data-around-each-node-of-the-mesh"]], "Plot the result": [[9, "plot-the-result"]], "Interactive plotting with Plotly": [[9, "interactive-plotting-with-plotly"]], "Plot 3D image for comparison": [[9, "plot-3d-image-for-comparison"]], "Use an atlas and choose regions to outline": [[9, "use-an-atlas-and-choose-regions-to-outline"]], "Display outlines of the regions of interest on top of a statistical map": [[9, "display-outlines-of-the-regions-of-interest-on-top-of-a-statistical-map"]], "Plot with higher-resolution mesh": [[9, "plot-with-higher-resolution-mesh"]], "Plot multiple views of the 3D volume on a surface": [[9, "plot-multiple-views-of-the-3d-volume-on-a-surface"]], "3D visualization in a web browser": [[9, "d-visualization-in-a-web-browser"], [22, "d-visualization-in-a-web-browser"], [52, "d-visualization-in-a-web-browser"], [54, "d-visualization-in-a-web-browser"], [58, "d-visualization-in-a-web-browser"]], "Impact of plot parameters on visualization": [[9, "impact-of-plot-parameters-on-visualization"]], "Basic Atlas plotting": [[10, "basic-atlas-plotting"]], "Retrieving the atlas data": [[10, "retrieving-the-atlas-data"]], "Visualizing the Harvard-Oxford atlas": [[10, "visualizing-the-harvard-oxford-atlas"]], "Visualizing the Juelich atlas": [[10, "visualizing-the-juelich-atlas"]], "Visualizing the Harvard-Oxford atlas with contours": [[10, "visualizing-the-harvard-oxford-atlas-with-contours"]], "Visualizing the Juelich atlas with contours": [[10, "visualizing-the-juelich-atlas-with-contours"]], "Visualizing global patterns with a carpet plot": [[11, "visualizing-global-patterns-with-a-carpet-plot"]], "Fetching data from ADHD dataset": [[11, "fetching-data-from-adhd-dataset"]], "Deriving a mask": [[11, "deriving-a-mask"]], "Visualizing global patterns over time": [[11, "visualizing-global-patterns-over-time"]], "Deriving a label-based mask": [[11, "deriving-a-label-based-mask"]], "Visualizing global patterns, separated by tissue type": [[11, "visualizing-global-patterns-separated-by-tissue-type"]], "Matplotlib colormaps in Nilearn": [[12, "matplotlib-colormaps-in-nilearn"]], "Plot color maps": [[12, "plot-color-maps"]], "Plot matplotlib color maps": [[12, "plot-matplotlib-color-maps"]], "Glass brain plotting in nilearn": [[13, "glass-brain-plotting-in-nilearn"]], "Load data": [[13, "load-data"]], "Glass brain plotting: whole brain sagittal cuts": [[13, "glass-brain-plotting-whole-brain-sagittal-cuts"]], "Glass brain plotting: black background": [[13, "glass-brain-plotting-black-background"]], "Glass brain plotting: Hemispheric sagittal cuts": [[13, "glass-brain-plotting-hemispheric-sagittal-cuts"]], "Glass brain plotting in nilearn (all options)": [[14, "glass-brain-plotting-in-nilearn-all-options"]], "Load the data": [[14, "load-the-data"]], "Demo glass brain plotting": [[14, "demo-glass-brain-plotting"]], "Different projections for the left and right hemispheres": [[14, "different-projections-for-the-left-and-right-hemispheres"]], "Demo glass brain plotting with contours and with fillings": [[14, "demo-glass-brain-plotting-with-contours-and-with-fillings"]], "Display contour projections in both hemispheres": [[14, "display-contour-projections-in-both-hemispheres"]], "More plotting tools from nilearn": [[15, "more-plotting-tools-from-nilearn"]], "First, we retrieve data from nilearn provided (general-purpose) datasets": [[15, "first-we-retrieve-data-from-nilearn-provided-general-purpose-datasets"]], "Visualizing in - \u2018sagittal\u2019, \u2018coronal\u2019 and \u2018axial\u2019 with given coordinates": [[15, "visualizing-in-sagittal-coronal-and-axial-with-given-coordinates"]], "Visualizing in - single view \u2018axial\u2019 with number of cuts=5": [[15, "visualizing-in-single-view-axial-with-number-of-cuts-5"]], "Visualizing in - single view \u2018sagittal\u2019 with only two slices": [[15, "visualizing-in-single-view-sagittal-with-only-two-slices"]], "Visualizing in - \u2018coronal\u2019 view with single cut": [[15, "visualizing-in-coronal-view-with-single-cut"]], "Visualizing without a colorbar on the right side": [[15, "visualizing-without-a-colorbar-on-the-right-side"]], "Visualize in - two views \u2018sagittal\u2019 and \u2018axial\u2019 with given coordinates": [[15, "visualize-in-two-views-sagittal-and-axial-with-given-coordinates"]], "Changing the views to \u2018coronal\u2019, \u2018sagittal\u2019 views with coordinates": [[15, "changing-the-views-to-coronal-sagittal-views-with-coordinates"]], "Now, views are changed to \u2018coronal\u2019 and \u2018axial\u2019 views with coordinates": [[15, "now-views-are-changed-to-coronal-and-axial-views-with-coordinates"]], "Visualizing three views in 2x2 fashion": [[15, "visualizing-three-views-in-2x2-fashion"]], "Visualizing three views along multiple rows and columns": [[15, "visualizing-three-views-along-multiple-rows-and-columns"]], "Now, changing the number of slices along columns": [[15, "now-changing-the-number-of-slices-along-columns"]], "Now, another way of limiting the number of slices along rows and columns": [[15, "now-another-way-of-limiting-the-number-of-slices-along-rows-and-columns"]], "Demonstrating various display features": [[15, "demonstrating-various-display-features"]], "Showing how to use add_edges": [[15, "showing-how-to-use-add-edges"]], "How to use add_contours": [[15, "how-to-use-add-contours"]], "Plotting seeds using add_markers": [[15, "plotting-seeds-using-add-markers"]], "Annotating plots": [[15, "annotating-plots"]], "Saving plots to file": [[15, "saving-plots-to-file"]], "Plotting tools in nilearn": [[16, "plotting-tools-in-nilearn"]], "Retrieve data from nilearn provided (general-purpose) datasets": [[16, "retrieve-data-from-nilearn-provided-general-purpose-datasets"]], "Plotting statistical maps with function plot_stat_map": [[16, "plotting-statistical-maps-with-function-plot-stat-map"]], "Making interactive visualizations with function view_img": [[16, "making-interactive-visualizations-with-function-view-img"]], "Plotting statistical maps in a glass brain with function plot_glass_brain": [[16, "plotting-statistical-maps-in-a-glass-brain-with-function-plot-glass-brain"]], "Plotting anatomical images with function plot_anat": [[16, "plotting-anatomical-images-with-function-plot-anat"]], "Plotting ROIs (here the mask) with function plot_roi": [[16, "plotting-rois-here-the-mask-with-function-plot-roi"]], "Plotting EPI image with function plot_epi": [[16, "plotting-epi-image-with-function-plot-epi"]], "Controlling the contrast of the background when plotting": [[17, "controlling-the-contrast-of-the-background-when-plotting"]], "Retrieve the data: the localizer dataset with contrast maps": [[17, "retrieve-the-data-the-localizer-dataset-with-contrast-maps"]], "Plotting with enhancement of background image with dim=-.5": [[17, "plotting-with-enhancement-of-background-image-with-dim-5"]], "Plotting with no change of contrast in background image with dim=0": [[17, "plotting-with-no-change-of-contrast-in-background-image-with-dim-0"]], "Plotting with decrease of contrast in background image with dim=.5": [[17, "plotting-with-decrease-of-contrast-in-background-image-with-dim-5"]], "Plotting with more decrease in contrast with dim=1": [[17, "plotting-with-more-decrease-in-contrast-with-dim-1"]], "Plot Haxby masks": [[18, "plot-haxby-masks"]], "Load Haxby dataset": [[18, "load-haxby-dataset"], [36, "load-haxby-dataset"], [37, "load-haxby-dataset"]], "Plot the masks": [[18, "plot-the-masks"]], "Visualizing multiscale functional brain parcellations": [[19, "visualizing-multiscale-functional-brain-parcellations"]], "Retrieving multiscale group brain parcellations": [[19, "retrieving-multiscale-group-brain-parcellations"]], "Visualizing brain parcellations": [[19, "visualizing-brain-parcellations"]], "Visualizing a probabilistic atlas: the default mode in the MSDL atlas": [[20, "visualizing-a-probabilistic-atlas-the-default-mode-in-the-msdl-atlas"]], "Fetching Probabilistic atlas - MSDL atlas": [[20, "fetching-probabilistic-atlas-msdl-atlas"]], "Visualizing a probabilistic atlas with plot_stat_map and add_overlay object": [[20, "visualizing-a-probabilistic-atlas-with-plot-stat-map-and-add-overlay-object"]], "Visualizing a probabilistic atlas with plot_prob_atlas": [[20, "visualizing-a-probabilistic-atlas-with-plot-prob-atlas"]], "Visualizing 4D probabilistic atlas maps": [[21, "visualizing-4d-probabilistic-atlas-maps"]], "Other probabilistic atlases accessible with nilearn": [[21, "other-probabilistic-atlases-accessible-with-nilearn"]], "Loading and plotting of a cortical surface atlas": [[22, "loading-and-plotting-of-a-cortical-surface-atlas"]], "Data fetcher": [[22, "data-fetcher"]], "Visualization": [[22, "visualization"], [25, "visualization"], [26, "visualization"], [30, "visualization"], [36, "visualization"], [37, "visualization"], [42, "visualization"], [166, "visualization"]], "Seed-based connectivity on the surface": [[23, "seed-based-connectivity-on-the-surface"]], "Extracting the seed time series": [[23, "extracting-the-seed-time-series"]], "Calculating seed-based functional connectivity": [[23, "calculating-seed-based-functional-connectivity"]], "Technical point: Illustration of the volume to surface sampling schemes": [[24, "technical-point-illustration-of-the-volume-to-surface-sampling-schemes"]], "Build a mesh (of a cylinder)": [[24, "build-a-mesh-of-a-cylinder"]], "Get the locations from which vol_to_surf would draw its samples": [[24, "get-the-locations-from-which-vol-to-surf-would-draw-its-samples"]], "Plot the mesh and the sample locations": [[24, "plot-the-mesh-and-the-sample-locations"]], "Adjust the sample locations": [[24, "adjust-the-sample-locations"]], "NeuroImaging volumes visualization": [[25, "neuroimaging-volumes-visualization"]], "Fetch data": [[25, "fetch-data"]], "Extracting a brain mask": [[25, "extracting-a-brain-mask"], [180, "extracting-a-brain-mask"]], "Applying the mask to extract the corresponding time series": [[25, "applying-the-mask-to-extract-the-corresponding-time-series"]], "Visualizing Megatrawls Network Matrices from Human Connectome Project": [[26, "visualizing-megatrawls-network-matrices-from-human-connectome-project"]], "Fetching the Megatrawls Network matrices": [[26, "fetching-the-megatrawls-network-matrices"]], "Decoding and predicting from brain images": [[28, "decoding-and-predicting-from-brain-images"], [112, "decoding-and-predicting-from-brain-images"]], "Decoding with ANOVA + SVM: face vs house in the Haxby dataset": [[29, "decoding-with-anova-svm-face-vs-house-in-the-haxby-dataset"]], "Retrieve the files of the Haxby dataset": [[29, "retrieve-the-files-of-the-haxby-dataset"]], "Load the behavioral data": [[29, "load-the-behavioral-data"], [33, "load-the-behavioral-data"]], "ANOVA pipeline with nilearn.decoding.Decoder object": [[29, "anova-pipeline-with-nilearn-decoding-decoder-object"], [34, "anova-pipeline-with-nilearn-decoding-decoder-object"]], "Fit the decoder and predict": [[29, "fit-the-decoder-and-predict"]], "Obtain prediction scores via cross validation": [[29, "obtain-prediction-scores-via-cross-validation"]], "Visualize the results": [[29, "visualize-the-results"], [80, "visualize-the-results"]], "Different classifiers in decoding the Haxby dataset": [[30, "different-classifiers-in-decoding-the-haxby-dataset"]], "Loading the data": [[30, "loading-the-data"], [40, "loading-the-data"], [93, "loading-the-data"]], "Training the decoder": [[30, "training-the-decoder"]], "Visualizing the face vs house map": [[30, "visualizing-the-face-vs-house-map"]], "Decoding with FREM: face vs house vs chair object recognition": [[31, "decoding-with-frem-face-vs-house-vs-chair-object-recognition"]], "Load the Haxby dataset": [[31, "load-the-haxby-dataset"], [34, "load-the-haxby-dataset"]], "Fit FREM": [[31, "fit-frem"], [39, "fit-frem"]], "Plot confusion matrix": [[31, "plot-confusion-matrix"]], "Visualization of FREM weights": [[31, "visualization-of-frem-weights"]], "ROI-based decoding analysis in Haxby et al. dataset": [[32, "roi-based-decoding-analysis-in-haxby-et-al-dataset"]], "Load and prepare the data": [[32, "load-and-prepare-the-data"]], "Decoding on the different masks": [[32, "decoding-on-the-different-masks"]], "We make a simple bar plot to summarize the results": [[32, "we-make-a-simple-bar-plot-to-summarize-the-results"]], "Decoding of a dataset after GLM fit for signal extraction": [[33, "decoding-of-a-dataset-after-glm-fit-for-signal-extraction"]], "Fetch example Haxby dataset": [[33, "fetch-example-haxby-dataset"]], "Build a proper event structure for each run": [[33, "build-a-proper-event-structure-for-each-run"]], "Instantiate and run FirstLevelModel": [[33, "instantiate-and-run-firstlevelmodel"]], "Run the GLM on data from each run": [[33, "run-the-glm-on-data-from-each-run"]], "Generating a report": [[33, "generating-a-report"], [61, "generating-a-report"], [62, "generating-a-report"], [70, "generating-a-report"], [74, "generating-a-report"]], "Build the decoding pipeline": [[33, "build-the-decoding-pipeline"]], "Setting a parameter by cross-validation": [[34, "setting-a-parameter-by-cross-validation"]], "Fit the Decoder and predict the responses": [[34, "fit-the-decoder-and-predict-the-responses"]], "Compute prediction scores with different values of screening percentile": [[34, "compute-prediction-scores-with-different-values-of-screening-percentile"]], "Nested cross-validation": [[34, "nested-cross-validation"]], "Plot the prediction scores using matplotlib": [[34, "plot-the-prediction-scores-using-matplotlib"]], "The haxby dataset: different multi-class strategies": [[35, "the-haxby-dataset-different-multi-class-strategies"]], "Load the Haxby data dataset": [[35, "load-the-haxby-data-dataset"]], "Prepare the fMRI data": [[35, "prepare-the-fmri-data"]], "Build the decoders, using scikit-learn": [[35, "build-the-decoders-using-scikit-learn"]], "Now we compute cross-validation scores": [[35, "now-we-compute-cross-validation-scores"]], "Plot barplots of the prediction scores": [[35, "plot-barplots-of-the-prediction-scores"]], "Plot a confusion matrix": [[35, "plot-a-confusion-matrix"]], "Searchlight analysis of face vs house recognition": [[36, "searchlight-analysis-of-face-vs-house-recognition"]], "Restrict to faces and houses": [[36, "restrict-to-faces-and-houses"], [37, "restrict-to-faces-and-houses"]], "Prepare masks": [[36, "prepare-masks"]], "Searchlight computation": [[36, "searchlight-computation"], [37, "searchlight-computation"]], "F-scores computation": [[36, "f-scores-computation"]], "Cortical surface-based searchlight decoding": [[37, "cortical-surface-based-searchlight-decoding"]], "Surface BOLD response": [[37, "surface-bold-response"]], "Show stimuli of Haxby et al. dataset": [[38, "show-stimuli-of-haxby-et-al-dataset"]], "FREM on Jimura et al \u201cmixed gambles\u201d dataset": [[39, "frem-on-jimura-et-al-mixed-gambles-dataset"]], "Load the data from the Jimura mixed-gamble experiment": [[39, "load-the-data-from-the-jimura-mixed-gamble-experiment"]], "Example use of TV-L1 SpaceNet": [[39, "example-use-of-tv-l1-spacenet"]], "Encoding models for visual stimuli from Miyawaki et al. 2008": [[40, "encoding-models-for-visual-stimuli-from-miyawaki-et-al-2008"]], "Building the encoding models": [[40, "building-the-encoding-models"]], "Mapping the encoding scores on the brain": [[40, "mapping-the-encoding-scores-on-the-brain"]], "Estimating receptive fields": [[40, "estimating-receptive-fields"]], "Reconstruction of visual stimuli from Miyawaki et al. 2008": [[41, "reconstruction-of-visual-stimuli-from-miyawaki-et-al-2008"]], "First we load the Miyawaki dataset": [[41, "first-we-load-the-miyawaki-dataset"]], "Then we prepare and mask the data": [[41, "then-we-prepare-and-mask-the-data"]], "We define our prediction function": [[41, "we-define-our-prediction-function"]], "Here we run the prediction: the decoding itself": [[41, "here-we-run-the-prediction-the-decoding-itself"]], "Let us quantify our prediction error": [[41, "let-us-quantify-our-prediction-error"]], "Voxel-Based Morphometry on Oasis dataset": [[42, "voxel-based-morphometry-on-oasis-dataset"]], "Predictive modeling analysis: VBM bio-markers of aging?": [[42, "predictive-modeling-analysis-vbm-bio-markers-of-aging"]], "Brain mapping with mass univariate": [[42, "brain-mapping-with-mass-univariate"]], "Load Oasis dataset": [[42, "load-oasis-dataset"], [74, "load-oasis-dataset"]], "Preprocess data": [[42, "preprocess-data"]], "Visualize the quality of predictions": [[42, "visualize-the-quality-of-predictions"]], "Inference with massively univariate model": [[42, "inference-with-massively-univariate-model"]], "Voxel-Based Morphometry on Oasis dataset with Space-Net prior": [[43, "voxel-based-morphometry-on-oasis-dataset-with-space-net-prior"]], "Load the Oasis VBM dataset": [[43, "load-the-oasis-vbm-dataset"]], "Fit the SpaceNet and predict with it": [[43, "fit-the-spacenet-and-predict-with-it"]], "Visualize the decoding maps and quality of predictions": [[43, "visualize-the-decoding-maps-and-quality-of-predictions"]], "Example of pattern recognition on simulated data": [[44, "example-of-pattern-recognition-on-simulated-data"]], "A function to generate data": [[44, "a-function-to-generate-data"]], "A simple function to plot slices": [[44, "a-simple-function-to-plot-slices"]], "Create data": [[44, "create-data"]], "Run different estimators": [[44, "run-different-estimators"]], "Run the estimators": [[44, "run-the-estimators"]], "An exercise to go further": [[44, "an-exercise-to-go-further"]], "Functional connectivity": [[46, "functional-connectivity"], [112, "functional-connectivity"]], "Comparing connectomes on different reference atlases": [[47, "comparing-connectomes-on-different-reference-atlases"]], "Load atlases": [[47, "load-atlases"]], "Load functional data": [[47, "load-functional-data"]], "Extract coordinates on Yeo atlas - parcellations": [[47, "extract-coordinates-on-yeo-atlas-parcellations"]], "Plot a directed connectome - asymmetric connectivity measure": [[47, "plot-a-directed-connectome-asymmetric-connectivity-measure"]], "Load probabilistic atlases - extracting coordinates on brain maps": [[47, "load-probabilistic-atlases-extracting-coordinates-on-brain-maps"]], "Iterate over fetched atlases to extract coordinates - probabilistic": [[47, "iterate-over-fetched-atlases-to-extract-coordinates-probabilistic"]], "Deriving spatial maps from group fMRI data using ICA and Dictionary Learning": [[48, "deriving-spatial-maps-from-group-fmri-data-using-ica-and-dictionary-learning"]], "Load brain development fMRI dataset": [[48, "load-brain-development-fmri-dataset"]], "Apply CanICA on the data": [[48, "apply-canica-on-the-data"]], "Compare CanICA to dictionary learning": [[48, "compare-canica-to-dictionary-learning"]], "Clustering methods to learn a brain parcellation from fMRI": [[49, "clustering-methods-to-learn-a-brain-parcellation-from-fmri"]], "See Also": [[49, "see-also"]], "Download a brain development fMRI dataset and turn it to a data matrix": [[49, "download-a-brain-development-fmri-dataset-and-turn-it-to-a-data-matrix"]], "Brain parcellations with Ward Clustering": [[49, "brain-parcellations-with-ward-clustering"]], "Visualize: Brain parcellations (Ward)": [[49, "visualize-brain-parcellations-ward"]], "Compressed representation of Ward clustering": [[49, "compressed-representation-of-ward-clustering"]], "Brain parcellations with KMeans Clustering": [[49, "brain-parcellations-with-kmeans-clustering"]], "Visualize: Brain parcellations (KMeans)": [[49, "visualize-brain-parcellations-kmeans"]], "Brain parcellations with Hierarchical KMeans Clustering": [[49, "brain-parcellations-with-hierarchical-kmeans-clustering"]], "Visualize: Brain parcellations (Hierarchical KMeans)": [[49, "visualize-brain-parcellations-hierarchical-kmeans"]], "Compare Hierarchical Kmeans clusters with those from Kmeans": [[49, "compare-hierarchical-kmeans-clusters-with-those-from-kmeans"]], "Brain parcellations with ReNA Clustering": [[49, "brain-parcellations-with-rena-clustering"]], "Visualize: Brain parcellations (ReNA)": [[49, "visualize-brain-parcellations-rena"]], "Compressed representation of ReNA clustering": [[49, "compressed-representation-of-rena-clustering"]], "Regions extraction using dictionary learning and functional connectomes": [[50, "regions-extraction-using-dictionary-learning-and-functional-connectomes"]], "Fetch brain development functional datasets": [[50, "fetch-brain-development-functional-datasets"]], "Extract functional networks with Dictionary learning": [[50, "extract-functional-networks-with-dictionary-learning"]], "Extract regions from networks": [[50, "extract-regions-from-networks"]], "Compute correlation coefficients": [[50, "compute-correlation-coefficients"]], "Plot resulting connectomes": [[50, "plot-resulting-connectomes"]], "Plot regions extracted for only one specific network": [[50, "plot-regions-extracted-for-only-one-specific-network"]], "Classification of age groups using functional connectivity": [[51, "classification-of-age-groups-using-functional-connectivity"]], "Load brain development fMRI dataset and MSDL atlas": [[51, "load-brain-development-fmri-dataset-and-msdl-atlas"], [98, "load-brain-development-fmri-dataset-and-msdl-atlas"]], "Region signals extraction": [[51, "region-signals-extraction"]], "ROI-to-ROI correlations of children": [[51, "roi-to-roi-correlations-of-children"]], "Studying partial correlations": [[51, "studying-partial-correlations"]], "Extract subjects variabilities around a group connectivity": [[51, "extract-subjects-variabilities-around-a-group-connectivity"]], "What kind of connectivity is most powerful for classification?": [[51, "what-kind-of-connectivity-is-most-powerful-for-classification"], [98, "what-kind-of-connectivity-is-most-powerful-for-classification"]], "Computing a connectome with sparse inverse covariance": [[52, "computing-a-connectome-with-sparse-inverse-covariance"]], "Retrieve the atlas and the data": [[52, "retrieve-the-atlas-and-the-data"], [54, "retrieve-the-atlas-and-the-data"], [56, "retrieve-the-atlas-and-the-data"]], "Extract time series": [[52, "extract-time-series"]], "Compute the sparse inverse covariance": [[52, "compute-the-sparse-inverse-covariance"]], "Display the connectome matrix": [[52, "display-the-connectome-matrix"]], "And now display the corresponding graph": [[52, "and-now-display-the-corresponding-graph"], [52, "id1"], [54, "and-now-display-the-corresponding-graph"]], "Display the sparse inverse covariance": [[52, "display-the-sparse-inverse-covariance"]], "Group Sparse inverse covariance for multi-subject connectome": [[53, "group-sparse-inverse-covariance-for-multi-subject-connectome"]], "Fetching datasets": [[53, "fetching-datasets"]], "Extracting region signals": [[53, "extracting-region-signals"]], "Computing group-sparse precision matrices": [[53, "computing-group-sparse-precision-matrices"]], "Displaying results": [[53, "displaying-results"]], "Extracting signals of a probabilistic atlas of functional regions": [[54, "extracting-signals-of-a-probabilistic-atlas-of-functional-regions"]], "Extract the time series": [[54, "extract-the-time-series"]], "Build and display a correlation matrix": [[54, "build-and-display-a-correlation-matrix"]], "Producing single subject maps of seed-to-voxel correlation": [[55, "producing-single-subject-maps-of-seed-to-voxel-correlation"]], "Getting the data": [[55, "getting-the-data"]], "Time series extraction": [[55, "time-series-extraction"]], "Performing the seed-to-voxel correlation analysis": [[55, "performing-the-seed-to-voxel-correlation-analysis"]], "Plotting the seed-to-voxel correlation map": [[55, "plotting-the-seed-to-voxel-correlation-map"]], "Fisher-z transformation and save nifti": [[55, "fisher-z-transformation-and-save-nifti"]], "Extracting signals from a brain parcellation": [[56, "extracting-signals-from-a-brain-parcellation"]], "Extract signals on a parcellation defined by labels": [[56, "extract-signals-on-a-parcellation-defined-by-labels"]], "Compute and display a correlation matrix": [[56, "compute-and-display-a-correlation-matrix"]], "Extract signals and compute a connectivity matrix without confounds removal": [[56, "extract-signals-and-compute-a-connectivity-matrix-without-confounds-removal"]], "Load confounds from file using a flexible strategy with fmriprep interface": [[56, "load-confounds-from-file-using-a-flexible-strategy-with-fmriprep-interface"]], "Motion-based scrubbing": [[56, "motion-based-scrubbing"]], "The impact of global signal removal": [[56, "the-impact-of-global-signal-removal"]], "Using predefined strategies": [[56, "using-predefined-strategies"]], "Connectivity structure estimation on simulated data": [[57, "connectivity-structure-estimation-on-simulated-data"]], "Extract signals on spheres and plot a connectome": [[58, "extract-signals-on-spheres-and-plot-a-connectome"]], "Retrieve the brain development fMRI dataset": [[58, "retrieve-the-brain-development-fmri-dataset"]], "Coordinates of Default Mode Network": [[58, "coordinates-of-default-mode-network"]], "Extracts signal from sphere around DMN seeds": [[58, "extracts-signal-from-sphere-around-dmn-seeds"]], "Display spheres summary report": [[58, "display-spheres-summary-report"]], "Display time series": [[58, "display-time-series"]], "Compute partial correlation matrix": [[58, "compute-partial-correlation-matrix"]], "Display connectome": [[58, "display-connectome"]], "Extract signals on spheres from an atlas": [[58, "extract-signals-on-spheres-from-an-atlas"]], "Compute within spheres averaged time-series": [[58, "compute-within-spheres-averaged-time-series"]], "Estimate correlations": [[58, "estimate-correlations"]], "Plot matrix, graph, and strength": [[58, "plot-matrix-graph-and-strength"]], "Connectome extracted from Dosenbach\u2019s atlas": [[58, "connectome-extracted-from-dosenbach-s-atlas"]], "GLM: First level analysis": [[60, "glm-first-level-analysis"], [112, "glm-first-level-analysis"]], "Default Mode Network extraction of ADHD dataset": [[61, "default-mode-network-extraction-of-adhd-dataset"]], "Prepare data and analysis parameters": [[61, "prepare-data-and-analysis-parameters"], [67, "prepare-data-and-analysis-parameters"], [99, "prepare-data-and-analysis-parameters"]], "Extract the seed region\u2019s time course": [[61, "extract-the-seed-region-s-time-course"]], "Estimate contrasts": [[61, "estimate-contrasts"], [67, "estimate-contrasts"]], "Perform first level analysis": [[61, "perform-first-level-analysis"], [67, "perform-first-level-analysis"]], "First level analysis of a complete BIDS dataset from openneuro": [[62, "first-level-analysis-of-a-complete-bids-dataset-from-openneuro"]], "Fetch openneuro BIDS dataset": [[62, "fetch-openneuro-bids-dataset"]], "Obtain FirstLevelModel objects automatically and fit arguments": [[62, "obtain-firstlevelmodel-objects-automatically-and-fit-arguments"]], "First level model estimation (one subject)": [[62, "first-level-model-estimation-one-subject"]], "Simple statistical report of thresholded contrast": [[62, "simple-statistical-report-of-thresholded-contrast"]], "Saving model outputs to disk": [[62, "saving-model-outputs-to-disk"]], "Examples of design matrices": [[63, "examples-of-design-matrices"]], "Define parameters": [[63, "define-parameters"]], "Create design matrices": [[63, "create-design-matrices"]], "Analysis of an fMRI dataset with a Finite Impule Response (FIR) model": [[64, "analysis-of-an-fmri-dataset-with-a-finite-impule-response-fir-model"]], "Understanding parameters of the first-level model": [[65, "understanding-parameters-of-the-first-level-model"]], "Running a basic model": [[65, "running-a-basic-model"]], "A first contrast estimation and plotting": [[65, "a-first-contrast-estimation-and-plotting"]], "Changing the drift model": [[65, "changing-the-drift-model"]], "Changing the hemodynamic response model": [[65, "changing-the-hemodynamic-response-model"]], "Adding a time derivative to the design": [[65, "adding-a-time-derivative-to-the-design"]], "The noise model: ar(1), ols, or higher order ar?": [[65, "the-noise-model-ar-1-ols-or-higher-order-ar"]], "Removing confounds": [[65, "removing-confounds"]], "Volume censoring": [[65, "volume-censoring"]], "Smoothing": [[65, "smoothing"], [181, "smoothing"]], "Masking": [[65, "masking"], [166, "masking"]], "Conclusion": [[65, "conclusion"]], "Example of MRI response functions": [[66, "example-of-mri-response-functions"]], "Define stimulus parameters and response models": [[66, "define-stimulus-parameters-and-response-models"]], "Sample and plot response functions": [[66, "sample-and-plot-response-functions"]], "Example of surface-based first-level analysis": [[67, "example-of-surface-based-first-level-analysis"]], "Project the fMRI image to the surface": [[67, "project-the-fmri-image-to-the-surface"]], "Analysing the left hemisphere": [[67, "analysing-the-left-hemisphere"]], "Predicted time series and residuals": [[68, "predicted-time-series-and-residuals"]], "Import modules": [[68, "import-modules"]], "Fit model": [[68, "fit-model"]], "Calculate and plot contrast": [[68, "calculate-and-plot-contrast"]], "Extract the largest clusters": [[68, "extract-the-largest-clusters"]], "Plot predicted and actual time series for 6 most significant clusters": [[68, "plot-predicted-and-actual-time-series-for-6-most-significant-clusters"]], "Get residuals": [[68, "get-residuals"]], "Plot distribution of residuals": [[68, "plot-distribution-of-residuals"]], "Plot R-squared": [[68, "plot-r-squared"]], "Calculate and Plot F-test": [[68, "calculate-and-plot-f-test"]], "Single-subject data (two runs) in native space": [[69, "single-subject-data-two-runs-in-native-space"]], "Simple example of two-runs fMRI model fitting": [[70, "simple-example-of-two-runs-fmri-model-fitting"]], "Set up the GLM": [[70, "set-up-the-glm"]], "Initialize and run the GLM": [[70, "initialize-and-run-the-glm"]], "Compare run-specific and fixed effects contrasts": [[70, "compare-run-specific-and-fixed-effects-contrasts"]], "Compute a range of contrasts across both runs": [[70, "compute-a-range-of-contrasts-across-both-runs"]], "Generate an events.tsv file for the NeuroSpin localizer task": [[71, "generate-an-events-tsv-file-for-the-neurospin-localizer-task"]], "GLM: Second level analysis": [[73, "glm-second-level-analysis"], [112, "glm-second-level-analysis"]], "Voxel-Based Morphometry on OASIS dataset": [[74, "voxel-based-morphometry-on-oasis-dataset"]], "VBM analysis of aging": [[74, "vbm-analysis-of-aging"]], "Analyse data": [[74, "analyse-data"]], "Second-level fMRI model: true positive proportion in clusters": [[75, "second-level-fmri-model-true-positive-proportion-in-clusters"]], "Fetch dataset": [[75, "fetch-dataset"], [78, "fetch-dataset"], [79, "fetch-dataset"]], "Estimate second level model": [[75, "estimate-second-level-model"], [76, "estimate-second-level-model"], [78, "estimate-second-level-model"]], "Example of generic design in second-level models": [[76, "example-of-generic-design-in-second-level-models"]], "Example of second level design matrix": [[77, "example-of-second-level-design-matrix"]], "Create a simple experimental paradigm": [[77, "create-a-simple-experimental-paradigm"]], "Create a second level design matrix": [[77, "create-a-second-level-design-matrix"]], "Second-level fMRI model: one sample test": [[78, "second-level-fmri-model-one-sample-test"]], "Display subject t_maps": [[78, "display-subject-t-maps"]], "Second-level fMRI model: two-sample test, unpaired and paired": [[79, "second-level-fmri-model-two-sample-test-unpaired-and-paired"]], "Estimate second level models": [[79, "estimate-second-level-models"]], "Plot the results": [[79, "plot-the-results"]], "Statistical testing of a second-level analysis": [[80, "statistical-testing-of-a-second-level-analysis"]], "Prepare some images for a simple t test": [[80, "prepare-some-images-for-a-simple-t-test"]], "Perform the second level analysis": [[80, "perform-the-second-level-analysis"]], "Manipulating brain image volumes": [[82, "manipulating-brain-image-volumes"], [112, "manipulating-brain-image-volumes"]], "Visualization of affine resamplings": [[83, "visualization-of-affine-resamplings"]], "Comparing the means of 2 images": [[84, "comparing-the-means-of-2-images"]], "Breaking an atlas of labels in separated regions": [[85, "breaking-an-atlas-of-labels-in-separated-regions"]], "The original Yeo atlas": [[85, "the-original-yeo-atlas"]], "Relabeling the atlas into separated regions": [[85, "relabeling-the-atlas-into-separated-regions"]], "Different connectivity modes": [[85, "different-connectivity-modes"]], "Parameter min_size": [[85, "parameter-min-size"]], "Regions Extraction of Default Mode Networks using Smith Atlas": [[86, "regions-extraction-of-default-mode-networks-using-smith-atlas"]], "Region Extraction using a t-statistical map (3D)": [[87, "region-extraction-using-a-t-statistical-map-3d"]], "Understanding NiftiMasker and mask computation": [[88, "understanding-niftimasker-and-mask-computation"]], "Computing a mask from the background": [[88, "computing-a-mask-from-the-background"]], "Computing a mask from raw EPI data": [[88, "computing-a-mask-from-raw-epi-data"]], "Computing the mask from the MNI template": [[88, "computing-the-mask-from-the-mni-template"]], "Compute and resample a mask": [[88, "compute-and-resample-a-mask"]], "After mask computation: extracting time series": [[88, "after-mask-computation-extracting-time-series"]], "Negating an image with math_img": [[89, "negating-an-image-with-math-img"]], "Extracting signals from brain regions using the NiftiLabelsMasker": [[90, "extracting-signals-from-brain-regions-using-the-niftilabelsmasker"]], "Simple example of NiftiMasker use": [[91, "simple-example-of-niftimasker-use"]], "Resample an image to a template": [[92, "resample-an-image-to-a-template"]], "Computing a Region of Interest (ROI) mask manually": [[93, "computing-a-region-of-interest-roi-mask-manually"]], "Build a statistical test to find voxels of interest": [[93, "build-a-statistical-test-to-find-voxels-of-interest"]], "Build a mask from this statistical map (Improving the quality of the mask)": [[93, "build-a-mask-from-this-statistical-map-improving-the-quality-of-the-mask"]], "Smoothing an image": [[94, "smoothing-an-image"]], "Advanced statistical analysis of brain images": [[96, "advanced-statistical-analysis-of-brain-images"], [112, "advanced-statistical-analysis-of-brain-images"]], "Advanced decoding using scikit learn": [[97, "advanced-decoding-using-scikit-learn"]], "Performing decoding with scikit-learn": [[97, "performing-decoding-with-scikit-learn"], [164, "performing-decoding-with-scikit-learn"]], "Masking the data": [[97, "masking-the-data"]], "Cross-validation with scikit-learn": [[97, "cross-validation-with-scikit-learn"], [164, "cross-validation-with-scikit-learn"]], "Tuning cross-validation parameters": [[97, "tuning-cross-validation-parameters"]], "Measuring the chance level": [[97, "measuring-the-chance-level"], [164, "measuring-the-chance-level"]], "Dummy estimator": [[97, "dummy-estimator"]], "Permutation test": [[97, "permutation-test"]], "Decoding without a mask: Anova-SVM in scikit-lean": [[97, "decoding-without-a-mask-anova-svm-in-scikit-lean"]], "Visualize the ANOVA + SVC\u2019s discriminating weights": [[97, "visualize-the-anova-svc-s-discriminating-weights"]], "Going further with scikit-learn": [[97, "going-further-with-scikit-learn"], [164, "going-further-with-scikit-learn"]], "Changing the prediction engine": [[97, "changing-the-prediction-engine"]], "Changing the feature selection": [[97, "changing-the-feature-selection"]], "Functional connectivity predicts age group": [[98, "functional-connectivity-predicts-age-group"]], "Beta-Series Modeling for Task-Based Functional Connectivity and Decoding": [[99, "beta-series-modeling-for-task-based-functional-connectivity-and-decoding"]], "Choosing the right model for your analysis": [[99, null]], "Define the standard model": [[99, "define-the-standard-model"]], "Define the LSA model": [[99, "define-the-lsa-model"]], "Aggregate beta maps from the LSA model based on condition": [[99, "aggregate-beta-maps-from-the-lsa-model-based-on-condition"]], "Define the LSS models": [[99, "define-the-lss-models"]], "Show the design matrices for the first few trials": [[99, "show-the-design-matrices-for-the-first-few-trials"]], "Compare the three modeling approaches": [[99, "compare-the-three-modeling-approaches"]], "Applications of beta series": [[99, "applications-of-beta-series"]], "BIDS dataset first and second level analysis": [[100, "bids-dataset-first-and-second-level-analysis"]], "Fetch example BIDS dataset": [[100, "fetch-example-bids-dataset"], [107, "fetch-example-bids-dataset"]], "Obtain automatically FirstLevelModel objects and fit arguments": [[100, "obtain-automatically-firstlevelmodel-objects-and-fit-arguments"], [107, "obtain-automatically-firstlevelmodel-objects-and-fit-arguments"]], "Quick sanity check on fit arguments": [[100, "quick-sanity-check-on-fit-arguments"]], "First level model estimation": [[100, "first-level-model-estimation"]], "Second level model estimation": [[100, "second-level-model-estimation"]], "Massively univariate analysis of face vs house recognition": [[101, "massively-univariate-analysis-of-face-vs-house-recognition"]], "NeuroVault cross-study ICA maps": [[102, "neurovault-cross-study-ica-maps"]], "Get image and term data": [[102, "get-image-and-term-data"]], "Reshape and mask images": [[102, "reshape-and-mask-images"]], "Run ICA and map components to terms": [[102, "run-ica-and-map-components-to-terms"]], "Generate figures": [[102, "generate-figures"]], "Multivariate decompositions: Independent component analysis of fMRI": [[103, "multivariate-decompositions-independent-component-analysis-of-fmri"]], "Massively univariate analysis of a motor task from the Localizer dataset": [[104, "massively-univariate-analysis-of-a-motor-task-from-the-localizer-dataset"]], "Massively univariate analysis of a calculation task from the Localizer dataset": [[105, "massively-univariate-analysis-of-a-calculation-task-from-the-localizer-dataset"]], "NeuroVault meta-analysis of stop-go paradigm studies": [[106, "neurovault-meta-analysis-of-stop-go-paradigm-studies"]], "Fetch images for \u201csuccessful stop minus go\u201d-like protocols.": [[106, "fetch-images-for-successful-stop-minus-go-like-protocols"]], "Visualize the data": [[106, "visualize-the-data"]], "Compute statistics": [[106, "compute-statistics"]], "Plot the combined z maps": [[106, "plot-the-combined-z-maps"]], "Surface-based dataset first and second level analysis of a dataset": [[107, "surface-based-dataset-first-and-second-level-analysis-of-a-dataset"]], "Group study": [[107, "group-study"]], "Examples for experimental modules": [[109, "examples-for-experimental-modules"], [112, "examples-for-experimental-modules"]], "A short demo of the surface images & maskers": [[110, "a-short-demo-of-the-surface-images-maskers"]], "Connectivity with a surface atlas and SurfaceLabelsMasker": [[110, "connectivity-with-a-surface-atlas-and-surfacelabelsmasker"]], "Using the Decoder": [[110, "using-the-decoder"]], "Decoding with a scikit-learn Pipeline": [[110, "decoding-with-a-scikit-learn-pipeline"]], "Examples": [[112, "examples"], [180, null], [181, null], [181, null], [181, null], [181, null], [181, null], [181, null]], "General bibliography": [[114, "general-bibliography"]], "Advanced usage: manual pipelines and scaling up": [[115, "advanced-usage-manual-pipelines-and-scaling-up"]], "Building your own neuroimaging machine-learning pipeline": [[116, "building-your-own-neuroimaging-machine-learning-pipeline"]], "Data loading and preprocessing": [[116, "data-loading-and-preprocessing"]], "Downloading the data": [[116, "downloading-the-data"]], "Loading non image data: experiment description": [[116, "loading-non-image-data-experiment-description"]], "Masking the data: from 4D image to 2D array": [[116, "masking-the-data-from-4d-image-to-2d-array"]], "Applying a mask": [[116, "applying-a-mask"]], "Automatically computing a mask": [[116, "automatically-computing-a-mask"]], "Applying a scikit-learn machine learning method": [[116, "applying-a-scikit-learn-machine-learning-method"]], "Unmasking (inverse_transform)": [[116, "unmasking-inverse-transform"]], "Visualizing results": [[116, "visualizing-results"], [160, "visualizing-results"]], "Going further": [[116, "going-further"]], "Downloading statistical maps from the Neurovault repository": [[117, "downloading-statistical-maps-from-the-neurovault-repository"]], "Specific images or collections": [[117, "specific-images-or-collections"]], "Selection filters": [[117, "selection-filters"]], "Output": [[117, "output"]], "Neurosynth annotations": [[117, "neurosynth-annotations"]], "Examples using Neurovault": [[117, "examples-using-neurovault"]], "0.1.0": [[118, "id1"], [154, "id5070"]], "Changelog": [[118, "changelog"], [119, "changelog"], [120, "changelog"], [121, "changelog"], [127, "changelog"], [128, "changelog"], [130, "changelog"], [154, "changelog"], [154, "id4166"], [154, "id4316"], [154, "id4620"], [154, "id4771"], [154, "id4921"], [154, "id5071"], [169, "changelog"]], "0.1.1": [[119, "id1"], [154, "id4920"]], "0.1.2": [[120, "id1"], [154, "id4770"]], "0.1.3": [[121, "id1"], [154, "id4619"]], "Fixes": [[121, "fixes"], [123, "fixes"], [124, "fixes"], [124, "id2"], [125, "fixes"], [126, "fixes"], [129, "fixes"], [132, "fixes"], [133, "fixes"], [134, "fixes"], [134, "id3"], [135, "fixes"], [136, "fixes"], [138, "fixes"], [139, "fixes"], [140, "fixes"], [141, "fixes"], [142, "id4"], [142, "id9"], [142, "id13"], [143, "fixes"], [144, "fixes"], [145, "fixes"], [146, "fixes"], [147, "fixes"], [148, "fixes"], [149, "fixes"], [150, "fixes"], [151, "fixes"], [152, "fixes"], [154, "fixes"], [154, "id150"], [154, "id304"], [154, "id457"], [154, "id460"], [154, "id614"], [154, "id770"], [154, "id922"], [154, "id1076"], [154, "id1230"], [154, "id1384"], [154, "id1538"], [154, "id1692"], [154, "id1844"], [154, "id1996"], [154, "id2154"], [154, "id2160"], [154, "id2164"], [154, "id2316"], [154, "id2469"], [154, "id2630"], [154, "id2787"], [154, "id3090"], [154, "id3244"], [154, "id3396"], [154, "id3401"], [154, "id3552"], [154, "id3706"], [154, "id4162"], [154, "id4621"]], "0.1.4": [[122, "id1"], [154, "id4469"]], "Highlights": [[122, "highlights"], [134, "highlights"], [135, "highlights"], [136, "highlights"], [139, "highlights"], [139, "id4"], [139, "id8"], [154, "id2624"], [154, "id2628"], [154, "id2633"], [154, "id3088"], [154, "id3242"], [154, "id3399"], [154, "id4470"]], "0.10.0": [[123, "id1"], [154, "id611"]], "HIGHLIGHTS": [[123, "highlights"], [125, "highlights"], [126, "highlights"], [142, "highlights"], [145, "highlights"], [146, "highlights"], [147, "highlights"], [148, "highlights"], [149, "highlights"], [151, "highlights"], [154, "highlights"], [154, "id302"], [154, "id612"], [154, "id766"], [154, "id1074"], [154, "id1228"], [154, "id1382"], [154, "id1536"], [154, "id1689"], [154, "id2147"]], "NEW": [[123, "new"], [124, "new"], [125, "new"], [126, "new"], [139, "new"], [140, "new"], [141, "new"], [142, "new"], [142, "id2"], [142, "id5"], [142, "id11"], [145, "new"], [146, "new"], [147, "new"], [148, "new"], [149, "new"], [151, "new"], [154, "new"], [154, "id303"], [154, "id456"], [154, "id613"], [154, "id768"], [154, "id1075"], [154, "id1229"], [154, "id1383"], [154, "id1537"], [154, "id1690"], [154, "id2148"], [154, "id2152"], [154, "id2156"], [154, "id2162"], [154, "id2315"], [154, "id2467"], [154, "id2620"]], "Enhancements": [[123, "enhancements"], [124, "enhancements"], [124, "id3"], [125, "enhancements"], [126, "enhancements"], [127, "enhancements"], [129, "enhancements"], [133, "enhancements"], [134, "enhancements"], [134, "id4"], [135, "enhancements"], [136, "enhancements"], [137, "enhancements"], [139, "id2"], [139, "id5"], [139, "id9"], [146, "enhancements"], [147, "enhancements"], [148, "enhancements"], [149, "enhancements"], [150, "enhancements"], [151, "enhancements"], [152, "enhancements"], [154, "enhancements"], [154, "id151"], [154, "id305"], [154, "id458"], [154, "id461"], [154, "id615"], [154, "id771"], [154, "id923"], [154, "id1077"], [154, "id1231"], [154, "id1385"], [154, "id1539"], [154, "id2625"], [154, "id2629"], [154, "id2634"], [154, "id2937"], [154, "id3089"], [154, "id3245"], [154, "id3397"], [154, "id3402"], [154, "id3553"], [154, "id4161"], [154, "id4318"]], "Changes": [[123, "changes"], [124, "changes"], [124, "id4"], [125, "changes"], [126, "changes"], [129, "changes"], [131, "changes"], [132, "changes"], [133, "changes"], [134, "changes"], [134, "id2"], [135, "changes"], [136, "changes"], [137, "changes"], [138, "changes"], [139, "changes"], [139, "id3"], [139, "id6"], [139, "id10"], [140, "changes"], [142, "id3"], [142, "id8"], [142, "id12"], [144, "changes"], [145, "changes"], [147, "changes"], [148, "changes"], [149, "changes"], [150, "changes"], [151, "changes"], [152, "changes"], [154, "changes"], [154, "id152"], [154, "id306"], [154, "id459"], [154, "id462"], [154, "id616"], [154, "id772"], [154, "id924"], [154, "id1078"], [154, "id1232"], [154, "id1386"], [154, "id1693"], [154, "id1845"], [154, "id2153"], [154, "id2159"], [154, "id2163"], [154, "id2468"], [154, "id2622"], [154, "id2626"], [154, "id2631"], [154, "id2635"], [154, "id2786"], [154, "id2938"], [154, "id3091"], [154, "id3243"], [154, "id3395"], [154, "id3400"], [154, "id3554"], [154, "id3704"], [154, "id3860"], [154, "id4163"]], "0.10.1": [[124, "id1"], [154, "id455"]], "0.10.1rc1": [[124, "rc1"], [154, "rc1"]], "0.10.2": [[125, "id1"], [154, "id301"]], "0.10.3": [[126, "id1"], [154, "id149"]], "0.2.0": [[127, "id1"], [154, "id4315"]], "New features": [[127, "new-features"], [130, "new-features"], [154, "new-features"], [154, "id4317"]], "Bug fixes": [[127, "bug-fixes"], [130, "bug-fixes"], [137, "bug-fixes"], [154, "bug-fixes"], [154, "id4010"], [154, "id4319"]], "API changes summary": [[127, "api-changes-summary"], [154, "api-changes-summary"]], "Contributors": [[127, "contributors"], [129, "contributors"], [132, "contributors"], [136, "contributors"], [139, "contributors"], [139, "id7"], [139, "id11"], [140, "contributors"], [141, "contributors"], [142, "contributors"], [142, "id10"], [142, "id14"], [143, "contributors"], [144, "contributors"], [154, "contributors"], [154, "id1997"], [154, "id2155"], [154, "id2161"], [154, "id2165"], [154, "id2317"], [154, "id2470"], [154, "id2627"], [154, "id2632"], [154, "id2636"], [154, "id3092"], [154, "id3709"], [154, "id4164"], [154, "id4320"]], "0.2.1": [[128, "id1"], [154, "v0-2-1"]], "0.2.2": [[129, "id1"], [154, "id4159"]], "New": [[129, "new"], [131, "new"], [132, "new"], [132, "id3"], [154, "id3705"], [154, "id3708"], [154, "id3859"], [154, "id4160"]], "0.2.3": [[130, "id1"], [154, "id4009"]], "0.2.4": [[131, "id1"], [154, "id3858"]], "0.2.5.1": [[132, "id1"], [154, "id3703"]], "0.2.5": [[132, "id2"], [154, "id3707"]], "0.2.6": [[133, "id1"], [154, "id3551"]], "0.3.0": [[134, "id1"], [154, "id3394"]], "0.3.0 beta": [[134, "beta"], [154, "id3398"]], "0.3.1": [[135, "id1"], [154, "id3241"]], "0.4.0": [[136, "id1"], [154, "id3087"]], "0.4.1": [[137, "id1"], [154, "id2936"]], "0.4.2": [[138, "id1"], [154, "id2785"]], "0.5.0": [[139, "id1"], [154, "id2619"]], "ENHANCEMENTS": [[139, "enhancements"], [142, "enhancements"], [143, "enhancements"], [144, "enhancements"], [154, "id1843"], [154, "id1995"], [154, "id2149"], [154, "id2621"]], "0.5.0 rc": [[139, "rc"], [154, "id2623"]], "0.5.0 beta": [[139, "beta"], [154, "beta"]], "0.5.0 alpha": [[139, "alpha"], [154, "alpha"]], "0.5.1": [[140, "id1"], [154, "id2466"]], "Known Issues": [[140, "known-issues"], [154, "known-issues"]], "0.5.2": [[141, "id1"], [154, "id2314"]], "0.6.0": [[142, "id1"], [154, "id2146"]], "CHANGES": [[142, "changes"], [154, "id2150"]], "FIXES": [[142, "fixes"], [154, "id2151"]], "0.6.0rc": [[142, "rc"], [154, "rc"]], "0.6.0b0": [[142, "b0"], [154, "b0"]], "0.6.0a0": [[142, "a0"], [154, "a0"]], "0.6.1": [[143, "id1"], [154, "id1994"]], "0.6.2": [[144, "id1"], [154, "id1842"]], "0.7.0": [[145, "id1"], [154, "id1688"]], "0.7.1": [[146, "id1"], [154, "id1535"]], "0.8.0": [[147, "id1"], [154, "id1381"]], "0.8.1": [[148, "id1"], [154, "id1227"]], "0.9.0": [[149, "id1"], [154, "id1073"]], "0.9.1": [[150, "id1"], [154, "id921"]], "0.9.2": [[151, "id1"], [154, "id765"]], "0.10.4.dev": [[152, "dev"], [154, "dev"]], "What\u2019s new": [[154, "what-s-new"]], "Connectome extraction: inverse covariance for direct connections": [[155, "connectome-extraction-inverse-covariance-for-direct-connections"]], "Page summary": [[155, null], [156, null], [159, null], [160, null], [170, null], [173, null]], "Sparse inverse covariance for functional connectomes": [[155, "sparse-inverse-covariance-for-functional-connectomes"]], "Parameter selection": [[155, null]], "Full example": [[155, null], [155, null], [155, null], [156, null], [156, null]], "Exercise: computing sparse inverse covariance": [[155, null]], "Reference": [[155, null], [155, null], [155, null], [155, null], [158, null]], "Sparse inverse covariance on multiple subjects": [[155, "sparse-inverse-covariance-on-multiple-subjects"]], "Exercise: computing the correlation matrix of rest fmri": [[155, null], [156, null]], "Comparing the different approaches on simulated data": [[155, "comparing-the-different-approaches-on-simulated-data"]], "Full Example": [[155, null]], "Linking total and direct interactions at the group level": [[155, "linking-total-and-direct-interactions-at-the-group-level"]], "Exercise: computing connectivity in tangent space": [[155, null]], "Extracting times series to build a functional connectome": [[156, "extracting-times-series-to-build-a-functional-connectome"]], "Time-series from a brain parcellation or \u201cMaxProb\u201d atlas": [[156, "time-series-from-a-brain-parcellation-or-maxprob-atlas"]], "Brain parcellations": [[156, "brain-parcellations"]], "Extracting signals on a parcellation": [[156, "extracting-signals-on-a-parcellation"]], "Time-series from a probabilistic atlas": [[156, "time-series-from-a-probabilistic-atlas"]], "Probabilistic atlases": [[156, "probabilistic-atlases"]], "Extracting signals from a probabilistic atlas": [[156, "extracting-signals-from-a-probabilistic-atlas"]], "Exercise: correlation matrix of rest fMRI on probabilistic atlas": [[156, null]], "A functional connectome: a graph of interactions": [[156, "a-functional-connectome-a-graph-of-interactions"]], "A functional connectome: extracting coordinates of regions": [[156, "a-functional-connectome-extracting-coordinates-of-regions"]], "Functional connectivity and resting state": [[157, "functional-connectivity-and-resting-state"]], "Clustering to parcellate the brain in regions": [[158, "clustering-to-parcellate-the-brain-in-regions"]], "Data loading: movie-watching data": [[158, "data-loading-movie-watching-data"]], "Applying clustering": [[158, "applying-clustering"]], "Which clustering to use": [[158, null]], "Using and visualizing the resulting parcellation": [[158, "using-and-visualizing-the-resulting-parcellation"]], "Visualizing the parcellation": [[158, "visualizing-the-parcellation"]], "Compressed representation": [[158, "compressed-representation"]], "Example code": [[158, null], [166, null]], "Region Extraction for better brain parcellations": [[159, "region-extraction-for-better-brain-parcellations"]], "Fetching movie-watching based functional datasets": [[159, "fetching-movie-watching-based-functional-datasets"]], "Brain maps using Dictionary learning": [[159, "brain-maps-using-dictionary-learning"]], "Visualization of Dictionary learning maps": [[159, "visualization-of-dictionary-learning-maps"]], "Region Extraction with Dictionary learning maps": [[159, "region-extraction-with-dictionary-learning-maps"]], "Visualization of Region Extraction results": [[159, "visualization-of-region-extraction-results"]], "Computing functional connectivity matrices": [[159, "computing-functional-connectivity-matrices"]], "Visualization of functional connectivity matrices": [[159, "visualization-of-functional-connectivity-matrices"]], "Validating results": [[159, "validating-results"]], "Extracting functional brain networks: ICA and related": [[160, "extracting-functional-brain-networks-ica-and-related"]], "Multi-subject ICA: CanICA": [[160, "multi-subject-ica-canica"]], "Objective": [[160, "objective"]], "Nilearn data for examples": [[160, null]], "Fitting CanICA model with nilearn": [[160, "fitting-canica-model-with-nilearn"]], "Interpreting such components": [[160, "interpreting-such-components"]], "An alternative to ICA: Dictionary learning": [[160, "an-alternative-to-ica-dictionary-learning"]], "An introduction to decoding": [[161, "an-introduction-to-decoding"]], "Loading and preparing the data": [[161, "loading-and-preparing-the-data"]], "The Haxby 2001 experiment": [[161, "the-haxby-2001-experiment"]], "fMRI: using beta maps of a first-level analysis": [[161, null]], "Loading the data into nilearn": [[161, "loading-the-data-into-nilearn"]], "Full code example": [[161, null]], "Performing a simple decoding analysis": [[161, "performing-a-simple-decoding-analysis"]], "A few definitions": [[161, "a-few-definitions"]], "A first estimator": [[161, "a-first-estimator"]], "Decoding made easy": [[161, "decoding-made-easy"]], "Measuring prediction performance": [[161, "measuring-prediction-performance"]], "Cross-validation": [[161, "cross-validation"]], "Choosing a good cross-validation strategy": [[161, "choosing-a-good-cross-validation-strategy"]], "Choice of the prediction accuracy measure": [[161, "choice-of-the-prediction-accuracy-measure"]], "Prediction accuracy at chance using simple strategies": [[161, "prediction-accuracy-at-chance-using-simple-strategies"]], "Putting it all together": [[161, null]], "Visualizing the decoder\u2019s weights": [[161, "visualizing-the-decoder-s-weights"]], "Decoding without a mask: Anova-SVM": [[161, "decoding-without-a-mask-anova-svm"]], "Dimension reduction with feature selection": [[161, "dimension-reduction-with-feature-selection"]], "Visualizing the results": [[161, "visualizing-the-results"]], "Final script": [[161, null]], "Choosing the right predictive model for neuroimaging": [[162, "choosing-the-right-predictive-model-for-neuroimaging"]], "Predictions: regression, classification and multi-class": [[162, "predictions-regression-classification-and-multi-class"]], "Regression": [[162, "regression"]], "Classification: two classes or multi-class": [[162, "classification-two-classes-or-multi-class"]], "Different linear models": [[162, "different-linear-models"]], "Setting estimator parameters": [[162, "setting-estimator-parameters"], [164, "setting-estimator-parameters"]], "Bagging several models": [[162, "bagging-several-models"]], "FREM: fast ensembling of regularized models for robust decoding": [[163, "frem-fast-ensembling-of-regularized-models-for-robust-decoding"]], "FREM pipeline": [[163, "frem-pipeline"]], "Empirical comparisons": [[163, "empirical-comparisons"]], "Decoding performance increase on Haxby dataset": [[163, "decoding-performance-increase-on-haxby-dataset"]], "Code": [[163, null], [163, null], [180, null]], "Spatial regularization of decoding maps on mixed gambles study": [[163, "spatial-regularization-of-decoding-maps-on-mixed-gambles-study"]], "Running scikit-learn functions for more control on the analysis": [[164, "running-scikit-learn-functions-for-more-control-on-the-analysis"]], "Using scikit-learn estimators": [[164, "using-scikit-learn-estimators"]], "Decoding on simulated data": [[164, null]], "Decoding without a mask: Anova-SVM using scikit-learn": [[164, "decoding-without-a-mask-anova-svm-using-scikit-learn"]], "Using any other model in the pipeline": [[164, "using-any-other-model-in-the-pipeline"]], "Decoding and MVPA: predicting from brain images": [[165, "decoding-and-mvpa-predicting-from-brain-images"]], "Searchlight : finding voxels containing information": [[166, "searchlight-finding-voxels-containing-information"]], "Principle of the Searchlight": [[166, "principle-of-the-searchlight"]], "Further Reading": [[166, null]], "Preparing the data": [[166, "preparing-the-data"]], "Setting up the searchlight": [[166, "setting-up-the-searchlight"]], "Classifier": [[166, "classifier"]], "Score function": [[166, "score-function"]], "Cross validation": [[166, "cross-validation"]], "Sphere radius": [[166, "sphere-radius"]], "Searchlight": [[166, "id6"]], "Comparing to massively univariate analysis: F_score or SPM": [[166, "comparing-to-massively-univariate-analysis-f-score-or-spm"]], "SpaceNet: decoding with spatial structure for better maps": [[167, "spacenet-decoding-with-spatial-structure-for-better-maps"]], "The SpaceNet decoder": [[167, "the-spacenet-decoder"]], "Related example": [[167, "related-example"]], "Group-sparse covariance estimation": [[168, "group-sparse-covariance-estimation"]], "Description": [[168, "description"]], "Numerical stability": [[168, "numerical-stability"]], "Execution time": [[168, "execution-time"]], "Synthetic dataset": [[168, "synthetic-dataset"]], "Stopping criteria": [[168, "stopping-criteria"]], "Maximum number of iterations": [[168, "maximum-number-of-iterations"]], "Duality gap": [[168, "duality-gap"]], "Variation of norm of estimate": [[168, "variation-of-norm-of-estimate"]], "Initial estimate value": [[168, "initial-estimate-value"]], "Modifying the stopping criterion": [[168, "modifying-the-stopping-criterion"]], "Cross-validation algorithm": [[168, "cross-validation-algorithm"]], "Principle of cross-validation": [[168, "principle-of-cross-validation"]], "Bounds on alpha": [[168, "bounds-on-alpha"]], "Iterative grid search": [[168, "iterative-grid-search"]], "Warm restart": [[168, "warm-restart"]], "Stopping criterion": [[168, "stopping-criterion"]], "Contributing": [[169, "contributing"], [169, "id5"]], "Code of Conduct": [[169, "code-of-conduct"]], "How to get help?": [[169, "how-to-get-help"]], "How to help the project?": [[169, "how-to-help-the-project"]], "Report bugs or discuss enhancement ideas": [[169, "report-bugs-or-discuss-enhancement-ideas"]], "Answer questions": [[169, "answer-questions"]], "Review Pull Requests": [[169, "review-pull-requests"]], "Contribute code": [[169, "contribute-code"]], "How do we decide what code goes in?": [[169, "how-do-we-decide-what-code-goes-in"]], "Scope of the project": [[169, "scope-of-the-project"]], "Adding atlases and datasets": [[169, "adding-atlases-and-datasets"]], "Who makes decisions": [[169, "who-makes-decisions"]], "How to contribute to nilearn": [[169, "how-to-contribute-to-nilearn"]], "Contribution Guidelines": [[169, "contribution-guidelines"]], "PR Structure": [[169, "pr-structure"]], "Coding Style": [[169, "coding-style"]], "Guidelines for Private Functions": [[169, "guidelines-for-private-functions"]], "Guidelines for HTML and CSS": [[169, "guidelines-for-html-and-css"]], "Pre-commit": [[169, "pre-commit"]], "Tests": [[169, "tests"]], "Fixtures": [[169, "fixtures"]], "Seeding": [[169, "seeding"]], "Documentation": [[169, "documentation"]], "Setting up your environment": [[169, "setting-up-your-environment"]], "Installing": [[169, "installing"]], "Recommendation": [[169, null], [169, null]], "Building documentation": [[169, "building-documentation"]], "Additional cases": [[169, "additional-cases"]], "How to contribute an atlas": [[169, "how-to-contribute-an-atlas"]], "How to contribute a dataset fetcher": [[169, "how-to-contribute-a-dataset-fetcher"]], "Maintenance": [[169, "maintenance"], [177, "maintenance"]], "First level models": [[170, "first-level-models"]], "HRF models": [[170, "hrf-models"]], "Design matrix: event-based and time series-based": [[170, "design-matrix-event-based-and-time-series-based"]], "Event-based": [[170, "event-based"]], "Time series-based": [[170, "time-series-based"]], "Fitting a first level model": [[170, "fitting-a-first-level-model"]], "Computing contrasts": [[170, "computing-contrasts"]], "Extracting predicted time series and residuals": [[170, "extracting-predicted-time-series-and-residuals"]], "Surface-based analysis": [[170, "surface-based-analysis"]], "An introduction to GLMs in fMRI statistical analysis": [[171, "an-introduction-to-glms-in-fmri-statistical-analysis"]], "A primer on BOLD-fMRI data analysis": [[171, "a-primer-on-bold-fmri-data-analysis"]], "What is fMRI ?": [[171, "what-is-fmri"]], "fMRI data modelling": [[171, "fmri-data-modelling"]], "fMRI statistical analysis": [[171, "fmri-statistical-analysis"]], "Multiple Comparisons": [[171, "multiple-comparisons"]], "Analyzing fMRI using GLMs": [[172, "analyzing-fmri-using-glms"]], "Second level models": [[173, "second-level-models"]], "Fitting a second level model": [[173, "fitting-a-second-level-model"]], "Thresholding statistical maps": [[173, "thresholding-statistical-maps"]], "Multiple comparisons correction": [[173, "multiple-comparisons-correction"]], "Voxel based morphometry": [[173, "voxel-based-morphometry"]], "Glossary": [[174, "glossary"]], "Nilearn": [[175, "nilearn"]], "Featured examples": [[175, "featured-examples"]], "Introduction": [[176, "introduction"]], "What is nilearn?": [[176, "what-is-nilearn"]], "Using nilearn for the first time": [[176, "using-nilearn-for-the-first-time"]], "First steps with nilearn": [[176, "first-steps-with-nilearn"]], "Learning with the API references": [[176, "learning-with-the-api-references"]], "Learning with examples": [[176, "learning-with-examples"]], "Finding help": [[176, "finding-help"]], "Machine learning applications to Neuroimaging": [[176, "machine-learning-applications-to-neuroimaging"]], "Project Organization": [[177, "project-organization"]], "Issues": [[177, "issues"]], "Labels": [[177, "labels"]], "Closing policy": [[177, "closing-policy"]], "Pull Requests": [[177, "pull-requests"]], "Using tox": [[177, "using-tox"]], "How to make a release?": [[177, "how-to-make-a-release"]], "Prepare code for the release": [[177, "prepare-code-for-the-release"]], "Prepare the release": [[177, "prepare-the-release"]], "Build of stable docs": [[177, "build-of-stable-docs"]], "Build the distributions and upload them to Pypi": [[177, "build-the-distributions-and-upload-them-to-pypi"]], "Build and deploy the documentation manually": [[177, "build-and-deploy-the-documentation-manually"]], "Post-release": [[177, "post-release"]], "Manipulation brain volumes with nilearn": [[178, "manipulation-brain-volumes-with-nilearn"]], "Input and output: neuroimaging data representation": [[179, "input-and-output-neuroimaging-data-representation"]], "Inputing data: file names or image objects": [[179, "inputing-data-file-names-or-image-objects"]], "File names and objects, 3D and 4D images": [[179, "file-names-and-objects-3d-and-4d-images"]], "File name matching: \u201cglobbing\u201d and user path expansion": [[179, "file-name-matching-globbing-and-user-path-expansion"]], "Python globbing": [[179, null]], "Fetching open datasets from Internet": [[179, "fetching-open-datasets-from-internet"]], "nilearn_data: Where is the downloaded data stored?": [[179, null]], "Understanding neuroimaging data": [[179, "understanding-neuroimaging-data"]], "Nifti and Analyze data": [[179, "nifti-and-analyze-data"]], "Dataset formatting: data shape": [[179, null]], "Niimg-like objects": [[179, "niimg-like-objects"]], "Image affines": [[179, null]], "Decreasing memory used when loading Nifti images": [[179, null]], "Text files: phenotype or behavior": [[179, "text-files-phenotype-or-behavior"]], "Reading CSV with pandas": [[179, null]], "Manipulating images: resampling, smoothing, masking, ROIs\u2026": [[180, "manipulating-images-resampling-smoothing-masking-rois"]], "Functions for data preparation and image transformation": [[180, "functions-for-data-preparation-and-image-transformation"]], "Resampling images": [[180, "resampling-images"]], "Resampling one image to match another one": [[180, "resampling-one-image-to-match-another-one"]], "Example": [[180, null]], "Resampling to a specific target affine, shape, or resolution": [[180, "resampling-to-a-specific-target-affine-shape-or-resolution"]], "Special case: resampling to a given voxel size": [[180, null]], "Accessing individual volumes in 4D images": [[180, "accessing-individual-volumes-in-4d-images"]], "Computing and applying spatial masks": [[180, "computing-and-applying-spatial-masks"]], "Masking data: from 4D Nifti images to 2D data arrays": [[180, "masking-data-from-4d-nifti-images-to-2d-data-arrays"]], "Image operations: creating a ROI mask manually": [[180, "image-operations-creating-a-roi-mask-manually"]], "From neuroimaging volumes to data matrices: the masker objects": [[181, "from-neuroimaging-volumes-to-data-matrices-the-masker-objects"]], "The concept of \u201cmasker\u201d objects": [[181, "the-concept-of-masker-objects"]], "Advanced: Design philosophy of \u201cMaskers\u201d": [[181, null]], "NiftiMasker: applying a mask to load time-series": [[181, "niftimasker-applying-a-mask-to-load-time-series"]], "Advanced: scikit-learn Pipelines": [[181, null]], "Custom data loading: loading only the first 100 time points": [[181, "custom-data-loading-loading-only-the-first-100-time-points"]], "Controlling how the mask is computed from the data": [[181, "controlling-how-the-mask-is-computed-from-the-data"]], "Visualizing the computed mask": [[181, "visualizing-the-computed-mask"]], "Different masking strategies": [[181, "different-masking-strategies"]], "Extra mask parameters: opening, cutoff\u2026": [[181, "extra-mask-parameters-opening-cutoff"]], "Common data preparation steps: smoothing, filtering, resampling": [[181, "common-data-preparation-steps-smoothing-filtering-resampling"]], "`dtype` argument": [[181, null]], "Temporal Filtering and confound removal": [[181, "temporal-filtering-and-confound-removal"]], "Exercise": [[181, null]], "Resampling: resizing and changing resolutions of images": [[181, "resampling-resizing-and-changing-resolutions-of-images"]], "Inverse transform: unmasking data": [[181, "inverse-transform-unmasking-data"]], "Examples to better understand the NiftiMasker": [[181, null]], "Extraction of signals from regions: NiftiLabelsMasker, NiftiMapsMasker": [[181, "extraction-of-signals-from-regions-niftilabelsmasker-niftimapsmasker"]], "Regions definition": [[181, "regions-definition"]], "NiftiLabelsMasker Usage": [[181, "niftilabelsmasker-usage"]], "NiftiMapsMasker Usage": [[181, "niftimapsmasker-usage"]], "Extraction of signals from regions for multiple subjects: MultiNiftiMasker, MultiNiftiLabelsMasker, MultiNiftiMapsMasker": [[181, "extraction-of-signals-from-regions-for-multiple-subjects-multiniftimasker-multiniftilabelsmasker-multiniftimapsmasker"]], "MultiNiftiMasker Usage": [[181, "multiniftimasker-usage"]], "MultiNiftiLabelsMasker Usage": [[181, "multiniftilabelsmasker-usage"]], "MultiNiftiMapsMasker Usage": [[181, "multiniftimapsmasker-usage"]], "Extraction of signals from seeds: NiftiSpheresMasker": [[181, "extraction-of-signals-from-seeds-niftispheresmasker"]], "nilearn.connectome: Functional Connectivity": [[182, "module-nilearn.connectome"]], "nilearn.datasets: Automatic Dataset Fetching": [[183, "module-nilearn.datasets"]], "Templates": [[183, "templates"]], "Templates descriptions": [[183, "templates-descriptions"]], "Atlases": [[183, "atlases"]], "Atlases descriptions": [[183, "atlases-descriptions"]], "Preprocessed datasets": [[183, "preprocessed-datasets"]], "Datasets descriptions": [[183, "datasets-descriptions"]], "Statistical maps/derivatives": [[183, "statistical-maps-derivatives"]], "Statistical maps/derivatives descriptions": [[183, "statistical-maps-derivatives-descriptions"]], "General functions": [[183, "general-functions"]], "General functions descriptions": [[183, "general-functions-descriptions"]], "nilearn.decoding: Decoding": [[184, "module-nilearn.decoding"]], "nilearn.decomposition: Multivariate Decompositions": [[185, "module-nilearn.decomposition"]], "ABIDE PCP dataset": [[186, "abide-pcp-dataset"]], "Access": [[186, "access"], [187, "access"], [188, "access"], [189, "access"], [190, "access"], [191, "access"], [193, "access"], [194, "access"], [195, "access"], [196, "access"], [197, "access"], [198, "access"], [199, "access"], [200, "access"], [201, "access"], [202, "access"], [203, "access"], [204, "access"], [205, "access"], [206, "access"], [207, "access"], [208, "access"], [209, "access"], [210, "access"], [211, "access"], [212, "access"], [213, "access"], [215, "access"], [216, "access"], [217, "access"], [218, "access"], [219, "access"], [220, "access"], [221, "access"], [222, "access"], [223, "access"], [224, "access"], [225, "access"]], "Notes": [[186, "notes"], [187, "notes"], [188, "notes"], [189, "notes"], [190, "notes"], [192, "notes"], [193, "notes"], [194, "notes"], [195, "notes"], [196, "notes"], [197, "notes"], [198, "notes"], [199, "notes"], [200, "notes"], [201, "notes"], [202, "notes"], [203, "notes"], [204, "notes"], [205, "notes"], [206, "notes"], [207, "notes"], [208, "notes"], [209, "notes"], [210, "notes"], [211, "notes"], [212, "notes"], [213, "notes"], [214, "notes"], [215, "notes"], [216, "notes"], [217, "notes"], [218, "notes"], [219, "notes"], [220, "notes"], [221, "notes"], [222, "notes"], [223, "notes"], [224, "notes"], [225, "notes"]], "Content": [[186, "content"], [187, "content"], [188, "content"], [189, "content"], [190, "content"], [191, "content"], [193, "content"], [194, "content"], [195, "content"], [196, "content"], [197, "content"], [198, "content"], [199, "content"], [200, "content"], [201, "content"], [202, "content"], [203, "content"], [204, "content"], [205, "content"], [206, "content"], [207, "content"], [208, "content"], [209, "content"], [210, "content"], [211, "content"], [212, "content"], [213, "content"], [214, "content"], [215, "content"], [216, "content"], [217, "content"], [218, "content"], [219, "content"], [220, "content"], [221, "content"], [222, "content"], [223, "content"], [224, "content"], [225, "content"]], "License": [[186, "license"], [188, "license"], [189, "license"], [190, "license"], [191, "license"], [193, "license"], [194, "license"], [195, "license"], [196, "license"], [197, "license"], [198, "license"], [199, "license"], [200, "license"], [201, "license"], [202, "license"], [203, "license"], [204, "license"], [205, "license"], [206, "license"], [207, "license"], [208, "license"], [209, "license"], [210, "license"], [211, "license"], [212, "license"], [213, "license"], [214, "license"], [215, "license"], [216, "license"], [217, "license"], [218, "license"], [219, "license"], [220, "license"], [221, "license"], [222, "license"], [223, "license"], [224, "license"], [225, "license"]], "MegaTrawls Network Matrices HCP": [[187, "megatrawls-network-matrices-hcp"]], "Disclaimer": [[187, "disclaimer"]], "AAL atlas": [[188, "aal-atlas"]], "ADHD dataset": [[189, "adhd-dataset"]], "Allen 2011 atlas": [[190, "allen-2011-atlas"]], "BASC multiscale atlas": [[191, "basc-multiscale-atlas"]], "Preprocessing": [[191, "preprocessing"]], "Bootstrap Analysis of Stable Clusters": [[191, "bootstrap-analysis-of-stable-clusters"]], "BIDS language localizer": [[192, "bids-language-localizer"]], "Brainomics Localizer": [[193, "brainomics-localizer"]], "Craddock 2012 atlas": [[194, "craddock-2012-atlas"]], "Destrieux atlas": [[195, "destrieux-atlas"]], "development fMRI dataset": [[196, "development-fmri-dataset"]], "DiFuMo atlas": [[197, "difumo-atlas"]], "Dosenbach 2010 atlas": [[198, "dosenbach-2010-atlas"]], "fiac first level dataset": [[199, "fiac-first-level-dataset"]], "fsaverage template": [[200, "fsaverage-template"]], "fsaverage3 template": [[201, "fsaverage3-template"]], "fsaverage4 template": [[202, "fsaverage4-template"]], "fsaverage5 template": [[203, "fsaverage5-template"]], "fsaverage6 template": [[204, "fsaverage6-template"]], "Harvard Oxford atlas": [[205, "harvard-oxford-atlas"]], "Haxby dataset": [[206, "haxby-dataset"]], "ICBM 152 template": [[207, "icbm-152-template"]], "Juelich atlas": [[208, "juelich-atlas"]], "language localizer demo dataset": [[209, "language-localizer-demo-dataset"]], "localizer first level dataset": [[210, "localizer-first-level-dataset"]], "Mixed gambles statistical maps": [[211, "mixed-gambles-statistical-maps"]], "Miyawaki 2008 dataset": [[212, "miyawaki-2008-dataset"]], "MSDL atlas": [[213, "msdl-atlas"]], "Neurovault statistical maps": [[214, "neurovault-statistical-maps"]], "NKI enhanced surface dataset": [[215, "nki-enhanced-surface-dataset"]], "OASIS volume based morphometry maps": [[216, "oasis-volume-based-morphometry-maps"]], "Pauli 2007 atlas": [[217, "pauli-2007-atlas"]], "Power 2011 atlas": [[218, "power-2011-atlas"]], "Schaefer 2018 atlas": [[219, "schaefer-2018-atlas"]], "Seitzman 2018 atlas": [[220, "seitzman-2018-atlas"]], "Smith 2009 atlas": [[221, "smith-2009-atlas"]], "SPM auditory dataset": [[222, "spm-auditory-dataset"]], "SPM multimodal dataset": [[223, "spm-multimodal-dataset"]], "Talairach atlas": [[224, "talairach-atlas"]], "Yeo 2011 atlas": [[225, "yeo-2011-atlas"]], "nilearn.experimental: Experimental Modules": [[226, "module-nilearn.experimental"]], "nilearn.experimental.surface": [[226, "module-nilearn.experimental.surface"]], "nilearn.connectome.ConnectivityMeasure": [[227, "nilearn-connectome-connectivitymeasure"]], "Examples using nilearn.connectome.ConnectivityMeasure": [[227, "examples-using-nilearn-connectome-connectivitymeasure"]], "nilearn.connectome.GroupSparseCovariance": [[228, "nilearn-connectome-groupsparsecovariance"]], "nilearn.connectome.GroupSparseCovarianceCV": [[229, "nilearn-connectome-groupsparsecovariancecv"]], "Examples using nilearn.connectome.GroupSparseCovarianceCV": [[229, "examples-using-nilearn-connectome-groupsparsecovariancecv"]], "nilearn.connectome.cov_to_corr": [[230, "nilearn-connectome-cov-to-corr"]], "nilearn.connectome.group_sparse_covariance": [[231, "nilearn-connectome-group-sparse-covariance"]], "nilearn.connectome.prec_to_partial": [[232, "nilearn-connectome-prec-to-partial"]], "nilearn.connectome.sym_matrix_to_vec": [[233, "nilearn-connectome-sym-matrix-to-vec"]], "nilearn.connectome.vec_to_sym_matrix": [[234, "nilearn-connectome-vec-to-sym-matrix"]], "nilearn.datasets.fetch_abide_pcp": [[235, "nilearn-datasets-fetch-abide-pcp"]], "nilearn.datasets.fetch_adhd": [[236, "nilearn-datasets-fetch-adhd"]], "Examples using nilearn.datasets.fetch_adhd": [[236, "examples-using-nilearn-datasets-fetch-adhd"]], "nilearn.datasets.fetch_atlas_aal": [[237, "nilearn-datasets-fetch-atlas-aal"]], "nilearn.datasets.fetch_atlas_allen_2011": [[238, "nilearn-datasets-fetch-atlas-allen-2011"]], "Examples using nilearn.datasets.fetch_atlas_allen_2011": [[238, "examples-using-nilearn-datasets-fetch-atlas-allen-2011"]], "nilearn.datasets.fetch_atlas_basc_multiscale_2015": [[239, "nilearn-datasets-fetch-atlas-basc-multiscale-2015"]], "Examples using nilearn.datasets.fetch_atlas_basc_multiscale_2015": [[239, "examples-using-nilearn-datasets-fetch-atlas-basc-multiscale-2015"]], "nilearn.datasets.fetch_atlas_craddock_2012": [[240, "nilearn-datasets-fetch-atlas-craddock-2012"]], "nilearn.datasets.fetch_atlas_destrieux_2009": [[241, "nilearn-datasets-fetch-atlas-destrieux-2009"]], "Examples using nilearn.datasets.fetch_atlas_destrieux_2009": [[241, "examples-using-nilearn-datasets-fetch-atlas-destrieux-2009"]], "nilearn.datasets.fetch_atlas_difumo": [[242, "nilearn-datasets-fetch-atlas-difumo"]], "Examples using nilearn.datasets.fetch_atlas_difumo": [[242, "examples-using-nilearn-datasets-fetch-atlas-difumo"]], "nilearn.datasets.fetch_atlas_harvard_oxford": [[243, "nilearn-datasets-fetch-atlas-harvard-oxford"]], "Examples using nilearn.datasets.fetch_atlas_harvard_oxford": [[243, "examples-using-nilearn-datasets-fetch-atlas-harvard-oxford"]], "nilearn.datasets.fetch_atlas_juelich": [[244, "nilearn-datasets-fetch-atlas-juelich"]], "Examples using nilearn.datasets.fetch_atlas_juelich": [[244, "examples-using-nilearn-datasets-fetch-atlas-juelich"]], "nilearn.datasets.fetch_atlas_msdl": [[245, "nilearn-datasets-fetch-atlas-msdl"]], "Examples using nilearn.datasets.fetch_atlas_msdl": [[245, "examples-using-nilearn-datasets-fetch-atlas-msdl"]], "nilearn.datasets.fetch_atlas_pauli_2017": [[246, "nilearn-datasets-fetch-atlas-pauli-2017"]], "nilearn.datasets.fetch_atlas_schaefer_2018": [[247, "nilearn-datasets-fetch-atlas-schaefer-2018"]], "nilearn.datasets.fetch_atlas_smith_2009": [[248, "nilearn-datasets-fetch-atlas-smith-2009"]], "Examples using nilearn.datasets.fetch_atlas_smith_2009": [[248, "examples-using-nilearn-datasets-fetch-atlas-smith-2009"]], "nilearn.datasets.fetch_atlas_surf_destrieux": [[249, "nilearn-datasets-fetch-atlas-surf-destrieux"]], "Examples using nilearn.datasets.fetch_atlas_surf_destrieux": [[249, "examples-using-nilearn-datasets-fetch-atlas-surf-destrieux"]], "nilearn.datasets.fetch_atlas_talairach": [[250, "nilearn-datasets-fetch-atlas-talairach"]], "nilearn.datasets.fetch_atlas_yeo_2011": [[251, "nilearn-datasets-fetch-atlas-yeo-2011"]], "Examples using nilearn.datasets.fetch_atlas_yeo_2011": [[251, "examples-using-nilearn-datasets-fetch-atlas-yeo-2011"]], "nilearn.datasets.fetch_bids_langloc_dataset": [[252, "nilearn-datasets-fetch-bids-langloc-dataset"]], "nilearn.datasets.fetch_coords_dosenbach_2010": [[253, "nilearn-datasets-fetch-coords-dosenbach-2010"]], "Examples using nilearn.datasets.fetch_coords_dosenbach_2010": [[253, "examples-using-nilearn-datasets-fetch-coords-dosenbach-2010"]], "nilearn.datasets.fetch_coords_power_2011": [[254, "nilearn-datasets-fetch-coords-power-2011"]], "Examples using nilearn.datasets.fetch_coords_power_2011": [[254, "examples-using-nilearn-datasets-fetch-coords-power-2011"]], "nilearn.datasets.fetch_coords_seitzman_2018": [[255, "nilearn-datasets-fetch-coords-seitzman-2018"]], "nilearn.datasets.fetch_development_fmri": [[256, "nilearn-datasets-fetch-development-fmri"]], "Examples using nilearn.datasets.fetch_development_fmri": [[256, "examples-using-nilearn-datasets-fetch-development-fmri"]], "nilearn.datasets.fetch_ds000030_urls": [[257, "nilearn-datasets-fetch-ds000030-urls"]], "Examples using nilearn.datasets.fetch_ds000030_urls": [[257, "examples-using-nilearn-datasets-fetch-ds000030-urls"]], "nilearn.datasets.fetch_fiac_first_level": [[258, "nilearn-datasets-fetch-fiac-first-level"]], "Examples using nilearn.datasets.fetch_fiac_first_level": [[258, "examples-using-nilearn-datasets-fetch-fiac-first-level"]], "nilearn.datasets.fetch_haxby": [[259, "nilearn-datasets-fetch-haxby"]], "Examples using nilearn.datasets.fetch_haxby": [[259, "examples-using-nilearn-datasets-fetch-haxby"]], "nilearn.datasets.fetch_icbm152_2009": [[260, "nilearn-datasets-fetch-icbm152-2009"]], "Examples using nilearn.datasets.fetch_icbm152_2009": [[260, "examples-using-nilearn-datasets-fetch-icbm152-2009"]], "nilearn.datasets.fetch_icbm152_brain_gm_mask": [[261, "nilearn-datasets-fetch-icbm152-brain-gm-mask"]], "Examples using nilearn.datasets.fetch_icbm152_brain_gm_mask": [[261, "examples-using-nilearn-datasets-fetch-icbm152-brain-gm-mask"]], "nilearn.datasets.fetch_language_localizer_demo_dataset": [[262, "nilearn-datasets-fetch-language-localizer-demo-dataset"]], "Examples using nilearn.datasets.fetch_language_localizer_demo_dataset": [[262, "examples-using-nilearn-datasets-fetch-language-localizer-demo-dataset"]], "nilearn.datasets.fetch_localizer_button_task": [[263, "nilearn-datasets-fetch-localizer-button-task"]], "Examples using nilearn.datasets.fetch_localizer_button_task": [[263, "examples-using-nilearn-datasets-fetch-localizer-button-task"]], "nilearn.datasets.fetch_localizer_calculation_task": [[264, "nilearn-datasets-fetch-localizer-calculation-task"]], "Examples using nilearn.datasets.fetch_localizer_calculation_task": [[264, "examples-using-nilearn-datasets-fetch-localizer-calculation-task"]], "nilearn.datasets.fetch_localizer_contrasts": [[265, "nilearn-datasets-fetch-localizer-contrasts"]], "Examples using nilearn.datasets.fetch_localizer_contrasts": [[265, "examples-using-nilearn-datasets-fetch-localizer-contrasts"]], "nilearn.datasets.fetch_localizer_first_level": [[266, "nilearn-datasets-fetch-localizer-first-level"]], "Examples using nilearn.datasets.fetch_localizer_first_level": [[266, "examples-using-nilearn-datasets-fetch-localizer-first-level"]], "nilearn.datasets.fetch_megatrawls_netmats": [[267, "nilearn-datasets-fetch-megatrawls-netmats"]], "Examples using nilearn.datasets.fetch_megatrawls_netmats": [[267, "examples-using-nilearn-datasets-fetch-megatrawls-netmats"]], "nilearn.datasets.fetch_mixed_gambles": [[268, "nilearn-datasets-fetch-mixed-gambles"]], "Examples using nilearn.datasets.fetch_mixed_gambles": [[268, "examples-using-nilearn-datasets-fetch-mixed-gambles"]], "nilearn.datasets.fetch_miyawaki2008": [[269, "nilearn-datasets-fetch-miyawaki2008"]], "Examples using nilearn.datasets.fetch_miyawaki2008": [[269, "examples-using-nilearn-datasets-fetch-miyawaki2008"]], "nilearn.datasets.fetch_neurovault": [[270, "nilearn-datasets-fetch-neurovault"]], "Examples using nilearn.datasets.fetch_neurovault": [[270, "examples-using-nilearn-datasets-fetch-neurovault"]], "nilearn.datasets.fetch_neurovault_auditory_computation_task": [[271, "nilearn-datasets-fetch-neurovault-auditory-computation-task"]], "Examples using nilearn.datasets.fetch_neurovault_auditory_computation_task": [[271, "examples-using-nilearn-datasets-fetch-neurovault-auditory-computation-task"]], "nilearn.datasets.fetch_neurovault_ids": [[272, "nilearn-datasets-fetch-neurovault-ids"]], "Examples using nilearn.datasets.fetch_neurovault_ids": [[272, "examples-using-nilearn-datasets-fetch-neurovault-ids"]], "nilearn.datasets.fetch_neurovault_motor_task": [[273, "nilearn-datasets-fetch-neurovault-motor-task"]], "Examples using nilearn.datasets.fetch_neurovault_motor_task": [[273, "examples-using-nilearn-datasets-fetch-neurovault-motor-task"]], "nilearn.datasets.fetch_oasis_vbm": [[274, "nilearn-datasets-fetch-oasis-vbm"]], "Examples using nilearn.datasets.fetch_oasis_vbm": [[274, "examples-using-nilearn-datasets-fetch-oasis-vbm"]], "nilearn.datasets.fetch_openneuro_dataset": [[275, "nilearn-datasets-fetch-openneuro-dataset"]], "Examples using nilearn.datasets.fetch_openneuro_dataset": [[275, "examples-using-nilearn-datasets-fetch-openneuro-dataset"]], "nilearn.datasets.fetch_openneuro_dataset_index": [[276, "nilearn-datasets-fetch-openneuro-dataset-index"]], "nilearn.datasets.fetch_spm_auditory": [[277, "nilearn-datasets-fetch-spm-auditory"]], "Examples using nilearn.datasets.fetch_spm_auditory": [[277, "examples-using-nilearn-datasets-fetch-spm-auditory"]], "nilearn.datasets.fetch_spm_multimodal_fmri": [[278, "nilearn-datasets-fetch-spm-multimodal-fmri"]], "Examples using nilearn.datasets.fetch_spm_multimodal_fmri": [[278, "examples-using-nilearn-datasets-fetch-spm-multimodal-fmri"]], "nilearn.datasets.fetch_surf_fsaverage": [[279, "nilearn-datasets-fetch-surf-fsaverage"]], "Examples using nilearn.datasets.fetch_surf_fsaverage": [[279, "examples-using-nilearn-datasets-fetch-surf-fsaverage"]], "nilearn.datasets.fetch_surf_nki_enhanced": [[280, "nilearn-datasets-fetch-surf-nki-enhanced"]], "Examples using nilearn.datasets.fetch_surf_nki_enhanced": [[280, "examples-using-nilearn-datasets-fetch-surf-nki-enhanced"]], "nilearn.datasets.get_data_dirs": [[281, "nilearn-datasets-get-data-dirs"]], "Examples using nilearn.datasets.get_data_dirs": [[281, "examples-using-nilearn-datasets-get-data-dirs"]], "nilearn.datasets.load_mni152_brain_mask": [[282, "nilearn-datasets-load-mni152-brain-mask"]], "Examples using nilearn.datasets.load_mni152_brain_mask": [[282, "examples-using-nilearn-datasets-load-mni152-brain-mask"]], "nilearn.datasets.load_mni152_gm_mask": [[283, "nilearn-datasets-load-mni152-gm-mask"]], "nilearn.datasets.load_mni152_gm_template": [[284, "nilearn-datasets-load-mni152-gm-template"]], "nilearn.datasets.load_mni152_template": [[285, "nilearn-datasets-load-mni152-template"]], "Examples using nilearn.datasets.load_mni152_template": [[285, "examples-using-nilearn-datasets-load-mni152-template"]], "nilearn.datasets.load_mni152_wm_mask": [[286, "nilearn-datasets-load-mni152-wm-mask"]], "nilearn.datasets.load_mni152_wm_template": [[287, "nilearn-datasets-load-mni152-wm-template"]], "nilearn.datasets.load_sample_motor_activation_image": [[288, "nilearn-datasets-load-sample-motor-activation-image"]], "Examples using nilearn.datasets.load_sample_motor_activation_image": [[288, "examples-using-nilearn-datasets-load-sample-motor-activation-image"]], "nilearn.datasets.patch_openneuro_dataset": [[289, "nilearn-datasets-patch-openneuro-dataset"]], "nilearn.datasets.select_from_index": [[290, "nilearn-datasets-select-from-index"]], "Examples using nilearn.datasets.select_from_index": [[290, "examples-using-nilearn-datasets-select-from-index"]], "nilearn.decoding.Decoder": [[291, "nilearn-decoding-decoder"]], "Examples using nilearn.decoding.Decoder": [[291, "examples-using-nilearn-decoding-decoder"]], "nilearn.decoding.DecoderRegressor": [[292, "nilearn-decoding-decoderregressor"]], "Examples using nilearn.decoding.DecoderRegressor": [[292, "examples-using-nilearn-decoding-decoderregressor"]], "nilearn.decoding.FREMClassifier": [[293, "nilearn-decoding-fremclassifier"]], "Examples using nilearn.decoding.FREMClassifier": [[293, "examples-using-nilearn-decoding-fremclassifier"]], "nilearn.decoding.FREMRegressor": [[294, "nilearn-decoding-fremregressor"]], "Examples using nilearn.decoding.FREMRegressor": [[294, "examples-using-nilearn-decoding-fremregressor"]], "nilearn.decoding.SearchLight": [[295, "nilearn-decoding-searchlight"]], "Examples using nilearn.decoding.SearchLight": [[295, "examples-using-nilearn-decoding-searchlight"]], "nilearn.decoding.SpaceNetClassifier": [[296, "nilearn-decoding-spacenetclassifier"]], "nilearn.decoding.SpaceNetRegressor": [[297, "nilearn-decoding-spacenetregressor"]], "Examples using nilearn.decoding.SpaceNetRegressor": [[297, "examples-using-nilearn-decoding-spacenetregressor"]], "nilearn.decomposition.CanICA": [[298, "nilearn-decomposition-canica"]], "Examples using nilearn.decomposition.CanICA": [[298, "examples-using-nilearn-decomposition-canica"]], "nilearn.decomposition.DictLearning": [[299, "nilearn-decomposition-dictlearning"]], "Examples using nilearn.decomposition.DictLearning": [[299, "examples-using-nilearn-decomposition-dictlearning"]], "nilearn.experimental.surface.FileMesh": [[300, "nilearn-experimental-surface-filemesh"]], "nilearn.experimental.surface.InMemoryMesh": [[301, "nilearn-experimental-surface-inmemorymesh"]], "nilearn.experimental.surface.Mesh": [[302, "nilearn-experimental-surface-mesh"]], "nilearn.experimental.surface.PolyMesh": [[303, "nilearn-experimental-surface-polymesh"]], "Examples using nilearn.experimental.surface.PolyMesh": [[303, "examples-using-nilearn-experimental-surface-polymesh"]], "nilearn.experimental.surface.SurfaceImage": [[304, "nilearn-experimental-surface-surfaceimage"]], "Examples using nilearn.experimental.surface.SurfaceImage": [[304, "examples-using-nilearn-experimental-surface-surfaceimage"]], "nilearn.experimental.surface.SurfaceLabelsMasker": [[305, "nilearn-experimental-surface-surfacelabelsmasker"]], "Examples using nilearn.experimental.surface.SurfaceLabelsMasker": [[305, "examples-using-nilearn-experimental-surface-surfacelabelsmasker"]], "nilearn.experimental.surface.SurfaceMasker": [[306, "nilearn-experimental-surface-surfacemasker"]], "Examples using nilearn.experimental.surface.SurfaceMasker": [[306, "examples-using-nilearn-experimental-surface-surfacemasker"]], "nilearn.experimental.surface.fetch_destrieux": [[307, "nilearn-experimental-surface-fetch-destrieux"]], "Examples using nilearn.experimental.surface.fetch_destrieux": [[307, "examples-using-nilearn-experimental-surface-fetch-destrieux"]], "nilearn.experimental.surface.fetch_nki": [[308, "nilearn-experimental-surface-fetch-nki"]], "Examples using nilearn.experimental.surface.fetch_nki": [[308, "examples-using-nilearn-experimental-surface-fetch-nki"]], "nilearn.experimental.surface.load_fsaverage": [[309, "nilearn-experimental-surface-load-fsaverage"]], "nilearn.glm.ARModel": [[310, "nilearn-glm-armodel"]], "nilearn.glm.Contrast": [[311, "nilearn-glm-contrast"]], "Examples using nilearn.glm.Contrast": [[311, "examples-using-nilearn-glm-contrast"]], "nilearn.glm.FContrastResults": [[312, "nilearn-glm-fcontrastresults"]], "nilearn.glm.LikelihoodModelResults": [[313, "nilearn-glm-likelihoodmodelresults"]], "nilearn.glm.OLSModel": [[314, "nilearn-glm-olsmodel"]], "nilearn.glm.RegressionResults": [[315, "nilearn-glm-regressionresults"]], "nilearn.glm.SimpleRegressionResults": [[316, "nilearn-glm-simpleregressionresults"]], "nilearn.glm.TContrastResults": [[317, "nilearn-glm-tcontrastresults"]], "nilearn.glm.cluster_level_inference": [[318, "nilearn-glm-cluster-level-inference"]], "Examples using nilearn.glm.cluster_level_inference": [[318, "examples-using-nilearn-glm-cluster-level-inference"]], "nilearn.glm.compute_contrast": [[319, "nilearn-glm-compute-contrast"]], "Examples using nilearn.glm.compute_contrast": [[319, "examples-using-nilearn-glm-compute-contrast"]], "nilearn.glm.compute_fixed_effects": [[320, "nilearn-glm-compute-fixed-effects"]], "Examples using nilearn.glm.compute_fixed_effects": [[320, "examples-using-nilearn-glm-compute-fixed-effects"]], "nilearn.glm.expression_to_contrast_vector": [[321, "nilearn-glm-expression-to-contrast-vector"]], "nilearn.glm.fdr_threshold": [[322, "nilearn-glm-fdr-threshold"]], "nilearn.glm.first_level.FirstLevelModel": [[323, "nilearn-glm-first-level-firstlevelmodel"]], "Examples using nilearn.glm.first_level.FirstLevelModel": [[323, "examples-using-nilearn-glm-first-level-firstlevelmodel"]], "nilearn.glm.first_level.check_design_matrix": [[324, "nilearn-glm-first-level-check-design-matrix"]], "nilearn.glm.first_level.compute_regressor": [[325, "nilearn-glm-first-level-compute-regressor"]], "Examples using nilearn.glm.first_level.compute_regressor": [[325, "examples-using-nilearn-glm-first-level-compute-regressor"]], "nilearn.glm.first_level.first_level_from_bids": [[326, "nilearn-glm-first-level-first-level-from-bids"]], "Examples using nilearn.glm.first_level.first_level_from_bids": [[326, "examples-using-nilearn-glm-first-level-first-level-from-bids"]], "nilearn.glm.first_level.glover_dispersion_derivative": [[327, "nilearn-glm-first-level-glover-dispersion-derivative"]], "nilearn.glm.first_level.glover_hrf": [[328, "nilearn-glm-first-level-glover-hrf"]], "nilearn.glm.first_level.glover_time_derivative": [[329, "nilearn-glm-first-level-glover-time-derivative"]], "nilearn.glm.first_level.make_first_level_design_matrix": [[330, "nilearn-glm-first-level-make-first-level-design-matrix"]], "Examples using nilearn.glm.first_level.make_first_level_design_matrix": [[330, "examples-using-nilearn-glm-first-level-make-first-level-design-matrix"]], "nilearn.glm.first_level.mean_scaling": [[331, "nilearn-glm-first-level-mean-scaling"]], "nilearn.glm.first_level.run_glm": [[332, "nilearn-glm-first-level-run-glm"]], "Examples using nilearn.glm.first_level.run_glm": [[332, "examples-using-nilearn-glm-first-level-run-glm"]], "nilearn.glm.first_level.spm_dispersion_derivative": [[333, "nilearn-glm-first-level-spm-dispersion-derivative"]], "nilearn.glm.first_level.spm_hrf": [[334, "nilearn-glm-first-level-spm-hrf"]], "nilearn.glm.first_level.spm_time_derivative": [[335, "nilearn-glm-first-level-spm-time-derivative"]], "nilearn.glm.second_level.SecondLevelModel": [[336, "nilearn-glm-second-level-secondlevelmodel"]], "Examples using nilearn.glm.second_level.SecondLevelModel": [[336, "examples-using-nilearn-glm-second-level-secondlevelmodel"]], "nilearn.glm.second_level.make_second_level_design_matrix": [[337, "nilearn-glm-second-level-make-second-level-design-matrix"]], "Examples using nilearn.glm.second_level.make_second_level_design_matrix": [[337, "examples-using-nilearn-glm-second-level-make-second-level-design-matrix"]], "nilearn.glm.second_level.non_parametric_inference": [[338, "nilearn-glm-second-level-non-parametric-inference"]], "Examples using nilearn.glm.second_level.non_parametric_inference": [[338, "examples-using-nilearn-glm-second-level-non-parametric-inference"]], "nilearn.glm.threshold_stats_img": [[339, "nilearn-glm-threshold-stats-img"]], "Examples using nilearn.glm.threshold_stats_img": [[339, "examples-using-nilearn-glm-threshold-stats-img"]], "nilearn.image.binarize_img": [[340, "nilearn-image-binarize-img"]], "nilearn.image.clean_img": [[341, "nilearn-image-clean-img"]], "Examples using nilearn.image.clean_img": [[341, "examples-using-nilearn-image-clean-img"]], "nilearn.image.concat_imgs": [[342, "nilearn-image-concat-imgs"]], "Examples using nilearn.image.concat_imgs": [[342, "examples-using-nilearn-image-concat-imgs"]], "nilearn.image.coord_transform": [[343, "nilearn-image-coord-transform"]], "Examples using nilearn.image.coord_transform": [[343, "examples-using-nilearn-image-coord-transform"]], "nilearn.image.copy_img": [[344, "nilearn-image-copy-img"]], "nilearn.image.crop_img": [[345, "nilearn-image-crop-img"]], "nilearn.image.get_data": [[346, "nilearn-image-get-data"]], "Examples using nilearn.image.get_data": [[346, "examples-using-nilearn-image-get-data"]], "nilearn.image.high_variance_confounds": [[347, "nilearn-image-high-variance-confounds"]], "Examples using nilearn.image.high_variance_confounds": [[347, "examples-using-nilearn-image-high-variance-confounds"]], "nilearn.image.index_img": [[348, "nilearn-image-index-img"]], "Examples using nilearn.image.index_img": [[348, "examples-using-nilearn-image-index-img"]], "nilearn.image.iter_img": [[349, "nilearn-image-iter-img"]], "Examples using nilearn.image.iter_img": [[349, "examples-using-nilearn-image-iter-img"]], "nilearn.image.largest_connected_component_img": [[350, "nilearn-image-largest-connected-component-img"]], "nilearn.image.load_img": [[351, "nilearn-image-load-img"]], "Examples using nilearn.image.load_img": [[351, "examples-using-nilearn-image-load-img"]], "nilearn.image.math_img": [[352, "nilearn-image-math-img"]], "Examples using nilearn.image.math_img": [[352, "examples-using-nilearn-image-math-img"]], "nilearn.image.mean_img": [[353, "nilearn-image-mean-img"]], "Examples using nilearn.image.mean_img": [[353, "examples-using-nilearn-image-mean-img"]], "nilearn.image.new_img_like": [[354, "nilearn-image-new-img-like"]], "Examples using nilearn.image.new_img_like": [[354, "examples-using-nilearn-image-new-img-like"]], "nilearn.image.reorder_img": [[355, "nilearn-image-reorder-img"]], "nilearn.image.resample_img": [[356, "nilearn-image-resample-img"]], "Examples using nilearn.image.resample_img": [[356, "examples-using-nilearn-image-resample-img"]], "nilearn.image.resample_to_img": [[357, "nilearn-image-resample-to-img"]], "Examples using nilearn.image.resample_to_img": [[357, "examples-using-nilearn-image-resample-to-img"]], "nilearn.image.smooth_img": [[358, "nilearn-image-smooth-img"]], "Examples using nilearn.image.smooth_img": [[358, "examples-using-nilearn-image-smooth-img"]], "nilearn.image.swap_img_hemispheres": [[359, "nilearn-image-swap-img-hemispheres"]], "nilearn.image.threshold_img": [[360, "nilearn-image-threshold-img"]], "Examples using nilearn.image.threshold_img": [[360, "examples-using-nilearn-image-threshold-img"]], "nilearn.interfaces.bids.get_bids_files": [[361, "nilearn-interfaces-bids-get-bids-files"]], "nilearn.interfaces.bids.parse_bids_filename": [[362, "nilearn-interfaces-bids-parse-bids-filename"]], "nilearn.interfaces.bids.save_glm_to_bids": [[363, "nilearn-interfaces-bids-save-glm-to-bids"]], "Examples using nilearn.interfaces.bids.save_glm_to_bids": [[363, "examples-using-nilearn-interfaces-bids-save-glm-to-bids"]], "nilearn.interfaces.fmriprep.load_confounds": [[364, "nilearn-interfaces-fmriprep-load-confounds"]], "Examples using nilearn.interfaces.fmriprep.load_confounds": [[364, "examples-using-nilearn-interfaces-fmriprep-load-confounds"]], "nilearn.interfaces.fmriprep.load_confounds_strategy": [[365, "nilearn-interfaces-fmriprep-load-confounds-strategy"]], "Examples using nilearn.interfaces.fmriprep.load_confounds_strategy": [[365, "examples-using-nilearn-interfaces-fmriprep-load-confounds-strategy"]], "nilearn.interfaces.fsl.get_design_from_fslmat": [[366, "nilearn-interfaces-fsl-get-design-from-fslmat"]], "Examples using nilearn.interfaces.fsl.get_design_from_fslmat": [[366, "examples-using-nilearn-interfaces-fsl-get-design-from-fslmat"]], "nilearn.maskers.BaseMasker": [[367, "nilearn-maskers-basemasker"]], "Examples using nilearn.maskers.BaseMasker": [[367, "examples-using-nilearn-maskers-basemasker"]], "nilearn.maskers.MultiNiftiLabelsMasker": [[368, "nilearn-maskers-multiniftilabelsmasker"]], "Examples using nilearn.maskers.MultiNiftiLabelsMasker": [[368, "examples-using-nilearn-maskers-multiniftilabelsmasker"]], "nilearn.maskers.MultiNiftiMapsMasker": [[369, "nilearn-maskers-multiniftimapsmasker"]], "Examples using nilearn.maskers.MultiNiftiMapsMasker": [[369, "examples-using-nilearn-maskers-multiniftimapsmasker"]], "nilearn.maskers.MultiNiftiMasker": [[370, "nilearn-maskers-multiniftimasker"]], "Examples using nilearn.maskers.MultiNiftiMasker": [[370, "examples-using-nilearn-maskers-multiniftimasker"]], "nilearn.maskers.NiftiLabelsMasker": [[371, "nilearn-maskers-niftilabelsmasker"]], "Examples using nilearn.maskers.NiftiLabelsMasker": [[371, "examples-using-nilearn-maskers-niftilabelsmasker"]], "nilearn.maskers.NiftiMapsMasker": [[372, "nilearn-maskers-niftimapsmasker"]], "Examples using nilearn.maskers.NiftiMapsMasker": [[372, "examples-using-nilearn-maskers-niftimapsmasker"]], "nilearn.maskers.NiftiMasker": [[373, "nilearn-maskers-niftimasker"]], "Examples using nilearn.maskers.NiftiMasker": [[373, "examples-using-nilearn-maskers-niftimasker"]], "nilearn.maskers.NiftiSpheresMasker": [[374, "nilearn-maskers-niftispheresmasker"]], "Examples using nilearn.maskers.NiftiSpheresMasker": [[374, "examples-using-nilearn-maskers-niftispheresmasker"]], "nilearn.masking.apply_mask": [[375, "nilearn-masking-apply-mask"]], "Examples using nilearn.masking.apply_mask": [[375, "examples-using-nilearn-masking-apply-mask"]], "nilearn.masking.compute_background_mask": [[376, "nilearn-masking-compute-background-mask"]], "nilearn.masking.compute_brain_mask": [[377, "nilearn-masking-compute-brain-mask"]], "nilearn.masking.compute_epi_mask": [[378, "nilearn-masking-compute-epi-mask"]], "Examples using nilearn.masking.compute_epi_mask": [[378, "examples-using-nilearn-masking-compute-epi-mask"]], "nilearn.masking.compute_multi_background_mask": [[379, "nilearn-masking-compute-multi-background-mask"]], "nilearn.masking.compute_multi_brain_mask": [[380, "nilearn-masking-compute-multi-brain-mask"]], "nilearn.masking.compute_multi_epi_mask": [[381, "nilearn-masking-compute-multi-epi-mask"]], "nilearn.masking.intersect_masks": [[382, "nilearn-masking-intersect-masks"]], "nilearn.masking.unmask": [[383, "nilearn-masking-unmask"]], "Examples using nilearn.masking.unmask": [[383, "examples-using-nilearn-masking-unmask"]], "nilearn.mass_univariate.permuted_ols": [[384, "nilearn-mass-univariate-permuted-ols"]], "Examples using nilearn.mass_univariate.permuted_ols": [[384, "examples-using-nilearn-mass-univariate-permuted-ols"]], "nilearn.plotting.displays.BaseAxes": [[385, "nilearn-plotting-displays-baseaxes"]], "nilearn.plotting.displays.BaseSlicer": [[386, "nilearn-plotting-displays-baseslicer"]], "nilearn.plotting.displays.CutAxes": [[387, "nilearn-plotting-displays-cutaxes"]], "nilearn.plotting.displays.GlassBrainAxes": [[388, "nilearn-plotting-displays-glassbrainaxes"]], "nilearn.plotting.displays.LProjector": [[389, "nilearn-plotting-displays-lprojector"]], "Examples using nilearn.plotting.displays.LProjector": [[389, "examples-using-nilearn-plotting-displays-lprojector"]], "nilearn.plotting.displays.LRProjector": [[390, "nilearn-plotting-displays-lrprojector"]], "Examples using nilearn.plotting.displays.LRProjector": [[390, "examples-using-nilearn-plotting-displays-lrprojector"]], "nilearn.plotting.displays.LYRProjector": [[391, "nilearn-plotting-displays-lyrprojector"]], "Examples using nilearn.plotting.displays.LYRProjector": [[391, "examples-using-nilearn-plotting-displays-lyrprojector"]], "nilearn.plotting.displays.LYRZProjector": [[392, "nilearn-plotting-displays-lyrzprojector"]], "Examples using nilearn.plotting.displays.LYRZProjector": [[392, "examples-using-nilearn-plotting-displays-lyrzprojector"]], "nilearn.plotting.displays.LZRProjector": [[393, "nilearn-plotting-displays-lzrprojector"]], "Examples using nilearn.plotting.displays.LZRProjector": [[393, "examples-using-nilearn-plotting-displays-lzrprojector"]], "nilearn.plotting.displays.LZRYProjector": [[394, "nilearn-plotting-displays-lzryprojector"]], "Examples using nilearn.plotting.displays.LZRYProjector": [[394, "examples-using-nilearn-plotting-displays-lzryprojector"]], "nilearn.plotting.displays.MosaicSlicer": [[395, "nilearn-plotting-displays-mosaicslicer"]], "Examples using nilearn.plotting.displays.MosaicSlicer": [[395, "examples-using-nilearn-plotting-displays-mosaicslicer"]], "nilearn.plotting.displays.OrthoProjector": [[396, "nilearn-plotting-displays-orthoprojector"]], "Examples using nilearn.plotting.displays.OrthoProjector": [[396, "examples-using-nilearn-plotting-displays-orthoprojector"]], "nilearn.plotting.displays.OrthoSlicer": [[397, "nilearn-plotting-displays-orthoslicer"]], "Examples using nilearn.plotting.displays.OrthoSlicer": [[397, "examples-using-nilearn-plotting-displays-orthoslicer"]], "nilearn.plotting.displays.PlotlySurfaceFigure": [[398, "nilearn-plotting-displays-plotlysurfacefigure"]], "Examples using nilearn.plotting.displays.PlotlySurfaceFigure": [[398, "examples-using-nilearn-plotting-displays-plotlysurfacefigure"]], "nilearn.plotting.displays.RProjector": [[399, "nilearn-plotting-displays-rprojector"]], "Examples using nilearn.plotting.displays.RProjector": [[399, "examples-using-nilearn-plotting-displays-rprojector"]], "nilearn.plotting.displays.TiledSlicer": [[400, "nilearn-plotting-displays-tiledslicer"]], "Examples using nilearn.plotting.displays.TiledSlicer": [[400, "examples-using-nilearn-plotting-displays-tiledslicer"]], "nilearn.plotting.displays.XProjector": [[401, "nilearn-plotting-displays-xprojector"]], "Examples using nilearn.plotting.displays.XProjector": [[401, "examples-using-nilearn-plotting-displays-xprojector"]], "nilearn.plotting.displays.XSlicer": [[402, "nilearn-plotting-displays-xslicer"]], "Examples using nilearn.plotting.displays.XSlicer": [[402, "examples-using-nilearn-plotting-displays-xslicer"]], "nilearn.plotting.displays.XZProjector": [[403, "nilearn-plotting-displays-xzprojector"]], "Examples using nilearn.plotting.displays.XZProjector": [[403, "examples-using-nilearn-plotting-displays-xzprojector"]], "nilearn.plotting.displays.XZSlicer": [[404, "nilearn-plotting-displays-xzslicer"]], "Examples using nilearn.plotting.displays.XZSlicer": [[404, "examples-using-nilearn-plotting-displays-xzslicer"]], "nilearn.plotting.displays.YProjector": [[405, "nilearn-plotting-displays-yprojector"]], "Examples using nilearn.plotting.displays.YProjector": [[405, "examples-using-nilearn-plotting-displays-yprojector"]], "nilearn.plotting.displays.YSlicer": [[406, "nilearn-plotting-displays-yslicer"]], "Examples using nilearn.plotting.displays.YSlicer": [[406, "examples-using-nilearn-plotting-displays-yslicer"]], "nilearn.plotting.displays.YXProjector": [[407, "nilearn-plotting-displays-yxprojector"]], "Examples using nilearn.plotting.displays.YXProjector": [[407, "examples-using-nilearn-plotting-displays-yxprojector"]], "nilearn.plotting.displays.YXSlicer": [[408, "nilearn-plotting-displays-yxslicer"]], "Examples using nilearn.plotting.displays.YXSlicer": [[408, "examples-using-nilearn-plotting-displays-yxslicer"]], "nilearn.plotting.displays.YZProjector": [[409, "nilearn-plotting-displays-yzprojector"]], "Examples using nilearn.plotting.displays.YZProjector": [[409, "examples-using-nilearn-plotting-displays-yzprojector"]], "nilearn.plotting.displays.YZSlicer": [[410, "nilearn-plotting-displays-yzslicer"]], "Examples using nilearn.plotting.displays.YZSlicer": [[410, "examples-using-nilearn-plotting-displays-yzslicer"]], "nilearn.plotting.displays.ZProjector": [[411, "nilearn-plotting-displays-zprojector"]], "Examples using nilearn.plotting.displays.ZProjector": [[411, "examples-using-nilearn-plotting-displays-zprojector"]], "nilearn.plotting.displays.ZSlicer": [[412, "nilearn-plotting-displays-zslicer"]], "Examples using nilearn.plotting.displays.ZSlicer": [[412, "examples-using-nilearn-plotting-displays-zslicer"]], "nilearn.plotting.displays.get_projector": [[413, "nilearn-plotting-displays-get-projector"]], "nilearn.plotting.displays.get_slicer": [[414, "nilearn-plotting-displays-get-slicer"]], "nilearn.plotting.find_cut_slices": [[415, "nilearn-plotting-find-cut-slices"]], "nilearn.plotting.find_parcellation_cut_coords": [[416, "nilearn-plotting-find-parcellation-cut-coords"]], "Examples using nilearn.plotting.find_parcellation_cut_coords": [[416, "examples-using-nilearn-plotting-find-parcellation-cut-coords"]], "nilearn.plotting.find_probabilistic_atlas_cut_coords": [[417, "nilearn-plotting-find-probabilistic-atlas-cut-coords"]], "Examples using nilearn.plotting.find_probabilistic_atlas_cut_coords": [[417, "examples-using-nilearn-plotting-find-probabilistic-atlas-cut-coords"]], "nilearn.plotting.find_xyz_cut_coords": [[418, "nilearn-plotting-find-xyz-cut-coords"]], "Examples using nilearn.plotting.find_xyz_cut_coords": [[418, "examples-using-nilearn-plotting-find-xyz-cut-coords"]], "nilearn.plotting.plot_anat": [[419, "nilearn-plotting-plot-anat"]], "Examples using nilearn.plotting.plot_anat": [[419, "examples-using-nilearn-plotting-plot-anat"]], "nilearn.plotting.plot_carpet": [[420, "nilearn-plotting-plot-carpet"]], "Examples using nilearn.plotting.plot_carpet": [[420, "examples-using-nilearn-plotting-plot-carpet"]], "nilearn.plotting.plot_connectome": [[421, "nilearn-plotting-plot-connectome"]], "Examples using nilearn.plotting.plot_connectome": [[421, "examples-using-nilearn-plotting-plot-connectome"]], "nilearn.plotting.plot_contrast_matrix": [[422, "nilearn-plotting-plot-contrast-matrix"]], "Examples using nilearn.plotting.plot_contrast_matrix": [[422, "examples-using-nilearn-plotting-plot-contrast-matrix"]], "nilearn.plotting.plot_design_matrix": [[423, "nilearn-plotting-plot-design-matrix"]], "Examples using nilearn.plotting.plot_design_matrix": [[423, "examples-using-nilearn-plotting-plot-design-matrix"]], "nilearn.plotting.plot_epi": [[424, "nilearn-plotting-plot-epi"]], "Examples using nilearn.plotting.plot_epi": [[424, "examples-using-nilearn-plotting-plot-epi"]], "nilearn.plotting.plot_event": [[425, "nilearn-plotting-plot-event"]], "Examples using nilearn.plotting.plot_event": [[425, "examples-using-nilearn-plotting-plot-event"]], "nilearn.plotting.plot_glass_brain": [[426, "nilearn-plotting-plot-glass-brain"]], "Examples using nilearn.plotting.plot_glass_brain": [[426, "examples-using-nilearn-plotting-plot-glass-brain"]], "nilearn.plotting.plot_img": [[427, "nilearn-plotting-plot-img"]], "Examples using nilearn.plotting.plot_img": [[427, "examples-using-nilearn-plotting-plot-img"]], "nilearn.plotting.plot_img_comparison": [[428, "nilearn-plotting-plot-img-comparison"]], "Examples using nilearn.plotting.plot_img_comparison": [[428, "examples-using-nilearn-plotting-plot-img-comparison"]], "nilearn.plotting.plot_img_on_surf": [[429, "nilearn-plotting-plot-img-on-surf"]], "Examples using nilearn.plotting.plot_img_on_surf": [[429, "examples-using-nilearn-plotting-plot-img-on-surf"]], "nilearn.plotting.plot_markers": [[430, "nilearn-plotting-plot-markers"]], "Examples using nilearn.plotting.plot_markers": [[430, "examples-using-nilearn-plotting-plot-markers"]], "nilearn.plotting.plot_matrix": [[431, "nilearn-plotting-plot-matrix"]], "Examples using nilearn.plotting.plot_matrix": [[431, "examples-using-nilearn-plotting-plot-matrix"]], "nilearn.plotting.plot_prob_atlas": [[432, "nilearn-plotting-plot-prob-atlas"]], "Examples using nilearn.plotting.plot_prob_atlas": [[432, "examples-using-nilearn-plotting-plot-prob-atlas"]], "nilearn.plotting.plot_roi": [[433, "nilearn-plotting-plot-roi"]], "Examples using nilearn.plotting.plot_roi": [[433, "examples-using-nilearn-plotting-plot-roi"]], "nilearn.plotting.plot_stat_map": [[434, "nilearn-plotting-plot-stat-map"]], "Examples using nilearn.plotting.plot_stat_map": [[434, "examples-using-nilearn-plotting-plot-stat-map"]], "nilearn.plotting.plot_surf": [[435, "nilearn-plotting-plot-surf"]], "Examples using nilearn.plotting.plot_surf": [[435, "examples-using-nilearn-plotting-plot-surf"]], "nilearn.plotting.plot_surf_contours": [[436, "nilearn-plotting-plot-surf-contours"]], "Examples using nilearn.plotting.plot_surf_contours": [[436, "examples-using-nilearn-plotting-plot-surf-contours"]], "nilearn.plotting.plot_surf_roi": [[437, "nilearn-plotting-plot-surf-roi"]], "Examples using nilearn.plotting.plot_surf_roi": [[437, "examples-using-nilearn-plotting-plot-surf-roi"]], "nilearn.plotting.plot_surf_stat_map": [[438, "nilearn-plotting-plot-surf-stat-map"]], "Examples using nilearn.plotting.plot_surf_stat_map": [[438, "examples-using-nilearn-plotting-plot-surf-stat-map"]], "nilearn.plotting.show": [[439, "nilearn-plotting-show"]], "Examples using nilearn.plotting.show": [[439, "examples-using-nilearn-plotting-show"]], "nilearn.plotting.view_connectome": [[440, "nilearn-plotting-view-connectome"]], "Examples using nilearn.plotting.view_connectome": [[440, "examples-using-nilearn-plotting-view-connectome"]], "nilearn.plotting.view_img": [[441, "nilearn-plotting-view-img"]], "Examples using nilearn.plotting.view_img": [[441, "examples-using-nilearn-plotting-view-img"]], "nilearn.plotting.view_img_on_surf": [[442, "nilearn-plotting-view-img-on-surf"]], "Examples using nilearn.plotting.view_img_on_surf": [[442, "examples-using-nilearn-plotting-view-img-on-surf"]], "nilearn.plotting.view_markers": [[443, "nilearn-plotting-view-markers"]], "nilearn.plotting.view_surf": [[444, "nilearn-plotting-view-surf"]], "Examples using nilearn.plotting.view_surf": [[444, "examples-using-nilearn-plotting-view-surf"]], "nilearn.regions.HierarchicalKMeans": [[445, "nilearn-regions-hierarchicalkmeans"]], "nilearn.regions.Parcellations": [[446, "nilearn-regions-parcellations"]], "Examples using nilearn.regions.Parcellations": [[446, "examples-using-nilearn-regions-parcellations"]], "nilearn.regions.ReNA": [[447, "nilearn-regions-rena"]], "nilearn.regions.RegionExtractor": [[448, "nilearn-regions-regionextractor"]], "Examples using nilearn.regions.RegionExtractor": [[448, "examples-using-nilearn-regions-regionextractor"]], "nilearn.regions.connected_label_regions": [[449, "nilearn-regions-connected-label-regions"]], "Examples using nilearn.regions.connected_label_regions": [[449, "examples-using-nilearn-regions-connected-label-regions"]], "nilearn.regions.connected_regions": [[450, "nilearn-regions-connected-regions"]], "Examples using nilearn.regions.connected_regions": [[450, "examples-using-nilearn-regions-connected-regions"]], "nilearn.regions.img_to_signals_labels": [[451, "nilearn-regions-img-to-signals-labels"]], "nilearn.regions.img_to_signals_maps": [[452, "nilearn-regions-img-to-signals-maps"]], "nilearn.regions.recursive_neighbor_agglomeration": [[453, "nilearn-regions-recursive-neighbor-agglomeration"]], "nilearn.regions.signals_to_img_labels": [[454, "nilearn-regions-signals-to-img-labels"]], "nilearn.regions.signals_to_img_maps": [[455, "nilearn-regions-signals-to-img-maps"]], "nilearn.reporting.HTMLReport": [[456, "nilearn-reporting-htmlreport"]], "Examples using nilearn.reporting.HTMLReport": [[456, "examples-using-nilearn-reporting-htmlreport"]], "nilearn.reporting.get_clusters_table": [[457, "nilearn-reporting-get-clusters-table"]], "Examples using nilearn.reporting.get_clusters_table": [[457, "examples-using-nilearn-reporting-get-clusters-table"]], "nilearn.reporting.make_glm_report": [[458, "nilearn-reporting-make-glm-report"]], "Examples using nilearn.reporting.make_glm_report": [[458, "examples-using-nilearn-reporting-make-glm-report"]], "nilearn.signal.butterworth": [[459, "nilearn-signal-butterworth"]], "nilearn.signal.clean": [[460, "nilearn-signal-clean"]], "nilearn.signal.high_variance_confounds": [[461, "nilearn-signal-high-variance-confounds"]], "nilearn.surface.load_surf_data": [[462, "nilearn-surface-load-surf-data"]], "Examples using nilearn.surface.load_surf_data": [[462, "examples-using-nilearn-surface-load-surf-data"]], "nilearn.surface.load_surf_mesh": [[463, "nilearn-surface-load-surf-mesh"]], "Examples using nilearn.surface.load_surf_mesh": [[463, "examples-using-nilearn-surface-load-surf-mesh"]], "nilearn.surface.vol_to_surf": [[464, "nilearn-surface-vol-to-surf"]], "Examples using nilearn.surface.vol_to_surf": [[464, "examples-using-nilearn-surface-vol-to-surf"]], "Examples of GLM reports": [[465, "examples-of-glm-reports"]], "First level report": [[465, "first-level-report"]], "ADHD": [[465, "adhd"]], "BIDS features": [[465, "bids-features"]], "FIAC": [[465, "fiac"]], "Second level report": [[465, "second-level-report"]], "Examples masker reports": [[466, "examples-masker-reports"]], "Nifti masker": [[466, "nifti-masker"]], "Nifti labels masker": [[466, "nifti-labels-masker"]], "Nifti maps masker": [[466, "nifti-maps-masker"]], "Nifti sphere masker": [[466, "nifti-sphere-masker"]], "nilearn.glm: Generalized Linear Models": [[467, "module-nilearn.glm"]], "nilearn.glm.first_level": [[467, "module-nilearn.glm.first_level"]], "nilearn.glm.second_level": [[467, "module-nilearn.glm.second_level"]], "nilearn.image: Image Processing and Resampling Utilities": [[468, "module-nilearn.image"]], "API References": [[469, "api-references"]], "nilearn.interfaces: Loading components from interfaces": [[470, "module-nilearn.interfaces"]], "nilearn.interfaces.bids": [[470, "module-nilearn.interfaces.bids"]], "nilearn.interfaces.fmriprep": [[470, "module-nilearn.interfaces.fmriprep"]], "nilearn.interfaces.fsl": [[470, "module-nilearn.interfaces.fsl"]], "nilearn.maskers: Extracting Signals from Brain Images": [[471, "module-nilearn.maskers"]], "nilearn.masking: Data Masking Utilities": [[472, "module-nilearn.masking"]], "nilearn.mass_univariate: Mass-Univariate Analysis": [[473, "module-nilearn.mass_univariate"]], "nilearn.plotting: Plotting Brain Data": [[474, "module-nilearn.plotting"]], "nilearn.plotting.displays: Interacting with figures": [[474, "module-nilearn.plotting.displays"]], "nilearn.regions: Operating on Regions": [[475, "module-nilearn.regions"]], "nilearn.reporting: Reporting Functions": [[476, "module-nilearn.reporting"]], "nilearn.signal: Preprocessing Time Series": [[477, "module-nilearn.signal"]], "nilearn.surface: Manipulating Surface Data": [[478, "module-nilearn.surface"]], "Plotting brain images": [[479, "plotting-brain-images"]], "Code examples": [[479, null]], "Different plotting functions": [[479, "different-plotting-functions"]], "Different display modes": [[479, "different-display-modes"]], "Available Colormaps": [[479, "available-colormaps"]], "Adding overlays, edges, contours, contour fillings, markers, scale bar": [[479, "adding-overlays-edges-contours-contour-fillings-markers-scale-bar"]], "Displaying or saving to an image file": [[479, "displaying-or-saving-to-an-image-file"]], "Surface plotting": [[479, "surface-plotting"]], "Interactive plots": [[479, "interactive-plots"]], "3D Plots of statistical maps or atlases on the cortical surface": [[479, "d-plots-of-statistical-maps-or-atlases-on-the-cortical-surface"]], "view_img_on_surf: Surface plot using a 3D statistical map": [[479, "view-img-on-surf-surface-plot-using-a-3d-statistical-map"]], "view_surf: Surface plot using a surface map and a cortical mesh": [[479, "view-surf-surface-plot-using-a-surface-map-and-a-cortical-mesh"]], "plot_surf_stat_map: Surface plot using a surface map and a cortical mesh": [[479, "plot-surf-stat-map-surface-plot-using-a-surface-map-and-a-cortical-mesh"]], "3D Plots of connectomes": [[479, "d-plots-of-connectomes"]], "3D Plots of markers": [[479, "d-plots-of-markers"]], "Interactive visualization of statistical map slices": [[479, "interactive-visualization-of-statistical-map-slices"]], "Quickstart": [[480, "quickstart"]], "nilearn": [[480, "nilearn"]], "Important links": [[480, "important-links"]], "Install": [[480, "install"]], "Latest release": [[480, "latest-release"]], "Development version": [[480, "development-version"]], "Check installation": [[480, "check-installation"]], "Drop-in Hours": [[480, "drop-in-hours"]], "Dependencies": [[480, "dependencies"]], "Development": [[480, "development"]], "User guide": [[482, "user-guide"]], "Table of contents": [[482, "table-of-contents"]]}, "indexentries": {"anova": [[174, "term-ANOVA"]], "auc": [[174, "term-AUC"]], "bids": [[174, "term-BIDS"]], "bold": [[174, "term-BOLD"]], "beta": [[174, "term-Beta"]], "canica": [[174, "term-CanICA"]], "closing": [[174, "term-Closing"]], "decoding": [[174, "term-Decoding"]], "deterministic atlas": [[174, "term-Deterministic-atlas"]], "dictionary learning": [[174, "term-Dictionary-learning"]], "dilation": [[174, "term-Dilation"]], "eeg": [[174, "term-EEG"]], "epi": [[174, "term-EPI"]], "erosion": [[174, "term-Erosion"]], "fdr correction": [[174, "term-FDR-correction"]], "fir": [[174, "term-FIR"]], "fpr correction": [[174, "term-FPR-correction"]], "frem": [[174, "term-FREM"]], "fwer correction": [[174, "term-FWER-correction"]], "fwhm": [[174, "term-FWHM"]], "glm": [[174, "term-GLM"]], "hrf": [[174, "term-HRF"]], "ica": [[174, "term-ICA"]], "meg": [[174, "term-MEG"]], "mni": [[174, "term-MNI"]], "mvpa": [[174, "term-MVPA"]], "neurovault": [[174, "term-Neurovault"]], "opening": [[174, "term-Opening"]], "parameter estimate": [[174, "term-Parameter-estimate"]], "probabilistic atlas": [[174, "term-Probabilistic-atlas"]], "roc": [[174, "term-ROC"]], "rena": [[174, "term-ReNA"]], "snr": [[174, "term-SNR"]], "spm": [[174, "term-SPM"]], "svm": [[174, "term-SVM"]], "searchlight": [[174, "term-Searchlight"]], "spacenet": [[174, "term-SpaceNet"]], "tfce": [[174, "term-TFCE"]], "tr": [[174, "term-TR"]], "unsupervised learning": [[174, "term-Unsupervised-learning"]], "vbm": [[174, "term-VBM"]], "ward clustering": [[174, "term-Ward-clustering"]], "classification": [[174, "term-classification"]], "contrast": [[174, "term-contrast"]], "fmri": [[174, "term-fMRI"]], "fmriprep": [[174, "term-fMRIPrep"]], "faces": [[174, "term-faces"]], "functional connectivity": [[174, "term-functional-connectivity"]], "functional connectome": [[174, "term-functional-connectome"]], "mesh": [[174, "term-mesh"]], "parcellation": [[174, "term-parcellation"]], "predictive modelling": [[174, "term-predictive-modelling"]], "regression": [[174, "term-regression"]], "resting-state": [[174, "term-resting-state"]], "supervised learning": [[174, "term-supervised-learning"]], "vertex": [[174, "term-vertex"]], "voxel": [[174, "term-voxel"]], "module": [[182, "module-nilearn.connectome"], [183, "module-nilearn.datasets"], [184, "module-nilearn.decoding"], [185, "module-nilearn.decomposition"], [226, "module-nilearn.experimental"], [226, "module-nilearn.experimental.surface"], [467, "module-nilearn.glm"], [467, "module-nilearn.glm.first_level"], [467, "module-nilearn.glm.second_level"], [468, "module-nilearn.image"], [470, "module-nilearn.interfaces"], [470, "module-nilearn.interfaces.bids"], [470, "module-nilearn.interfaces.fmriprep"], [470, "module-nilearn.interfaces.fsl"], [471, "module-nilearn.maskers"], [472, "module-nilearn.masking"], [473, "module-nilearn.mass_univariate"], [474, "module-nilearn.plotting"], [474, "module-nilearn.plotting.displays"], [475, "module-nilearn.regions"], [476, "module-nilearn.reporting"], [477, "module-nilearn.signal"], [478, "module-nilearn.surface"]], "nilearn.connectome": [[182, "module-nilearn.connectome"]], "nilearn.datasets": [[183, "module-nilearn.datasets"]], "nilearn.decoding": [[184, "module-nilearn.decoding"]], "nilearn.decomposition": [[185, "module-nilearn.decomposition"]], "nilearn.experimental": [[226, "module-nilearn.experimental"]], "nilearn.experimental.surface": [[226, "module-nilearn.experimental.surface"]], "connectivitymeasure (class in nilearn.connectome)": [[227, "nilearn.connectome.ConnectivityMeasure"]], "__init__() (nilearn.connectome.connectivitymeasure method)": [[227, "nilearn.connectome.ConnectivityMeasure.__init__"]], "fit() (nilearn.connectome.connectivitymeasure method)": [[227, "nilearn.connectome.ConnectivityMeasure.fit"]], "fit_transform() (nilearn.connectome.connectivitymeasure method)": [[227, "nilearn.connectome.ConnectivityMeasure.fit_transform"]], "get_metadata_routing() (nilearn.connectome.connectivitymeasure method)": [[227, "nilearn.connectome.ConnectivityMeasure.get_metadata_routing"]], "get_params() (nilearn.connectome.connectivitymeasure method)": [[227, "nilearn.connectome.ConnectivityMeasure.get_params"]], "inverse_transform() (nilearn.connectome.connectivitymeasure method)": [[227, "nilearn.connectome.ConnectivityMeasure.inverse_transform"]], "set_inverse_transform_request() (nilearn.connectome.connectivitymeasure method)": [[227, "nilearn.connectome.ConnectivityMeasure.set_inverse_transform_request"]], "set_output() (nilearn.connectome.connectivitymeasure method)": [[227, "nilearn.connectome.ConnectivityMeasure.set_output"]], "set_params() (nilearn.connectome.connectivitymeasure method)": [[227, "nilearn.connectome.ConnectivityMeasure.set_params"]], "set_transform_request() (nilearn.connectome.connectivitymeasure method)": [[227, "nilearn.connectome.ConnectivityMeasure.set_transform_request"]], "transform() (nilearn.connectome.connectivitymeasure method)": [[227, "nilearn.connectome.ConnectivityMeasure.transform"]], "groupsparsecovariance (class in nilearn.connectome)": [[228, "nilearn.connectome.GroupSparseCovariance"]], "__init__() (nilearn.connectome.groupsparsecovariance method)": [[228, "nilearn.connectome.GroupSparseCovariance.__init__"]], "fit() (nilearn.connectome.groupsparsecovariance method)": [[228, "nilearn.connectome.GroupSparseCovariance.fit"]], "get_metadata_routing() (nilearn.connectome.groupsparsecovariance method)": [[228, "nilearn.connectome.GroupSparseCovariance.get_metadata_routing"]], "get_params() (nilearn.connectome.groupsparsecovariance method)": [[228, "nilearn.connectome.GroupSparseCovariance.get_params"]], "set_fit_request() (nilearn.connectome.groupsparsecovariance method)": [[228, "nilearn.connectome.GroupSparseCovariance.set_fit_request"]], "set_params() (nilearn.connectome.groupsparsecovariance method)": [[228, "nilearn.connectome.GroupSparseCovariance.set_params"]], "groupsparsecovariancecv (class in nilearn.connectome)": [[229, "nilearn.connectome.GroupSparseCovarianceCV"]], "__init__() (nilearn.connectome.groupsparsecovariancecv method)": [[229, "nilearn.connectome.GroupSparseCovarianceCV.__init__"]], "fit() (nilearn.connectome.groupsparsecovariancecv method)": [[229, "nilearn.connectome.GroupSparseCovarianceCV.fit"]], "get_metadata_routing() (nilearn.connectome.groupsparsecovariancecv method)": [[229, "nilearn.connectome.GroupSparseCovarianceCV.get_metadata_routing"]], "get_params() (nilearn.connectome.groupsparsecovariancecv method)": [[229, "nilearn.connectome.GroupSparseCovarianceCV.get_params"]], "set_fit_request() (nilearn.connectome.groupsparsecovariancecv method)": [[229, "nilearn.connectome.GroupSparseCovarianceCV.set_fit_request"]], "set_params() (nilearn.connectome.groupsparsecovariancecv method)": [[229, "nilearn.connectome.GroupSparseCovarianceCV.set_params"]], "cov_to_corr() (in module nilearn.connectome)": [[230, "nilearn.connectome.cov_to_corr"]], "group_sparse_covariance() (in module nilearn.connectome)": [[231, "nilearn.connectome.group_sparse_covariance"]], "prec_to_partial() (in module nilearn.connectome)": [[232, "nilearn.connectome.prec_to_partial"]], "sym_matrix_to_vec() (in module nilearn.connectome)": [[233, "nilearn.connectome.sym_matrix_to_vec"]], "vec_to_sym_matrix() (in module nilearn.connectome)": [[234, "nilearn.connectome.vec_to_sym_matrix"]], "fetch_abide_pcp() (in module nilearn.datasets)": [[235, "nilearn.datasets.fetch_abide_pcp"]], "fetch_adhd() (in module nilearn.datasets)": [[236, "nilearn.datasets.fetch_adhd"]], "fetch_atlas_aal() (in module nilearn.datasets)": [[237, "nilearn.datasets.fetch_atlas_aal"]], "fetch_atlas_allen_2011() (in module nilearn.datasets)": [[238, "nilearn.datasets.fetch_atlas_allen_2011"]], "fetch_atlas_basc_multiscale_2015() (in module nilearn.datasets)": [[239, "nilearn.datasets.fetch_atlas_basc_multiscale_2015"]], "fetch_atlas_craddock_2012() (in module nilearn.datasets)": [[240, "nilearn.datasets.fetch_atlas_craddock_2012"]], "fetch_atlas_destrieux_2009() (in module nilearn.datasets)": [[241, "nilearn.datasets.fetch_atlas_destrieux_2009"]], "fetch_atlas_difumo() (in module nilearn.datasets)": [[242, "nilearn.datasets.fetch_atlas_difumo"]], "fetch_atlas_harvard_oxford() (in module nilearn.datasets)": [[243, "nilearn.datasets.fetch_atlas_harvard_oxford"]], "fetch_atlas_juelich() (in module nilearn.datasets)": [[244, "nilearn.datasets.fetch_atlas_juelich"]], "fetch_atlas_msdl() (in module nilearn.datasets)": [[245, "nilearn.datasets.fetch_atlas_msdl"]], "fetch_atlas_pauli_2017() (in module nilearn.datasets)": [[246, "nilearn.datasets.fetch_atlas_pauli_2017"]], "fetch_atlas_schaefer_2018() (in module nilearn.datasets)": [[247, "nilearn.datasets.fetch_atlas_schaefer_2018"]], "fetch_atlas_smith_2009() (in module nilearn.datasets)": [[248, "nilearn.datasets.fetch_atlas_smith_2009"]], "fetch_atlas_surf_destrieux() (in module nilearn.datasets)": [[249, "nilearn.datasets.fetch_atlas_surf_destrieux"]], "fetch_atlas_talairach() (in module nilearn.datasets)": [[250, "nilearn.datasets.fetch_atlas_talairach"]], "fetch_atlas_yeo_2011() (in module nilearn.datasets)": [[251, "nilearn.datasets.fetch_atlas_yeo_2011"]], "fetch_bids_langloc_dataset() (in module nilearn.datasets)": [[252, "nilearn.datasets.fetch_bids_langloc_dataset"]], "fetch_coords_dosenbach_2010() (in module nilearn.datasets)": [[253, "nilearn.datasets.fetch_coords_dosenbach_2010"]], "fetch_coords_power_2011() (in module nilearn.datasets)": [[254, "nilearn.datasets.fetch_coords_power_2011"]], "fetch_coords_seitzman_2018() (in module nilearn.datasets)": [[255, "nilearn.datasets.fetch_coords_seitzman_2018"]], "fetch_development_fmri() (in module nilearn.datasets)": [[256, "nilearn.datasets.fetch_development_fmri"]], "fetch_ds000030_urls() (in module nilearn.datasets)": [[257, "nilearn.datasets.fetch_ds000030_urls"]], "fetch_fiac_first_level() (in module nilearn.datasets)": [[258, "nilearn.datasets.fetch_fiac_first_level"]], "fetch_haxby() (in module nilearn.datasets)": [[259, "nilearn.datasets.fetch_haxby"]], "fetch_icbm152_2009() (in module nilearn.datasets)": [[260, "nilearn.datasets.fetch_icbm152_2009"]], "fetch_icbm152_brain_gm_mask() (in module nilearn.datasets)": [[261, "nilearn.datasets.fetch_icbm152_brain_gm_mask"]], "fetch_language_localizer_demo_dataset() (in module nilearn.datasets)": [[262, "nilearn.datasets.fetch_language_localizer_demo_dataset"]], "fetch_localizer_button_task() (in module nilearn.datasets)": [[263, "nilearn.datasets.fetch_localizer_button_task"]], "fetch_localizer_calculation_task() (in module nilearn.datasets)": [[264, "nilearn.datasets.fetch_localizer_calculation_task"]], "fetch_localizer_contrasts() (in module nilearn.datasets)": [[265, "nilearn.datasets.fetch_localizer_contrasts"]], "fetch_localizer_first_level() (in module nilearn.datasets)": [[266, "nilearn.datasets.fetch_localizer_first_level"]], "fetch_megatrawls_netmats() (in module nilearn.datasets)": [[267, "nilearn.datasets.fetch_megatrawls_netmats"]], "fetch_mixed_gambles() (in module nilearn.datasets)": [[268, "nilearn.datasets.fetch_mixed_gambles"]], "fetch_miyawaki2008() (in module nilearn.datasets)": [[269, "nilearn.datasets.fetch_miyawaki2008"]], "fetch_neurovault() (in module nilearn.datasets)": [[270, "nilearn.datasets.fetch_neurovault"]], "fetch_neurovault_auditory_computation_task() (in module nilearn.datasets)": [[271, "nilearn.datasets.fetch_neurovault_auditory_computation_task"]], "fetch_neurovault_ids() (in module nilearn.datasets)": [[272, "nilearn.datasets.fetch_neurovault_ids"]], "fetch_neurovault_motor_task() (in module nilearn.datasets)": [[273, "nilearn.datasets.fetch_neurovault_motor_task"]], "fetch_oasis_vbm() (in module nilearn.datasets)": [[274, "nilearn.datasets.fetch_oasis_vbm"]], "fetch_openneuro_dataset() (in module nilearn.datasets)": [[275, "nilearn.datasets.fetch_openneuro_dataset"]], "fetch_openneuro_dataset_index() (in module nilearn.datasets)": [[276, "nilearn.datasets.fetch_openneuro_dataset_index"]], "fetch_spm_auditory() (in module nilearn.datasets)": [[277, "nilearn.datasets.fetch_spm_auditory"]], "fetch_spm_multimodal_fmri() (in module nilearn.datasets)": [[278, "nilearn.datasets.fetch_spm_multimodal_fmri"]], "fetch_surf_fsaverage() (in module nilearn.datasets)": [[279, "nilearn.datasets.fetch_surf_fsaverage"]], "fetch_surf_nki_enhanced() (in module nilearn.datasets)": [[280, "nilearn.datasets.fetch_surf_nki_enhanced"]], "get_data_dirs() (in module nilearn.datasets)": [[281, "nilearn.datasets.get_data_dirs"]], "load_mni152_brain_mask() (in module nilearn.datasets)": [[282, "nilearn.datasets.load_mni152_brain_mask"]], "load_mni152_gm_mask() (in module nilearn.datasets)": [[283, "nilearn.datasets.load_mni152_gm_mask"]], "load_mni152_gm_template() (in module nilearn.datasets)": [[284, "nilearn.datasets.load_mni152_gm_template"]], "load_mni152_template() (in module nilearn.datasets)": [[285, "nilearn.datasets.load_mni152_template"]], "load_mni152_wm_mask() (in module nilearn.datasets)": [[286, "nilearn.datasets.load_mni152_wm_mask"]], "load_mni152_wm_template() (in module nilearn.datasets)": [[287, "nilearn.datasets.load_mni152_wm_template"]], "load_sample_motor_activation_image() (in module nilearn.datasets)": [[288, "nilearn.datasets.load_sample_motor_activation_image"]], "patch_openneuro_dataset() (in module nilearn.datasets)": [[289, "nilearn.datasets.patch_openneuro_dataset"]], "select_from_index() (in module nilearn.datasets)": [[290, "nilearn.datasets.select_from_index"]], "decoder (class in nilearn.decoding)": [[291, "nilearn.decoding.Decoder"]], "__init__() (nilearn.decoding.decoder method)": [[291, "nilearn.decoding.Decoder.__init__"]], "decision_function() (nilearn.decoding.decoder method)": [[291, "nilearn.decoding.Decoder.decision_function"]], "fit() (nilearn.decoding.decoder method)": [[291, "nilearn.decoding.Decoder.fit"]], "get_metadata_routing() (nilearn.decoding.decoder method)": [[291, "nilearn.decoding.Decoder.get_metadata_routing"]], "get_params() (nilearn.decoding.decoder method)": [[291, "nilearn.decoding.Decoder.get_params"]], "predict() (nilearn.decoding.decoder method)": [[291, "nilearn.decoding.Decoder.predict"]], "score() (nilearn.decoding.decoder method)": [[291, "nilearn.decoding.Decoder.score"]], "set_fit_request() (nilearn.decoding.decoder method)": [[291, "nilearn.decoding.Decoder.set_fit_request"]], "set_params() (nilearn.decoding.decoder method)": [[291, "nilearn.decoding.Decoder.set_params"]], "decoderregressor (class in nilearn.decoding)": [[292, "nilearn.decoding.DecoderRegressor"]], "__init__() (nilearn.decoding.decoderregressor method)": [[292, "nilearn.decoding.DecoderRegressor.__init__"]], "decision_function() (nilearn.decoding.decoderregressor method)": [[292, "nilearn.decoding.DecoderRegressor.decision_function"]], "fit() (nilearn.decoding.decoderregressor method)": [[292, "nilearn.decoding.DecoderRegressor.fit"]], "get_metadata_routing() (nilearn.decoding.decoderregressor method)": [[292, "nilearn.decoding.DecoderRegressor.get_metadata_routing"]], "get_params() (nilearn.decoding.decoderregressor method)": [[292, "nilearn.decoding.DecoderRegressor.get_params"]], "predict() (nilearn.decoding.decoderregressor method)": [[292, "nilearn.decoding.DecoderRegressor.predict"]], "score() (nilearn.decoding.decoderregressor method)": [[292, "nilearn.decoding.DecoderRegressor.score"]], "set_fit_request() (nilearn.decoding.decoderregressor method)": [[292, "nilearn.decoding.DecoderRegressor.set_fit_request"]], "set_params() (nilearn.decoding.decoderregressor method)": [[292, "nilearn.decoding.DecoderRegressor.set_params"]], "fremclassifier (class in nilearn.decoding)": [[293, "nilearn.decoding.FREMClassifier"]], "__init__() (nilearn.decoding.fremclassifier method)": [[293, "nilearn.decoding.FREMClassifier.__init__"]], "decision_function() (nilearn.decoding.fremclassifier method)": [[293, "nilearn.decoding.FREMClassifier.decision_function"]], "fit() (nilearn.decoding.fremclassifier method)": [[293, "nilearn.decoding.FREMClassifier.fit"]], "get_metadata_routing() (nilearn.decoding.fremclassifier method)": [[293, "nilearn.decoding.FREMClassifier.get_metadata_routing"]], "get_params() (nilearn.decoding.fremclassifier method)": [[293, "nilearn.decoding.FREMClassifier.get_params"]], "predict() (nilearn.decoding.fremclassifier method)": [[293, "nilearn.decoding.FREMClassifier.predict"]], "score() (nilearn.decoding.fremclassifier method)": [[293, "nilearn.decoding.FREMClassifier.score"]], "set_fit_request() (nilearn.decoding.fremclassifier method)": [[293, "nilearn.decoding.FREMClassifier.set_fit_request"]], "set_params() (nilearn.decoding.fremclassifier method)": [[293, "nilearn.decoding.FREMClassifier.set_params"]], "fremregressor (class in nilearn.decoding)": [[294, "nilearn.decoding.FREMRegressor"]], "__init__() (nilearn.decoding.fremregressor method)": [[294, "nilearn.decoding.FREMRegressor.__init__"]], "decision_function() (nilearn.decoding.fremregressor method)": [[294, "nilearn.decoding.FREMRegressor.decision_function"]], "fit() (nilearn.decoding.fremregressor method)": [[294, "nilearn.decoding.FREMRegressor.fit"]], "get_metadata_routing() (nilearn.decoding.fremregressor method)": [[294, "nilearn.decoding.FREMRegressor.get_metadata_routing"]], "get_params() (nilearn.decoding.fremregressor method)": [[294, "nilearn.decoding.FREMRegressor.get_params"]], "predict() (nilearn.decoding.fremregressor method)": [[294, "nilearn.decoding.FREMRegressor.predict"]], "score() (nilearn.decoding.fremregressor method)": [[294, "nilearn.decoding.FREMRegressor.score"]], "set_fit_request() (nilearn.decoding.fremregressor method)": [[294, "nilearn.decoding.FREMRegressor.set_fit_request"]], "set_params() (nilearn.decoding.fremregressor method)": [[294, "nilearn.decoding.FREMRegressor.set_params"]], "searchlight (class in nilearn.decoding)": [[295, "nilearn.decoding.SearchLight"]], "__init__() (nilearn.decoding.searchlight method)": [[295, "nilearn.decoding.SearchLight.__init__"]], "fit() (nilearn.decoding.searchlight method)": [[295, "nilearn.decoding.SearchLight.fit"]], "get_metadata_routing() (nilearn.decoding.searchlight method)": [[295, "nilearn.decoding.SearchLight.get_metadata_routing"]], "get_params() (nilearn.decoding.searchlight method)": [[295, "nilearn.decoding.SearchLight.get_params"]], "set_fit_request() (nilearn.decoding.searchlight method)": [[295, "nilearn.decoding.SearchLight.set_fit_request"]], "set_params() (nilearn.decoding.searchlight method)": [[295, "nilearn.decoding.SearchLight.set_params"]], "supported_losses (nilearn.decoding.spacenetclassifier attribute)": [[296, "nilearn.decoding.SpaceNetClassifier.SUPPORTED_LOSSES"]], "supported_penalties (nilearn.decoding.spacenetclassifier attribute)": [[296, "nilearn.decoding.SpaceNetClassifier.SUPPORTED_PENALTIES"]], "spacenetclassifier (class in nilearn.decoding)": [[296, "nilearn.decoding.SpaceNetClassifier"]], "__init__() (nilearn.decoding.spacenetclassifier method)": [[296, "nilearn.decoding.SpaceNetClassifier.__init__"]], "check_params() (nilearn.decoding.spacenetclassifier method)": [[296, "nilearn.decoding.SpaceNetClassifier.check_params"]], "decision_function() (nilearn.decoding.spacenetclassifier method)": [[296, "nilearn.decoding.SpaceNetClassifier.decision_function"]], "fit() (nilearn.decoding.spacenetclassifier method)": [[296, "nilearn.decoding.SpaceNetClassifier.fit"]], "get_metadata_routing() (nilearn.decoding.spacenetclassifier method)": [[296, "nilearn.decoding.SpaceNetClassifier.get_metadata_routing"]], "get_params() (nilearn.decoding.spacenetclassifier method)": [[296, "nilearn.decoding.SpaceNetClassifier.get_params"]], "predict() (nilearn.decoding.spacenetclassifier method)": [[296, "nilearn.decoding.SpaceNetClassifier.predict"]], "score() (nilearn.decoding.spacenetclassifier method)": [[296, "nilearn.decoding.SpaceNetClassifier.score"]], "set_fit_request() (nilearn.decoding.spacenetclassifier method)": [[296, "nilearn.decoding.SpaceNetClassifier.set_fit_request"]], "set_params() (nilearn.decoding.spacenetclassifier method)": [[296, "nilearn.decoding.SpaceNetClassifier.set_params"]], "set_score_request() (nilearn.decoding.spacenetclassifier method)": [[296, "nilearn.decoding.SpaceNetClassifier.set_score_request"]], "supported_losses (nilearn.decoding.spacenetregressor attribute)": [[297, "nilearn.decoding.SpaceNetRegressor.SUPPORTED_LOSSES"]], "supported_penalties (nilearn.decoding.spacenetregressor attribute)": [[297, "nilearn.decoding.SpaceNetRegressor.SUPPORTED_PENALTIES"]], "spacenetregressor (class in nilearn.decoding)": [[297, "nilearn.decoding.SpaceNetRegressor"]], "__init__() (nilearn.decoding.spacenetregressor method)": [[297, "nilearn.decoding.SpaceNetRegressor.__init__"]], "check_params() (nilearn.decoding.spacenetregressor method)": [[297, "nilearn.decoding.SpaceNetRegressor.check_params"]], "decision_function() (nilearn.decoding.spacenetregressor method)": [[297, "nilearn.decoding.SpaceNetRegressor.decision_function"]], "fit() (nilearn.decoding.spacenetregressor method)": [[297, "nilearn.decoding.SpaceNetRegressor.fit"]], "get_metadata_routing() (nilearn.decoding.spacenetregressor method)": [[297, "nilearn.decoding.SpaceNetRegressor.get_metadata_routing"]], "get_params() (nilearn.decoding.spacenetregressor method)": [[297, "nilearn.decoding.SpaceNetRegressor.get_params"]], "predict() (nilearn.decoding.spacenetregressor method)": [[297, "nilearn.decoding.SpaceNetRegressor.predict"]], "score() (nilearn.decoding.spacenetregressor method)": [[297, "nilearn.decoding.SpaceNetRegressor.score"]], "set_fit_request() (nilearn.decoding.spacenetregressor method)": [[297, "nilearn.decoding.SpaceNetRegressor.set_fit_request"]], "set_params() (nilearn.decoding.spacenetregressor method)": [[297, "nilearn.decoding.SpaceNetRegressor.set_params"]], "set_score_request() (nilearn.decoding.spacenetregressor method)": [[297, "nilearn.decoding.SpaceNetRegressor.set_score_request"]], "canica (class in nilearn.decomposition)": [[298, "nilearn.decomposition.CanICA"]], "__init__() (nilearn.decomposition.canica method)": [[298, "nilearn.decomposition.CanICA.__init__"]], "fit() (nilearn.decomposition.canica method)": [[298, "nilearn.decomposition.CanICA.fit"]], "fit_transform() (nilearn.decomposition.canica method)": [[298, "nilearn.decomposition.CanICA.fit_transform"]], "get_metadata_routing() (nilearn.decomposition.canica method)": [[298, "nilearn.decomposition.CanICA.get_metadata_routing"]], "get_params() (nilearn.decomposition.canica method)": [[298, "nilearn.decomposition.CanICA.get_params"]], "inverse_transform() (nilearn.decomposition.canica method)": [[298, "nilearn.decomposition.CanICA.inverse_transform"]], "score() (nilearn.decomposition.canica method)": [[298, "nilearn.decomposition.CanICA.score"]], "set_fit_request() (nilearn.decomposition.canica method)": [[298, "nilearn.decomposition.CanICA.set_fit_request"]], "set_inverse_transform_request() (nilearn.decomposition.canica method)": [[298, "nilearn.decomposition.CanICA.set_inverse_transform_request"]], "set_output() (nilearn.decomposition.canica method)": [[298, "nilearn.decomposition.CanICA.set_output"]], "set_params() (nilearn.decomposition.canica method)": [[298, "nilearn.decomposition.CanICA.set_params"]], "set_score_request() (nilearn.decomposition.canica method)": [[298, "nilearn.decomposition.CanICA.set_score_request"]], "set_transform_request() (nilearn.decomposition.canica method)": [[298, "nilearn.decomposition.CanICA.set_transform_request"]], "transform() (nilearn.decomposition.canica method)": [[298, "nilearn.decomposition.CanICA.transform"]], "dictlearning (class in nilearn.decomposition)": [[299, "nilearn.decomposition.DictLearning"]], "__init__() (nilearn.decomposition.dictlearning method)": [[299, "nilearn.decomposition.DictLearning.__init__"]], "fit() (nilearn.decomposition.dictlearning method)": [[299, "nilearn.decomposition.DictLearning.fit"]], "fit_transform() (nilearn.decomposition.dictlearning method)": [[299, "nilearn.decomposition.DictLearning.fit_transform"]], "get_metadata_routing() (nilearn.decomposition.dictlearning method)": [[299, "nilearn.decomposition.DictLearning.get_metadata_routing"]], "get_params() (nilearn.decomposition.dictlearning method)": [[299, "nilearn.decomposition.DictLearning.get_params"]], "inverse_transform() (nilearn.decomposition.dictlearning method)": [[299, "nilearn.decomposition.DictLearning.inverse_transform"]], "score() (nilearn.decomposition.dictlearning method)": [[299, "nilearn.decomposition.DictLearning.score"]], "set_fit_request() (nilearn.decomposition.dictlearning method)": [[299, "nilearn.decomposition.DictLearning.set_fit_request"]], "set_inverse_transform_request() (nilearn.decomposition.dictlearning method)": [[299, "nilearn.decomposition.DictLearning.set_inverse_transform_request"]], "set_output() (nilearn.decomposition.dictlearning method)": [[299, "nilearn.decomposition.DictLearning.set_output"]], "set_params() (nilearn.decomposition.dictlearning method)": [[299, "nilearn.decomposition.DictLearning.set_params"]], "set_score_request() (nilearn.decomposition.dictlearning method)": [[299, "nilearn.decomposition.DictLearning.set_score_request"]], "set_transform_request() (nilearn.decomposition.dictlearning method)": [[299, "nilearn.decomposition.DictLearning.set_transform_request"]], "transform() (nilearn.decomposition.dictlearning method)": [[299, "nilearn.decomposition.DictLearning.transform"]], "filemesh (class in nilearn.experimental.surface)": [[300, "nilearn.experimental.surface.FileMesh"]], "__init__() (nilearn.experimental.surface.filemesh method)": [[300, "nilearn.experimental.surface.FileMesh.__init__"]], "coordinates (nilearn.experimental.surface.filemesh property)": [[300, "nilearn.experimental.surface.FileMesh.coordinates"]], "faces (nilearn.experimental.surface.filemesh property)": [[300, "nilearn.experimental.surface.FileMesh.faces"]], "file_path (nilearn.experimental.surface.filemesh attribute)": [[300, "nilearn.experimental.surface.FileMesh.file_path"]], "loaded() (nilearn.experimental.surface.filemesh method)": [[300, "nilearn.experimental.surface.FileMesh.loaded"]], "n_vertices (nilearn.experimental.surface.filemesh attribute)": [[300, "nilearn.experimental.surface.FileMesh.n_vertices"]], "to_gifti() (nilearn.experimental.surface.filemesh method)": [[300, "nilearn.experimental.surface.FileMesh.to_gifti"]], "inmemorymesh (class in nilearn.experimental.surface)": [[301, "nilearn.experimental.surface.InMemoryMesh"]], "__init__() (nilearn.experimental.surface.inmemorymesh method)": [[301, "nilearn.experimental.surface.InMemoryMesh.__init__"]], "coordinates (nilearn.experimental.surface.inmemorymesh attribute)": [[301, "nilearn.experimental.surface.InMemoryMesh.coordinates"]], "faces (nilearn.experimental.surface.inmemorymesh attribute)": [[301, "nilearn.experimental.surface.InMemoryMesh.faces"]], "n_vertices (nilearn.experimental.surface.inmemorymesh attribute)": [[301, "nilearn.experimental.surface.InMemoryMesh.n_vertices"]], "to_gifti() (nilearn.experimental.surface.inmemorymesh method)": [[301, "nilearn.experimental.surface.InMemoryMesh.to_gifti"]], "mesh (class in nilearn.experimental.surface)": [[302, "nilearn.experimental.surface.Mesh"]], "__init__() (nilearn.experimental.surface.mesh method)": [[302, "nilearn.experimental.surface.Mesh.__init__"]], "coordinates (nilearn.experimental.surface.mesh attribute)": [[302, "nilearn.experimental.surface.Mesh.coordinates"]], "faces (nilearn.experimental.surface.mesh attribute)": [[302, "nilearn.experimental.surface.Mesh.faces"]], "n_vertices (nilearn.experimental.surface.mesh attribute)": [[302, "nilearn.experimental.surface.Mesh.n_vertices"]], "to_gifti() (nilearn.experimental.surface.mesh method)": [[302, "nilearn.experimental.surface.Mesh.to_gifti"]], "polymesh (in module nilearn.experimental.surface)": [[303, "nilearn.experimental.surface.PolyMesh"]], "surfaceimage (class in nilearn.experimental.surface)": [[304, "nilearn.experimental.surface.SurfaceImage"]], "__init__() (nilearn.experimental.surface.surfaceimage method)": [[304, "nilearn.experimental.surface.SurfaceImage.__init__"]], "data (nilearn.experimental.surface.surfaceimage attribute)": [[304, "nilearn.experimental.surface.SurfaceImage.data"]], "mesh (nilearn.experimental.surface.surfaceimage attribute)": [[304, "nilearn.experimental.surface.SurfaceImage.mesh"]], "shape (nilearn.experimental.surface.surfaceimage attribute)": [[304, "nilearn.experimental.surface.SurfaceImage.shape"]], "surfacelabelsmasker (class in nilearn.experimental.surface)": [[305, "nilearn.experimental.surface.SurfaceLabelsMasker"]], "__init__() (nilearn.experimental.surface.surfacelabelsmasker method)": [[305, "nilearn.experimental.surface.SurfaceLabelsMasker.__init__"]], "fit() (nilearn.experimental.surface.surfacelabelsmasker method)": [[305, "nilearn.experimental.surface.SurfaceLabelsMasker.fit"]], "fit_transform() (nilearn.experimental.surface.surfacelabelsmasker method)": [[305, "nilearn.experimental.surface.SurfaceLabelsMasker.fit_transform"]], "inverse_transform() (nilearn.experimental.surface.surfacelabelsmasker method)": [[305, "nilearn.experimental.surface.SurfaceLabelsMasker.inverse_transform"]], "label_names (nilearn.experimental.surface.surfacelabelsmasker attribute)": [[305, "nilearn.experimental.surface.SurfaceLabelsMasker.label_names"]], "label_names_ (nilearn.experimental.surface.surfacelabelsmasker attribute)": [[305, "nilearn.experimental.surface.SurfaceLabelsMasker.label_names_"]], "labels_ (nilearn.experimental.surface.surfacelabelsmasker attribute)": [[305, "nilearn.experimental.surface.SurfaceLabelsMasker.labels_"]], "labels_data_ (nilearn.experimental.surface.surfacelabelsmasker attribute)": [[305, "nilearn.experimental.surface.SurfaceLabelsMasker.labels_data_"]], "labels_img (nilearn.experimental.surface.surfacelabelsmasker attribute)": [[305, "nilearn.experimental.surface.SurfaceLabelsMasker.labels_img"]], "transform() (nilearn.experimental.surface.surfacelabelsmasker method)": [[305, "nilearn.experimental.surface.SurfaceLabelsMasker.transform"]], "surfacemasker (class in nilearn.experimental.surface)": [[306, "nilearn.experimental.surface.SurfaceMasker"]], "__init__() (nilearn.experimental.surface.surfacemasker method)": [[306, "nilearn.experimental.surface.SurfaceMasker.__init__"]], "fit() (nilearn.experimental.surface.surfacemasker method)": [[306, "nilearn.experimental.surface.SurfaceMasker.fit"]], "fit_transform() (nilearn.experimental.surface.surfacemasker method)": [[306, "nilearn.experimental.surface.SurfaceMasker.fit_transform"]], "get_metadata_routing() (nilearn.experimental.surface.surfacemasker method)": [[306, "nilearn.experimental.surface.SurfaceMasker.get_metadata_routing"]], "get_params() (nilearn.experimental.surface.surfacemasker method)": [[306, "nilearn.experimental.surface.SurfaceMasker.get_params"]], "inverse_transform() (nilearn.experimental.surface.surfacemasker method)": [[306, "nilearn.experimental.surface.SurfaceMasker.inverse_transform"]], "mask_img (nilearn.experimental.surface.surfacemasker attribute)": [[306, "nilearn.experimental.surface.SurfaceMasker.mask_img"]], "mask_img_ (nilearn.experimental.surface.surfacemasker attribute)": [[306, "nilearn.experimental.surface.SurfaceMasker.mask_img_"]], "output_dimension_ (nilearn.experimental.surface.surfacemasker attribute)": [[306, "nilearn.experimental.surface.SurfaceMasker.output_dimension_"]], "set_fit_request() (nilearn.experimental.surface.surfacemasker method)": [[306, "nilearn.experimental.surface.SurfaceMasker.set_fit_request"]], "set_inverse_transform_request() (nilearn.experimental.surface.surfacemasker method)": [[306, "nilearn.experimental.surface.SurfaceMasker.set_inverse_transform_request"]], "set_output() (nilearn.experimental.surface.surfacemasker method)": [[306, "nilearn.experimental.surface.SurfaceMasker.set_output"]], "set_params() (nilearn.experimental.surface.surfacemasker method)": [[306, "nilearn.experimental.surface.SurfaceMasker.set_params"]], "set_transform_request() (nilearn.experimental.surface.surfacemasker method)": [[306, "nilearn.experimental.surface.SurfaceMasker.set_transform_request"]], "transform() (nilearn.experimental.surface.surfacemasker method)": [[306, "nilearn.experimental.surface.SurfaceMasker.transform"]], "fetch_destrieux() (in module nilearn.experimental.surface)": [[307, "nilearn.experimental.surface.fetch_destrieux"]], "fetch_nki() (in module nilearn.experimental.surface)": [[308, "nilearn.experimental.surface.fetch_nki"]], "load_fsaverage() (in module nilearn.experimental.surface)": [[309, "nilearn.experimental.surface.load_fsaverage"]], "armodel (class in nilearn.glm)": [[310, "nilearn.glm.ARModel"]], "__init__() (nilearn.glm.armodel method)": [[310, "nilearn.glm.ARModel.__init__"]], "fit() (nilearn.glm.armodel method)": [[310, "nilearn.glm.ARModel.fit"]], "initialize() (nilearn.glm.armodel method)": [[310, "nilearn.glm.ARModel.initialize"]], "logl() (nilearn.glm.armodel method)": [[310, "nilearn.glm.ARModel.logL"]], "whiten() (nilearn.glm.armodel method)": [[310, "nilearn.glm.ARModel.whiten"]], "contrast (class in nilearn.glm)": [[311, "nilearn.glm.Contrast"]], "__init__() (nilearn.glm.contrast method)": [[311, "nilearn.glm.Contrast.__init__"]], "contrast_type (nilearn.glm.contrast property)": [[311, "nilearn.glm.Contrast.contrast_type"]], "effect_size() (nilearn.glm.contrast method)": [[311, "nilearn.glm.Contrast.effect_size"]], "effect_variance() (nilearn.glm.contrast method)": [[311, "nilearn.glm.Contrast.effect_variance"]], "one_minus_pvalue() (nilearn.glm.contrast method)": [[311, "nilearn.glm.Contrast.one_minus_pvalue"]], "p_value() (nilearn.glm.contrast method)": [[311, "nilearn.glm.Contrast.p_value"]], "stat() (nilearn.glm.contrast method)": [[311, "nilearn.glm.Contrast.stat"]], "z_score() (nilearn.glm.contrast method)": [[311, "nilearn.glm.Contrast.z_score"]], "fcontrastresults (class in nilearn.glm)": [[312, "nilearn.glm.FContrastResults"]], "__init__() (nilearn.glm.fcontrastresults method)": [[312, "nilearn.glm.FContrastResults.__init__"]], "fcontrast() (nilearn.glm.likelihoodmodelresults method)": [[313, "nilearn.glm.LikelihoodModelResults.Fcontrast"]], "likelihoodmodelresults (class in nilearn.glm)": [[313, "nilearn.glm.LikelihoodModelResults"]], "tcontrast() (nilearn.glm.likelihoodmodelresults method)": [[313, "nilearn.glm.LikelihoodModelResults.Tcontrast"]], "__init__() (nilearn.glm.likelihoodmodelresults method)": [[313, "nilearn.glm.LikelihoodModelResults.__init__"]], "conf_int() (nilearn.glm.likelihoodmodelresults method)": [[313, "nilearn.glm.LikelihoodModelResults.conf_int"]], "logl() (nilearn.glm.likelihoodmodelresults method)": [[313, "nilearn.glm.LikelihoodModelResults.logL"]], "t() (nilearn.glm.likelihoodmodelresults method)": [[313, "nilearn.glm.LikelihoodModelResults.t"]], "vcov() (nilearn.glm.likelihoodmodelresults method)": [[313, "nilearn.glm.LikelihoodModelResults.vcov"]], "olsmodel (class in nilearn.glm)": [[314, "nilearn.glm.OLSModel"]], "__init__() (nilearn.glm.olsmodel method)": [[314, "nilearn.glm.OLSModel.__init__"]], "fit() (nilearn.glm.olsmodel method)": [[314, "nilearn.glm.OLSModel.fit"]], "initialize() (nilearn.glm.olsmodel method)": [[314, "nilearn.glm.OLSModel.initialize"]], "logl() (nilearn.glm.olsmodel method)": [[314, "nilearn.glm.OLSModel.logL"]], "whiten() (nilearn.glm.olsmodel method)": [[314, "nilearn.glm.OLSModel.whiten"]], "fcontrast() (nilearn.glm.regressionresults method)": [[315, "nilearn.glm.RegressionResults.Fcontrast"]], "mse() (nilearn.glm.regressionresults method)": [[315, "nilearn.glm.RegressionResults.MSE"]], "regressionresults (class in nilearn.glm)": [[315, "nilearn.glm.RegressionResults"]], "sse() (nilearn.glm.regressionresults method)": [[315, "nilearn.glm.RegressionResults.SSE"]], "tcontrast() (nilearn.glm.regressionresults method)": [[315, "nilearn.glm.RegressionResults.Tcontrast"]], "__init__() (nilearn.glm.regressionresults method)": [[315, "nilearn.glm.RegressionResults.__init__"]], "conf_int() (nilearn.glm.regressionresults method)": [[315, "nilearn.glm.RegressionResults.conf_int"]], "logl() (nilearn.glm.regressionresults method)": [[315, "nilearn.glm.RegressionResults.logL"]], "normalized_residuals() (nilearn.glm.regressionresults method)": [[315, "nilearn.glm.RegressionResults.normalized_residuals"]], "predicted() (nilearn.glm.regressionresults method)": [[315, "nilearn.glm.RegressionResults.predicted"]], "r_square() (nilearn.glm.regressionresults method)": [[315, "nilearn.glm.RegressionResults.r_square"]], "residuals() (nilearn.glm.regressionresults method)": [[315, "nilearn.glm.RegressionResults.residuals"]], "t() (nilearn.glm.regressionresults method)": [[315, "nilearn.glm.RegressionResults.t"]], "vcov() (nilearn.glm.regressionresults method)": [[315, "nilearn.glm.RegressionResults.vcov"]], "fcontrast() (nilearn.glm.simpleregressionresults method)": [[316, "nilearn.glm.SimpleRegressionResults.Fcontrast"]], "simpleregressionresults (class in nilearn.glm)": [[316, "nilearn.glm.SimpleRegressionResults"]], "tcontrast() (nilearn.glm.simpleregressionresults method)": [[316, "nilearn.glm.SimpleRegressionResults.Tcontrast"]], "__init__() (nilearn.glm.simpleregressionresults method)": [[316, "nilearn.glm.SimpleRegressionResults.__init__"]], "conf_int() (nilearn.glm.simpleregressionresults method)": [[316, "nilearn.glm.SimpleRegressionResults.conf_int"]], "logl() (nilearn.glm.simpleregressionresults method)": [[316, "nilearn.glm.SimpleRegressionResults.logL"]], "normalized_residuals() (nilearn.glm.simpleregressionresults method)": [[316, "nilearn.glm.SimpleRegressionResults.normalized_residuals"]], "predicted() (nilearn.glm.simpleregressionresults method)": [[316, "nilearn.glm.SimpleRegressionResults.predicted"]], "residuals() (nilearn.glm.simpleregressionresults method)": [[316, "nilearn.glm.SimpleRegressionResults.residuals"]], "t() (nilearn.glm.simpleregressionresults method)": [[316, "nilearn.glm.SimpleRegressionResults.t"]], "vcov() (nilearn.glm.simpleregressionresults method)": [[316, "nilearn.glm.SimpleRegressionResults.vcov"]], "tcontrastresults (class in nilearn.glm)": [[317, "nilearn.glm.TContrastResults"]], "__init__() (nilearn.glm.tcontrastresults method)": [[317, "nilearn.glm.TContrastResults.__init__"]], "cluster_level_inference() (in module nilearn.glm)": [[318, "nilearn.glm.cluster_level_inference"]], "compute_contrast() (in module nilearn.glm)": [[319, "nilearn.glm.compute_contrast"]], "compute_fixed_effects() (in module nilearn.glm)": [[320, "nilearn.glm.compute_fixed_effects"]], "expression_to_contrast_vector() (in module nilearn.glm)": [[321, "nilearn.glm.expression_to_contrast_vector"]], "fdr_threshold() (in module nilearn.glm)": [[322, "nilearn.glm.fdr_threshold"]], "firstlevelmodel (class in nilearn.glm.first_level)": [[323, "nilearn.glm.first_level.FirstLevelModel"]], "__init__() (nilearn.glm.first_level.firstlevelmodel method)": [[323, "nilearn.glm.first_level.FirstLevelModel.__init__"]], "compute_contrast() (nilearn.glm.first_level.firstlevelmodel method)": [[323, "nilearn.glm.first_level.FirstLevelModel.compute_contrast"]], "fit() (nilearn.glm.first_level.firstlevelmodel method)": [[323, "nilearn.glm.first_level.FirstLevelModel.fit"]], "fit_transform() (nilearn.glm.first_level.firstlevelmodel method)": [[323, "nilearn.glm.first_level.FirstLevelModel.fit_transform"]], "generate_report() (nilearn.glm.first_level.firstlevelmodel method)": [[323, "nilearn.glm.first_level.FirstLevelModel.generate_report"]], "get_metadata_routing() (nilearn.glm.first_level.firstlevelmodel method)": [[323, "nilearn.glm.first_level.FirstLevelModel.get_metadata_routing"]], "get_params() (nilearn.glm.first_level.firstlevelmodel method)": [[323, "nilearn.glm.first_level.FirstLevelModel.get_params"]], "predicted() (nilearn.glm.first_level.firstlevelmodel method)": [[323, "nilearn.glm.first_level.FirstLevelModel.predicted"]], "r_square() (nilearn.glm.first_level.firstlevelmodel method)": [[323, "nilearn.glm.first_level.FirstLevelModel.r_square"]], "residuals() (nilearn.glm.first_level.firstlevelmodel method)": [[323, "nilearn.glm.first_level.FirstLevelModel.residuals"]], "scaling_axis (nilearn.glm.first_level.firstlevelmodel property)": [[323, "nilearn.glm.first_level.FirstLevelModel.scaling_axis"]], "set_fit_request() (nilearn.glm.first_level.firstlevelmodel method)": [[323, "nilearn.glm.first_level.FirstLevelModel.set_fit_request"]], "set_output() (nilearn.glm.first_level.firstlevelmodel method)": [[323, "nilearn.glm.first_level.FirstLevelModel.set_output"]], "set_params() (nilearn.glm.first_level.firstlevelmodel method)": [[323, "nilearn.glm.first_level.FirstLevelModel.set_params"]], "check_design_matrix() (in module nilearn.glm.first_level)": [[324, "nilearn.glm.first_level.check_design_matrix"]], "compute_regressor() (in module nilearn.glm.first_level)": [[325, "nilearn.glm.first_level.compute_regressor"]], "first_level_from_bids() (in module nilearn.glm.first_level)": [[326, "nilearn.glm.first_level.first_level_from_bids"]], "glover_dispersion_derivative() (in module nilearn.glm.first_level)": [[327, "nilearn.glm.first_level.glover_dispersion_derivative"]], "glover_hrf() (in module nilearn.glm.first_level)": [[328, "nilearn.glm.first_level.glover_hrf"]], "glover_time_derivative() (in module nilearn.glm.first_level)": [[329, "nilearn.glm.first_level.glover_time_derivative"]], "make_first_level_design_matrix() (in module nilearn.glm.first_level)": [[330, "nilearn.glm.first_level.make_first_level_design_matrix"]], "mean_scaling() (in module nilearn.glm.first_level)": [[331, "nilearn.glm.first_level.mean_scaling"]], "run_glm() (in module nilearn.glm.first_level)": [[332, "nilearn.glm.first_level.run_glm"]], "spm_dispersion_derivative() (in module nilearn.glm.first_level)": [[333, "nilearn.glm.first_level.spm_dispersion_derivative"]], "spm_hrf() (in module nilearn.glm.first_level)": [[334, "nilearn.glm.first_level.spm_hrf"]], "spm_time_derivative() (in module nilearn.glm.first_level)": [[335, "nilearn.glm.first_level.spm_time_derivative"]], "secondlevelmodel (class in nilearn.glm.second_level)": [[336, "nilearn.glm.second_level.SecondLevelModel"]], "__init__() (nilearn.glm.second_level.secondlevelmodel method)": [[336, "nilearn.glm.second_level.SecondLevelModel.__init__"]], "compute_contrast() (nilearn.glm.second_level.secondlevelmodel method)": [[336, "nilearn.glm.second_level.SecondLevelModel.compute_contrast"]], "fit() (nilearn.glm.second_level.secondlevelmodel method)": [[336, "nilearn.glm.second_level.SecondLevelModel.fit"]], "fit_transform() (nilearn.glm.second_level.secondlevelmodel method)": [[336, "nilearn.glm.second_level.SecondLevelModel.fit_transform"]], "generate_report() (nilearn.glm.second_level.secondlevelmodel method)": [[336, "nilearn.glm.second_level.SecondLevelModel.generate_report"]], "get_metadata_routing() (nilearn.glm.second_level.secondlevelmodel method)": [[336, "nilearn.glm.second_level.SecondLevelModel.get_metadata_routing"]], "get_params() (nilearn.glm.second_level.secondlevelmodel method)": [[336, "nilearn.glm.second_level.SecondLevelModel.get_params"]], "predicted() (nilearn.glm.second_level.secondlevelmodel method)": [[336, "nilearn.glm.second_level.SecondLevelModel.predicted"]], "r_square() (nilearn.glm.second_level.secondlevelmodel method)": [[336, "nilearn.glm.second_level.SecondLevelModel.r_square"]], "residuals() (nilearn.glm.second_level.secondlevelmodel method)": [[336, "nilearn.glm.second_level.SecondLevelModel.residuals"]], "set_fit_request() (nilearn.glm.second_level.secondlevelmodel method)": [[336, "nilearn.glm.second_level.SecondLevelModel.set_fit_request"]], "set_output() (nilearn.glm.second_level.secondlevelmodel method)": [[336, "nilearn.glm.second_level.SecondLevelModel.set_output"]], "set_params() (nilearn.glm.second_level.secondlevelmodel method)": [[336, "nilearn.glm.second_level.SecondLevelModel.set_params"]], "make_second_level_design_matrix() (in module nilearn.glm.second_level)": [[337, "nilearn.glm.second_level.make_second_level_design_matrix"]], "non_parametric_inference() (in module nilearn.glm.second_level)": [[338, "nilearn.glm.second_level.non_parametric_inference"]], "threshold_stats_img() (in module nilearn.glm)": [[339, "nilearn.glm.threshold_stats_img"]], "binarize_img() (in module nilearn.image)": [[340, "nilearn.image.binarize_img"]], "clean_img() (in module nilearn.image)": [[341, "nilearn.image.clean_img"]], "concat_imgs() (in module nilearn.image)": [[342, "nilearn.image.concat_imgs"]], "coord_transform() (in module nilearn.image)": [[343, "nilearn.image.coord_transform"]], "copy_img() (in module nilearn.image)": [[344, "nilearn.image.copy_img"]], "crop_img() (in module nilearn.image)": [[345, "nilearn.image.crop_img"]], "get_data() (in module nilearn.image)": [[346, "nilearn.image.get_data"]], "high_variance_confounds() (in module nilearn.image)": [[347, "nilearn.image.high_variance_confounds"]], "index_img() (in module nilearn.image)": [[348, "nilearn.image.index_img"]], "iter_img() (in module nilearn.image)": [[349, "nilearn.image.iter_img"]], "largest_connected_component_img() (in module nilearn.image)": [[350, "nilearn.image.largest_connected_component_img"]], "load_img() (in module nilearn.image)": [[351, "nilearn.image.load_img"]], "math_img() (in module nilearn.image)": [[352, "nilearn.image.math_img"]], "mean_img() (in module nilearn.image)": [[353, "nilearn.image.mean_img"]], "new_img_like() (in module nilearn.image)": [[354, "nilearn.image.new_img_like"]], "reorder_img() (in module nilearn.image)": [[355, "nilearn.image.reorder_img"]], "resample_img() (in module nilearn.image)": [[356, "nilearn.image.resample_img"]], "resample_to_img() (in module nilearn.image)": [[357, "nilearn.image.resample_to_img"]], "smooth_img() (in module nilearn.image)": [[358, "nilearn.image.smooth_img"]], "swap_img_hemispheres() (in module nilearn.image)": [[359, "nilearn.image.swap_img_hemispheres"]], "threshold_img() (in module nilearn.image)": [[360, "nilearn.image.threshold_img"]], "get_bids_files() (in module nilearn.interfaces.bids)": [[361, "nilearn.interfaces.bids.get_bids_files"]], "parse_bids_filename() (in module nilearn.interfaces.bids)": [[362, "nilearn.interfaces.bids.parse_bids_filename"]], "save_glm_to_bids() (in module nilearn.interfaces.bids)": [[363, "nilearn.interfaces.bids.save_glm_to_bids"]], "load_confounds() (in module nilearn.interfaces.fmriprep)": [[364, "nilearn.interfaces.fmriprep.load_confounds"]], "load_confounds_strategy() (in module nilearn.interfaces.fmriprep)": [[365, "nilearn.interfaces.fmriprep.load_confounds_strategy"]], "get_design_from_fslmat() (in module nilearn.interfaces.fsl)": [[366, "nilearn.interfaces.fsl.get_design_from_fslmat"]], "basemasker (class in nilearn.maskers)": [[367, "nilearn.maskers.BaseMasker"]], "__init__() (nilearn.maskers.basemasker method)": [[367, "nilearn.maskers.BaseMasker.__init__"]], "fit_transform() (nilearn.maskers.basemasker method)": [[367, "nilearn.maskers.BaseMasker.fit_transform"]], "get_metadata_routing() (nilearn.maskers.basemasker method)": [[367, "nilearn.maskers.BaseMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.basemasker method)": [[367, "nilearn.maskers.BaseMasker.get_params"]], "inverse_transform() (nilearn.maskers.basemasker method)": [[367, "nilearn.maskers.BaseMasker.inverse_transform"]], "set_output() (nilearn.maskers.basemasker method)": [[367, "nilearn.maskers.BaseMasker.set_output"]], "set_params() (nilearn.maskers.basemasker method)": [[367, "nilearn.maskers.BaseMasker.set_params"]], "set_transform_request() (nilearn.maskers.basemasker method)": [[367, "nilearn.maskers.BaseMasker.set_transform_request"]], "transform() (nilearn.maskers.basemasker method)": [[367, "nilearn.maskers.BaseMasker.transform"]], "transform_single_imgs() (nilearn.maskers.basemasker method)": [[367, "nilearn.maskers.BaseMasker.transform_single_imgs"]], "multiniftilabelsmasker (class in nilearn.maskers)": [[368, "nilearn.maskers.MultiNiftiLabelsMasker"]], "__init__() (nilearn.maskers.multiniftilabelsmasker method)": [[368, "nilearn.maskers.MultiNiftiLabelsMasker.__init__"]], "fit() (nilearn.maskers.multiniftilabelsmasker method)": [[368, "nilearn.maskers.MultiNiftiLabelsMasker.fit"]], "fit_transform() (nilearn.maskers.multiniftilabelsmasker method)": [[368, "nilearn.maskers.MultiNiftiLabelsMasker.fit_transform"]], "generate_report() (nilearn.maskers.multiniftilabelsmasker method)": [[368, "nilearn.maskers.MultiNiftiLabelsMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.multiniftilabelsmasker method)": [[368, "nilearn.maskers.MultiNiftiLabelsMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.multiniftilabelsmasker method)": [[368, "nilearn.maskers.MultiNiftiLabelsMasker.get_params"]], "inverse_transform() (nilearn.maskers.multiniftilabelsmasker method)": [[368, "nilearn.maskers.MultiNiftiLabelsMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.multiniftilabelsmasker method)": [[368, "nilearn.maskers.MultiNiftiLabelsMasker.set_fit_request"]], "set_inverse_transform_request() (nilearn.maskers.multiniftilabelsmasker method)": [[368, "nilearn.maskers.MultiNiftiLabelsMasker.set_inverse_transform_request"]], "set_output() (nilearn.maskers.multiniftilabelsmasker method)": [[368, "nilearn.maskers.MultiNiftiLabelsMasker.set_output"]], "set_params() (nilearn.maskers.multiniftilabelsmasker method)": [[368, "nilearn.maskers.MultiNiftiLabelsMasker.set_params"]], "set_transform_request() (nilearn.maskers.multiniftilabelsmasker method)": [[368, "nilearn.maskers.MultiNiftiLabelsMasker.set_transform_request"]], "transform() (nilearn.maskers.multiniftilabelsmasker method)": [[368, "nilearn.maskers.MultiNiftiLabelsMasker.transform"]], "transform_imgs() (nilearn.maskers.multiniftilabelsmasker method)": [[368, "nilearn.maskers.MultiNiftiLabelsMasker.transform_imgs"]], "transform_single_imgs() (nilearn.maskers.multiniftilabelsmasker method)": [[368, "nilearn.maskers.MultiNiftiLabelsMasker.transform_single_imgs"]], "multiniftimapsmasker (class in nilearn.maskers)": [[369, "nilearn.maskers.MultiNiftiMapsMasker"]], "__init__() (nilearn.maskers.multiniftimapsmasker method)": [[369, "nilearn.maskers.MultiNiftiMapsMasker.__init__"]], "fit() (nilearn.maskers.multiniftimapsmasker method)": [[369, "nilearn.maskers.MultiNiftiMapsMasker.fit"]], "fit_transform() (nilearn.maskers.multiniftimapsmasker method)": [[369, "nilearn.maskers.MultiNiftiMapsMasker.fit_transform"]], "generate_report() (nilearn.maskers.multiniftimapsmasker method)": [[369, "nilearn.maskers.MultiNiftiMapsMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.multiniftimapsmasker method)": [[369, "nilearn.maskers.MultiNiftiMapsMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.multiniftimapsmasker method)": [[369, "nilearn.maskers.MultiNiftiMapsMasker.get_params"]], "inverse_transform() (nilearn.maskers.multiniftimapsmasker method)": [[369, "nilearn.maskers.MultiNiftiMapsMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.multiniftimapsmasker method)": [[369, "nilearn.maskers.MultiNiftiMapsMasker.set_fit_request"]], "set_inverse_transform_request() (nilearn.maskers.multiniftimapsmasker method)": [[369, "nilearn.maskers.MultiNiftiMapsMasker.set_inverse_transform_request"]], "set_output() (nilearn.maskers.multiniftimapsmasker method)": [[369, "nilearn.maskers.MultiNiftiMapsMasker.set_output"]], "set_params() (nilearn.maskers.multiniftimapsmasker method)": [[369, "nilearn.maskers.MultiNiftiMapsMasker.set_params"]], "set_transform_request() (nilearn.maskers.multiniftimapsmasker method)": [[369, "nilearn.maskers.MultiNiftiMapsMasker.set_transform_request"]], "transform() (nilearn.maskers.multiniftimapsmasker method)": [[369, "nilearn.maskers.MultiNiftiMapsMasker.transform"]], "transform_imgs() (nilearn.maskers.multiniftimapsmasker method)": [[369, "nilearn.maskers.MultiNiftiMapsMasker.transform_imgs"]], "transform_single_imgs() (nilearn.maskers.multiniftimapsmasker method)": [[369, "nilearn.maskers.MultiNiftiMapsMasker.transform_single_imgs"]], "multiniftimasker (class in nilearn.maskers)": [[370, "nilearn.maskers.MultiNiftiMasker"]], "__init__() (nilearn.maskers.multiniftimasker method)": [[370, "nilearn.maskers.MultiNiftiMasker.__init__"]], "fit() (nilearn.maskers.multiniftimasker method)": [[370, "nilearn.maskers.MultiNiftiMasker.fit"]], "fit_transform() (nilearn.maskers.multiniftimasker method)": [[370, "nilearn.maskers.MultiNiftiMasker.fit_transform"]], "generate_report() (nilearn.maskers.multiniftimasker method)": [[370, "nilearn.maskers.MultiNiftiMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.multiniftimasker method)": [[370, "nilearn.maskers.MultiNiftiMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.multiniftimasker method)": [[370, "nilearn.maskers.MultiNiftiMasker.get_params"]], "inverse_transform() (nilearn.maskers.multiniftimasker method)": [[370, "nilearn.maskers.MultiNiftiMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.multiniftimasker method)": [[370, "nilearn.maskers.MultiNiftiMasker.set_fit_request"]], "set_output() (nilearn.maskers.multiniftimasker method)": [[370, "nilearn.maskers.MultiNiftiMasker.set_output"]], "set_params() (nilearn.maskers.multiniftimasker method)": [[370, "nilearn.maskers.MultiNiftiMasker.set_params"]], "set_transform_request() (nilearn.maskers.multiniftimasker method)": [[370, "nilearn.maskers.MultiNiftiMasker.set_transform_request"]], "transform() (nilearn.maskers.multiniftimasker method)": [[370, "nilearn.maskers.MultiNiftiMasker.transform"]], "transform_imgs() (nilearn.maskers.multiniftimasker method)": [[370, "nilearn.maskers.MultiNiftiMasker.transform_imgs"]], "transform_single_imgs() (nilearn.maskers.multiniftimasker method)": [[370, "nilearn.maskers.MultiNiftiMasker.transform_single_imgs"]], "niftilabelsmasker (class in nilearn.maskers)": [[371, "nilearn.maskers.NiftiLabelsMasker"]], "__init__() (nilearn.maskers.niftilabelsmasker method)": [[371, "nilearn.maskers.NiftiLabelsMasker.__init__"]], "fit() (nilearn.maskers.niftilabelsmasker method)": [[371, "nilearn.maskers.NiftiLabelsMasker.fit"]], "fit_transform() (nilearn.maskers.niftilabelsmasker method)": [[371, "nilearn.maskers.NiftiLabelsMasker.fit_transform"]], "generate_report() (nilearn.maskers.niftilabelsmasker method)": [[371, "nilearn.maskers.NiftiLabelsMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.niftilabelsmasker method)": [[371, "nilearn.maskers.NiftiLabelsMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.niftilabelsmasker method)": [[371, "nilearn.maskers.NiftiLabelsMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftilabelsmasker method)": [[371, "nilearn.maskers.NiftiLabelsMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.niftilabelsmasker method)": [[371, "nilearn.maskers.NiftiLabelsMasker.set_fit_request"]], "set_inverse_transform_request() (nilearn.maskers.niftilabelsmasker method)": [[371, "nilearn.maskers.NiftiLabelsMasker.set_inverse_transform_request"]], "set_output() (nilearn.maskers.niftilabelsmasker method)": [[371, "nilearn.maskers.NiftiLabelsMasker.set_output"]], "set_params() (nilearn.maskers.niftilabelsmasker method)": [[371, "nilearn.maskers.NiftiLabelsMasker.set_params"]], "set_transform_request() (nilearn.maskers.niftilabelsmasker method)": [[371, "nilearn.maskers.NiftiLabelsMasker.set_transform_request"]], "transform() (nilearn.maskers.niftilabelsmasker method)": [[371, "nilearn.maskers.NiftiLabelsMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftilabelsmasker method)": [[371, "nilearn.maskers.NiftiLabelsMasker.transform_single_imgs"]], "niftimapsmasker (class in nilearn.maskers)": [[372, "nilearn.maskers.NiftiMapsMasker"]], "__init__() (nilearn.maskers.niftimapsmasker method)": [[372, "nilearn.maskers.NiftiMapsMasker.__init__"]], "fit() (nilearn.maskers.niftimapsmasker method)": [[372, "nilearn.maskers.NiftiMapsMasker.fit"]], "fit_transform() (nilearn.maskers.niftimapsmasker method)": [[372, "nilearn.maskers.NiftiMapsMasker.fit_transform"]], "generate_report() (nilearn.maskers.niftimapsmasker method)": [[372, "nilearn.maskers.NiftiMapsMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.niftimapsmasker method)": [[372, "nilearn.maskers.NiftiMapsMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.niftimapsmasker method)": [[372, "nilearn.maskers.NiftiMapsMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftimapsmasker method)": [[372, "nilearn.maskers.NiftiMapsMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.niftimapsmasker method)": [[372, "nilearn.maskers.NiftiMapsMasker.set_fit_request"]], "set_inverse_transform_request() (nilearn.maskers.niftimapsmasker method)": [[372, "nilearn.maskers.NiftiMapsMasker.set_inverse_transform_request"]], "set_output() (nilearn.maskers.niftimapsmasker method)": [[372, "nilearn.maskers.NiftiMapsMasker.set_output"]], "set_params() (nilearn.maskers.niftimapsmasker method)": [[372, "nilearn.maskers.NiftiMapsMasker.set_params"]], "set_transform_request() (nilearn.maskers.niftimapsmasker method)": [[372, "nilearn.maskers.NiftiMapsMasker.set_transform_request"]], "transform() (nilearn.maskers.niftimapsmasker method)": [[372, "nilearn.maskers.NiftiMapsMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftimapsmasker method)": [[372, "nilearn.maskers.NiftiMapsMasker.transform_single_imgs"]], "niftimasker (class in nilearn.maskers)": [[373, "nilearn.maskers.NiftiMasker"]], "__init__() (nilearn.maskers.niftimasker method)": [[373, "nilearn.maskers.NiftiMasker.__init__"]], "fit() (nilearn.maskers.niftimasker method)": [[373, "nilearn.maskers.NiftiMasker.fit"]], "fit_transform() (nilearn.maskers.niftimasker method)": [[373, "nilearn.maskers.NiftiMasker.fit_transform"]], "generate_report() (nilearn.maskers.niftimasker method)": [[373, "nilearn.maskers.NiftiMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.niftimasker method)": [[373, "nilearn.maskers.NiftiMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.niftimasker method)": [[373, "nilearn.maskers.NiftiMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftimasker method)": [[373, "nilearn.maskers.NiftiMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.niftimasker method)": [[373, "nilearn.maskers.NiftiMasker.set_fit_request"]], "set_output() (nilearn.maskers.niftimasker method)": [[373, "nilearn.maskers.NiftiMasker.set_output"]], "set_params() (nilearn.maskers.niftimasker method)": [[373, "nilearn.maskers.NiftiMasker.set_params"]], "set_transform_request() (nilearn.maskers.niftimasker method)": [[373, "nilearn.maskers.NiftiMasker.set_transform_request"]], "transform() (nilearn.maskers.niftimasker method)": [[373, "nilearn.maskers.NiftiMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftimasker method)": [[373, "nilearn.maskers.NiftiMasker.transform_single_imgs"]], "niftispheresmasker (class in nilearn.maskers)": [[374, "nilearn.maskers.NiftiSpheresMasker"]], "__init__() (nilearn.maskers.niftispheresmasker method)": [[374, "nilearn.maskers.NiftiSpheresMasker.__init__"]], "fit() (nilearn.maskers.niftispheresmasker method)": [[374, "nilearn.maskers.NiftiSpheresMasker.fit"]], "fit_transform() (nilearn.maskers.niftispheresmasker method)": [[374, "nilearn.maskers.NiftiSpheresMasker.fit_transform"]], "generate_report() (nilearn.maskers.niftispheresmasker method)": [[374, "nilearn.maskers.NiftiSpheresMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.niftispheresmasker method)": [[374, "nilearn.maskers.NiftiSpheresMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.niftispheresmasker method)": [[374, "nilearn.maskers.NiftiSpheresMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftispheresmasker method)": [[374, "nilearn.maskers.NiftiSpheresMasker.inverse_transform"]], "set_inverse_transform_request() (nilearn.maskers.niftispheresmasker method)": [[374, "nilearn.maskers.NiftiSpheresMasker.set_inverse_transform_request"]], "set_output() (nilearn.maskers.niftispheresmasker method)": [[374, "nilearn.maskers.NiftiSpheresMasker.set_output"]], "set_params() (nilearn.maskers.niftispheresmasker method)": [[374, "nilearn.maskers.NiftiSpheresMasker.set_params"]], "set_transform_request() (nilearn.maskers.niftispheresmasker method)": [[374, "nilearn.maskers.NiftiSpheresMasker.set_transform_request"]], "transform() (nilearn.maskers.niftispheresmasker method)": [[374, "nilearn.maskers.NiftiSpheresMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftispheresmasker method)": [[374, "nilearn.maskers.NiftiSpheresMasker.transform_single_imgs"]], "apply_mask() (in module nilearn.masking)": [[375, "nilearn.masking.apply_mask"]], "compute_background_mask() (in module nilearn.masking)": [[376, "nilearn.masking.compute_background_mask"]], "compute_brain_mask() (in module nilearn.masking)": [[377, "nilearn.masking.compute_brain_mask"]], "compute_epi_mask() (in module nilearn.masking)": [[378, "nilearn.masking.compute_epi_mask"]], "compute_multi_background_mask() (in module nilearn.masking)": [[379, "nilearn.masking.compute_multi_background_mask"]], "compute_multi_brain_mask() (in module nilearn.masking)": [[380, "nilearn.masking.compute_multi_brain_mask"]], "compute_multi_epi_mask() (in module nilearn.masking)": [[381, "nilearn.masking.compute_multi_epi_mask"]], "intersect_masks() (in module nilearn.masking)": [[382, "nilearn.masking.intersect_masks"]], "unmask() (in module nilearn.masking)": [[383, "nilearn.masking.unmask"]], "permuted_ols() (in module nilearn.mass_univariate)": [[384, "nilearn.mass_univariate.permuted_ols"]], "baseaxes (class in nilearn.plotting.displays)": [[385, "nilearn.plotting.displays.BaseAxes"]], "__init__() (nilearn.plotting.displays.baseaxes method)": [[385, "nilearn.plotting.displays.BaseAxes.__init__"]], "add_object_bounds() (nilearn.plotting.displays.baseaxes method)": [[385, "nilearn.plotting.displays.BaseAxes.add_object_bounds"]], "draw_2d() (nilearn.plotting.displays.baseaxes method)": [[385, "nilearn.plotting.displays.BaseAxes.draw_2d"]], "draw_left_right() (nilearn.plotting.displays.baseaxes method)": [[385, "nilearn.plotting.displays.BaseAxes.draw_left_right"]], "draw_position() (nilearn.plotting.displays.baseaxes method)": [[385, "nilearn.plotting.displays.BaseAxes.draw_position"]], "draw_scale_bar() (nilearn.plotting.displays.baseaxes method)": [[385, "nilearn.plotting.displays.BaseAxes.draw_scale_bar"]], "get_object_bounds() (nilearn.plotting.displays.baseaxes method)": [[385, "nilearn.plotting.displays.BaseAxes.get_object_bounds"]], "transform_to_2d() (nilearn.plotting.displays.baseaxes method)": [[385, "nilearn.plotting.displays.BaseAxes.transform_to_2d"]], "baseslicer (class in nilearn.plotting.displays)": [[386, "nilearn.plotting.displays.BaseSlicer"]], "__init__() (nilearn.plotting.displays.baseslicer method)": [[386, "nilearn.plotting.displays.BaseSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.baseslicer method)": [[386, "nilearn.plotting.displays.BaseSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.baseslicer method)": [[386, "nilearn.plotting.displays.BaseSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.baseslicer method)": [[386, "nilearn.plotting.displays.BaseSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.baseslicer method)": [[386, "nilearn.plotting.displays.BaseSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.baseslicer method)": [[386, "nilearn.plotting.displays.BaseSlicer.annotate"]], "black_bg (nilearn.plotting.displays.baseslicer property)": [[386, "nilearn.plotting.displays.BaseSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.baseslicer property)": [[386, "nilearn.plotting.displays.BaseSlicer.brain_color"]], "close() (nilearn.plotting.displays.baseslicer method)": [[386, "nilearn.plotting.displays.BaseSlicer.close"]], "find_cut_coords() (nilearn.plotting.displays.baseslicer static method)": [[386, "nilearn.plotting.displays.BaseSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.baseslicer class method)": [[386, "nilearn.plotting.displays.BaseSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.baseslicer method)": [[386, "nilearn.plotting.displays.BaseSlicer.savefig"]], "title() (nilearn.plotting.displays.baseslicer method)": [[386, "nilearn.plotting.displays.BaseSlicer.title"]], "cutaxes (class in nilearn.plotting.displays)": [[387, "nilearn.plotting.displays.CutAxes"]], "__init__() (nilearn.plotting.displays.cutaxes method)": [[387, "nilearn.plotting.displays.CutAxes.__init__"]], "add_object_bounds() (nilearn.plotting.displays.cutaxes method)": [[387, "nilearn.plotting.displays.CutAxes.add_object_bounds"]], "draw_2d() (nilearn.plotting.displays.cutaxes method)": [[387, "nilearn.plotting.displays.CutAxes.draw_2d"]], "draw_left_right() (nilearn.plotting.displays.cutaxes method)": [[387, "nilearn.plotting.displays.CutAxes.draw_left_right"]], "draw_position() (nilearn.plotting.displays.cutaxes method)": [[387, "nilearn.plotting.displays.CutAxes.draw_position"]], "draw_scale_bar() (nilearn.plotting.displays.cutaxes method)": [[387, "nilearn.plotting.displays.CutAxes.draw_scale_bar"]], "get_object_bounds() (nilearn.plotting.displays.cutaxes method)": [[387, "nilearn.plotting.displays.CutAxes.get_object_bounds"]], "transform_to_2d() (nilearn.plotting.displays.cutaxes method)": [[387, "nilearn.plotting.displays.CutAxes.transform_to_2d"]], "glassbrainaxes (class in nilearn.plotting.displays)": [[388, "nilearn.plotting.displays.GlassBrainAxes"]], "__init__() (nilearn.plotting.displays.glassbrainaxes method)": [[388, "nilearn.plotting.displays.GlassBrainAxes.__init__"]], "add_object_bounds() (nilearn.plotting.displays.glassbrainaxes method)": [[388, "nilearn.plotting.displays.GlassBrainAxes.add_object_bounds"]], "draw_2d() (nilearn.plotting.displays.glassbrainaxes method)": [[388, "nilearn.plotting.displays.GlassBrainAxes.draw_2d"]], "draw_left_right() (nilearn.plotting.displays.glassbrainaxes method)": [[388, "nilearn.plotting.displays.GlassBrainAxes.draw_left_right"]], "draw_position() (nilearn.plotting.displays.glassbrainaxes method)": [[388, "nilearn.plotting.displays.GlassBrainAxes.draw_position"]], "draw_scale_bar() (nilearn.plotting.displays.glassbrainaxes method)": [[388, "nilearn.plotting.displays.GlassBrainAxes.draw_scale_bar"]], "get_object_bounds() (nilearn.plotting.displays.glassbrainaxes method)": [[388, "nilearn.plotting.displays.GlassBrainAxes.get_object_bounds"]], "transform_to_2d() (nilearn.plotting.displays.glassbrainaxes method)": [[388, "nilearn.plotting.displays.GlassBrainAxes.transform_to_2d"]], "lprojector (class in nilearn.plotting.displays)": [[389, "nilearn.plotting.displays.LProjector"]], "__init__() (nilearn.plotting.displays.lprojector method)": [[389, "nilearn.plotting.displays.LProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lprojector method)": [[389, "nilearn.plotting.displays.LProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lprojector method)": [[389, "nilearn.plotting.displays.LProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lprojector method)": [[389, "nilearn.plotting.displays.LProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lprojector method)": [[389, "nilearn.plotting.displays.LProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lprojector method)": [[389, "nilearn.plotting.displays.LProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lprojector method)": [[389, "nilearn.plotting.displays.LProjector.annotate"]], "black_bg (nilearn.plotting.displays.lprojector property)": [[389, "nilearn.plotting.displays.LProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lprojector property)": [[389, "nilearn.plotting.displays.LProjector.brain_color"]], "close() (nilearn.plotting.displays.lprojector method)": [[389, "nilearn.plotting.displays.LProjector.close"]], "draw_cross() (nilearn.plotting.displays.lprojector method)": [[389, "nilearn.plotting.displays.LProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lprojector class method)": [[389, "nilearn.plotting.displays.LProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lprojector class method)": [[389, "nilearn.plotting.displays.LProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lprojector method)": [[389, "nilearn.plotting.displays.LProjector.savefig"]], "title() (nilearn.plotting.displays.lprojector method)": [[389, "nilearn.plotting.displays.LProjector.title"]], "lrprojector (class in nilearn.plotting.displays)": [[390, "nilearn.plotting.displays.LRProjector"]], "__init__() (nilearn.plotting.displays.lrprojector method)": [[390, "nilearn.plotting.displays.LRProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lrprojector method)": [[390, "nilearn.plotting.displays.LRProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lrprojector method)": [[390, "nilearn.plotting.displays.LRProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lrprojector method)": [[390, "nilearn.plotting.displays.LRProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lrprojector method)": [[390, "nilearn.plotting.displays.LRProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lrprojector method)": [[390, "nilearn.plotting.displays.LRProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lrprojector method)": [[390, "nilearn.plotting.displays.LRProjector.annotate"]], "black_bg (nilearn.plotting.displays.lrprojector property)": [[390, "nilearn.plotting.displays.LRProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lrprojector property)": [[390, "nilearn.plotting.displays.LRProjector.brain_color"]], "close() (nilearn.plotting.displays.lrprojector method)": [[390, "nilearn.plotting.displays.LRProjector.close"]], "draw_cross() (nilearn.plotting.displays.lrprojector method)": [[390, "nilearn.plotting.displays.LRProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lrprojector class method)": [[390, "nilearn.plotting.displays.LRProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lrprojector class method)": [[390, "nilearn.plotting.displays.LRProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lrprojector method)": [[390, "nilearn.plotting.displays.LRProjector.savefig"]], "title() (nilearn.plotting.displays.lrprojector method)": [[390, "nilearn.plotting.displays.LRProjector.title"]], "lyrprojector (class in nilearn.plotting.displays)": [[391, "nilearn.plotting.displays.LYRProjector"]], "__init__() (nilearn.plotting.displays.lyrprojector method)": [[391, "nilearn.plotting.displays.LYRProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lyrprojector method)": [[391, "nilearn.plotting.displays.LYRProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lyrprojector method)": [[391, "nilearn.plotting.displays.LYRProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lyrprojector method)": [[391, "nilearn.plotting.displays.LYRProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lyrprojector method)": [[391, "nilearn.plotting.displays.LYRProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lyrprojector method)": [[391, "nilearn.plotting.displays.LYRProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lyrprojector method)": [[391, "nilearn.plotting.displays.LYRProjector.annotate"]], "black_bg (nilearn.plotting.displays.lyrprojector property)": [[391, "nilearn.plotting.displays.LYRProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lyrprojector property)": [[391, "nilearn.plotting.displays.LYRProjector.brain_color"]], "close() (nilearn.plotting.displays.lyrprojector method)": [[391, "nilearn.plotting.displays.LYRProjector.close"]], "draw_cross() (nilearn.plotting.displays.lyrprojector method)": [[391, "nilearn.plotting.displays.LYRProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lyrprojector class method)": [[391, "nilearn.plotting.displays.LYRProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lyrprojector class method)": [[391, "nilearn.plotting.displays.LYRProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lyrprojector method)": [[391, "nilearn.plotting.displays.LYRProjector.savefig"]], "title() (nilearn.plotting.displays.lyrprojector method)": [[391, "nilearn.plotting.displays.LYRProjector.title"]], "lyrzprojector (class in nilearn.plotting.displays)": [[392, "nilearn.plotting.displays.LYRZProjector"]], "__init__() (nilearn.plotting.displays.lyrzprojector method)": [[392, "nilearn.plotting.displays.LYRZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lyrzprojector method)": [[392, "nilearn.plotting.displays.LYRZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lyrzprojector method)": [[392, "nilearn.plotting.displays.LYRZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lyrzprojector method)": [[392, "nilearn.plotting.displays.LYRZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lyrzprojector method)": [[392, "nilearn.plotting.displays.LYRZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lyrzprojector method)": [[392, "nilearn.plotting.displays.LYRZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lyrzprojector method)": [[392, "nilearn.plotting.displays.LYRZProjector.annotate"]], "black_bg (nilearn.plotting.displays.lyrzprojector property)": [[392, "nilearn.plotting.displays.LYRZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lyrzprojector property)": [[392, "nilearn.plotting.displays.LYRZProjector.brain_color"]], "close() (nilearn.plotting.displays.lyrzprojector method)": [[392, "nilearn.plotting.displays.LYRZProjector.close"]], "draw_cross() (nilearn.plotting.displays.lyrzprojector method)": [[392, "nilearn.plotting.displays.LYRZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lyrzprojector class method)": [[392, "nilearn.plotting.displays.LYRZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lyrzprojector class method)": [[392, "nilearn.plotting.displays.LYRZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lyrzprojector method)": [[392, "nilearn.plotting.displays.LYRZProjector.savefig"]], "title() (nilearn.plotting.displays.lyrzprojector method)": [[392, "nilearn.plotting.displays.LYRZProjector.title"]], "lzrprojector (class in nilearn.plotting.displays)": [[393, "nilearn.plotting.displays.LZRProjector"]], "__init__() (nilearn.plotting.displays.lzrprojector method)": [[393, "nilearn.plotting.displays.LZRProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lzrprojector method)": [[393, "nilearn.plotting.displays.LZRProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lzrprojector method)": [[393, "nilearn.plotting.displays.LZRProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lzrprojector method)": [[393, "nilearn.plotting.displays.LZRProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lzrprojector method)": [[393, "nilearn.plotting.displays.LZRProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lzrprojector method)": [[393, "nilearn.plotting.displays.LZRProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lzrprojector method)": [[393, "nilearn.plotting.displays.LZRProjector.annotate"]], "black_bg (nilearn.plotting.displays.lzrprojector property)": [[393, "nilearn.plotting.displays.LZRProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lzrprojector property)": [[393, "nilearn.plotting.displays.LZRProjector.brain_color"]], "close() (nilearn.plotting.displays.lzrprojector method)": [[393, "nilearn.plotting.displays.LZRProjector.close"]], "draw_cross() (nilearn.plotting.displays.lzrprojector method)": [[393, "nilearn.plotting.displays.LZRProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lzrprojector class method)": [[393, "nilearn.plotting.displays.LZRProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lzrprojector class method)": [[393, "nilearn.plotting.displays.LZRProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lzrprojector method)": [[393, "nilearn.plotting.displays.LZRProjector.savefig"]], "title() (nilearn.plotting.displays.lzrprojector method)": [[393, "nilearn.plotting.displays.LZRProjector.title"]], "lzryprojector (class in nilearn.plotting.displays)": [[394, "nilearn.plotting.displays.LZRYProjector"]], "__init__() (nilearn.plotting.displays.lzryprojector method)": [[394, "nilearn.plotting.displays.LZRYProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lzryprojector method)": [[394, "nilearn.plotting.displays.LZRYProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lzryprojector method)": [[394, "nilearn.plotting.displays.LZRYProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lzryprojector method)": [[394, "nilearn.plotting.displays.LZRYProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lzryprojector method)": [[394, "nilearn.plotting.displays.LZRYProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lzryprojector method)": [[394, "nilearn.plotting.displays.LZRYProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lzryprojector method)": [[394, "nilearn.plotting.displays.LZRYProjector.annotate"]], "black_bg (nilearn.plotting.displays.lzryprojector property)": [[394, "nilearn.plotting.displays.LZRYProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lzryprojector property)": [[394, "nilearn.plotting.displays.LZRYProjector.brain_color"]], "close() (nilearn.plotting.displays.lzryprojector method)": [[394, "nilearn.plotting.displays.LZRYProjector.close"]], "draw_cross() (nilearn.plotting.displays.lzryprojector method)": [[394, "nilearn.plotting.displays.LZRYProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lzryprojector class method)": [[394, "nilearn.plotting.displays.LZRYProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lzryprojector class method)": [[394, "nilearn.plotting.displays.LZRYProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lzryprojector method)": [[394, "nilearn.plotting.displays.LZRYProjector.savefig"]], "title() (nilearn.plotting.displays.lzryprojector method)": [[394, "nilearn.plotting.displays.LZRYProjector.title"]], "mosaicslicer (class in nilearn.plotting.displays)": [[395, "nilearn.plotting.displays.MosaicSlicer"]], "__init__() (nilearn.plotting.displays.mosaicslicer method)": [[395, "nilearn.plotting.displays.MosaicSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.mosaicslicer method)": [[395, "nilearn.plotting.displays.MosaicSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.mosaicslicer method)": [[395, "nilearn.plotting.displays.MosaicSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.mosaicslicer method)": [[395, "nilearn.plotting.displays.MosaicSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.mosaicslicer method)": [[395, "nilearn.plotting.displays.MosaicSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.mosaicslicer method)": [[395, "nilearn.plotting.displays.MosaicSlicer.annotate"]], "black_bg (nilearn.plotting.displays.mosaicslicer property)": [[395, "nilearn.plotting.displays.MosaicSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.mosaicslicer property)": [[395, "nilearn.plotting.displays.MosaicSlicer.brain_color"]], "close() (nilearn.plotting.displays.mosaicslicer method)": [[395, "nilearn.plotting.displays.MosaicSlicer.close"]], "draw_cross() (nilearn.plotting.displays.mosaicslicer method)": [[395, "nilearn.plotting.displays.MosaicSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.mosaicslicer class method)": [[395, "nilearn.plotting.displays.MosaicSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.mosaicslicer class method)": [[395, "nilearn.plotting.displays.MosaicSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.mosaicslicer method)": [[395, "nilearn.plotting.displays.MosaicSlicer.savefig"]], "title() (nilearn.plotting.displays.mosaicslicer method)": [[395, "nilearn.plotting.displays.MosaicSlicer.title"]], "orthoprojector (class in nilearn.plotting.displays)": [[396, "nilearn.plotting.displays.OrthoProjector"]], "__init__() (nilearn.plotting.displays.orthoprojector method)": [[396, "nilearn.plotting.displays.OrthoProjector.__init__"]], "add_contours() (nilearn.plotting.displays.orthoprojector method)": [[396, "nilearn.plotting.displays.OrthoProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.orthoprojector method)": [[396, "nilearn.plotting.displays.OrthoProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.orthoprojector method)": [[396, "nilearn.plotting.displays.OrthoProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.orthoprojector method)": [[396, "nilearn.plotting.displays.OrthoProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.orthoprojector method)": [[396, "nilearn.plotting.displays.OrthoProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.orthoprojector method)": [[396, "nilearn.plotting.displays.OrthoProjector.annotate"]], "black_bg (nilearn.plotting.displays.orthoprojector property)": [[396, "nilearn.plotting.displays.OrthoProjector.black_bg"]], "brain_color (nilearn.plotting.displays.orthoprojector property)": [[396, "nilearn.plotting.displays.OrthoProjector.brain_color"]], "close() (nilearn.plotting.displays.orthoprojector method)": [[396, "nilearn.plotting.displays.OrthoProjector.close"]], "draw_cross() (nilearn.plotting.displays.orthoprojector method)": [[396, "nilearn.plotting.displays.OrthoProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.orthoprojector class method)": [[396, "nilearn.plotting.displays.OrthoProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.orthoprojector class method)": [[396, "nilearn.plotting.displays.OrthoProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.orthoprojector method)": [[396, "nilearn.plotting.displays.OrthoProjector.savefig"]], "title() (nilearn.plotting.displays.orthoprojector method)": [[396, "nilearn.plotting.displays.OrthoProjector.title"]], "orthoslicer (class in nilearn.plotting.displays)": [[397, "nilearn.plotting.displays.OrthoSlicer"]], "__init__() (nilearn.plotting.displays.orthoslicer method)": [[397, "nilearn.plotting.displays.OrthoSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.orthoslicer method)": [[397, "nilearn.plotting.displays.OrthoSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.orthoslicer method)": [[397, "nilearn.plotting.displays.OrthoSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.orthoslicer method)": [[397, "nilearn.plotting.displays.OrthoSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.orthoslicer method)": [[397, "nilearn.plotting.displays.OrthoSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.orthoslicer method)": [[397, "nilearn.plotting.displays.OrthoSlicer.annotate"]], "black_bg (nilearn.plotting.displays.orthoslicer property)": [[397, "nilearn.plotting.displays.OrthoSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.orthoslicer property)": [[397, "nilearn.plotting.displays.OrthoSlicer.brain_color"]], "close() (nilearn.plotting.displays.orthoslicer method)": [[397, "nilearn.plotting.displays.OrthoSlicer.close"]], "draw_cross() (nilearn.plotting.displays.orthoslicer method)": [[397, "nilearn.plotting.displays.OrthoSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.orthoslicer class method)": [[397, "nilearn.plotting.displays.OrthoSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.orthoslicer class method)": [[397, "nilearn.plotting.displays.OrthoSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.orthoslicer method)": [[397, "nilearn.plotting.displays.OrthoSlicer.savefig"]], "title() (nilearn.plotting.displays.orthoslicer method)": [[397, "nilearn.plotting.displays.OrthoSlicer.title"]], "plotlysurfacefigure (class in nilearn.plotting.displays)": [[398, "nilearn.plotting.displays.PlotlySurfaceFigure"]], "__init__() (nilearn.plotting.displays.plotlysurfacefigure method)": [[398, "nilearn.plotting.displays.PlotlySurfaceFigure.__init__"]], "savefig() (nilearn.plotting.displays.plotlysurfacefigure method)": [[398, "nilearn.plotting.displays.PlotlySurfaceFigure.savefig"]], "show() (nilearn.plotting.displays.plotlysurfacefigure method)": [[398, "nilearn.plotting.displays.PlotlySurfaceFigure.show"]], "rprojector (class in nilearn.plotting.displays)": [[399, "nilearn.plotting.displays.RProjector"]], "__init__() (nilearn.plotting.displays.rprojector method)": [[399, "nilearn.plotting.displays.RProjector.__init__"]], "add_contours() (nilearn.plotting.displays.rprojector method)": [[399, "nilearn.plotting.displays.RProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.rprojector method)": [[399, "nilearn.plotting.displays.RProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.rprojector method)": [[399, "nilearn.plotting.displays.RProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.rprojector method)": [[399, "nilearn.plotting.displays.RProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.rprojector method)": [[399, "nilearn.plotting.displays.RProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.rprojector method)": [[399, "nilearn.plotting.displays.RProjector.annotate"]], "black_bg (nilearn.plotting.displays.rprojector property)": [[399, "nilearn.plotting.displays.RProjector.black_bg"]], "brain_color (nilearn.plotting.displays.rprojector property)": [[399, "nilearn.plotting.displays.RProjector.brain_color"]], "close() (nilearn.plotting.displays.rprojector method)": [[399, "nilearn.plotting.displays.RProjector.close"]], "draw_cross() (nilearn.plotting.displays.rprojector method)": [[399, "nilearn.plotting.displays.RProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.rprojector class method)": [[399, "nilearn.plotting.displays.RProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.rprojector class method)": [[399, "nilearn.plotting.displays.RProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.rprojector method)": [[399, "nilearn.plotting.displays.RProjector.savefig"]], "title() (nilearn.plotting.displays.rprojector method)": [[399, "nilearn.plotting.displays.RProjector.title"]], "tiledslicer (class in nilearn.plotting.displays)": [[400, "nilearn.plotting.displays.TiledSlicer"]], "__init__() (nilearn.plotting.displays.tiledslicer method)": [[400, "nilearn.plotting.displays.TiledSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.tiledslicer method)": [[400, "nilearn.plotting.displays.TiledSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.tiledslicer method)": [[400, "nilearn.plotting.displays.TiledSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.tiledslicer method)": [[400, "nilearn.plotting.displays.TiledSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.tiledslicer method)": [[400, "nilearn.plotting.displays.TiledSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.tiledslicer method)": [[400, "nilearn.plotting.displays.TiledSlicer.annotate"]], "black_bg (nilearn.plotting.displays.tiledslicer property)": [[400, "nilearn.plotting.displays.TiledSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.tiledslicer property)": [[400, "nilearn.plotting.displays.TiledSlicer.brain_color"]], "close() (nilearn.plotting.displays.tiledslicer method)": [[400, "nilearn.plotting.displays.TiledSlicer.close"]], "draw_cross() (nilearn.plotting.displays.tiledslicer method)": [[400, "nilearn.plotting.displays.TiledSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.tiledslicer class method)": [[400, "nilearn.plotting.displays.TiledSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.tiledslicer class method)": [[400, "nilearn.plotting.displays.TiledSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.tiledslicer method)": [[400, "nilearn.plotting.displays.TiledSlicer.savefig"]], "title() (nilearn.plotting.displays.tiledslicer method)": [[400, "nilearn.plotting.displays.TiledSlicer.title"]], "xprojector (class in nilearn.plotting.displays)": [[401, "nilearn.plotting.displays.XProjector"]], "__init__() (nilearn.plotting.displays.xprojector method)": [[401, "nilearn.plotting.displays.XProjector.__init__"]], "add_contours() (nilearn.plotting.displays.xprojector method)": [[401, "nilearn.plotting.displays.XProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.xprojector method)": [[401, "nilearn.plotting.displays.XProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.xprojector method)": [[401, "nilearn.plotting.displays.XProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.xprojector method)": [[401, "nilearn.plotting.displays.XProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.xprojector method)": [[401, "nilearn.plotting.displays.XProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.xprojector method)": [[401, "nilearn.plotting.displays.XProjector.annotate"]], "black_bg (nilearn.plotting.displays.xprojector property)": [[401, "nilearn.plotting.displays.XProjector.black_bg"]], "brain_color (nilearn.plotting.displays.xprojector property)": [[401, "nilearn.plotting.displays.XProjector.brain_color"]], "close() (nilearn.plotting.displays.xprojector method)": [[401, "nilearn.plotting.displays.XProjector.close"]], "draw_cross() (nilearn.plotting.displays.xprojector method)": [[401, "nilearn.plotting.displays.XProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xprojector class method)": [[401, "nilearn.plotting.displays.XProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xprojector class method)": [[401, "nilearn.plotting.displays.XProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.xprojector method)": [[401, "nilearn.plotting.displays.XProjector.savefig"]], "title() (nilearn.plotting.displays.xprojector method)": [[401, "nilearn.plotting.displays.XProjector.title"]], "xslicer (class in nilearn.plotting.displays)": [[402, "nilearn.plotting.displays.XSlicer"]], "__init__() (nilearn.plotting.displays.xslicer method)": [[402, "nilearn.plotting.displays.XSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.xslicer method)": [[402, "nilearn.plotting.displays.XSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.xslicer method)": [[402, "nilearn.plotting.displays.XSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.xslicer method)": [[402, "nilearn.plotting.displays.XSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.xslicer method)": [[402, "nilearn.plotting.displays.XSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.xslicer method)": [[402, "nilearn.plotting.displays.XSlicer.annotate"]], "black_bg (nilearn.plotting.displays.xslicer property)": [[402, "nilearn.plotting.displays.XSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.xslicer property)": [[402, "nilearn.plotting.displays.XSlicer.brain_color"]], "close() (nilearn.plotting.displays.xslicer method)": [[402, "nilearn.plotting.displays.XSlicer.close"]], "draw_cross() (nilearn.plotting.displays.xslicer method)": [[402, "nilearn.plotting.displays.XSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xslicer class method)": [[402, "nilearn.plotting.displays.XSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xslicer class method)": [[402, "nilearn.plotting.displays.XSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.xslicer method)": [[402, "nilearn.plotting.displays.XSlicer.savefig"]], "title() (nilearn.plotting.displays.xslicer method)": [[402, "nilearn.plotting.displays.XSlicer.title"]], "xzprojector (class in nilearn.plotting.displays)": [[403, "nilearn.plotting.displays.XZProjector"]], "__init__() (nilearn.plotting.displays.xzprojector method)": [[403, "nilearn.plotting.displays.XZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.xzprojector method)": [[403, "nilearn.plotting.displays.XZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.xzprojector method)": [[403, "nilearn.plotting.displays.XZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.xzprojector method)": [[403, "nilearn.plotting.displays.XZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.xzprojector method)": [[403, "nilearn.plotting.displays.XZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.xzprojector method)": [[403, "nilearn.plotting.displays.XZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.xzprojector method)": [[403, "nilearn.plotting.displays.XZProjector.annotate"]], "black_bg (nilearn.plotting.displays.xzprojector property)": [[403, "nilearn.plotting.displays.XZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.xzprojector property)": [[403, "nilearn.plotting.displays.XZProjector.brain_color"]], "close() (nilearn.plotting.displays.xzprojector method)": [[403, "nilearn.plotting.displays.XZProjector.close"]], "draw_cross() (nilearn.plotting.displays.xzprojector method)": [[403, "nilearn.plotting.displays.XZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xzprojector class method)": [[403, "nilearn.plotting.displays.XZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xzprojector class method)": [[403, "nilearn.plotting.displays.XZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.xzprojector method)": [[403, "nilearn.plotting.displays.XZProjector.savefig"]], "title() (nilearn.plotting.displays.xzprojector method)": [[403, "nilearn.plotting.displays.XZProjector.title"]], "xzslicer (class in nilearn.plotting.displays)": [[404, "nilearn.plotting.displays.XZSlicer"]], "__init__() (nilearn.plotting.displays.xzslicer method)": [[404, "nilearn.plotting.displays.XZSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.xzslicer method)": [[404, "nilearn.plotting.displays.XZSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.xzslicer method)": [[404, "nilearn.plotting.displays.XZSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.xzslicer method)": [[404, "nilearn.plotting.displays.XZSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.xzslicer method)": [[404, "nilearn.plotting.displays.XZSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.xzslicer method)": [[404, "nilearn.plotting.displays.XZSlicer.annotate"]], "black_bg (nilearn.plotting.displays.xzslicer property)": [[404, "nilearn.plotting.displays.XZSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.xzslicer property)": [[404, "nilearn.plotting.displays.XZSlicer.brain_color"]], "close() (nilearn.plotting.displays.xzslicer method)": [[404, "nilearn.plotting.displays.XZSlicer.close"]], "draw_cross() (nilearn.plotting.displays.xzslicer method)": [[404, "nilearn.plotting.displays.XZSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xzslicer class method)": [[404, "nilearn.plotting.displays.XZSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xzslicer class method)": [[404, "nilearn.plotting.displays.XZSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.xzslicer method)": [[404, "nilearn.plotting.displays.XZSlicer.savefig"]], "title() (nilearn.plotting.displays.xzslicer method)": [[404, "nilearn.plotting.displays.XZSlicer.title"]], "yprojector (class in nilearn.plotting.displays)": [[405, "nilearn.plotting.displays.YProjector"]], "__init__() (nilearn.plotting.displays.yprojector method)": [[405, "nilearn.plotting.displays.YProjector.__init__"]], "add_contours() (nilearn.plotting.displays.yprojector method)": [[405, "nilearn.plotting.displays.YProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.yprojector method)": [[405, "nilearn.plotting.displays.YProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.yprojector method)": [[405, "nilearn.plotting.displays.YProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.yprojector method)": [[405, "nilearn.plotting.displays.YProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.yprojector method)": [[405, "nilearn.plotting.displays.YProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.yprojector method)": [[405, "nilearn.plotting.displays.YProjector.annotate"]], "black_bg (nilearn.plotting.displays.yprojector property)": [[405, "nilearn.plotting.displays.YProjector.black_bg"]], "brain_color (nilearn.plotting.displays.yprojector property)": [[405, "nilearn.plotting.displays.YProjector.brain_color"]], "close() (nilearn.plotting.displays.yprojector method)": [[405, "nilearn.plotting.displays.YProjector.close"]], "draw_cross() (nilearn.plotting.displays.yprojector method)": [[405, "nilearn.plotting.displays.YProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yprojector class method)": [[405, "nilearn.plotting.displays.YProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yprojector class method)": [[405, "nilearn.plotting.displays.YProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.yprojector method)": [[405, "nilearn.plotting.displays.YProjector.savefig"]], "title() (nilearn.plotting.displays.yprojector method)": [[405, "nilearn.plotting.displays.YProjector.title"]], "yslicer (class in nilearn.plotting.displays)": [[406, "nilearn.plotting.displays.YSlicer"]], "__init__() (nilearn.plotting.displays.yslicer method)": [[406, "nilearn.plotting.displays.YSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.yslicer method)": [[406, "nilearn.plotting.displays.YSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.yslicer method)": [[406, "nilearn.plotting.displays.YSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.yslicer method)": [[406, "nilearn.plotting.displays.YSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.yslicer method)": [[406, "nilearn.plotting.displays.YSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.yslicer method)": [[406, "nilearn.plotting.displays.YSlicer.annotate"]], "black_bg (nilearn.plotting.displays.yslicer property)": [[406, "nilearn.plotting.displays.YSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.yslicer property)": [[406, "nilearn.plotting.displays.YSlicer.brain_color"]], "close() (nilearn.plotting.displays.yslicer method)": [[406, "nilearn.plotting.displays.YSlicer.close"]], "draw_cross() (nilearn.plotting.displays.yslicer method)": [[406, "nilearn.plotting.displays.YSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yslicer class method)": [[406, "nilearn.plotting.displays.YSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yslicer class method)": [[406, "nilearn.plotting.displays.YSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.yslicer method)": [[406, "nilearn.plotting.displays.YSlicer.savefig"]], "title() (nilearn.plotting.displays.yslicer method)": [[406, "nilearn.plotting.displays.YSlicer.title"]], "yxprojector (class in nilearn.plotting.displays)": [[407, "nilearn.plotting.displays.YXProjector"]], "__init__() (nilearn.plotting.displays.yxprojector method)": [[407, "nilearn.plotting.displays.YXProjector.__init__"]], "add_contours() (nilearn.plotting.displays.yxprojector method)": [[407, "nilearn.plotting.displays.YXProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.yxprojector method)": [[407, "nilearn.plotting.displays.YXProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.yxprojector method)": [[407, "nilearn.plotting.displays.YXProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.yxprojector method)": [[407, "nilearn.plotting.displays.YXProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.yxprojector method)": [[407, "nilearn.plotting.displays.YXProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.yxprojector method)": [[407, "nilearn.plotting.displays.YXProjector.annotate"]], "black_bg (nilearn.plotting.displays.yxprojector property)": [[407, "nilearn.plotting.displays.YXProjector.black_bg"]], "brain_color (nilearn.plotting.displays.yxprojector property)": [[407, "nilearn.plotting.displays.YXProjector.brain_color"]], "close() (nilearn.plotting.displays.yxprojector method)": [[407, "nilearn.plotting.displays.YXProjector.close"]], "draw_cross() (nilearn.plotting.displays.yxprojector method)": [[407, "nilearn.plotting.displays.YXProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yxprojector class method)": [[407, "nilearn.plotting.displays.YXProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yxprojector class method)": [[407, "nilearn.plotting.displays.YXProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.yxprojector method)": [[407, "nilearn.plotting.displays.YXProjector.savefig"]], "title() (nilearn.plotting.displays.yxprojector method)": [[407, "nilearn.plotting.displays.YXProjector.title"]], "yxslicer (class in nilearn.plotting.displays)": [[408, "nilearn.plotting.displays.YXSlicer"]], "__init__() (nilearn.plotting.displays.yxslicer method)": [[408, "nilearn.plotting.displays.YXSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.yxslicer method)": [[408, "nilearn.plotting.displays.YXSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.yxslicer method)": [[408, "nilearn.plotting.displays.YXSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.yxslicer method)": [[408, "nilearn.plotting.displays.YXSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.yxslicer method)": [[408, "nilearn.plotting.displays.YXSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.yxslicer method)": [[408, "nilearn.plotting.displays.YXSlicer.annotate"]], "black_bg (nilearn.plotting.displays.yxslicer property)": [[408, "nilearn.plotting.displays.YXSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.yxslicer property)": [[408, "nilearn.plotting.displays.YXSlicer.brain_color"]], "close() (nilearn.plotting.displays.yxslicer method)": [[408, "nilearn.plotting.displays.YXSlicer.close"]], "draw_cross() (nilearn.plotting.displays.yxslicer method)": [[408, "nilearn.plotting.displays.YXSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yxslicer class method)": [[408, "nilearn.plotting.displays.YXSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yxslicer class method)": [[408, "nilearn.plotting.displays.YXSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.yxslicer method)": [[408, "nilearn.plotting.displays.YXSlicer.savefig"]], "title() (nilearn.plotting.displays.yxslicer method)": [[408, "nilearn.plotting.displays.YXSlicer.title"]], "yzprojector (class in nilearn.plotting.displays)": [[409, "nilearn.plotting.displays.YZProjector"]], "__init__() (nilearn.plotting.displays.yzprojector method)": [[409, "nilearn.plotting.displays.YZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.yzprojector method)": [[409, "nilearn.plotting.displays.YZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.yzprojector method)": [[409, "nilearn.plotting.displays.YZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.yzprojector method)": [[409, "nilearn.plotting.displays.YZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.yzprojector method)": [[409, "nilearn.plotting.displays.YZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.yzprojector method)": [[409, "nilearn.plotting.displays.YZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.yzprojector method)": [[409, "nilearn.plotting.displays.YZProjector.annotate"]], "black_bg (nilearn.plotting.displays.yzprojector property)": [[409, "nilearn.plotting.displays.YZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.yzprojector property)": [[409, "nilearn.plotting.displays.YZProjector.brain_color"]], "close() (nilearn.plotting.displays.yzprojector method)": [[409, "nilearn.plotting.displays.YZProjector.close"]], "draw_cross() (nilearn.plotting.displays.yzprojector method)": [[409, "nilearn.plotting.displays.YZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yzprojector class method)": [[409, "nilearn.plotting.displays.YZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yzprojector class method)": [[409, "nilearn.plotting.displays.YZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.yzprojector method)": [[409, "nilearn.plotting.displays.YZProjector.savefig"]], "title() (nilearn.plotting.displays.yzprojector method)": [[409, "nilearn.plotting.displays.YZProjector.title"]], "yzslicer (class in nilearn.plotting.displays)": [[410, "nilearn.plotting.displays.YZSlicer"]], "__init__() (nilearn.plotting.displays.yzslicer method)": [[410, "nilearn.plotting.displays.YZSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.yzslicer method)": [[410, "nilearn.plotting.displays.YZSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.yzslicer method)": [[410, "nilearn.plotting.displays.YZSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.yzslicer method)": [[410, "nilearn.plotting.displays.YZSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.yzslicer method)": [[410, "nilearn.plotting.displays.YZSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.yzslicer method)": [[410, "nilearn.plotting.displays.YZSlicer.annotate"]], "black_bg (nilearn.plotting.displays.yzslicer property)": [[410, "nilearn.plotting.displays.YZSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.yzslicer property)": [[410, "nilearn.plotting.displays.YZSlicer.brain_color"]], "close() (nilearn.plotting.displays.yzslicer method)": [[410, "nilearn.plotting.displays.YZSlicer.close"]], "draw_cross() (nilearn.plotting.displays.yzslicer method)": [[410, "nilearn.plotting.displays.YZSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yzslicer class method)": [[410, "nilearn.plotting.displays.YZSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yzslicer class method)": [[410, "nilearn.plotting.displays.YZSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.yzslicer method)": [[410, "nilearn.plotting.displays.YZSlicer.savefig"]], "title() (nilearn.plotting.displays.yzslicer method)": [[410, "nilearn.plotting.displays.YZSlicer.title"]], "zprojector (class in nilearn.plotting.displays)": [[411, "nilearn.plotting.displays.ZProjector"]], "__init__() (nilearn.plotting.displays.zprojector method)": [[411, "nilearn.plotting.displays.ZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.zprojector method)": [[411, "nilearn.plotting.displays.ZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.zprojector method)": [[411, "nilearn.plotting.displays.ZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.zprojector method)": [[411, "nilearn.plotting.displays.ZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.zprojector method)": [[411, "nilearn.plotting.displays.ZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.zprojector method)": [[411, "nilearn.plotting.displays.ZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.zprojector method)": [[411, "nilearn.plotting.displays.ZProjector.annotate"]], "black_bg (nilearn.plotting.displays.zprojector property)": [[411, "nilearn.plotting.displays.ZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.zprojector property)": [[411, "nilearn.plotting.displays.ZProjector.brain_color"]], "close() (nilearn.plotting.displays.zprojector method)": [[411, "nilearn.plotting.displays.ZProjector.close"]], "draw_cross() (nilearn.plotting.displays.zprojector method)": [[411, "nilearn.plotting.displays.ZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.zprojector class method)": [[411, "nilearn.plotting.displays.ZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.zprojector class method)": [[411, "nilearn.plotting.displays.ZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.zprojector method)": [[411, "nilearn.plotting.displays.ZProjector.savefig"]], "title() (nilearn.plotting.displays.zprojector method)": [[411, "nilearn.plotting.displays.ZProjector.title"]], "zslicer (class in nilearn.plotting.displays)": [[412, "nilearn.plotting.displays.ZSlicer"]], "__init__() (nilearn.plotting.displays.zslicer method)": [[412, "nilearn.plotting.displays.ZSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.zslicer method)": [[412, "nilearn.plotting.displays.ZSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.zslicer method)": [[412, "nilearn.plotting.displays.ZSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.zslicer method)": [[412, "nilearn.plotting.displays.ZSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.zslicer method)": [[412, "nilearn.plotting.displays.ZSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.zslicer method)": [[412, "nilearn.plotting.displays.ZSlicer.annotate"]], "black_bg (nilearn.plotting.displays.zslicer property)": [[412, "nilearn.plotting.displays.ZSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.zslicer property)": [[412, "nilearn.plotting.displays.ZSlicer.brain_color"]], "close() (nilearn.plotting.displays.zslicer method)": [[412, "nilearn.plotting.displays.ZSlicer.close"]], "draw_cross() (nilearn.plotting.displays.zslicer method)": [[412, "nilearn.plotting.displays.ZSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.zslicer class method)": [[412, "nilearn.plotting.displays.ZSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.zslicer class method)": [[412, "nilearn.plotting.displays.ZSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.zslicer method)": [[412, "nilearn.plotting.displays.ZSlicer.savefig"]], "title() (nilearn.plotting.displays.zslicer method)": [[412, "nilearn.plotting.displays.ZSlicer.title"]], "get_projector() (in module nilearn.plotting.displays)": [[413, "nilearn.plotting.displays.get_projector"]], "get_slicer() (in module nilearn.plotting.displays)": [[414, "nilearn.plotting.displays.get_slicer"]], "find_cut_slices() (in module nilearn.plotting)": [[415, "nilearn.plotting.find_cut_slices"]], "find_parcellation_cut_coords() (in module nilearn.plotting)": [[416, "nilearn.plotting.find_parcellation_cut_coords"]], "find_probabilistic_atlas_cut_coords() (in module nilearn.plotting)": [[417, "nilearn.plotting.find_probabilistic_atlas_cut_coords"]], "find_xyz_cut_coords() (in module nilearn.plotting)": [[418, "nilearn.plotting.find_xyz_cut_coords"]], "plot_anat() (in module nilearn.plotting)": [[419, "nilearn.plotting.plot_anat"]], "plot_carpet() (in module nilearn.plotting)": [[420, "nilearn.plotting.plot_carpet"]], "plot_connectome() (in module nilearn.plotting)": [[421, "nilearn.plotting.plot_connectome"]], "plot_contrast_matrix() (in module nilearn.plotting)": [[422, "nilearn.plotting.plot_contrast_matrix"]], "plot_design_matrix() (in module nilearn.plotting)": [[423, "nilearn.plotting.plot_design_matrix"]], "plot_epi() (in module nilearn.plotting)": [[424, "nilearn.plotting.plot_epi"]], "plot_event() (in module nilearn.plotting)": [[425, "nilearn.plotting.plot_event"]], "plot_glass_brain() (in module nilearn.plotting)": [[426, "nilearn.plotting.plot_glass_brain"]], "plot_img() (in module nilearn.plotting)": [[427, "nilearn.plotting.plot_img"]], "plot_img_comparison() (in module nilearn.plotting)": [[428, "nilearn.plotting.plot_img_comparison"]], "plot_img_on_surf() (in module nilearn.plotting)": [[429, "nilearn.plotting.plot_img_on_surf"]], "plot_markers() (in module nilearn.plotting)": [[430, "nilearn.plotting.plot_markers"]], "plot_matrix() (in module nilearn.plotting)": [[431, "nilearn.plotting.plot_matrix"]], "plot_prob_atlas() (in module nilearn.plotting)": [[432, "nilearn.plotting.plot_prob_atlas"]], "plot_roi() (in module nilearn.plotting)": [[433, "nilearn.plotting.plot_roi"]], "plot_stat_map() (in module nilearn.plotting)": [[434, "nilearn.plotting.plot_stat_map"]], "plot_surf() (in module nilearn.plotting)": [[435, "nilearn.plotting.plot_surf"]], "plot_surf_contours() (in module nilearn.plotting)": [[436, "nilearn.plotting.plot_surf_contours"]], "plot_surf_roi() (in module nilearn.plotting)": [[437, "nilearn.plotting.plot_surf_roi"]], "plot_surf_stat_map() (in module nilearn.plotting)": [[438, "nilearn.plotting.plot_surf_stat_map"]], "show() (in module nilearn.plotting)": [[439, "nilearn.plotting.show"]], "view_connectome() (in module nilearn.plotting)": [[440, "nilearn.plotting.view_connectome"]], "view_img() (in module nilearn.plotting)": [[441, "nilearn.plotting.view_img"]], "view_img_on_surf() (in module nilearn.plotting)": [[442, "nilearn.plotting.view_img_on_surf"]], "view_markers() (in module nilearn.plotting)": [[443, "nilearn.plotting.view_markers"]], "view_surf() (in module nilearn.plotting)": [[444, "nilearn.plotting.view_surf"]], "hierarchicalkmeans (class in nilearn.regions)": [[445, "nilearn.regions.HierarchicalKMeans"]], "__init__() (nilearn.regions.hierarchicalkmeans method)": [[445, "nilearn.regions.HierarchicalKMeans.__init__"]], "fit() (nilearn.regions.hierarchicalkmeans method)": [[445, "nilearn.regions.HierarchicalKMeans.fit"]], "fit_predict() (nilearn.regions.hierarchicalkmeans method)": [[445, "nilearn.regions.HierarchicalKMeans.fit_predict"]], "fit_transform() (nilearn.regions.hierarchicalkmeans method)": [[445, "nilearn.regions.HierarchicalKMeans.fit_transform"]], "get_metadata_routing() (nilearn.regions.hierarchicalkmeans method)": [[445, "nilearn.regions.HierarchicalKMeans.get_metadata_routing"]], "get_params() (nilearn.regions.hierarchicalkmeans method)": [[445, "nilearn.regions.HierarchicalKMeans.get_params"]], "inverse_transform() (nilearn.regions.hierarchicalkmeans method)": [[445, "nilearn.regions.HierarchicalKMeans.inverse_transform"]], "set_inverse_transform_request() (nilearn.regions.hierarchicalkmeans method)": [[445, "nilearn.regions.HierarchicalKMeans.set_inverse_transform_request"]], "set_output() (nilearn.regions.hierarchicalkmeans method)": [[445, "nilearn.regions.HierarchicalKMeans.set_output"]], "set_params() (nilearn.regions.hierarchicalkmeans method)": [[445, "nilearn.regions.HierarchicalKMeans.set_params"]], "transform() (nilearn.regions.hierarchicalkmeans method)": [[445, "nilearn.regions.HierarchicalKMeans.transform"]], "parcellations (class in nilearn.regions)": [[446, "nilearn.regions.Parcellations"]], "valid_methods (nilearn.regions.parcellations attribute)": [[446, "nilearn.regions.Parcellations.VALID_METHODS"]], "__init__() (nilearn.regions.parcellations method)": [[446, "nilearn.regions.Parcellations.__init__"]], "fit() (nilearn.regions.parcellations method)": [[446, "nilearn.regions.Parcellations.fit"]], "fit_transform() (nilearn.regions.parcellations method)": [[446, "nilearn.regions.Parcellations.fit_transform"]], "get_metadata_routing() (nilearn.regions.parcellations method)": [[446, "nilearn.regions.Parcellations.get_metadata_routing"]], "get_params() (nilearn.regions.parcellations method)": [[446, "nilearn.regions.Parcellations.get_params"]], "inverse_transform() (nilearn.regions.parcellations method)": [[446, "nilearn.regions.Parcellations.inverse_transform"]], "score() (nilearn.regions.parcellations method)": [[446, "nilearn.regions.Parcellations.score"]], "set_fit_request() (nilearn.regions.parcellations method)": [[446, "nilearn.regions.Parcellations.set_fit_request"]], "set_inverse_transform_request() (nilearn.regions.parcellations method)": [[446, "nilearn.regions.Parcellations.set_inverse_transform_request"]], "set_output() (nilearn.regions.parcellations method)": [[446, "nilearn.regions.Parcellations.set_output"]], "set_params() (nilearn.regions.parcellations method)": [[446, "nilearn.regions.Parcellations.set_params"]], "set_score_request() (nilearn.regions.parcellations method)": [[446, "nilearn.regions.Parcellations.set_score_request"]], "set_transform_request() (nilearn.regions.parcellations method)": [[446, "nilearn.regions.Parcellations.set_transform_request"]], "transform() (nilearn.regions.parcellations method)": [[446, "nilearn.regions.Parcellations.transform"]], "rena (class in nilearn.regions)": [[447, "nilearn.regions.ReNA"]], "__init__() (nilearn.regions.rena method)": [[447, "nilearn.regions.ReNA.__init__"]], "fit() (nilearn.regions.rena method)": [[447, "nilearn.regions.ReNA.fit"]], "fit_predict() (nilearn.regions.rena method)": [[447, "nilearn.regions.ReNA.fit_predict"]], "fit_transform() (nilearn.regions.rena method)": [[447, "nilearn.regions.ReNA.fit_transform"]], "get_metadata_routing() (nilearn.regions.rena method)": [[447, "nilearn.regions.ReNA.get_metadata_routing"]], "get_params() (nilearn.regions.rena method)": [[447, "nilearn.regions.ReNA.get_params"]], "inverse_transform() (nilearn.regions.rena method)": [[447, "nilearn.regions.ReNA.inverse_transform"]], "set_inverse_transform_request() (nilearn.regions.rena method)": [[447, "nilearn.regions.ReNA.set_inverse_transform_request"]], "set_output() (nilearn.regions.rena method)": [[447, "nilearn.regions.ReNA.set_output"]], "set_params() (nilearn.regions.rena method)": [[447, "nilearn.regions.ReNA.set_params"]], "transform() (nilearn.regions.rena method)": [[447, "nilearn.regions.ReNA.transform"]], "regionextractor (class in nilearn.regions)": [[448, "nilearn.regions.RegionExtractor"]], "__init__() (nilearn.regions.regionextractor method)": [[448, "nilearn.regions.RegionExtractor.__init__"]], "fit() (nilearn.regions.regionextractor method)": [[448, "nilearn.regions.RegionExtractor.fit"]], "fit_transform() (nilearn.regions.regionextractor method)": [[448, "nilearn.regions.RegionExtractor.fit_transform"]], "generate_report() (nilearn.regions.regionextractor method)": [[448, "nilearn.regions.RegionExtractor.generate_report"]], "get_metadata_routing() (nilearn.regions.regionextractor method)": [[448, "nilearn.regions.RegionExtractor.get_metadata_routing"]], "get_params() (nilearn.regions.regionextractor method)": [[448, "nilearn.regions.RegionExtractor.get_params"]], "inverse_transform() (nilearn.regions.regionextractor method)": [[448, "nilearn.regions.RegionExtractor.inverse_transform"]], "set_fit_request() (nilearn.regions.regionextractor method)": [[448, "nilearn.regions.RegionExtractor.set_fit_request"]], "set_inverse_transform_request() (nilearn.regions.regionextractor method)": [[448, "nilearn.regions.RegionExtractor.set_inverse_transform_request"]], "set_output() (nilearn.regions.regionextractor method)": [[448, "nilearn.regions.RegionExtractor.set_output"]], "set_params() (nilearn.regions.regionextractor method)": [[448, "nilearn.regions.RegionExtractor.set_params"]], "set_transform_request() (nilearn.regions.regionextractor method)": [[448, "nilearn.regions.RegionExtractor.set_transform_request"]], "transform() (nilearn.regions.regionextractor method)": [[448, "nilearn.regions.RegionExtractor.transform"]], "transform_single_imgs() (nilearn.regions.regionextractor method)": [[448, "nilearn.regions.RegionExtractor.transform_single_imgs"]], "connected_label_regions() (in module nilearn.regions)": [[449, "nilearn.regions.connected_label_regions"]], "connected_regions() (in module nilearn.regions)": [[450, "nilearn.regions.connected_regions"]], "img_to_signals_labels() (in module nilearn.regions)": [[451, "nilearn.regions.img_to_signals_labels"]], "img_to_signals_maps() (in module nilearn.regions)": [[452, "nilearn.regions.img_to_signals_maps"]], "recursive_neighbor_agglomeration() (in module nilearn.regions)": [[453, "nilearn.regions.recursive_neighbor_agglomeration"]], "signals_to_img_labels() (in module nilearn.regions)": [[454, "nilearn.regions.signals_to_img_labels"]], "signals_to_img_maps() (in module nilearn.regions)": [[455, "nilearn.regions.signals_to_img_maps"]], "htmlreport (class in nilearn.reporting)": [[456, "nilearn.reporting.HTMLReport"]], "__init__() (nilearn.reporting.htmlreport method)": [[456, "nilearn.reporting.HTMLReport.__init__"]], "get_iframe() (nilearn.reporting.htmlreport method)": [[456, "nilearn.reporting.HTMLReport.get_iframe"]], "get_standalone() (nilearn.reporting.htmlreport method)": [[456, "nilearn.reporting.HTMLReport.get_standalone"]], "open_in_browser() (nilearn.reporting.htmlreport method)": [[456, "nilearn.reporting.HTMLReport.open_in_browser"]], "resize() (nilearn.reporting.htmlreport method)": [[456, "nilearn.reporting.HTMLReport.resize"]], "save_as_html() (nilearn.reporting.htmlreport method)": [[456, "nilearn.reporting.HTMLReport.save_as_html"]], "get_clusters_table() (in module nilearn.reporting)": [[457, "nilearn.reporting.get_clusters_table"]], "make_glm_report() (in module nilearn.reporting)": [[458, "nilearn.reporting.make_glm_report"]], "butterworth() (in module nilearn.signal)": [[459, "nilearn.signal.butterworth"]], "clean() (in module nilearn.signal)": [[460, "nilearn.signal.clean"]], "high_variance_confounds() (in module nilearn.signal)": [[461, "nilearn.signal.high_variance_confounds"]], "load_surf_data() (in module nilearn.surface)": [[462, "nilearn.surface.load_surf_data"]], "load_surf_mesh() (in module nilearn.surface)": [[463, "nilearn.surface.load_surf_mesh"]], "vol_to_surf() (in module nilearn.surface)": [[464, "nilearn.surface.vol_to_surf"]], "nilearn.glm": [[467, "module-nilearn.glm"]], "nilearn.glm.first_level": [[467, "module-nilearn.glm.first_level"]], "nilearn.glm.second_level": [[467, "module-nilearn.glm.second_level"]], "nilearn.image": [[468, "module-nilearn.image"]], "nilearn.interfaces": [[470, "module-nilearn.interfaces"]], "nilearn.interfaces.bids": [[470, "module-nilearn.interfaces.bids"]], "nilearn.interfaces.fmriprep": [[470, "module-nilearn.interfaces.fmriprep"]], "nilearn.interfaces.fsl": [[470, "module-nilearn.interfaces.fsl"]], "nilearn.maskers": [[471, "module-nilearn.maskers"]], "nilearn.masking": [[472, "module-nilearn.masking"]], "nilearn.mass_univariate": [[473, "module-nilearn.mass_univariate"]], "nilearn.plotting": [[474, "module-nilearn.plotting"]], "nilearn.plotting.displays": [[474, "module-nilearn.plotting.displays"]], "nilearn.regions": [[475, "module-nilearn.regions"]], "nilearn.reporting": [[476, "module-nilearn.reporting"]], "nilearn.signal": [[477, "module-nilearn.signal"]], "nilearn.surface": [[478, "module-nilearn.surface"]]}})